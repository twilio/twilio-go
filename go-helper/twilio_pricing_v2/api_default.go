/*
 * Twilio - Pricing
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}

/*
FetchVoiceCountry Method for FetchVoiceCountry
Fetch a specific Country.
 * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the origin-based voice pricing information to fetch.
@return PricingV2VoiceVoiceCountryInstance
*/
func (c *DefaultApiService) FetchVoiceCountry(isoCountry string) (*PricingV2VoiceVoiceCountryInstance, error) {
    path := "/v2/Voice/Countries/{IsoCountry}"
    path = strings.Replace(path, "{"+"IsoCountry"+"}", isoCountry, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PricingV2VoiceVoiceCountryInstance{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchVoiceNumberParams Optional parameters for the method 'FetchVoiceNumber'
type FetchVoiceNumberParams struct {
    OriginationNumber *string `json:"OriginationNumber,omitempty"`
}

/*
FetchVoiceNumber Method for FetchVoiceNumber
Fetch pricing information for a specific destination and, optionally, origination phone number.
 * @param destinationNumber The destination phone number, in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, for which to fetch the origin-based voice pricing information. E.164 format consists of a + followed by the country code and subscriber number.
 * @param optional nil or *FetchVoiceNumberOpts - Optional Parameters:
 * @param "OriginationNumber" (string) - The origination phone number, in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, for which to fetch the origin-based voice pricing information. E.164 format consists of a + followed by the country code and subscriber number.
@return PricingV2VoiceVoiceNumber
*/
func (c *DefaultApiService) FetchVoiceNumber(destinationNumber string, params *FetchVoiceNumberParams) (*PricingV2VoiceVoiceNumber, error) {
    path := "/v2/Voice/Numbers/{DestinationNumber}"
    path = strings.Replace(path, "{"+"DestinationNumber"+"}", destinationNumber, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.OriginationNumber != nil {
        data.Set("OriginationNumber", *params.OriginationNumber)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PricingV2VoiceVoiceNumber{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListVoiceCountryParams Optional parameters for the method 'ListVoiceCountry'
type ListVoiceCountryParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListVoiceCountry Method for ListVoiceCountry
 * @param optional nil or *ListVoiceCountryOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse200
*/
func (c *DefaultApiService) ListVoiceCountry(params *ListVoiceCountryParams) (*InlineResponse200, error) {
    path := "/v2/Voice/Countries"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse200{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
