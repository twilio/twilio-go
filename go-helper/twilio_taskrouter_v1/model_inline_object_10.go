/*
 * Twilio - Taskrouter
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// InlineObject10 struct for InlineObject10
type InlineObject10 struct {
	// Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
	Beep string `json:"Beep,omitempty"`
	// Whether to play a notification beep when the customer joins.
	BeepOnCustomerEntrance bool `json:"BeepOnCustomerEntrance,omitempty"`
	// Whether to accept a reservation when executing a Call instruction.
	CallAccept bool `json:"CallAccept,omitempty"`
	// The Caller ID of the outbound call when executing a Call instruction.
	CallFrom string `json:"CallFrom,omitempty"`
	// Whether to record both legs of a call when executing a Call instruction or which leg to record.
	CallRecord string `json:"CallRecord,omitempty"`
	// The URL to call  for the completed call event when executing a Call instruction.
	CallStatusCallbackUrl string `json:"CallStatusCallbackUrl,omitempty"`
	// Timeout for call when executing a Call instruction.
	CallTimeout int32 `json:"CallTimeout,omitempty"`
	// The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
	CallTo string `json:"CallTo,omitempty"`
	// TwiML URI executed on answering the worker's leg as a result of the Call instruction.
	CallUrl string `json:"CallUrl,omitempty"`
	// Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
	ConferenceRecord string `json:"ConferenceRecord,omitempty"`
	// The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
	ConferenceRecordingStatusCallback string `json:"ConferenceRecordingStatusCallback,omitempty"`
	// The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	ConferenceRecordingStatusCallbackMethod string `json:"ConferenceRecordingStatusCallbackMethod,omitempty"`
	// The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
	ConferenceStatusCallback string `json:"ConferenceStatusCallback,omitempty"`
	// The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
	ConferenceStatusCallbackEvent []string `json:"ConferenceStatusCallbackEvent,omitempty"`
	// The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	ConferenceStatusCallbackMethod string `json:"ConferenceStatusCallbackMethod,omitempty"`
	// How to trim the leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
	ConferenceTrim string `json:"ConferenceTrim,omitempty"`
	// The Caller ID of the call to the worker when executing a Dequeue instruction.
	DequeueFrom string `json:"DequeueFrom,omitempty"`
	// The SID of the Activity resource to start after executing a Dequeue instruction.
	DequeuePostWorkActivitySid string `json:"DequeuePostWorkActivitySid,omitempty"`
	// Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
	DequeueRecord string `json:"DequeueRecord,omitempty"`
	// The Call progress events sent via webhooks as a result of a Dequeue instruction.
	DequeueStatusCallbackEvent []string `json:"DequeueStatusCallbackEvent,omitempty"`
	// The Callback URL for completed call event when executing a Dequeue instruction.
	DequeueStatusCallbackUrl string `json:"DequeueStatusCallbackUrl,omitempty"`
	// Timeout for call when executing a Dequeue instruction.
	DequeueTimeout int32 `json:"DequeueTimeout,omitempty"`
	// The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
	DequeueTo string `json:"DequeueTo,omitempty"`
	// Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
	EarlyMedia bool `json:"EarlyMedia,omitempty"`
	// Whether to end the conference when the customer leaves.
	EndConferenceOnCustomerExit bool `json:"EndConferenceOnCustomerExit,omitempty"`
	// Whether to end the conference when the agent leaves.
	EndConferenceOnExit bool `json:"EndConferenceOnExit,omitempty"`
	// The Caller ID of the call to the worker when executing a Conference instruction.
	From string `json:"From,omitempty"`
	// The assignment instruction for reservation.
	Instruction string `json:"Instruction,omitempty"`
	// The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
	MaxParticipants int32 `json:"MaxParticipants,omitempty"`
	// Whether the agent is muted in the conference. The default is `false`.
	Muted bool `json:"Muted,omitempty"`
	// The new worker activity SID after executing a Conference instruction.
	PostWorkActivitySid string `json:"PostWorkActivitySid,omitempty"`
	// Whether to record the participant and their conferences, including the time between conferences. The default is `false`.
	Record bool `json:"Record,omitempty"`
	// The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
	RecordingChannels string `json:"RecordingChannels,omitempty"`
	// The URL that we should call using the `recording_status_callback_method` when the recording status changes.
	RecordingStatusCallback string `json:"RecordingStatusCallback,omitempty"`
	// The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	RecordingStatusCallbackMethod string `json:"RecordingStatusCallbackMethod,omitempty"`
	// Whether the reservation should be accepted when executing a Redirect instruction.
	RedirectAccept bool `json:"RedirectAccept,omitempty"`
	// The Call SID of the call parked in the queue when executing a Redirect instruction.
	RedirectCallSid string `json:"RedirectCallSid,omitempty"`
	// TwiML URI to redirect the call to when executing the Redirect instruction.
	RedirectUrl string `json:"RedirectUrl,omitempty"`
	// The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
	Region string `json:"Region,omitempty"`
	// The new status of the reservation. Can be: `pending`, `accepted`, `rejected`, or `timeout`.
	ReservationStatus string `json:"ReservationStatus,omitempty"`
	// The SIP password for authentication.
	SipAuthPassword string `json:"SipAuthPassword,omitempty"`
	// The SIP username used for authentication.
	SipAuthUsername string `json:"SipAuthUsername,omitempty"`
	// Whether to start the conference when the participant joins, if it has not already started. The default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
	StartConferenceOnEnter bool `json:"StartConferenceOnEnter,omitempty"`
	// The URL we should call using the `status_callback_method` to send status information to your application.
	StatusCallback string `json:"StatusCallback,omitempty"`
	// The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
	StatusCallbackEvent []string `json:"StatusCallbackEvent,omitempty"`
	// The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
	StatusCallbackMethod string `json:"StatusCallbackMethod,omitempty"`
	// The Supervisor SID/URI when executing the Supervise instruction.
	Supervisor string `json:"Supervisor,omitempty"`
	// The Supervisor mode when executing the Supervise instruction.
	SupervisorMode string `json:"SupervisorMode,omitempty"`
	// Timeout for call when executing a Conference instruction.
	Timeout int32 `json:"Timeout,omitempty"`
	// The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
	To string `json:"To,omitempty"`
	// The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
	WaitMethod string `json:"WaitMethod,omitempty"`
	// The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
	WaitUrl string `json:"WaitUrl,omitempty"`
	// The new worker activity SID if rejecting a reservation.
	WorkerActivitySid string `json:"WorkerActivitySid,omitempty"`
}
