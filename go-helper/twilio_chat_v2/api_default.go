/*
 * Twilio - Chat
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
    "reflect"
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateChannelParams Optional parameters for the method 'CreateChannel'
type CreateChannelParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    CreatedBy *string `json:"CreatedBy,omitempty"`
    DateCreated *time.Time `json:"DateCreated,omitempty"`
    DateUpdated *time.Time `json:"DateUpdated,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Type *string `json:"Type,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateChannel Method for CreateChannel
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Channel resource under.
 * @param optional nil or *CreateChannelOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "CreatedBy" (string) - The `identity` of the User that created the channel. Default is: `system`.
 * @param "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this should only be used in cases where a Channel is being recreated from a backup/separate source.
 * @param "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated. The default value is `null`. Note that this parameter should only be used in cases where a Channel is being recreated from a backup/separate source  and where a Message was previously updated.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "Type" (string) - The visibility of the channel. Can be: `public` or `private` and defaults to `public`.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the Channel resource's `sid` in the URL. This value must be 64 characters or less in length and be unique within the Service.
@return ChatV2ServiceChannel
*/
func (c *DefaultApiService) CreateChannel(serviceSid string, params *CreateChannelParams) (*ChatV2ServiceChannel, error) {
    path := "/v2/Services/{ServiceSid}/Channels"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.CreatedBy != nil {
        data.Set("CreatedBy", *params.CreatedBy)
    }
    if params != nil && params.DateCreated != nil {
        data.Set("DateCreated", string(*params.DateCreated))
    }
    if params != nil && params.DateUpdated != nil {
        data.Set("DateUpdated", string(*params.DateUpdated))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Type != nil {
        data.Set("Type", *params.Type)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateChannelWebhookParams Optional parameters for the method 'CreateChannelWebhook'
type CreateChannelWebhookParams struct {
    Configuration.Filters *[]string `json:"Configuration.Filters,omitempty"`
    Configuration.FlowSid *string `json:"Configuration.FlowSid,omitempty"`
    Configuration.Method *string `json:"Configuration.Method,omitempty"`
    Configuration.RetryCount *int32 `json:"Configuration.RetryCount,omitempty"`
    Configuration.Triggers *[]string `json:"Configuration.Triggers,omitempty"`
    Configuration.Url *string `json:"Configuration.Url,omitempty"`
    Type *string `json:"Type,omitempty"`
}

/*
CreateChannelWebhook Method for CreateChannelWebhook
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to create the Webhook resource under.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Channel Webhook resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *CreateChannelWebhookOpts - Optional Parameters:
 * @param "Configuration.Filters" ([]string) - The events that cause us to call the Channel Webhook. Used when `type` is `webhook`. This parameter takes only one event. To specify more than one event, repeat this parameter for each event. For the list of possible events, see [Webhook Event Triggers](https://www.twilio.com/docs/chat/webhook-events#webhook-event-trigger).
 * @param "Configuration.FlowSid" (string) - The SID of the Studio [Flow](https://www.twilio.com/docs/studio/rest-api/flow) to call when an event in `configuration.filters` occurs. Used only when `type` is `studio`.
 * @param "Configuration.Method" (string) - The HTTP method used to call `configuration.url`. Can be: `GET` or `POST` and the default is `POST`.
 * @param "Configuration.RetryCount" (int32) - The number of times to retry the webhook if the first attempt fails. Can be an integer between 0 and 3, inclusive, and the default is 0.
 * @param "Configuration.Triggers" ([]string) - A string that will cause us to call the webhook when it is present in a message body. This parameter takes only one trigger string. To specify more than one, repeat this parameter for each trigger string up to a total of 5 trigger strings. Used only when `type` = `trigger`.
 * @param "Configuration.Url" (string) - The URL of the webhook to call using the `configuration.method`.
 * @param "Type" (string) - The type of webhook. Can be: `webhook`, `studio`, or `trigger`.
@return ChatV2ServiceChannelChannelWebhook
*/
func (c *DefaultApiService) CreateChannelWebhook(serviceSid string, channelSid string, params *CreateChannelWebhookParams) (*ChatV2ServiceChannelChannelWebhook, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Configuration.Filters != nil {
        data.Set("Configuration.Filters", *params.Configuration.Filters)
    }
    if params != nil && params.Configuration.FlowSid != nil {
        data.Set("Configuration.FlowSid", *params.Configuration.FlowSid)
    }
    if params != nil && params.Configuration.Method != nil {
        data.Set("Configuration.Method", *params.Configuration.Method)
    }
    if params != nil && params.Configuration.RetryCount != nil {
        data.Set("Configuration.RetryCount", string(*params.Configuration.RetryCount))
    }
    if params != nil && params.Configuration.Triggers != nil {
        data.Set("Configuration.Triggers", *params.Configuration.Triggers)
    }
    if params != nil && params.Configuration.Url != nil {
        data.Set("Configuration.Url", *params.Configuration.Url)
    }
    if params != nil && params.Type != nil {
        data.Set("Type", *params.Type)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelChannelWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateCredentialParams Optional parameters for the method 'CreateCredential'
type CreateCredentialParams struct {
    ApiKey *string `json:"ApiKey,omitempty"`
    Certificate *string `json:"Certificate,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    PrivateKey *string `json:"PrivateKey,omitempty"`
    Sandbox *bool `json:"Sandbox,omitempty"`
    Secret *string `json:"Secret,omitempty"`
    Type *string `json:"Type,omitempty"`
}

/*
CreateCredential Method for CreateCredential
 * @param optional nil or *CreateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
 * @param "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A== -----END CERTIFICATE-----`
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE KEY-----`
 * @param "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
 * @param "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
 * @param "Type" (string) - The type of push-notification service the credential is for. Can be: `gcm`, `fcm`, or `apn`.
@return ChatV2Credential
*/
func (c *DefaultApiService) CreateCredential(params *CreateCredentialParams) (*ChatV2Credential, error) {
    path := "/v2/Credentials"

    data := url.Values{}
    headers := 0

    if params != nil && params.ApiKey != nil {
        data.Set("ApiKey", *params.ApiKey)
    }
    if params != nil && params.Certificate != nil {
        data.Set("Certificate", *params.Certificate)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.PrivateKey != nil {
        data.Set("PrivateKey", *params.PrivateKey)
    }
    if params != nil && params.Sandbox != nil {
        data.Set("Sandbox", string(*params.Sandbox))
    }
    if params != nil && params.Secret != nil {
        data.Set("Secret", *params.Secret)
    }
    if params != nil && params.Type != nil {
        data.Set("Type", *params.Type)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2Credential{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateInviteParams Optional parameters for the method 'CreateInvite'
type CreateInviteParams struct {
    Identity *string `json:"Identity,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateInvite Method for CreateInvite
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Invite resource under.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Invite resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *CreateInviteOpts - Optional Parameters:
 * @param "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/chat/rest/service-resource). See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more info.
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) assigned to the new member.
@return ChatV2ServiceChannelInvite
*/
func (c *DefaultApiService) CreateInvite(serviceSid string, channelSid string, params *CreateInviteParams) (*ChatV2ServiceChannelInvite, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelInvite{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateMemberParams Optional parameters for the method 'CreateMember'
type CreateMemberParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    DateCreated *time.Time `json:"DateCreated,omitempty"`
    DateUpdated *time.Time `json:"DateUpdated,omitempty"`
    Identity *string `json:"Identity,omitempty"`
    LastConsumedMessageIndex *int32 `json:"LastConsumedMessageIndex,omitempty"`
    LastConsumptionTimestamp *time.Time `json:"LastConsumptionTimestamp,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateMember Method for CreateMember
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Member resource under.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Member resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *CreateMemberOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this parameter should only be used when a Member is being recreated from a backup/separate source.
 * @param "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated. The default value is `null`. Note that this parameter should only be used when a Member is being recreated from a backup/separate source and where a Member was previously updated.
 * @param "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/chat/rest/service-resource). See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more info.
 * @param "LastConsumedMessageIndex" (*int32) - The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) in the [Channel](https://www.twilio.com/docs/chat/channels) that the Member has read. This parameter should only be used when recreating a Member from a backup/separate source.
 * @param "LastConsumptionTimestamp" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/rest/service-resource).
@return ChatV2ServiceChannelMember
*/
func (c *DefaultApiService) CreateMember(serviceSid string, channelSid string, params *CreateMemberParams) (*ChatV2ServiceChannelMember, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.DateCreated != nil {
        data.Set("DateCreated", string(*params.DateCreated))
    }
    if params != nil && params.DateUpdated != nil {
        data.Set("DateUpdated", string(*params.DateUpdated))
    }
    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }
    if params != nil && params.LastConsumedMessageIndex != nil {
        data.Set("LastConsumedMessageIndex", string(*params.LastConsumedMessageIndex))
    }
    if params != nil && params.LastConsumptionTimestamp != nil {
        data.Set("LastConsumptionTimestamp", string(*params.LastConsumptionTimestamp))
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelMember{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateMessageParams Optional parameters for the method 'CreateMessage'
type CreateMessageParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    Body *string `json:"Body,omitempty"`
    DateCreated *time.Time `json:"DateCreated,omitempty"`
    DateUpdated *time.Time `json:"DateUpdated,omitempty"`
    From *string `json:"From,omitempty"`
    LastUpdatedBy *string `json:"LastUpdatedBy,omitempty"`
    MediaSid *string `json:"MediaSid,omitempty"`
}

/*
CreateMessage Method for CreateMessage
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Message resource under.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Message resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *CreateMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "Body" (string) - The message to send to the channel. Can be an empty string or `null`, which sets the value as an empty string. You can send structured data in the body by serializing it as a string.
 * @param "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service. This parameter should only be used when a Chat's history is being recreated from a backup/separate source.
 * @param "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
 * @param "From" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the new message's author. The default value is `system`.
 * @param "LastUpdatedBy" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the User who last updated the Message, if applicable.
 * @param "MediaSid" (string) - The SID of the [Media](https://www.twilio.com/docs/chat/rest/media) to attach to the new Message.
@return ChatV2ServiceChannelMessage
*/
func (c *DefaultApiService) CreateMessage(serviceSid string, channelSid string, params *CreateMessageParams) (*ChatV2ServiceChannelMessage, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.Body != nil {
        data.Set("Body", *params.Body)
    }
    if params != nil && params.DateCreated != nil {
        data.Set("DateCreated", string(*params.DateCreated))
    }
    if params != nil && params.DateUpdated != nil {
        data.Set("DateUpdated", string(*params.DateUpdated))
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.LastUpdatedBy != nil {
        data.Set("LastUpdatedBy", *params.LastUpdatedBy)
    }
    if params != nil && params.MediaSid != nil {
        data.Set("MediaSid", *params.MediaSid)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelMessage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateRoleParams Optional parameters for the method 'CreateRole'
type CreateRoleParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Permission *[]string `json:"Permission,omitempty"`
    Type *string `json:"Type,omitempty"`
}

/*
CreateRole Method for CreateRole
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Role resource under.
 * @param optional nil or *CreateRoleOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "Permission" ([]string) - A permission that you grant to the new role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. The values for this parameter depend on the role's `type`.
 * @param "Type" (string) - The type of role. Can be: `channel` for [Channel](https://www.twilio.com/docs/chat/channels) roles or `deployment` for [Service](https://www.twilio.com/docs/chat/rest/service-resource) roles.
@return ChatV2ServiceRole
*/
func (c *DefaultApiService) CreateRole(serviceSid string, params *CreateRoleParams) (*ChatV2ServiceRole, error) {
    path := "/v2/Services/{ServiceSid}/Roles"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Permission != nil {
        data.Set("Permission", *params.Permission)
    }
    if params != nil && params.Type != nil {
        data.Set("Type", *params.Type)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceRole{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateService Method for CreateService
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource.
@return ChatV2Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*ChatV2Service, error) {
    path := "/v2/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateUserParams Optional parameters for the method 'CreateUser'
type CreateUserParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Identity *string `json:"Identity,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateUser Method for CreateUser
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the User resource under.
 * @param optional nil or *CreateUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. This value is often used for display purposes.
 * @param "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/chat/rest/service-resource). This value is often a username or email address. See the Identity documentation for more info.
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the new User.
@return ChatV2ServiceUser
*/
func (c *DefaultApiService) CreateUser(serviceSid string, params *CreateUserParams) (*ChatV2ServiceUser, error) {
    path := "/v2/Services/{ServiceSid}/Users"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceUser{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
DeleteBinding Method for DeleteBinding
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Binding resource from.
 * @param sid The SID of the Binding resource to delete.
*/
func (c *DefaultApiService) DeleteBinding(serviceSid string, sid string) (error) {
    path := "/v2/Services/{ServiceSid}/Bindings/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteChannelParams Optional parameters for the method 'DeleteChannel'
type DeleteChannelParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteChannel Method for DeleteChannel
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the resource from.
 * @param sid The SID of the Channel resource to delete.  This value can be either the `sid` or the `unique_name` of the Channel resource to delete.
 * @param optional nil or *DeleteChannelOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteChannel(serviceSid string, sid string, params *DeleteChannelParams) (error) {
    path := "/v2/Services/{ServiceSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteChannelWebhook Method for DeleteChannelWebhook
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to delete the Webhook resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Channel Webhook resource to delete.
*/
func (c *DefaultApiService) DeleteChannelWebhook(serviceSid string, channelSid string, sid string) (error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteCredential Method for DeleteCredential
 * @param sid The SID of the Credential resource to delete.
*/
func (c *DefaultApiService) DeleteCredential(sid string) (error) {
    path := "/v2/Credentials/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteInvite Method for DeleteInvite
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Invite resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Invite resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Invite resource to delete.
*/
func (c *DefaultApiService) DeleteInvite(serviceSid string, channelSid string, sid string) (error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteMemberParams Optional parameters for the method 'DeleteMember'
type DeleteMemberParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteMember Method for DeleteMember
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Member resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Member resource to delete. This value can be either the Member's `sid` or its `identity` value.
 * @param optional nil or *DeleteMemberOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteMember(serviceSid string, channelSid string, sid string, params *DeleteMemberParams) (error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteMessageParams Optional parameters for the method 'DeleteMessage'
type DeleteMessageParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteMessage Method for DeleteMessage
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Message resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Message resource to delete.
 * @param optional nil or *DeleteMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteMessage(serviceSid string, channelSid string, sid string, params *DeleteMessageParams) (error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteRole Method for DeleteRole
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Role resource from.
 * @param sid The SID of the Role resource to delete.
*/
func (c *DefaultApiService) DeleteRole(serviceSid string, sid string) (error) {
    path := "/v2/Services/{ServiceSid}/Roles/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteService Method for DeleteService
 * @param sid The SID of the Service resource to delete.
*/
func (c *DefaultApiService) DeleteService(sid string) (error) {
    path := "/v2/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteUser Method for DeleteUser
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the User resource from.
 * @param sid The SID of the User resource to delete. This value can be either the `sid` or the `identity` of the User resource to delete.
*/
func (c *DefaultApiService) DeleteUser(serviceSid string, sid string) (error) {
    path := "/v2/Services/{ServiceSid}/Users/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteUserBinding Method for DeleteUserBinding
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the User Binding resource from.
 * @param userSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) with the User Binding resources to delete.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
 * @param sid The SID of the User Binding resource to delete.
*/
func (c *DefaultApiService) DeleteUserBinding(serviceSid string, userSid string, sid string) (error) {
    path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteUserChannel Method for DeleteUserChannel
Removes User from selected Channel.
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param userSid The SID of the [User](https://www.twilio.com/docs/api/chat/rest/users) to read the User Channel resources from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource belongs to.
*/
func (c *DefaultApiService) DeleteUserChannel(serviceSid string, userSid string, channelSid string) (error) {
    path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchBinding Method for FetchBinding
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Binding resource from.
 * @param sid The SID of the Binding resource to fetch.
@return ChatV2ServiceBinding
*/
func (c *DefaultApiService) FetchBinding(serviceSid string, sid string) (*ChatV2ServiceBinding, error) {
    path := "/v2/Services/{ServiceSid}/Bindings/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceBinding{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchChannel Method for FetchChannel
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Channel resource from.
 * @param sid The SID of the Channel resource to fetch. This value can be either the `sid` or the `unique_name` of the Channel resource to fetch.
@return ChatV2ServiceChannel
*/
func (c *DefaultApiService) FetchChannel(serviceSid string, sid string) (*ChatV2ServiceChannel, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchChannelWebhook Method for FetchChannelWebhook
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to fetch the Webhook resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Channel Webhook resource to fetch.
@return ChatV2ServiceChannelChannelWebhook
*/
func (c *DefaultApiService) FetchChannelWebhook(serviceSid string, channelSid string, sid string) (*ChatV2ServiceChannelChannelWebhook, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelChannelWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchCredential Method for FetchCredential
 * @param sid The SID of the Credential resource to fetch.
@return ChatV2Credential
*/
func (c *DefaultApiService) FetchCredential(sid string) (*ChatV2Credential, error) {
    path := "/v2/Credentials/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2Credential{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchInvite Method for FetchInvite
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Invite resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Invite resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Invite resource to fetch.
@return ChatV2ServiceChannelInvite
*/
func (c *DefaultApiService) FetchInvite(serviceSid string, channelSid string, sid string) (*ChatV2ServiceChannelInvite, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelInvite{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchMember Method for FetchMember
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Member resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Member resource to fetch. This value can be either the Member's `sid` or its `identity` value.
@return ChatV2ServiceChannelMember
*/
func (c *DefaultApiService) FetchMember(serviceSid string, channelSid string, sid string) (*ChatV2ServiceChannelMember, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelMember{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchMessage Method for FetchMessage
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Message resource from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Message resource to fetch.
@return ChatV2ServiceChannelMessage
*/
func (c *DefaultApiService) FetchMessage(serviceSid string, channelSid string, sid string) (*ChatV2ServiceChannelMessage, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelMessage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchRole Method for FetchRole
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Role resource from.
 * @param sid The SID of the Role resource to fetch.
@return ChatV2ServiceRole
*/
func (c *DefaultApiService) FetchRole(serviceSid string, sid string) (*ChatV2ServiceRole, error) {
    path := "/v2/Services/{ServiceSid}/Roles/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceRole{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchService Method for FetchService
 * @param sid The SID of the Service resource to fetch.
@return ChatV2Service
*/
func (c *DefaultApiService) FetchService(sid string) (*ChatV2Service, error) {
    path := "/v2/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchUser Method for FetchUser
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the User resource from.
 * @param sid The SID of the User resource to fetch. This value can be either the `sid` or the `identity` of the User resource to fetch.
@return ChatV2ServiceUser
*/
func (c *DefaultApiService) FetchUser(serviceSid string, sid string) (*ChatV2ServiceUser, error) {
    path := "/v2/Services/{ServiceSid}/Users/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceUser{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchUserBinding Method for FetchUserBinding
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the User Binding resource from.
 * @param userSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) with the User Binding resource to fetch.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
 * @param sid The SID of the User Binding resource to fetch.
@return ChatV2ServiceUserUserBinding
*/
func (c *DefaultApiService) FetchUserBinding(serviceSid string, userSid string, sid string) (*ChatV2ServiceUserUserBinding, error) {
    path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceUserUserBinding{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchUserChannel Method for FetchUserChannel
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the User Channel resource from.
 * @param userSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) to fetch the User Channel resource from. This value can be either the `sid` or the `identity` of the User resource.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) that has the User Channel to fetch. This value can be either the `sid` or the `unique_name` of the Channel to fetch.
@return ChatV2ServiceUserUserChannel
*/
func (c *DefaultApiService) FetchUserChannel(serviceSid string, userSid string, channelSid string) (*ChatV2ServiceUserUserChannel, error) {
    path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceUserUserChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListBindingParams Optional parameters for the method 'ListBinding'
type ListBindingParams struct {
    BindingType *[]string `json:"BindingType,omitempty"`
    Identity *[]string `json:"Identity,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListBinding Method for ListBinding
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Binding resources from.
 * @param optional nil or *ListBindingOpts - Optional Parameters:
 * @param "BindingType" ([]string) - The push technology used by the Binding resources to read.  Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
 * @param "Identity" ([]string) - The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2002
*/
func (c *DefaultApiService) ListBinding(serviceSid string, params *ListBindingParams) (*InlineResponse2002, error) {
    path := "/v2/Services/{ServiceSid}/Bindings"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.BindingType != nil {
        data.Set("BindingType", string(*params.BindingType))
    }
    if params != nil && params.Identity != nil {
        data.Set("Identity", string(*params.Identity))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2002{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListChannelParams Optional parameters for the method 'ListChannel'
type ListChannelParams struct {
    Type *[]string `json:"Type,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListChannel Method for ListChannel
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Channel resources from.
 * @param optional nil or *ListChannelOpts - Optional Parameters:
 * @param "Type" ([]string) - The visibility of the Channels to read. Can be: `public` or `private` and defaults to `public`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2003
*/
func (c *DefaultApiService) ListChannel(serviceSid string, params *ListChannelParams) (*InlineResponse2003, error) {
    path := "/v2/Services/{ServiceSid}/Channels"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Type != nil {
        data.Set("Type", string(*params.Type))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2003{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListChannelWebhookParams Optional parameters for the method 'ListChannelWebhook'
type ListChannelWebhookParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListChannelWebhook Method for ListChannelWebhook
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to read the resources from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resources to read belong to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *ListChannelWebhookOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2007
*/
func (c *DefaultApiService) ListChannelWebhook(serviceSid string, channelSid string, params *ListChannelWebhookParams) (*InlineResponse2007, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2007{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListCredentialParams Optional parameters for the method 'ListCredential'
type ListCredentialParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListCredential Method for ListCredential
 * @param optional nil or *ListCredentialOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse200
*/
func (c *DefaultApiService) ListCredential(params *ListCredentialParams) (*InlineResponse200, error) {
    path := "/v2/Credentials"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse200{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListInviteParams Optional parameters for the method 'ListInvite'
type ListInviteParams struct {
    Identity *[]string `json:"Identity,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListInvite Method for ListInvite
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Invite resources from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Invite resources to read belong to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *ListInviteOpts - Optional Parameters:
 * @param "Identity" ([]string) - The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2004
*/
func (c *DefaultApiService) ListInvite(serviceSid string, channelSid string, params *ListInviteParams) (*InlineResponse2004, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
        data.Set("Identity", string(*params.Identity))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2004{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListMemberParams Optional parameters for the method 'ListMember'
type ListMemberParams struct {
    Identity *[]string `json:"Identity,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListMember Method for ListMember
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Member resources from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resources to read belong to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *ListMemberOpts - Optional Parameters:
 * @param "Identity" ([]string) - The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the Member resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2005
*/
func (c *DefaultApiService) ListMember(serviceSid string, channelSid string, params *ListMemberParams) (*InlineResponse2005, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
        data.Set("Identity", string(*params.Identity))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2005{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListMessageParams Optional parameters for the method 'ListMessage'
type ListMessageParams struct {
    Order *string `json:"Order,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListMessage Method for ListMessage
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Message resources from.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to read belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *ListMessageOpts - Optional Parameters:
 * @param "Order" (string) - The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending) with `asc` as the default.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2006
*/
func (c *DefaultApiService) ListMessage(serviceSid string, channelSid string, params *ListMessageParams) (*InlineResponse2006, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Order != nil {
        data.Set("Order", *params.Order)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2006{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListRoleParams Optional parameters for the method 'ListRole'
type ListRoleParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRole Method for ListRole
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Role resources from.
 * @param optional nil or *ListRoleOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2008
*/
func (c *DefaultApiService) ListRole(serviceSid string, params *ListRoleParams) (*InlineResponse2008, error) {
    path := "/v2/Services/{ServiceSid}/Roles"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2008{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2001
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*InlineResponse2001, error) {
    path := "/v2/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2001{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListUserParams Optional parameters for the method 'ListUser'
type ListUserParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUser Method for ListUser
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the User resources from.
 * @param optional nil or *ListUserOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2009
*/
func (c *DefaultApiService) ListUser(serviceSid string, params *ListUserParams) (*InlineResponse2009, error) {
    path := "/v2/Services/{ServiceSid}/Users"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2009{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListUserBindingParams Optional parameters for the method 'ListUserBinding'
type ListUserBindingParams struct {
    BindingType *[]string `json:"BindingType,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUserBinding Method for ListUserBinding
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the User Binding resources from.
 * @param userSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) with the User Binding resources to read.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
 * @param optional nil or *ListUserBindingOpts - Optional Parameters:
 * @param "BindingType" ([]string) - The push technology used by the User Binding resources to read. Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse20010
*/
func (c *DefaultApiService) ListUserBinding(serviceSid string, userSid string, params *ListUserBindingParams) (*InlineResponse20010, error) {
    path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.BindingType != nil {
        data.Set("BindingType", string(*params.BindingType))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse20010{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListUserChannelParams Optional parameters for the method 'ListUserChannel'
type ListUserChannelParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUserChannel Method for ListUserChannel
List all Channels for a given User.
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the User Channel resources from.
 * @param userSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) to read the User Channel resources from. This value can be either the `sid` or the `identity` of the User resource.
 * @param optional nil or *ListUserChannelOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse20011
*/
func (c *DefaultApiService) ListUserChannel(serviceSid string, userSid string, params *ListUserChannelParams) (*InlineResponse20011, error) {
    path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse20011{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateChannelParams Optional parameters for the method 'UpdateChannel'
type UpdateChannelParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    CreatedBy *string `json:"CreatedBy,omitempty"`
    DateCreated *time.Time `json:"DateCreated,omitempty"`
    DateUpdated *time.Time `json:"DateUpdated,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateChannel Method for UpdateChannel
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Channel resource in.
 * @param sid The SID of the Channel resource to update. This value can be either the `sid` or the `unique_name` of the Channel resource to update.
 * @param optional nil or *UpdateChannelOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "CreatedBy" (string) - The `identity` of the User that created the channel. Default is: `system`.
 * @param "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this should only be used in cases where a Channel is being recreated from a backup/separate source.
 * @param "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 256 characters long.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL. This value must be 256 characters or less in length and unique within the Service.
@return ChatV2ServiceChannel
*/
func (c *DefaultApiService) UpdateChannel(serviceSid string, sid string, params *UpdateChannelParams) (*ChatV2ServiceChannel, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.CreatedBy != nil {
        data.Set("CreatedBy", *params.CreatedBy)
    }
    if params != nil && params.DateCreated != nil {
        data.Set("DateCreated", string(*params.DateCreated))
    }
    if params != nil && params.DateUpdated != nil {
        data.Set("DateUpdated", string(*params.DateUpdated))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateChannelWebhookParams Optional parameters for the method 'UpdateChannelWebhook'
type UpdateChannelWebhookParams struct {
    Configuration.Filters *[]string `json:"Configuration.Filters,omitempty"`
    Configuration.FlowSid *string `json:"Configuration.FlowSid,omitempty"`
    Configuration.Method *string `json:"Configuration.Method,omitempty"`
    Configuration.RetryCount *int32 `json:"Configuration.RetryCount,omitempty"`
    Configuration.Triggers *[]string `json:"Configuration.Triggers,omitempty"`
    Configuration.Url *string `json:"Configuration.Url,omitempty"`
}

/*
UpdateChannelWebhook Method for UpdateChannelWebhook
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel that has the Webhook resource to update.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resource to update belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Channel Webhook resource to update.
 * @param optional nil or *UpdateChannelWebhookOpts - Optional Parameters:
 * @param "Configuration.Filters" ([]string) - The events that cause us to call the Channel Webhook. Used when `type` is `webhook`. This parameter takes only one event. To specify more than one event, repeat this parameter for each event. For the list of possible events, see [Webhook Event Triggers](https://www.twilio.com/docs/chat/webhook-events#webhook-event-trigger).
 * @param "Configuration.FlowSid" (string) - The SID of the Studio [Flow](https://www.twilio.com/docs/studio/rest-api/flow) to call when an event in `configuration.filters` occurs. Used only when `type` = `studio`.
 * @param "Configuration.Method" (string) - The HTTP method used to call `configuration.url`. Can be: `GET` or `POST` and the default is `POST`.
 * @param "Configuration.RetryCount" (int32) - The number of times to retry the webhook if the first attempt fails. Can be an integer between 0 and 3, inclusive, and the default is 0.
 * @param "Configuration.Triggers" ([]string) - A string that will cause us to call the webhook when it is present in a message body. This parameter takes only one trigger string. To specify more than one, repeat this parameter for each trigger string up to a total of 5 trigger strings. Used only when `type` = `trigger`.
 * @param "Configuration.Url" (string) - The URL of the webhook to call using the `configuration.method`.
@return ChatV2ServiceChannelChannelWebhook
*/
func (c *DefaultApiService) UpdateChannelWebhook(serviceSid string, channelSid string, sid string, params *UpdateChannelWebhookParams) (*ChatV2ServiceChannelChannelWebhook, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Configuration.Filters != nil {
        data.Set("Configuration.Filters", *params.Configuration.Filters)
    }
    if params != nil && params.Configuration.FlowSid != nil {
        data.Set("Configuration.FlowSid", *params.Configuration.FlowSid)
    }
    if params != nil && params.Configuration.Method != nil {
        data.Set("Configuration.Method", *params.Configuration.Method)
    }
    if params != nil && params.Configuration.RetryCount != nil {
        data.Set("Configuration.RetryCount", string(*params.Configuration.RetryCount))
    }
    if params != nil && params.Configuration.Triggers != nil {
        data.Set("Configuration.Triggers", *params.Configuration.Triggers)
    }
    if params != nil && params.Configuration.Url != nil {
        data.Set("Configuration.Url", *params.Configuration.Url)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelChannelWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateCredentialParams Optional parameters for the method 'UpdateCredential'
type UpdateCredentialParams struct {
    ApiKey *string `json:"ApiKey,omitempty"`
    Certificate *string `json:"Certificate,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    PrivateKey *string `json:"PrivateKey,omitempty"`
    Sandbox *bool `json:"Sandbox,omitempty"`
    Secret *string `json:"Secret,omitempty"`
}

/*
UpdateCredential Method for UpdateCredential
 * @param sid The SID of the Credential resource to update.
 * @param optional nil or *UpdateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
 * @param "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A== -----END CERTIFICATE-----`
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
 * @param "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE KEY-----`
 * @param "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
 * @param "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
@return ChatV2Credential
*/
func (c *DefaultApiService) UpdateCredential(sid string, params *UpdateCredentialParams) (*ChatV2Credential, error) {
    path := "/v2/Credentials/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ApiKey != nil {
        data.Set("ApiKey", *params.ApiKey)
    }
    if params != nil && params.Certificate != nil {
        data.Set("Certificate", *params.Certificate)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.PrivateKey != nil {
        data.Set("PrivateKey", *params.PrivateKey)
    }
    if params != nil && params.Sandbox != nil {
        data.Set("Sandbox", string(*params.Sandbox))
    }
    if params != nil && params.Secret != nil {
        data.Set("Secret", *params.Secret)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2Credential{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateMemberParams Optional parameters for the method 'UpdateMember'
type UpdateMemberParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    DateCreated *time.Time `json:"DateCreated,omitempty"`
    DateUpdated *time.Time `json:"DateUpdated,omitempty"`
    LastConsumedMessageIndex *int32 `json:"LastConsumedMessageIndex,omitempty"`
    LastConsumptionTimestamp *time.Time `json:"LastConsumptionTimestamp,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateMember Method for UpdateMember
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Member resource in.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to update belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Member resource to update. This value can be either the Member's `sid` or its `identity` value.
 * @param optional nil or *UpdateMemberOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this parameter should only be used when a Member is being recreated from a backup/separate source.
 * @param "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
 * @param "LastConsumedMessageIndex" (*int32) - The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) that the Member has read within the [Channel](https://www.twilio.com/docs/chat/channels).
 * @param "LastConsumptionTimestamp" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/rest/service-resource).
@return ChatV2ServiceChannelMember
*/
func (c *DefaultApiService) UpdateMember(serviceSid string, channelSid string, sid string, params *UpdateMemberParams) (*ChatV2ServiceChannelMember, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.DateCreated != nil {
        data.Set("DateCreated", string(*params.DateCreated))
    }
    if params != nil && params.DateUpdated != nil {
        data.Set("DateUpdated", string(*params.DateUpdated))
    }
    if params != nil && params.LastConsumedMessageIndex != nil {
        data.Set("LastConsumedMessageIndex", string(*params.LastConsumedMessageIndex))
    }
    if params != nil && params.LastConsumptionTimestamp != nil {
        data.Set("LastConsumptionTimestamp", string(*params.LastConsumptionTimestamp))
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelMember{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateMessageParams Optional parameters for the method 'UpdateMessage'
type UpdateMessageParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    Body *string `json:"Body,omitempty"`
    DateCreated *time.Time `json:"DateCreated,omitempty"`
    DateUpdated *time.Time `json:"DateUpdated,omitempty"`
    From *string `json:"From,omitempty"`
    LastUpdatedBy *string `json:"LastUpdatedBy,omitempty"`
}

/*
UpdateMessage Method for UpdateMessage
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Message resource in.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to update belongs to. This value can be the Channel resource's `sid` or `unique_name`.
 * @param sid The SID of the Message resource to update.
 * @param optional nil or *UpdateMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "Body" (string) - The message to send to the channel. Can be an empty string or `null`, which sets the value as an empty string. You can send structured data in the body by serializing it as a string.
 * @param "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service. This parameter should only be used when a Chat's history is being recreated from a backup/separate source.
 * @param "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
 * @param "From" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the message's author.
 * @param "LastUpdatedBy" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the User who last updated the Message, if applicable.
@return ChatV2ServiceChannelMessage
*/
func (c *DefaultApiService) UpdateMessage(serviceSid string, channelSid string, sid string, params *UpdateMessageParams) (*ChatV2ServiceChannelMessage, error) {
    path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.Body != nil {
        data.Set("Body", *params.Body)
    }
    if params != nil && params.DateCreated != nil {
        data.Set("DateCreated", string(*params.DateCreated))
    }
    if params != nil && params.DateUpdated != nil {
        data.Set("DateUpdated", string(*params.DateUpdated))
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.LastUpdatedBy != nil {
        data.Set("LastUpdatedBy", *params.LastUpdatedBy)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceChannelMessage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateRoleParams Optional parameters for the method 'UpdateRole'
type UpdateRoleParams struct {
    Permission *[]string `json:"Permission,omitempty"`
}

/*
UpdateRole Method for UpdateRole
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Role resource in.
 * @param sid The SID of the Role resource to update.
 * @param optional nil or *UpdateRoleOpts - Optional Parameters:
 * @param "Permission" ([]string) - A permission that you grant to the role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. Note that the update action replaces all previously assigned permissions with those defined in the update action. To remove a permission, do not include it in the subsequent update action. The values for this parameter depend on the role's `type`.
@return ChatV2ServiceRole
*/
func (c *DefaultApiService) UpdateRole(serviceSid string, sid string, params *UpdateRoleParams) (*ChatV2ServiceRole, error) {
    path := "/v2/Services/{ServiceSid}/Roles/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Permission != nil {
        data.Set("Permission", *params.Permission)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceRole{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
    ConsumptionReportInterval *int32 `json:"ConsumptionReportInterval,omitempty"`
    DefaultChannelCreatorRoleSid *string `json:"DefaultChannelCreatorRoleSid,omitempty"`
    DefaultChannelRoleSid *string `json:"DefaultChannelRoleSid,omitempty"`
    DefaultServiceRoleSid *string `json:"DefaultServiceRoleSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Limits.ChannelMembers *int32 `json:"Limits.ChannelMembers,omitempty"`
    Limits.UserChannels *int32 `json:"Limits.UserChannels,omitempty"`
    Media.CompatibilityMessage *string `json:"Media.CompatibilityMessage,omitempty"`
    Notifications.AddedToChannel.Enabled *bool `json:"Notifications.AddedToChannel.Enabled,omitempty"`
    Notifications.AddedToChannel.Sound *string `json:"Notifications.AddedToChannel.Sound,omitempty"`
    Notifications.AddedToChannel.Template *string `json:"Notifications.AddedToChannel.Template,omitempty"`
    Notifications.InvitedToChannel.Enabled *bool `json:"Notifications.InvitedToChannel.Enabled,omitempty"`
    Notifications.InvitedToChannel.Sound *string `json:"Notifications.InvitedToChannel.Sound,omitempty"`
    Notifications.InvitedToChannel.Template *string `json:"Notifications.InvitedToChannel.Template,omitempty"`
    Notifications.LogEnabled *bool `json:"Notifications.LogEnabled,omitempty"`
    Notifications.NewMessage.BadgeCountEnabled *bool `json:"Notifications.NewMessage.BadgeCountEnabled,omitempty"`
    Notifications.NewMessage.Enabled *bool `json:"Notifications.NewMessage.Enabled,omitempty"`
    Notifications.NewMessage.Sound *string `json:"Notifications.NewMessage.Sound,omitempty"`
    Notifications.NewMessage.Template *string `json:"Notifications.NewMessage.Template,omitempty"`
    Notifications.RemovedFromChannel.Enabled *bool `json:"Notifications.RemovedFromChannel.Enabled,omitempty"`
    Notifications.RemovedFromChannel.Sound *string `json:"Notifications.RemovedFromChannel.Sound,omitempty"`
    Notifications.RemovedFromChannel.Template *string `json:"Notifications.RemovedFromChannel.Template,omitempty"`
    PostWebhookRetryCount *int32 `json:"PostWebhookRetryCount,omitempty"`
    PostWebhookUrl *string `json:"PostWebhookUrl,omitempty"`
    PreWebhookRetryCount *int32 `json:"PreWebhookRetryCount,omitempty"`
    PreWebhookUrl *string `json:"PreWebhookUrl,omitempty"`
    ReachabilityEnabled *bool `json:"ReachabilityEnabled,omitempty"`
    ReadStatusEnabled *bool `json:"ReadStatusEnabled,omitempty"`
    TypingIndicatorTimeout *int32 `json:"TypingIndicatorTimeout,omitempty"`
    WebhookFilters *[]string `json:"WebhookFilters,omitempty"`
    WebhookMethod *string `json:"WebhookMethod,omitempty"`
}

/*
UpdateService Method for UpdateService
 * @param sid The SID of the Service resource to update.
 * @param optional nil or *UpdateServiceOpts - Optional Parameters:
 * @param "ConsumptionReportInterval" (int32) - DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
 * @param "DefaultChannelCreatorRoleSid" (string) - The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
 * @param "DefaultChannelRoleSid" (string) - The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
 * @param "DefaultServiceRoleSid" (string) - The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource.
 * @param "Limits.ChannelMembers" (int32) - The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
 * @param "Limits.UserChannels" (int32) - The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
 * @param "Media.CompatibilityMessage" (string) - The message to send when a media message has no text. Can be used as placeholder message.
 * @param "Notifications.AddedToChannel.Enabled" (bool) - Whether to send a notification when a member is added to a channel. The default is `false`.
 * @param "Notifications.AddedToChannel.Sound" (string) - The name of the sound to play when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
 * @param "Notifications.AddedToChannel.Template" (string) - The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
 * @param "Notifications.InvitedToChannel.Enabled" (bool) - Whether to send a notification when a user is invited to a channel. The default is `false`.
 * @param "Notifications.InvitedToChannel.Sound" (string) - The name of the sound to play when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
 * @param "Notifications.InvitedToChannel.Template" (string) - The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
 * @param "Notifications.LogEnabled" (bool) - Whether to log notifications. The default is `false`.
 * @param "Notifications.NewMessage.BadgeCountEnabled" (bool) - Whether the new message badge is enabled. The default is `false`.
 * @param "Notifications.NewMessage.Enabled" (bool) - Whether to send a notification when a new message is added to a channel. The default is `false`.
 * @param "Notifications.NewMessage.Sound" (string) - The name of the sound to play when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
 * @param "Notifications.NewMessage.Template" (string) - The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
 * @param "Notifications.RemovedFromChannel.Enabled" (bool) - Whether to send a notification to a user when they are removed from a channel. The default is `false`.
 * @param "Notifications.RemovedFromChannel.Sound" (string) - The name of the sound to play to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
 * @param "Notifications.RemovedFromChannel.Template" (string) - The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
 * @param "PostWebhookRetryCount" (int32) - The number of times to retry a call to the `post_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won't be retried.
 * @param "PostWebhookUrl" (string) - The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @param "PreWebhookRetryCount" (int32) - The number of times to retry a call to the `pre_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won't be retried.
 * @param "PreWebhookUrl" (string) - The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @param "ReachabilityEnabled" (bool) - Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
 * @param "ReadStatusEnabled" (bool) - Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
 * @param "TypingIndicatorTimeout" (int32) - How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
 * @param "WebhookFilters" ([]string) - The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @param "WebhookMethod" (string) - The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
@return ChatV2Service
*/
func (c *DefaultApiService) UpdateService(sid string, params *UpdateServiceParams) (*ChatV2Service, error) {
    path := "/v2/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ConsumptionReportInterval != nil {
        data.Set("ConsumptionReportInterval", string(*params.ConsumptionReportInterval))
    }
    if params != nil && params.DefaultChannelCreatorRoleSid != nil {
        data.Set("DefaultChannelCreatorRoleSid", *params.DefaultChannelCreatorRoleSid)
    }
    if params != nil && params.DefaultChannelRoleSid != nil {
        data.Set("DefaultChannelRoleSid", *params.DefaultChannelRoleSid)
    }
    if params != nil && params.DefaultServiceRoleSid != nil {
        data.Set("DefaultServiceRoleSid", *params.DefaultServiceRoleSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Limits.ChannelMembers != nil {
        data.Set("Limits.ChannelMembers", string(*params.Limits.ChannelMembers))
    }
    if params != nil && params.Limits.UserChannels != nil {
        data.Set("Limits.UserChannels", string(*params.Limits.UserChannels))
    }
    if params != nil && params.Media.CompatibilityMessage != nil {
        data.Set("Media.CompatibilityMessage", *params.Media.CompatibilityMessage)
    }
    if params != nil && params.Notifications.AddedToChannel.Enabled != nil {
        data.Set("Notifications.AddedToChannel.Enabled", string(*params.Notifications.AddedToChannel.Enabled))
    }
    if params != nil && params.Notifications.AddedToChannel.Sound != nil {
        data.Set("Notifications.AddedToChannel.Sound", *params.Notifications.AddedToChannel.Sound)
    }
    if params != nil && params.Notifications.AddedToChannel.Template != nil {
        data.Set("Notifications.AddedToChannel.Template", *params.Notifications.AddedToChannel.Template)
    }
    if params != nil && params.Notifications.InvitedToChannel.Enabled != nil {
        data.Set("Notifications.InvitedToChannel.Enabled", string(*params.Notifications.InvitedToChannel.Enabled))
    }
    if params != nil && params.Notifications.InvitedToChannel.Sound != nil {
        data.Set("Notifications.InvitedToChannel.Sound", *params.Notifications.InvitedToChannel.Sound)
    }
    if params != nil && params.Notifications.InvitedToChannel.Template != nil {
        data.Set("Notifications.InvitedToChannel.Template", *params.Notifications.InvitedToChannel.Template)
    }
    if params != nil && params.Notifications.LogEnabled != nil {
        data.Set("Notifications.LogEnabled", string(*params.Notifications.LogEnabled))
    }
    if params != nil && params.Notifications.NewMessage.BadgeCountEnabled != nil {
        data.Set("Notifications.NewMessage.BadgeCountEnabled", string(*params.Notifications.NewMessage.BadgeCountEnabled))
    }
    if params != nil && params.Notifications.NewMessage.Enabled != nil {
        data.Set("Notifications.NewMessage.Enabled", string(*params.Notifications.NewMessage.Enabled))
    }
    if params != nil && params.Notifications.NewMessage.Sound != nil {
        data.Set("Notifications.NewMessage.Sound", *params.Notifications.NewMessage.Sound)
    }
    if params != nil && params.Notifications.NewMessage.Template != nil {
        data.Set("Notifications.NewMessage.Template", *params.Notifications.NewMessage.Template)
    }
    if params != nil && params.Notifications.RemovedFromChannel.Enabled != nil {
        data.Set("Notifications.RemovedFromChannel.Enabled", string(*params.Notifications.RemovedFromChannel.Enabled))
    }
    if params != nil && params.Notifications.RemovedFromChannel.Sound != nil {
        data.Set("Notifications.RemovedFromChannel.Sound", *params.Notifications.RemovedFromChannel.Sound)
    }
    if params != nil && params.Notifications.RemovedFromChannel.Template != nil {
        data.Set("Notifications.RemovedFromChannel.Template", *params.Notifications.RemovedFromChannel.Template)
    }
    if params != nil && params.PostWebhookRetryCount != nil {
        data.Set("PostWebhookRetryCount", string(*params.PostWebhookRetryCount))
    }
    if params != nil && params.PostWebhookUrl != nil {
        data.Set("PostWebhookUrl", *params.PostWebhookUrl)
    }
    if params != nil && params.PreWebhookRetryCount != nil {
        data.Set("PreWebhookRetryCount", string(*params.PreWebhookRetryCount))
    }
    if params != nil && params.PreWebhookUrl != nil {
        data.Set("PreWebhookUrl", *params.PreWebhookUrl)
    }
    if params != nil && params.ReachabilityEnabled != nil {
        data.Set("ReachabilityEnabled", string(*params.ReachabilityEnabled))
    }
    if params != nil && params.ReadStatusEnabled != nil {
        data.Set("ReadStatusEnabled", string(*params.ReadStatusEnabled))
    }
    if params != nil && params.TypingIndicatorTimeout != nil {
        data.Set("TypingIndicatorTimeout", string(*params.TypingIndicatorTimeout))
    }
    if params != nil && params.WebhookFilters != nil {
        data.Set("WebhookFilters", *params.WebhookFilters)
    }
    if params != nil && params.WebhookMethod != nil {
        data.Set("WebhookMethod", *params.WebhookMethod)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateUserParams Optional parameters for the method 'UpdateUser'
type UpdateUserParams struct {
    X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateUser Method for UpdateUser
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the User resource in.
 * @param sid The SID of the User resource to update. This value can be either the `sid` or the `identity` of the User resource to update.
 * @param optional nil or *UpdateUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is often used for display purposes.
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the User.
@return ChatV2ServiceUser
*/
func (c *DefaultApiService) UpdateUser(serviceSid string, sid string, params *UpdateUserParams) (*ChatV2ServiceUser, error) {
    path := "/v2/Services/{ServiceSid}/Users/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }

    if params != nil && params.X-Twilio-Webhook-Enabled != nil {
        headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceUser{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateUserChannelParams Optional parameters for the method 'UpdateUserChannel'
type UpdateUserChannelParams struct {
    LastConsumedMessageIndex *int32 `json:"LastConsumedMessageIndex,omitempty"`
    LastConsumptionTimestamp *time.Time `json:"LastConsumptionTimestamp,omitempty"`
    NotificationLevel *string `json:"NotificationLevel,omitempty"`
}

/*
UpdateUserChannel Method for UpdateUserChannel
 * @param serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the User Channel resource in.
 * @param userSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) to update the User Channel resource from. This value can be either the `sid` or the `identity` of the User resource.
 * @param channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) with the User Channel resource to update. This value can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *UpdateUserChannelOpts - Optional Parameters:
 * @param "LastConsumedMessageIndex" (*int32) - The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) in the [Channel](https://www.twilio.com/docs/chat/channels) that the Member has read.
 * @param "LastConsumptionTimestamp" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
 * @param "NotificationLevel" (string) - The push notification level to assign to the User Channel. Can be: `default` or `muted`.
@return ChatV2ServiceUserUserChannel
*/
func (c *DefaultApiService) UpdateUserChannel(serviceSid string, userSid string, channelSid string, params *UpdateUserChannelParams) (*ChatV2ServiceUserUserChannel, error) {
    path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.LastConsumedMessageIndex != nil {
        data.Set("LastConsumedMessageIndex", string(*params.LastConsumedMessageIndex))
    }
    if params != nil && params.LastConsumptionTimestamp != nil {
        data.Set("LastConsumptionTimestamp", string(*params.LastConsumptionTimestamp))
    }
    if params != nil && params.NotificationLevel != nil {
        data.Set("NotificationLevel", *params.NotificationLevel)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ChatV2ServiceUserUserChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
