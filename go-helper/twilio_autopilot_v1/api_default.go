/*
 * Twilio - Autopilot
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateAssistantParams Optional parameters for the method 'CreateAssistant'
type CreateAssistantParams struct {
    CallbackEvents *string `json:"CallbackEvents,omitempty"`
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    Defaults *map[string]interface{} `json:"Defaults,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    LogQueries *bool `json:"LogQueries,omitempty"`
    StyleSheet *map[string]interface{} `json:"StyleSheet,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateAssistant Method for CreateAssistant
 * @param optional nil or *CreateAssistantOpts - Optional Parameters:
 * @param "CallbackEvents" (string) - Reserved.
 * @param "CallbackUrl" (string) - Reserved.
 * @param "Defaults" (map[string]interface{}) - A JSON object that defines the Assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios, including initiation actions and fallback tasks.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It is not unique and can be up to 255 characters long.
 * @param "LogQueries" (bool) - Whether queries should be logged and kept after training. Can be: `true` or `false` and defaults to `true`. If `true`, queries are stored for 30 days, and then deleted. If `false`, no queries are stored.
 * @param "StyleSheet" (map[string]interface{}) - The JSON string that defines the Assistant's [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the `sid` in the URL path to address the resource. The first 64 characters must be unique.
@return AutopilotV1Assistant
*/
func (c *DefaultApiService) CreateAssistant(params *CreateAssistantParams) (*AutopilotV1Assistant, error) {
    path := "/v1/Assistants"

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackEvents != nil {
        data.Set("CallbackEvents", *params.CallbackEvents)
    }
    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.Defaults != nil {
        v, err := json.Marshal(params.Defaults)

        if err != nil {
            return nil, err
        }

        data.Set("Defaults", string(v))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.LogQueries != nil {
        data.Set("LogQueries", string(*params.LogQueries))
    }
    if params != nil && params.StyleSheet != nil {
        v, err := json.Marshal(params.StyleSheet)

        if err != nil {
            return nil, err
        }

        data.Set("StyleSheet", string(v))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1Assistant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFieldParams Optional parameters for the method 'CreateField'
type CreateFieldParams struct {
    FieldType *string `json:"FieldType,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateField Method for CreateField
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the new resource.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the new Field resource.
 * @param optional nil or *CreateFieldOpts - Optional Parameters:
 * @param "FieldType" (string) - The Field Type of the new field. Can be: a [Built-in Field Type](https://www.twilio.com/docs/autopilot/built-in-field-types), the `unique_name`, or the `sid` of a custom Field Type.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the new resource. This value must be a unique string of no more than 64 characters. It can be used as an alternative to the `sid` in the URL path to address the resource.
@return AutopilotV1AssistantTaskField
*/
func (c *DefaultApiService) CreateField(assistantSid string, taskSid string, params *CreateFieldParams) (*AutopilotV1AssistantTaskField, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FieldType != nil {
        data.Set("FieldType", *params.FieldType)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskField{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFieldTypeParams Optional parameters for the method 'CreateFieldType'
type CreateFieldTypeParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateFieldType Method for CreateFieldType
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource.
 * @param optional nil or *CreateFieldTypeOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It is not unique and can be up to 255 characters long.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the `sid` in the URL path to address the resource. The first 64 characters must be unique.
@return AutopilotV1AssistantFieldType
*/
func (c *DefaultApiService) CreateFieldType(assistantSid string, params *CreateFieldTypeParams) (*AutopilotV1AssistantFieldType, error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantFieldType{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFieldValueParams Optional parameters for the method 'CreateFieldValue'
type CreateFieldValueParams struct {
    Language *string `json:"Language,omitempty"`
    SynonymOf *string `json:"SynonymOf,omitempty"`
    Value *string `json:"Value,omitempty"`
}

/*
CreateFieldValue Method for CreateFieldValue
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the FieldType associated with the new resource.
 * @param fieldTypeSid The SID of the Field Type associated with the Field Value.
 * @param optional nil or *CreateFieldValueOpts - Optional Parameters:
 * @param "Language" (string) - The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) tag that specifies the language of the value. Currently supported tags: `en-US`
 * @param "SynonymOf" (string) - The string value that indicates which word the field value is a synonym of.
 * @param "Value" (string) - The Field Value data.
@return AutopilotV1AssistantFieldTypeFieldValue
*/
func (c *DefaultApiService) CreateFieldValue(assistantSid string, fieldTypeSid string, params *CreateFieldValueParams) (*AutopilotV1AssistantFieldTypeFieldValue, error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.SynonymOf != nil {
        data.Set("SynonymOf", *params.SynonymOf)
    }
    if params != nil && params.Value != nil {
        data.Set("Value", *params.Value)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantFieldTypeFieldValue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateModelBuildParams Optional parameters for the method 'CreateModelBuild'
type CreateModelBuildParams struct {
    StatusCallback *string `json:"StatusCallback,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateModelBuild Method for CreateModelBuild
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource.
 * @param optional nil or *CreateModelBuildOpts - Optional Parameters:
 * @param "StatusCallback" (string) - The URL we should call using a POST method to send status information to your application.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the new resource. This value must be a unique string of no more than 64 characters. It can be used as an alternative to the `sid` in the URL path to address the resource.
@return AutopilotV1AssistantModelBuild
*/
func (c *DefaultApiService) CreateModelBuild(assistantSid string, params *CreateModelBuildParams) (*AutopilotV1AssistantModelBuild, error) {
    path := "/v1/Assistants/{AssistantSid}/ModelBuilds"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.StatusCallback != nil {
        data.Set("StatusCallback", *params.StatusCallback)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantModelBuild{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateQueryParams Optional parameters for the method 'CreateQuery'
type CreateQueryParams struct {
    Language *string `json:"Language,omitempty"`
    ModelBuild *string `json:"ModelBuild,omitempty"`
    Query *string `json:"Query,omitempty"`
    Tasks *string `json:"Tasks,omitempty"`
}

/*
CreateQuery Method for CreateQuery
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource.
 * @param optional nil or *CreateQueryOpts - Optional Parameters:
 * @param "Language" (string) - The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new query. For example: `en-US`.
 * @param "ModelBuild" (string) - The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried.
 * @param "Query" (string) - The end-user's natural language input. It can be up to 2048 characters long.
 * @param "Tasks" (string) - The list of tasks to limit the new query to. Tasks are expressed as a comma-separated list of task `unique_name` values. For example, `task-unique_name-1, task-unique_name-2`. Listing specific tasks is useful to constrain the paths that a user can take.
@return AutopilotV1AssistantQuery
*/
func (c *DefaultApiService) CreateQuery(assistantSid string, params *CreateQueryParams) (*AutopilotV1AssistantQuery, error) {
    path := "/v1/Assistants/{AssistantSid}/Queries"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.ModelBuild != nil {
        data.Set("ModelBuild", *params.ModelBuild)
    }
    if params != nil && params.Query != nil {
        data.Set("Query", *params.Query)
    }
    if params != nil && params.Tasks != nil {
        data.Set("Tasks", *params.Tasks)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantQuery{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSampleParams Optional parameters for the method 'CreateSample'
type CreateSampleParams struct {
    Language *string `json:"Language,omitempty"`
    SourceChannel *string `json:"SourceChannel,omitempty"`
    TaggedText *string `json:"TaggedText,omitempty"`
}

/*
CreateSample Method for CreateSample
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the new resource.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to create.
 * @param optional nil or *CreateSampleOpts - Optional Parameters:
 * @param "Language" (string) - The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new sample. For example: `en-US`.
 * @param "SourceChannel" (string) - The communication channel from which the new sample was captured. Can be: `voice`, `sms`, `chat`, `alexa`, `google-assistant`, `slack`, or null if not included.
 * @param "TaggedText" (string) - The text example of how end users might express the task. The sample can contain [Field tag blocks](https://www.twilio.com/docs/autopilot/api/task-sample#field-tagging).
@return AutopilotV1AssistantTaskSample
*/
func (c *DefaultApiService) CreateSample(assistantSid string, taskSid string, params *CreateSampleParams) (*AutopilotV1AssistantTaskSample, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.SourceChannel != nil {
        data.Set("SourceChannel", *params.SourceChannel)
    }
    if params != nil && params.TaggedText != nil {
        data.Set("TaggedText", *params.TaggedText)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskSample{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateTaskParams Optional parameters for the method 'CreateTask'
type CreateTaskParams struct {
    Actions *map[string]interface{} `json:"Actions,omitempty"`
    ActionsUrl *string `json:"ActionsUrl,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateTask Method for CreateTask
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource.
 * @param optional nil or *CreateTaskOpts - Optional Parameters:
 * @param "Actions" (map[string]interface{}) - The JSON string that specifies the [actions](https://www.twilio.com/docs/autopilot/actions) that instruct the Assistant on how to perform the task. It is optional and not unique.
 * @param "ActionsUrl" (string) - The URL from which the Assistant can fetch actions.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It is not unique and can be up to 255 characters long.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the `sid` in the URL path to address the resource. This value must be unique and 64 characters or less in length.
@return AutopilotV1AssistantTask
*/
func (c *DefaultApiService) CreateTask(assistantSid string, params *CreateTaskParams) (*AutopilotV1AssistantTask, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Actions != nil {
        v, err := json.Marshal(params.Actions)

        if err != nil {
            return nil, err
        }

        data.Set("Actions", string(v))
    }
    if params != nil && params.ActionsUrl != nil {
        data.Set("ActionsUrl", *params.ActionsUrl)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateWebhookParams Optional parameters for the method 'CreateWebhook'
type CreateWebhookParams struct {
    Events *string `json:"Events,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    WebhookMethod *string `json:"WebhookMethod,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
CreateWebhook Method for CreateWebhook
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource.
 * @param optional nil or *CreateWebhookOpts - Optional Parameters:
 * @param "Events" (string) - The list of space-separated events that this Webhook will subscribe to.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the `sid` in the URL path to address the resource. This value must be unique and 64 characters or less in length.
 * @param "WebhookMethod" (string) - The method to be used when calling the webhook's URL.
 * @param "WebhookUrl" (string) - The URL associated with this Webhook.
@return AutopilotV1AssistantWebhook
*/
func (c *DefaultApiService) CreateWebhook(assistantSid string, params *CreateWebhookParams) (*AutopilotV1AssistantWebhook, error) {
    path := "/v1/Assistants/{AssistantSid}/Webhooks"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Events != nil {
        data.Set("Events", *params.Events)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.WebhookMethod != nil {
        data.Set("WebhookMethod", *params.WebhookMethod)
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
DeleteAssistant Method for DeleteAssistant
 * @param sid The Twilio-provided string that uniquely identifies the Assistant resource to delete.
*/
func (c *DefaultApiService) DeleteAssistant(sid string) (error) {
    path := "/v1/Assistants/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteField Method for DeleteField
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to delete.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the Field resource to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Field resource to delete.
*/
func (c *DefaultApiService) DeleteField(assistantSid string, taskSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteFieldType Method for DeleteFieldType
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete.
 * @param sid The Twilio-provided string that uniquely identifies the FieldType resource to delete.
*/
func (c *DefaultApiService) DeleteFieldType(assistantSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteFieldValue Method for DeleteFieldValue
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the FieldType associated with the resources to delete.
 * @param fieldTypeSid The SID of the Field Type associated with the Field Value to delete.
 * @param sid The Twilio-provided string that uniquely identifies the FieldValue resource to delete.
*/
func (c *DefaultApiService) DeleteFieldValue(assistantSid string, fieldTypeSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteModelBuild Method for DeleteModelBuild
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete.
 * @param sid The Twilio-provided string that uniquely identifies the ModelBuild resource to delete.
*/
func (c *DefaultApiService) DeleteModelBuild(assistantSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteQuery Method for DeleteQuery
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Query resource to delete.
*/
func (c *DefaultApiService) DeleteQuery(assistantSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/Queries/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSample Method for DeleteSample
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to delete.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Sample resource to delete.
*/
func (c *DefaultApiService) DeleteSample(assistantSid string, taskSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteTask Method for DeleteTask
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Task resource to delete.
*/
func (c *DefaultApiService) DeleteTask(assistantSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteWebhook Method for DeleteWebhook
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete.
*/
func (c *DefaultApiService) DeleteWebhook(assistantSid string, sid string) (error) {
    path := "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchAssistant Method for FetchAssistant
 * @param sid The Twilio-provided string that uniquely identifies the Assistant resource to fetch.
@return AutopilotV1Assistant
*/
func (c *DefaultApiService) FetchAssistant(sid string) (*AutopilotV1Assistant, error) {
    path := "/v1/Assistants/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1Assistant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDefaults Method for FetchDefaults
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
@return AutopilotV1AssistantDefaults
*/
func (c *DefaultApiService) FetchDefaults(assistantSid string) (*AutopilotV1AssistantDefaults, error) {
    path := "/v1/Assistants/{AssistantSid}/Defaults"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantDefaults{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDialogue Method for FetchDialogue
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Dialogue resource to fetch.
@return AutopilotV1AssistantDialogue
*/
func (c *DefaultApiService) FetchDialogue(assistantSid string, sid string) (*AutopilotV1AssistantDialogue, error) {
    path := "/v1/Assistants/{AssistantSid}/Dialogues/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantDialogue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchField Method for FetchField
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource to fetch.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the Field resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Field resource to fetch.
@return AutopilotV1AssistantTaskField
*/
func (c *DefaultApiService) FetchField(assistantSid string, taskSid string, sid string) (*AutopilotV1AssistantTaskField, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskField{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchFieldType Method for FetchFieldType
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the FieldType resource to fetch.
@return AutopilotV1AssistantFieldType
*/
func (c *DefaultApiService) FetchFieldType(assistantSid string, sid string) (*AutopilotV1AssistantFieldType, error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantFieldType{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchFieldValue Method for FetchFieldValue
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the FieldType associated with the resource to fetch.
 * @param fieldTypeSid The SID of the Field Type associated with the Field Value to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the FieldValue resource to fetch.
@return AutopilotV1AssistantFieldTypeFieldValue
*/
func (c *DefaultApiService) FetchFieldValue(assistantSid string, fieldTypeSid string, sid string) (*AutopilotV1AssistantFieldTypeFieldValue, error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantFieldTypeFieldValue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchModelBuild Method for FetchModelBuild
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the ModelBuild resource to fetch.
@return AutopilotV1AssistantModelBuild
*/
func (c *DefaultApiService) FetchModelBuild(assistantSid string, sid string) (*AutopilotV1AssistantModelBuild, error) {
    path := "/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantModelBuild{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchQuery Method for FetchQuery
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Query resource to fetch.
@return AutopilotV1AssistantQuery
*/
func (c *DefaultApiService) FetchQuery(assistantSid string, sid string) (*AutopilotV1AssistantQuery, error) {
    path := "/v1/Assistants/{AssistantSid}/Queries/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantQuery{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSample Method for FetchSample
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource to fetch.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to create.
 * @param sid The Twilio-provided string that uniquely identifies the Sample resource to fetch.
@return AutopilotV1AssistantTaskSample
*/
func (c *DefaultApiService) FetchSample(assistantSid string, taskSid string, sid string) (*AutopilotV1AssistantTaskSample, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskSample{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchStyleSheet Method for FetchStyleSheet
Returns Style sheet JSON object for the Assistant
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
@return AutopilotV1AssistantStyleSheet
*/
func (c *DefaultApiService) FetchStyleSheet(assistantSid string) (*AutopilotV1AssistantStyleSheet, error) {
    path := "/v1/Assistants/{AssistantSid}/StyleSheet"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantStyleSheet{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTask Method for FetchTask
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Task resource to fetch.
@return AutopilotV1AssistantTask
*/
func (c *DefaultApiService) FetchTask(assistantSid string, sid string) (*AutopilotV1AssistantTask, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTaskActions Method for FetchTaskActions
Returns JSON actions for the Task.
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task for which the task actions to fetch were defined.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) for which the task actions to fetch were defined.
@return AutopilotV1AssistantTaskTaskActions
*/
func (c *DefaultApiService) FetchTaskActions(assistantSid string, taskSid string) (*AutopilotV1AssistantTaskTaskActions, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskTaskActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTaskStatistics Method for FetchTaskStatistics
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) that is associated with the resource to fetch.
@return AutopilotV1AssistantTaskTaskStatistics
*/
func (c *DefaultApiService) FetchTaskStatistics(assistantSid string, taskSid string) (*AutopilotV1AssistantTaskTaskStatistics, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Statistics"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskTaskStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchWebhook Method for FetchWebhook
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch.
@return AutopilotV1AssistantWebhook
*/
func (c *DefaultApiService) FetchWebhook(assistantSid string, sid string) (*AutopilotV1AssistantWebhook, error) {
    path := "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListAssistantParams Optional parameters for the method 'ListAssistant'
type ListAssistantParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListAssistant Method for ListAssistant
 * @param optional nil or *ListAssistantOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse200
*/
func (c *DefaultApiService) ListAssistant(params *ListAssistantParams) (*InlineResponse200, error) {
    path := "/v1/Assistants"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse200{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFieldParams Optional parameters for the method 'ListField'
type ListFieldParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListField Method for ListField
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to read.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the Field resources to read.
 * @param optional nil or *ListFieldOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2006
*/
func (c *DefaultApiService) ListField(assistantSid string, taskSid string, params *ListFieldParams) (*InlineResponse2006, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2006{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFieldTypeParams Optional parameters for the method 'ListFieldType'
type ListFieldTypeParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFieldType Method for ListFieldType
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read.
 * @param optional nil or *ListFieldTypeOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2001
*/
func (c *DefaultApiService) ListFieldType(assistantSid string, params *ListFieldTypeParams) (*InlineResponse2001, error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2001{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFieldValueParams Optional parameters for the method 'ListFieldValue'
type ListFieldValueParams struct {
    Language *string `json:"Language,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFieldValue Method for ListFieldValue
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the FieldType associated with the resources to read.
 * @param fieldTypeSid The SID of the Field Type associated with the Field Value to read.
 * @param optional nil or *ListFieldValueOpts - Optional Parameters:
 * @param "Language" (string) - The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) tag that specifies the language of the value. Currently supported tags: `en-US`
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2002
*/
func (c *DefaultApiService) ListFieldValue(assistantSid string, fieldTypeSid string, params *ListFieldValueParams) (*InlineResponse2002, error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2002{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListModelBuildParams Optional parameters for the method 'ListModelBuild'
type ListModelBuildParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListModelBuild Method for ListModelBuild
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read.
 * @param optional nil or *ListModelBuildOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2003
*/
func (c *DefaultApiService) ListModelBuild(assistantSid string, params *ListModelBuildParams) (*InlineResponse2003, error) {
    path := "/v1/Assistants/{AssistantSid}/ModelBuilds"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2003{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListQueryParams Optional parameters for the method 'ListQuery'
type ListQueryParams struct {
    Language *string `json:"Language,omitempty"`
    ModelBuild *string `json:"ModelBuild,omitempty"`
    Status *string `json:"Status,omitempty"`
    DialogueSid *string `json:"DialogueSid,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListQuery Method for ListQuery
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read.
 * @param optional nil or *ListQueryOpts - Optional Parameters:
 * @param "Language" (string) - The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query resources to read. For example: `en-US`.
 * @param "ModelBuild" (string) - The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried.
 * @param "Status" (string) - The status of the resources to read. Can be: `pending-review`, `reviewed`, or `discarded`
 * @param "DialogueSid" (string) - The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue).
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2004
*/
func (c *DefaultApiService) ListQuery(assistantSid string, params *ListQueryParams) (*InlineResponse2004, error) {
    path := "/v1/Assistants/{AssistantSid}/Queries"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.ModelBuild != nil {
        data.Set("ModelBuild", *params.ModelBuild)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.DialogueSid != nil {
        data.Set("DialogueSid", *params.DialogueSid)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2004{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSampleParams Optional parameters for the method 'ListSample'
type ListSampleParams struct {
    Language *string `json:"Language,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSample Method for ListSample
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to read.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resources to read.
 * @param optional nil or *ListSampleOpts - Optional Parameters:
 * @param "Language" (string) - The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the sample. For example: `en-US`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2007
*/
func (c *DefaultApiService) ListSample(assistantSid string, taskSid string, params *ListSampleParams) (*InlineResponse2007, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2007{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListTaskParams Optional parameters for the method 'ListTask'
type ListTaskParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListTask Method for ListTask
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read.
 * @param optional nil or *ListTaskOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2005
*/
func (c *DefaultApiService) ListTask(assistantSid string, params *ListTaskParams) (*InlineResponse2005, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2005{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListWebhookParams Optional parameters for the method 'ListWebhook'
type ListWebhookParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListWebhook Method for ListWebhook
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read.
 * @param optional nil or *ListWebhookOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2008
*/
func (c *DefaultApiService) ListWebhook(assistantSid string, params *ListWebhookParams) (*InlineResponse2008, error) {
    path := "/v1/Assistants/{AssistantSid}/Webhooks"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2008{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateAssistantParams Optional parameters for the method 'UpdateAssistant'
type UpdateAssistantParams struct {
    CallbackEvents *string `json:"CallbackEvents,omitempty"`
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    Defaults *map[string]interface{} `json:"Defaults,omitempty"`
    DevelopmentStage *string `json:"DevelopmentStage,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    LogQueries *bool `json:"LogQueries,omitempty"`
    StyleSheet *map[string]interface{} `json:"StyleSheet,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateAssistant Method for UpdateAssistant
 * @param sid The Twilio-provided string that uniquely identifies the Assistant resource to update.
 * @param optional nil or *UpdateAssistantOpts - Optional Parameters:
 * @param "CallbackEvents" (string) - Reserved.
 * @param "CallbackUrl" (string) - Reserved.
 * @param "Defaults" (map[string]interface{}) - A JSON object that defines the Assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios, including initiation actions and fallback tasks.
 * @param "DevelopmentStage" (string) - A string describing the state of the assistant.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "LogQueries" (bool) - Whether queries should be logged and kept after training. Can be: `true` or `false` and defaults to `true`. If `true`, queries are stored for 30 days, and then deleted. If `false`, no queries are stored.
 * @param "StyleSheet" (map[string]interface{}) - The JSON string that defines the Assistant's [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used as an alternative to the `sid` in the URL path to address the resource. The first 64 characters must be unique.
@return AutopilotV1Assistant
*/
func (c *DefaultApiService) UpdateAssistant(sid string, params *UpdateAssistantParams) (*AutopilotV1Assistant, error) {
    path := "/v1/Assistants/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackEvents != nil {
        data.Set("CallbackEvents", *params.CallbackEvents)
    }
    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.Defaults != nil {
        v, err := json.Marshal(params.Defaults)

        if err != nil {
            return nil, err
        }

        data.Set("Defaults", string(v))
    }
    if params != nil && params.DevelopmentStage != nil {
        data.Set("DevelopmentStage", *params.DevelopmentStage)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.LogQueries != nil {
        data.Set("LogQueries", string(*params.LogQueries))
    }
    if params != nil && params.StyleSheet != nil {
        v, err := json.Marshal(params.StyleSheet)

        if err != nil {
            return nil, err
        }

        data.Set("StyleSheet", string(v))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1Assistant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDefaultsParams Optional parameters for the method 'UpdateDefaults'
type UpdateDefaultsParams struct {
    Defaults *map[string]interface{} `json:"Defaults,omitempty"`
}

/*
UpdateDefaults Method for UpdateDefaults
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
 * @param optional nil or *UpdateDefaultsOpts - Optional Parameters:
 * @param "Defaults" (map[string]interface{}) - A JSON string that describes the default task links for the `assistant_initiation`, `collect`, and `fallback` situations.
@return AutopilotV1AssistantDefaults
*/
func (c *DefaultApiService) UpdateDefaults(assistantSid string, params *UpdateDefaultsParams) (*AutopilotV1AssistantDefaults, error) {
    path := "/v1/Assistants/{AssistantSid}/Defaults"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Defaults != nil {
        v, err := json.Marshal(params.Defaults)

        if err != nil {
            return nil, err
        }

        data.Set("Defaults", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantDefaults{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateFieldTypeParams Optional parameters for the method 'UpdateFieldType'
type UpdateFieldTypeParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateFieldType Method for UpdateFieldType
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the to update.
 * @param sid The Twilio-provided string that uniquely identifies the FieldType resource to update.
 * @param optional nil or *UpdateFieldTypeOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used as an alternative to the `sid` in the URL path to address the resource. The first 64 characters must be unique.
@return AutopilotV1AssistantFieldType
*/
func (c *DefaultApiService) UpdateFieldType(assistantSid string, sid string, params *UpdateFieldTypeParams) (*AutopilotV1AssistantFieldType, error) {
    path := "/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantFieldType{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateModelBuildParams Optional parameters for the method 'UpdateModelBuild'
type UpdateModelBuildParams struct {
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateModelBuild Method for UpdateModelBuild
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the ModelBuild resource to update.
 * @param optional nil or *UpdateModelBuildOpts - Optional Parameters:
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be a unique string of no more than 64 characters. It can be used as an alternative to the `sid` in the URL path to address the resource.
@return AutopilotV1AssistantModelBuild
*/
func (c *DefaultApiService) UpdateModelBuild(assistantSid string, sid string, params *UpdateModelBuildParams) (*AutopilotV1AssistantModelBuild, error) {
    path := "/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantModelBuild{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateQueryParams Optional parameters for the method 'UpdateQuery'
type UpdateQueryParams struct {
    SampleSid *string `json:"SampleSid,omitempty"`
    Status *string `json:"Status,omitempty"`
}

/*
UpdateQuery Method for UpdateQuery
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the Query resource to update.
 * @param optional nil or *UpdateQueryOpts - Optional Parameters:
 * @param "SampleSid" (string) - The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query.
 * @param "Status" (string) - The new status of the resource. Can be: `pending-review`, `reviewed`, or `discarded`
@return AutopilotV1AssistantQuery
*/
func (c *DefaultApiService) UpdateQuery(assistantSid string, sid string, params *UpdateQueryParams) (*AutopilotV1AssistantQuery, error) {
    path := "/v1/Assistants/{AssistantSid}/Queries/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.SampleSid != nil {
        data.Set("SampleSid", *params.SampleSid)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantQuery{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateRestoreAssistantParams Optional parameters for the method 'UpdateRestoreAssistant'
type UpdateRestoreAssistantParams struct {
    Assistant *string `json:"Assistant,omitempty"`
}

/*
UpdateRestoreAssistant Method for UpdateRestoreAssistant
 * @param optional nil or *UpdateRestoreAssistantOpts - Optional Parameters:
 * @param "Assistant" (string) - The Twilio-provided string that uniquely identifies the Assistant resource to restore.
@return AutopilotV1RestoreAssistant
*/
func (c *DefaultApiService) UpdateRestoreAssistant(params *UpdateRestoreAssistantParams) (*AutopilotV1RestoreAssistant, error) {
    path := "/v1/Assistants/Restore"

    data := url.Values{}
    headers := 0

    if params != nil && params.Assistant != nil {
        data.Set("Assistant", *params.Assistant)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1RestoreAssistant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSampleParams Optional parameters for the method 'UpdateSample'
type UpdateSampleParams struct {
    Language *string `json:"Language,omitempty"`
    SourceChannel *string `json:"SourceChannel,omitempty"`
    TaggedText *string `json:"TaggedText,omitempty"`
}

/*
UpdateSample Method for UpdateSample
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource to update.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the Sample resource to update.
 * @param optional nil or *UpdateSampleOpts - Optional Parameters:
 * @param "Language" (string) - The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the sample. For example: `en-US`.
 * @param "SourceChannel" (string) - The communication channel from which the sample was captured. Can be: `voice`, `sms`, `chat`, `alexa`, `google-assistant`, `slack`, or null if not included.
 * @param "TaggedText" (string) - The text example of how end users might express the task. The sample can contain [Field tag blocks](https://www.twilio.com/docs/autopilot/api/task-sample#field-tagging).
@return AutopilotV1AssistantTaskSample
*/
func (c *DefaultApiService) UpdateSample(assistantSid string, taskSid string, sid string, params *UpdateSampleParams) (*AutopilotV1AssistantTaskSample, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.SourceChannel != nil {
        data.Set("SourceChannel", *params.SourceChannel)
    }
    if params != nil && params.TaggedText != nil {
        data.Set("TaggedText", *params.TaggedText)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskSample{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateStyleSheetParams Optional parameters for the method 'UpdateStyleSheet'
type UpdateStyleSheetParams struct {
    StyleSheet *map[string]interface{} `json:"StyleSheet,omitempty"`
}

/*
UpdateStyleSheet Method for UpdateStyleSheet
Updates the style sheet for an Assistant identified by &#x60;assistant_sid&#x60;.
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
 * @param optional nil or *UpdateStyleSheetOpts - Optional Parameters:
 * @param "StyleSheet" (map[string]interface{}) - The JSON string that describes the style sheet object.
@return AutopilotV1AssistantStyleSheet
*/
func (c *DefaultApiService) UpdateStyleSheet(assistantSid string, params *UpdateStyleSheetParams) (*AutopilotV1AssistantStyleSheet, error) {
    path := "/v1/Assistants/{AssistantSid}/StyleSheet"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.StyleSheet != nil {
        v, err := json.Marshal(params.StyleSheet)

        if err != nil {
            return nil, err
        }

        data.Set("StyleSheet", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantStyleSheet{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskParams Optional parameters for the method 'UpdateTask'
type UpdateTaskParams struct {
    Actions *map[string]interface{} `json:"Actions,omitempty"`
    ActionsUrl *string `json:"ActionsUrl,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateTask Method for UpdateTask
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the Task resource to update.
 * @param optional nil or *UpdateTaskOpts - Optional Parameters:
 * @param "Actions" (map[string]interface{}) - The JSON string that specifies the [actions](https://www.twilio.com/docs/autopilot/actions) that instruct the Assistant on how to perform the task.
 * @param "ActionsUrl" (string) - The URL from which the Assistant can fetch actions.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be 64 characters or less in length and be unique. It can be used as an alternative to the `sid` in the URL path to address the resource.
@return AutopilotV1AssistantTask
*/
func (c *DefaultApiService) UpdateTask(assistantSid string, sid string, params *UpdateTaskParams) (*AutopilotV1AssistantTask, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Actions != nil {
        v, err := json.Marshal(params.Actions)

        if err != nil {
            return nil, err
        }

        data.Set("Actions", string(v))
    }
    if params != nil && params.ActionsUrl != nil {
        data.Set("ActionsUrl", *params.ActionsUrl)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskActionsParams Optional parameters for the method 'UpdateTaskActions'
type UpdateTaskActionsParams struct {
    Actions *map[string]interface{} `json:"Actions,omitempty"`
}

/*
UpdateTaskActions Method for UpdateTaskActions
Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task for which the task actions to update were defined.
 * @param taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) for which the task actions to update were defined.
 * @param optional nil or *UpdateTaskActionsOpts - Optional Parameters:
 * @param "Actions" (map[string]interface{}) - The JSON string that specifies the [actions](https://www.twilio.com/docs/autopilot/actions) that instruct the Assistant on how to perform the task.
@return AutopilotV1AssistantTaskTaskActions
*/
func (c *DefaultApiService) UpdateTaskActions(assistantSid string, taskSid string, params *UpdateTaskActionsParams) (*AutopilotV1AssistantTaskTaskActions, error) {
    path := "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Actions != nil {
        v, err := json.Marshal(params.Actions)

        if err != nil {
            return nil, err
        }

        data.Set("Actions", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantTaskTaskActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateWebhookParams Optional parameters for the method 'UpdateWebhook'
type UpdateWebhookParams struct {
    Events *string `json:"Events,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    WebhookMethod *string `json:"WebhookMethod,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
UpdateWebhook Method for UpdateWebhook
 * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update.
 * @param optional nil or *UpdateWebhookOpts - Optional Parameters:
 * @param "Events" (string) - The list of space-separated events that this Webhook will subscribe to.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the `sid` in the URL path to address the resource. This value must be unique and 64 characters or less in length.
 * @param "WebhookMethod" (string) - The method to be used when calling the webhook's URL.
 * @param "WebhookUrl" (string) - The URL associated with this Webhook.
@return AutopilotV1AssistantWebhook
*/
func (c *DefaultApiService) UpdateWebhook(assistantSid string, sid string, params *UpdateWebhookParams) (*AutopilotV1AssistantWebhook, error) {
    path := "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Events != nil {
        data.Set("Events", *params.Events)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.WebhookMethod != nil {
        data.Set("WebhookMethod", *params.WebhookMethod)
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &AutopilotV1AssistantWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
