/*
 * Twilio - Ip_messaging
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
    "reflect"
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateChannelParams Optional parameters for the method 'CreateChannel'
type CreateChannelParams struct {
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Type *string `json:"Type,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateChannel Method for CreateChannel
 * @param serviceSid
 * @param optional nil or *CreateChannelOpts - Optional Parameters:
 * @param "Attributes" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "Type" (string) - 
 * @param "UniqueName" (string) - 
@return IpMessagingV1ServiceChannel
*/
func (c *DefaultApiService) CreateChannel(serviceSid string, params *CreateChannelParams) (*IpMessagingV1ServiceChannel, error) {
    path := "/v1/Services/{ServiceSid}/Channels"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Type != nil {
        data.Set("Type", *params.Type)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateCredentialParams Optional parameters for the method 'CreateCredential'
type CreateCredentialParams struct {
    ApiKey *string `json:"ApiKey,omitempty"`
    Certificate *string `json:"Certificate,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    PrivateKey *string `json:"PrivateKey,omitempty"`
    Sandbox *bool `json:"Sandbox,omitempty"`
    Secret *string `json:"Secret,omitempty"`
    Type *string `json:"Type,omitempty"`
}

/*
CreateCredential Method for CreateCredential
 * @param optional nil or *CreateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - 
 * @param "Certificate" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "PrivateKey" (string) - 
 * @param "Sandbox" (bool) - 
 * @param "Secret" (string) - 
 * @param "Type" (string) - 
@return IpMessagingV1Credential
*/
func (c *DefaultApiService) CreateCredential(params *CreateCredentialParams) (*IpMessagingV1Credential, error) {
    path := "/v1/Credentials"

    data := url.Values{}
    headers := 0

    if params != nil && params.ApiKey != nil {
        data.Set("ApiKey", *params.ApiKey)
    }
    if params != nil && params.Certificate != nil {
        data.Set("Certificate", *params.Certificate)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.PrivateKey != nil {
        data.Set("PrivateKey", *params.PrivateKey)
    }
    if params != nil && params.Sandbox != nil {
        data.Set("Sandbox", string(*params.Sandbox))
    }
    if params != nil && params.Secret != nil {
        data.Set("Secret", *params.Secret)
    }
    if params != nil && params.Type != nil {
        data.Set("Type", *params.Type)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1Credential{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateInviteParams Optional parameters for the method 'CreateInvite'
type CreateInviteParams struct {
    Identity *string `json:"Identity,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateInvite Method for CreateInvite
 * @param serviceSid
 * @param channelSid
 * @param optional nil or *CreateInviteOpts - Optional Parameters:
 * @param "Identity" (string) - 
 * @param "RoleSid" (string) - 
@return IpMessagingV1ServiceChannelInvite
*/
func (c *DefaultApiService) CreateInvite(serviceSid string, channelSid string, params *CreateInviteParams) (*IpMessagingV1ServiceChannelInvite, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelInvite{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateMemberParams Optional parameters for the method 'CreateMember'
type CreateMemberParams struct {
    Identity *string `json:"Identity,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateMember Method for CreateMember
 * @param serviceSid
 * @param channelSid
 * @param optional nil or *CreateMemberOpts - Optional Parameters:
 * @param "Identity" (string) - 
 * @param "RoleSid" (string) - 
@return IpMessagingV1ServiceChannelMember
*/
func (c *DefaultApiService) CreateMember(serviceSid string, channelSid string, params *CreateMemberParams) (*IpMessagingV1ServiceChannelMember, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelMember{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateMessageParams Optional parameters for the method 'CreateMessage'
type CreateMessageParams struct {
    Attributes *string `json:"Attributes,omitempty"`
    Body *string `json:"Body,omitempty"`
    From *string `json:"From,omitempty"`
}

/*
CreateMessage Method for CreateMessage
 * @param serviceSid
 * @param channelSid
 * @param optional nil or *CreateMessageOpts - Optional Parameters:
 * @param "Attributes" (string) - 
 * @param "Body" (string) - 
 * @param "From" (string) - 
@return IpMessagingV1ServiceChannelMessage
*/
func (c *DefaultApiService) CreateMessage(serviceSid string, channelSid string, params *CreateMessageParams) (*IpMessagingV1ServiceChannelMessage, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.Body != nil {
        data.Set("Body", *params.Body)
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelMessage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateRoleParams Optional parameters for the method 'CreateRole'
type CreateRoleParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Permission *[]string `json:"Permission,omitempty"`
    Type *string `json:"Type,omitempty"`
}

/*
CreateRole Method for CreateRole
 * @param serviceSid
 * @param optional nil or *CreateRoleOpts - Optional Parameters:
 * @param "FriendlyName" (string) - 
 * @param "Permission" ([]string) - 
 * @param "Type" (string) - 
@return IpMessagingV1ServiceRole
*/
func (c *DefaultApiService) CreateRole(serviceSid string, params *CreateRoleParams) (*IpMessagingV1ServiceRole, error) {
    path := "/v1/Services/{ServiceSid}/Roles"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Permission != nil {
        data.Set("Permission", *params.Permission)
    }
    if params != nil && params.Type != nil {
        data.Set("Type", *params.Type)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceRole{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateService Method for CreateService
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "FriendlyName" (string) - 
@return IpMessagingV1Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*IpMessagingV1Service, error) {
    path := "/v1/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateUserParams Optional parameters for the method 'CreateUser'
type CreateUserParams struct {
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Identity *string `json:"Identity,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateUser Method for CreateUser
 * @param serviceSid
 * @param optional nil or *CreateUserOpts - Optional Parameters:
 * @param "Attributes" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "Identity" (string) - 
 * @param "RoleSid" (string) - 
@return IpMessagingV1ServiceUser
*/
func (c *DefaultApiService) CreateUser(serviceSid string, params *CreateUserParams) (*IpMessagingV1ServiceUser, error) {
    path := "/v1/Services/{ServiceSid}/Users"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceUser{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
DeleteChannel Method for DeleteChannel
 * @param serviceSid
 * @param sid
*/
func (c *DefaultApiService) DeleteChannel(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteCredential Method for DeleteCredential
 * @param sid
*/
func (c *DefaultApiService) DeleteCredential(sid string) (error) {
    path := "/v1/Credentials/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteInvite Method for DeleteInvite
 * @param serviceSid
 * @param channelSid
 * @param sid
*/
func (c *DefaultApiService) DeleteInvite(serviceSid string, channelSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteMember Method for DeleteMember
 * @param serviceSid
 * @param channelSid
 * @param sid
*/
func (c *DefaultApiService) DeleteMember(serviceSid string, channelSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteMessage Method for DeleteMessage
 * @param serviceSid
 * @param channelSid
 * @param sid
*/
func (c *DefaultApiService) DeleteMessage(serviceSid string, channelSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteRole Method for DeleteRole
 * @param serviceSid
 * @param sid
*/
func (c *DefaultApiService) DeleteRole(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Roles/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteService Method for DeleteService
 * @param sid
*/
func (c *DefaultApiService) DeleteService(sid string) (error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteUser Method for DeleteUser
 * @param serviceSid
 * @param sid
*/
func (c *DefaultApiService) DeleteUser(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Users/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchChannel Method for FetchChannel
 * @param serviceSid
 * @param sid
@return IpMessagingV1ServiceChannel
*/
func (c *DefaultApiService) FetchChannel(serviceSid string, sid string) (*IpMessagingV1ServiceChannel, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchCredential Method for FetchCredential
 * @param sid
@return IpMessagingV1Credential
*/
func (c *DefaultApiService) FetchCredential(sid string) (*IpMessagingV1Credential, error) {
    path := "/v1/Credentials/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1Credential{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchInvite Method for FetchInvite
 * @param serviceSid
 * @param channelSid
 * @param sid
@return IpMessagingV1ServiceChannelInvite
*/
func (c *DefaultApiService) FetchInvite(serviceSid string, channelSid string, sid string) (*IpMessagingV1ServiceChannelInvite, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelInvite{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchMember Method for FetchMember
 * @param serviceSid
 * @param channelSid
 * @param sid
@return IpMessagingV1ServiceChannelMember
*/
func (c *DefaultApiService) FetchMember(serviceSid string, channelSid string, sid string) (*IpMessagingV1ServiceChannelMember, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelMember{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchMessage Method for FetchMessage
 * @param serviceSid
 * @param channelSid
 * @param sid
@return IpMessagingV1ServiceChannelMessage
*/
func (c *DefaultApiService) FetchMessage(serviceSid string, channelSid string, sid string) (*IpMessagingV1ServiceChannelMessage, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelMessage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchRole Method for FetchRole
 * @param serviceSid
 * @param sid
@return IpMessagingV1ServiceRole
*/
func (c *DefaultApiService) FetchRole(serviceSid string, sid string) (*IpMessagingV1ServiceRole, error) {
    path := "/v1/Services/{ServiceSid}/Roles/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceRole{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchService Method for FetchService
 * @param sid
@return IpMessagingV1Service
*/
func (c *DefaultApiService) FetchService(sid string) (*IpMessagingV1Service, error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchUser Method for FetchUser
 * @param serviceSid
 * @param sid
@return IpMessagingV1ServiceUser
*/
func (c *DefaultApiService) FetchUser(serviceSid string, sid string) (*IpMessagingV1ServiceUser, error) {
    path := "/v1/Services/{ServiceSid}/Users/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceUser{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListChannelParams Optional parameters for the method 'ListChannel'
type ListChannelParams struct {
    Type *[]string `json:"Type,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListChannel Method for ListChannel
 * @param serviceSid
 * @param optional nil or *ListChannelOpts - Optional Parameters:
 * @param "Type" ([]string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2002
*/
func (c *DefaultApiService) ListChannel(serviceSid string, params *ListChannelParams) (*InlineResponse2002, error) {
    path := "/v1/Services/{ServiceSid}/Channels"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Type != nil {
        data.Set("Type", string(*params.Type))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2002{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListCredentialParams Optional parameters for the method 'ListCredential'
type ListCredentialParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListCredential Method for ListCredential
 * @param optional nil or *ListCredentialOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse200
*/
func (c *DefaultApiService) ListCredential(params *ListCredentialParams) (*InlineResponse200, error) {
    path := "/v1/Credentials"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse200{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListInviteParams Optional parameters for the method 'ListInvite'
type ListInviteParams struct {
    Identity *[]string `json:"Identity,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListInvite Method for ListInvite
 * @param serviceSid
 * @param channelSid
 * @param optional nil or *ListInviteOpts - Optional Parameters:
 * @param "Identity" ([]string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2003
*/
func (c *DefaultApiService) ListInvite(serviceSid string, channelSid string, params *ListInviteParams) (*InlineResponse2003, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
        data.Set("Identity", string(*params.Identity))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2003{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListMemberParams Optional parameters for the method 'ListMember'
type ListMemberParams struct {
    Identity *[]string `json:"Identity,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListMember Method for ListMember
 * @param serviceSid
 * @param channelSid
 * @param optional nil or *ListMemberOpts - Optional Parameters:
 * @param "Identity" ([]string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2004
*/
func (c *DefaultApiService) ListMember(serviceSid string, channelSid string, params *ListMemberParams) (*InlineResponse2004, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
        data.Set("Identity", string(*params.Identity))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2004{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListMessageParams Optional parameters for the method 'ListMessage'
type ListMessageParams struct {
    Order *string `json:"Order,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListMessage Method for ListMessage
 * @param serviceSid
 * @param channelSid
 * @param optional nil or *ListMessageOpts - Optional Parameters:
 * @param "Order" (string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2005
*/
func (c *DefaultApiService) ListMessage(serviceSid string, channelSid string, params *ListMessageParams) (*InlineResponse2005, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Order != nil {
        data.Set("Order", *params.Order)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2005{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListRoleParams Optional parameters for the method 'ListRole'
type ListRoleParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRole Method for ListRole
 * @param serviceSid
 * @param optional nil or *ListRoleOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2006
*/
func (c *DefaultApiService) ListRole(serviceSid string, params *ListRoleParams) (*InlineResponse2006, error) {
    path := "/v1/Services/{ServiceSid}/Roles"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2006{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2001
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*InlineResponse2001, error) {
    path := "/v1/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2001{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListUserParams Optional parameters for the method 'ListUser'
type ListUserParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUser Method for ListUser
 * @param serviceSid
 * @param optional nil or *ListUserOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2007
*/
func (c *DefaultApiService) ListUser(serviceSid string, params *ListUserParams) (*InlineResponse2007, error) {
    path := "/v1/Services/{ServiceSid}/Users"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2007{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListUserChannelParams Optional parameters for the method 'ListUserChannel'
type ListUserChannelParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUserChannel Method for ListUserChannel
 * @param serviceSid
 * @param userSid
 * @param optional nil or *ListUserChannelOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2008
*/
func (c *DefaultApiService) ListUserChannel(serviceSid string, userSid string, params *ListUserChannelParams) (*InlineResponse2008, error) {
    path := "/v1/Services/{ServiceSid}/Users/{UserSid}/Channels"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"UserSid"+"}", userSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2008{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateChannelParams Optional parameters for the method 'UpdateChannel'
type UpdateChannelParams struct {
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateChannel Method for UpdateChannel
 * @param serviceSid
 * @param sid
 * @param optional nil or *UpdateChannelOpts - Optional Parameters:
 * @param "Attributes" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "UniqueName" (string) - 
@return IpMessagingV1ServiceChannel
*/
func (c *DefaultApiService) UpdateChannel(serviceSid string, sid string, params *UpdateChannelParams) (*IpMessagingV1ServiceChannel, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateCredentialParams Optional parameters for the method 'UpdateCredential'
type UpdateCredentialParams struct {
    ApiKey *string `json:"ApiKey,omitempty"`
    Certificate *string `json:"Certificate,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    PrivateKey *string `json:"PrivateKey,omitempty"`
    Sandbox *bool `json:"Sandbox,omitempty"`
    Secret *string `json:"Secret,omitempty"`
}

/*
UpdateCredential Method for UpdateCredential
 * @param sid
 * @param optional nil or *UpdateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - 
 * @param "Certificate" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "PrivateKey" (string) - 
 * @param "Sandbox" (bool) - 
 * @param "Secret" (string) - 
@return IpMessagingV1Credential
*/
func (c *DefaultApiService) UpdateCredential(sid string, params *UpdateCredentialParams) (*IpMessagingV1Credential, error) {
    path := "/v1/Credentials/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ApiKey != nil {
        data.Set("ApiKey", *params.ApiKey)
    }
    if params != nil && params.Certificate != nil {
        data.Set("Certificate", *params.Certificate)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.PrivateKey != nil {
        data.Set("PrivateKey", *params.PrivateKey)
    }
    if params != nil && params.Sandbox != nil {
        data.Set("Sandbox", string(*params.Sandbox))
    }
    if params != nil && params.Secret != nil {
        data.Set("Secret", *params.Secret)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1Credential{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateMemberParams Optional parameters for the method 'UpdateMember'
type UpdateMemberParams struct {
    LastConsumedMessageIndex *int32 `json:"LastConsumedMessageIndex,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateMember Method for UpdateMember
 * @param serviceSid
 * @param channelSid
 * @param sid
 * @param optional nil or *UpdateMemberOpts - Optional Parameters:
 * @param "LastConsumedMessageIndex" (*int32) - 
 * @param "RoleSid" (string) - 
@return IpMessagingV1ServiceChannelMember
*/
func (c *DefaultApiService) UpdateMember(serviceSid string, channelSid string, sid string, params *UpdateMemberParams) (*IpMessagingV1ServiceChannelMember, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.LastConsumedMessageIndex != nil {
        data.Set("LastConsumedMessageIndex", string(*params.LastConsumedMessageIndex))
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelMember{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateMessageParams Optional parameters for the method 'UpdateMessage'
type UpdateMessageParams struct {
    Attributes *string `json:"Attributes,omitempty"`
    Body *string `json:"Body,omitempty"`
}

/*
UpdateMessage Method for UpdateMessage
 * @param serviceSid
 * @param channelSid
 * @param sid
 * @param optional nil or *UpdateMessageOpts - Optional Parameters:
 * @param "Attributes" (string) - 
 * @param "Body" (string) - 
@return IpMessagingV1ServiceChannelMessage
*/
func (c *DefaultApiService) UpdateMessage(serviceSid string, channelSid string, sid string, params *UpdateMessageParams) (*IpMessagingV1ServiceChannelMessage, error) {
    path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ChannelSid"+"}", channelSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.Body != nil {
        data.Set("Body", *params.Body)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceChannelMessage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateRoleParams Optional parameters for the method 'UpdateRole'
type UpdateRoleParams struct {
    Permission *[]string `json:"Permission,omitempty"`
}

/*
UpdateRole Method for UpdateRole
 * @param serviceSid
 * @param sid
 * @param optional nil or *UpdateRoleOpts - Optional Parameters:
 * @param "Permission" ([]string) - 
@return IpMessagingV1ServiceRole
*/
func (c *DefaultApiService) UpdateRole(serviceSid string, sid string, params *UpdateRoleParams) (*IpMessagingV1ServiceRole, error) {
    path := "/v1/Services/{ServiceSid}/Roles/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Permission != nil {
        data.Set("Permission", *params.Permission)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceRole{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
    ConsumptionReportInterval *int32 `json:"ConsumptionReportInterval,omitempty"`
    DefaultChannelCreatorRoleSid *string `json:"DefaultChannelCreatorRoleSid,omitempty"`
    DefaultChannelRoleSid *string `json:"DefaultChannelRoleSid,omitempty"`
    DefaultServiceRoleSid *string `json:"DefaultServiceRoleSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Limits.ChannelMembers *int32 `json:"Limits.ChannelMembers,omitempty"`
    Limits.UserChannels *int32 `json:"Limits.UserChannels,omitempty"`
    Notifications.AddedToChannel.Enabled *bool `json:"Notifications.AddedToChannel.Enabled,omitempty"`
    Notifications.AddedToChannel.Template *string `json:"Notifications.AddedToChannel.Template,omitempty"`
    Notifications.InvitedToChannel.Enabled *bool `json:"Notifications.InvitedToChannel.Enabled,omitempty"`
    Notifications.InvitedToChannel.Template *string `json:"Notifications.InvitedToChannel.Template,omitempty"`
    Notifications.NewMessage.Enabled *bool `json:"Notifications.NewMessage.Enabled,omitempty"`
    Notifications.NewMessage.Template *string `json:"Notifications.NewMessage.Template,omitempty"`
    Notifications.RemovedFromChannel.Enabled *bool `json:"Notifications.RemovedFromChannel.Enabled,omitempty"`
    Notifications.RemovedFromChannel.Template *string `json:"Notifications.RemovedFromChannel.Template,omitempty"`
    PostWebhookUrl *string `json:"PostWebhookUrl,omitempty"`
    PreWebhookUrl *string `json:"PreWebhookUrl,omitempty"`
    ReachabilityEnabled *bool `json:"ReachabilityEnabled,omitempty"`
    ReadStatusEnabled *bool `json:"ReadStatusEnabled,omitempty"`
    TypingIndicatorTimeout *int32 `json:"TypingIndicatorTimeout,omitempty"`
    WebhookFilters *[]string `json:"WebhookFilters,omitempty"`
    WebhookMethod *string `json:"WebhookMethod,omitempty"`
    Webhooks.OnChannelAdd.Method *string `json:"Webhooks.OnChannelAdd.Method,omitempty"`
    Webhooks.OnChannelAdd.Url *string `json:"Webhooks.OnChannelAdd.Url,omitempty"`
    Webhooks.OnChannelAdded.Method *string `json:"Webhooks.OnChannelAdded.Method,omitempty"`
    Webhooks.OnChannelAdded.Url *string `json:"Webhooks.OnChannelAdded.Url,omitempty"`
    Webhooks.OnChannelDestroy.Method *string `json:"Webhooks.OnChannelDestroy.Method,omitempty"`
    Webhooks.OnChannelDestroy.Url *string `json:"Webhooks.OnChannelDestroy.Url,omitempty"`
    Webhooks.OnChannelDestroyed.Method *string `json:"Webhooks.OnChannelDestroyed.Method,omitempty"`
    Webhooks.OnChannelDestroyed.Url *string `json:"Webhooks.OnChannelDestroyed.Url,omitempty"`
    Webhooks.OnChannelUpdate.Method *string `json:"Webhooks.OnChannelUpdate.Method,omitempty"`
    Webhooks.OnChannelUpdate.Url *string `json:"Webhooks.OnChannelUpdate.Url,omitempty"`
    Webhooks.OnChannelUpdated.Method *string `json:"Webhooks.OnChannelUpdated.Method,omitempty"`
    Webhooks.OnChannelUpdated.Url *string `json:"Webhooks.OnChannelUpdated.Url,omitempty"`
    Webhooks.OnMemberAdd.Method *string `json:"Webhooks.OnMemberAdd.Method,omitempty"`
    Webhooks.OnMemberAdd.Url *string `json:"Webhooks.OnMemberAdd.Url,omitempty"`
    Webhooks.OnMemberAdded.Method *string `json:"Webhooks.OnMemberAdded.Method,omitempty"`
    Webhooks.OnMemberAdded.Url *string `json:"Webhooks.OnMemberAdded.Url,omitempty"`
    Webhooks.OnMemberRemove.Method *string `json:"Webhooks.OnMemberRemove.Method,omitempty"`
    Webhooks.OnMemberRemove.Url *string `json:"Webhooks.OnMemberRemove.Url,omitempty"`
    Webhooks.OnMemberRemoved.Method *string `json:"Webhooks.OnMemberRemoved.Method,omitempty"`
    Webhooks.OnMemberRemoved.Url *string `json:"Webhooks.OnMemberRemoved.Url,omitempty"`
    Webhooks.OnMessageRemove.Method *string `json:"Webhooks.OnMessageRemove.Method,omitempty"`
    Webhooks.OnMessageRemove.Url *string `json:"Webhooks.OnMessageRemove.Url,omitempty"`
    Webhooks.OnMessageRemoved.Method *string `json:"Webhooks.OnMessageRemoved.Method,omitempty"`
    Webhooks.OnMessageRemoved.Url *string `json:"Webhooks.OnMessageRemoved.Url,omitempty"`
    Webhooks.OnMessageSend.Method *string `json:"Webhooks.OnMessageSend.Method,omitempty"`
    Webhooks.OnMessageSend.Url *string `json:"Webhooks.OnMessageSend.Url,omitempty"`
    Webhooks.OnMessageSent.Method *string `json:"Webhooks.OnMessageSent.Method,omitempty"`
    Webhooks.OnMessageSent.Url *string `json:"Webhooks.OnMessageSent.Url,omitempty"`
    Webhooks.OnMessageUpdate.Method *string `json:"Webhooks.OnMessageUpdate.Method,omitempty"`
    Webhooks.OnMessageUpdate.Url *string `json:"Webhooks.OnMessageUpdate.Url,omitempty"`
    Webhooks.OnMessageUpdated.Method *string `json:"Webhooks.OnMessageUpdated.Method,omitempty"`
    Webhooks.OnMessageUpdated.Url *string `json:"Webhooks.OnMessageUpdated.Url,omitempty"`
}

/*
UpdateService Method for UpdateService
 * @param sid
 * @param optional nil or *UpdateServiceOpts - Optional Parameters:
 * @param "ConsumptionReportInterval" (int32) - 
 * @param "DefaultChannelCreatorRoleSid" (string) - 
 * @param "DefaultChannelRoleSid" (string) - 
 * @param "DefaultServiceRoleSid" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "Limits.ChannelMembers" (int32) - 
 * @param "Limits.UserChannels" (int32) - 
 * @param "Notifications.AddedToChannel.Enabled" (bool) - 
 * @param "Notifications.AddedToChannel.Template" (string) - 
 * @param "Notifications.InvitedToChannel.Enabled" (bool) - 
 * @param "Notifications.InvitedToChannel.Template" (string) - 
 * @param "Notifications.NewMessage.Enabled" (bool) - 
 * @param "Notifications.NewMessage.Template" (string) - 
 * @param "Notifications.RemovedFromChannel.Enabled" (bool) - 
 * @param "Notifications.RemovedFromChannel.Template" (string) - 
 * @param "PostWebhookUrl" (string) - 
 * @param "PreWebhookUrl" (string) - 
 * @param "ReachabilityEnabled" (bool) - 
 * @param "ReadStatusEnabled" (bool) - 
 * @param "TypingIndicatorTimeout" (int32) - 
 * @param "WebhookFilters" ([]string) - 
 * @param "WebhookMethod" (string) - 
 * @param "Webhooks.OnChannelAdd.Method" (string) - 
 * @param "Webhooks.OnChannelAdd.Url" (string) - 
 * @param "Webhooks.OnChannelAdded.Method" (string) - 
 * @param "Webhooks.OnChannelAdded.Url" (string) - 
 * @param "Webhooks.OnChannelDestroy.Method" (string) - 
 * @param "Webhooks.OnChannelDestroy.Url" (string) - 
 * @param "Webhooks.OnChannelDestroyed.Method" (string) - 
 * @param "Webhooks.OnChannelDestroyed.Url" (string) - 
 * @param "Webhooks.OnChannelUpdate.Method" (string) - 
 * @param "Webhooks.OnChannelUpdate.Url" (string) - 
 * @param "Webhooks.OnChannelUpdated.Method" (string) - 
 * @param "Webhooks.OnChannelUpdated.Url" (string) - 
 * @param "Webhooks.OnMemberAdd.Method" (string) - 
 * @param "Webhooks.OnMemberAdd.Url" (string) - 
 * @param "Webhooks.OnMemberAdded.Method" (string) - 
 * @param "Webhooks.OnMemberAdded.Url" (string) - 
 * @param "Webhooks.OnMemberRemove.Method" (string) - 
 * @param "Webhooks.OnMemberRemove.Url" (string) - 
 * @param "Webhooks.OnMemberRemoved.Method" (string) - 
 * @param "Webhooks.OnMemberRemoved.Url" (string) - 
 * @param "Webhooks.OnMessageRemove.Method" (string) - 
 * @param "Webhooks.OnMessageRemove.Url" (string) - 
 * @param "Webhooks.OnMessageRemoved.Method" (string) - 
 * @param "Webhooks.OnMessageRemoved.Url" (string) - 
 * @param "Webhooks.OnMessageSend.Method" (string) - 
 * @param "Webhooks.OnMessageSend.Url" (string) - 
 * @param "Webhooks.OnMessageSent.Method" (string) - 
 * @param "Webhooks.OnMessageSent.Url" (string) - 
 * @param "Webhooks.OnMessageUpdate.Method" (string) - 
 * @param "Webhooks.OnMessageUpdate.Url" (string) - 
 * @param "Webhooks.OnMessageUpdated.Method" (string) - 
 * @param "Webhooks.OnMessageUpdated.Url" (string) - 
@return IpMessagingV1Service
*/
func (c *DefaultApiService) UpdateService(sid string, params *UpdateServiceParams) (*IpMessagingV1Service, error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ConsumptionReportInterval != nil {
        data.Set("ConsumptionReportInterval", string(*params.ConsumptionReportInterval))
    }
    if params != nil && params.DefaultChannelCreatorRoleSid != nil {
        data.Set("DefaultChannelCreatorRoleSid", *params.DefaultChannelCreatorRoleSid)
    }
    if params != nil && params.DefaultChannelRoleSid != nil {
        data.Set("DefaultChannelRoleSid", *params.DefaultChannelRoleSid)
    }
    if params != nil && params.DefaultServiceRoleSid != nil {
        data.Set("DefaultServiceRoleSid", *params.DefaultServiceRoleSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Limits.ChannelMembers != nil {
        data.Set("Limits.ChannelMembers", string(*params.Limits.ChannelMembers))
    }
    if params != nil && params.Limits.UserChannels != nil {
        data.Set("Limits.UserChannels", string(*params.Limits.UserChannels))
    }
    if params != nil && params.Notifications.AddedToChannel.Enabled != nil {
        data.Set("Notifications.AddedToChannel.Enabled", string(*params.Notifications.AddedToChannel.Enabled))
    }
    if params != nil && params.Notifications.AddedToChannel.Template != nil {
        data.Set("Notifications.AddedToChannel.Template", *params.Notifications.AddedToChannel.Template)
    }
    if params != nil && params.Notifications.InvitedToChannel.Enabled != nil {
        data.Set("Notifications.InvitedToChannel.Enabled", string(*params.Notifications.InvitedToChannel.Enabled))
    }
    if params != nil && params.Notifications.InvitedToChannel.Template != nil {
        data.Set("Notifications.InvitedToChannel.Template", *params.Notifications.InvitedToChannel.Template)
    }
    if params != nil && params.Notifications.NewMessage.Enabled != nil {
        data.Set("Notifications.NewMessage.Enabled", string(*params.Notifications.NewMessage.Enabled))
    }
    if params != nil && params.Notifications.NewMessage.Template != nil {
        data.Set("Notifications.NewMessage.Template", *params.Notifications.NewMessage.Template)
    }
    if params != nil && params.Notifications.RemovedFromChannel.Enabled != nil {
        data.Set("Notifications.RemovedFromChannel.Enabled", string(*params.Notifications.RemovedFromChannel.Enabled))
    }
    if params != nil && params.Notifications.RemovedFromChannel.Template != nil {
        data.Set("Notifications.RemovedFromChannel.Template", *params.Notifications.RemovedFromChannel.Template)
    }
    if params != nil && params.PostWebhookUrl != nil {
        data.Set("PostWebhookUrl", *params.PostWebhookUrl)
    }
    if params != nil && params.PreWebhookUrl != nil {
        data.Set("PreWebhookUrl", *params.PreWebhookUrl)
    }
    if params != nil && params.ReachabilityEnabled != nil {
        data.Set("ReachabilityEnabled", string(*params.ReachabilityEnabled))
    }
    if params != nil && params.ReadStatusEnabled != nil {
        data.Set("ReadStatusEnabled", string(*params.ReadStatusEnabled))
    }
    if params != nil && params.TypingIndicatorTimeout != nil {
        data.Set("TypingIndicatorTimeout", string(*params.TypingIndicatorTimeout))
    }
    if params != nil && params.WebhookFilters != nil {
        data.Set("WebhookFilters", *params.WebhookFilters)
    }
    if params != nil && params.WebhookMethod != nil {
        data.Set("WebhookMethod", *params.WebhookMethod)
    }
    if params != nil && params.Webhooks.OnChannelAdd.Method != nil {
        data.Set("Webhooks.OnChannelAdd.Method", *params.Webhooks.OnChannelAdd.Method)
    }
    if params != nil && params.Webhooks.OnChannelAdd.Url != nil {
        data.Set("Webhooks.OnChannelAdd.Url", *params.Webhooks.OnChannelAdd.Url)
    }
    if params != nil && params.Webhooks.OnChannelAdded.Method != nil {
        data.Set("Webhooks.OnChannelAdded.Method", *params.Webhooks.OnChannelAdded.Method)
    }
    if params != nil && params.Webhooks.OnChannelAdded.Url != nil {
        data.Set("Webhooks.OnChannelAdded.Url", *params.Webhooks.OnChannelAdded.Url)
    }
    if params != nil && params.Webhooks.OnChannelDestroy.Method != nil {
        data.Set("Webhooks.OnChannelDestroy.Method", *params.Webhooks.OnChannelDestroy.Method)
    }
    if params != nil && params.Webhooks.OnChannelDestroy.Url != nil {
        data.Set("Webhooks.OnChannelDestroy.Url", *params.Webhooks.OnChannelDestroy.Url)
    }
    if params != nil && params.Webhooks.OnChannelDestroyed.Method != nil {
        data.Set("Webhooks.OnChannelDestroyed.Method", *params.Webhooks.OnChannelDestroyed.Method)
    }
    if params != nil && params.Webhooks.OnChannelDestroyed.Url != nil {
        data.Set("Webhooks.OnChannelDestroyed.Url", *params.Webhooks.OnChannelDestroyed.Url)
    }
    if params != nil && params.Webhooks.OnChannelUpdate.Method != nil {
        data.Set("Webhooks.OnChannelUpdate.Method", *params.Webhooks.OnChannelUpdate.Method)
    }
    if params != nil && params.Webhooks.OnChannelUpdate.Url != nil {
        data.Set("Webhooks.OnChannelUpdate.Url", *params.Webhooks.OnChannelUpdate.Url)
    }
    if params != nil && params.Webhooks.OnChannelUpdated.Method != nil {
        data.Set("Webhooks.OnChannelUpdated.Method", *params.Webhooks.OnChannelUpdated.Method)
    }
    if params != nil && params.Webhooks.OnChannelUpdated.Url != nil {
        data.Set("Webhooks.OnChannelUpdated.Url", *params.Webhooks.OnChannelUpdated.Url)
    }
    if params != nil && params.Webhooks.OnMemberAdd.Method != nil {
        data.Set("Webhooks.OnMemberAdd.Method", *params.Webhooks.OnMemberAdd.Method)
    }
    if params != nil && params.Webhooks.OnMemberAdd.Url != nil {
        data.Set("Webhooks.OnMemberAdd.Url", *params.Webhooks.OnMemberAdd.Url)
    }
    if params != nil && params.Webhooks.OnMemberAdded.Method != nil {
        data.Set("Webhooks.OnMemberAdded.Method", *params.Webhooks.OnMemberAdded.Method)
    }
    if params != nil && params.Webhooks.OnMemberAdded.Url != nil {
        data.Set("Webhooks.OnMemberAdded.Url", *params.Webhooks.OnMemberAdded.Url)
    }
    if params != nil && params.Webhooks.OnMemberRemove.Method != nil {
        data.Set("Webhooks.OnMemberRemove.Method", *params.Webhooks.OnMemberRemove.Method)
    }
    if params != nil && params.Webhooks.OnMemberRemove.Url != nil {
        data.Set("Webhooks.OnMemberRemove.Url", *params.Webhooks.OnMemberRemove.Url)
    }
    if params != nil && params.Webhooks.OnMemberRemoved.Method != nil {
        data.Set("Webhooks.OnMemberRemoved.Method", *params.Webhooks.OnMemberRemoved.Method)
    }
    if params != nil && params.Webhooks.OnMemberRemoved.Url != nil {
        data.Set("Webhooks.OnMemberRemoved.Url", *params.Webhooks.OnMemberRemoved.Url)
    }
    if params != nil && params.Webhooks.OnMessageRemove.Method != nil {
        data.Set("Webhooks.OnMessageRemove.Method", *params.Webhooks.OnMessageRemove.Method)
    }
    if params != nil && params.Webhooks.OnMessageRemove.Url != nil {
        data.Set("Webhooks.OnMessageRemove.Url", *params.Webhooks.OnMessageRemove.Url)
    }
    if params != nil && params.Webhooks.OnMessageRemoved.Method != nil {
        data.Set("Webhooks.OnMessageRemoved.Method", *params.Webhooks.OnMessageRemoved.Method)
    }
    if params != nil && params.Webhooks.OnMessageRemoved.Url != nil {
        data.Set("Webhooks.OnMessageRemoved.Url", *params.Webhooks.OnMessageRemoved.Url)
    }
    if params != nil && params.Webhooks.OnMessageSend.Method != nil {
        data.Set("Webhooks.OnMessageSend.Method", *params.Webhooks.OnMessageSend.Method)
    }
    if params != nil && params.Webhooks.OnMessageSend.Url != nil {
        data.Set("Webhooks.OnMessageSend.Url", *params.Webhooks.OnMessageSend.Url)
    }
    if params != nil && params.Webhooks.OnMessageSent.Method != nil {
        data.Set("Webhooks.OnMessageSent.Method", *params.Webhooks.OnMessageSent.Method)
    }
    if params != nil && params.Webhooks.OnMessageSent.Url != nil {
        data.Set("Webhooks.OnMessageSent.Url", *params.Webhooks.OnMessageSent.Url)
    }
    if params != nil && params.Webhooks.OnMessageUpdate.Method != nil {
        data.Set("Webhooks.OnMessageUpdate.Method", *params.Webhooks.OnMessageUpdate.Method)
    }
    if params != nil && params.Webhooks.OnMessageUpdate.Url != nil {
        data.Set("Webhooks.OnMessageUpdate.Url", *params.Webhooks.OnMessageUpdate.Url)
    }
    if params != nil && params.Webhooks.OnMessageUpdated.Method != nil {
        data.Set("Webhooks.OnMessageUpdated.Method", *params.Webhooks.OnMessageUpdated.Method)
    }
    if params != nil && params.Webhooks.OnMessageUpdated.Url != nil {
        data.Set("Webhooks.OnMessageUpdated.Url", *params.Webhooks.OnMessageUpdated.Url)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateUserParams Optional parameters for the method 'UpdateUser'
type UpdateUserParams struct {
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateUser Method for UpdateUser
 * @param serviceSid
 * @param sid
 * @param optional nil or *UpdateUserOpts - Optional Parameters:
 * @param "Attributes" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "RoleSid" (string) - 
@return IpMessagingV1ServiceUser
*/
func (c *DefaultApiService) UpdateUser(serviceSid string, sid string, params *UpdateUserParams) (*IpMessagingV1ServiceUser, error) {
    path := "/v1/Services/{ServiceSid}/Users/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.RoleSid != nil {
        data.Set("RoleSid", *params.RoleSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &IpMessagingV1ServiceUser{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
