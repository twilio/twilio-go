//This code was generated by
//\ / _    _  _|   _  _
// | (_)\/(_)(_|\/| |(/_  v1.0.0
//      /       /

package twiml

func Voice(verbs []Element) (string, error) {
	doc, response := CreateDocument()
	if verbs != nil {
		AddAllVerbs(response, verbs)
	}
	return ToXML(doc)
}

// VoiceRefer <Refer> TwiML Verb
type VoiceRefer struct {
	// action: Action URL
	// method: Action URL method
	// OptionalAttributes: additional attributes
	Action             string
	Method             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceRefer) GetName() string {
	return "Refer"
}

func (m VoiceRefer) GetText() string {
	return ""
}

func (m VoiceRefer) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Action": m.Action,
		"Method": m.Method,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceRefer) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceReferSip <Sip> TwiML Noun used in <Refer>
type VoiceReferSip struct {
	// sip_url: SIP URL
	// OptionalAttributes: additional attributes
	SipUrl             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceReferSip) GetName() string {
	return "Sip"
}

func (m VoiceReferSip) GetText() string {
	return m.SipUrl
}

func (m VoiceReferSip) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceReferSip) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceStop <Stop> TwiML Verb
type VoiceStop struct {
	// OptionalAttributes: additional attributes
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceStop) GetName() string {
	return "Stop"
}

func (m VoiceStop) GetText() string {
	return ""
}

func (m VoiceStop) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceStop) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceSipRec <Siprec> TwiML Noun
type VoiceSipRec struct {
	// name: Friendly name given to SIPREC
	// connector_name: Unique name for Connector
	// track: Track to be streamed to remote service
	// status_callback: Status Callback URL
	// status_callback_method: Status Callback URL method
	// OptionalAttributes: additional attributes
	Name                 string
	ConnectorName        string
	Track                string
	StatusCallback       string
	StatusCallbackMethod string
	InnerElements        []Element
	OptionalAttributes   map[string]string
}

func (m VoiceSipRec) GetName() string {
	return "SipRec"
}

func (m VoiceSipRec) GetText() string {
	return ""
}

func (m VoiceSipRec) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Name":                 m.Name,
		"ConnectorName":        m.ConnectorName,
		"Track":                m.Track,
		"StatusCallback":       m.StatusCallback,
		"StatusCallbackMethod": m.StatusCallbackMethod,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceSipRec) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceParameter <Parameter> TwiML Noun
type VoiceParameter struct {
	// name: The name of the custom parameter
	// value: The value of the custom parameter
	// OptionalAttributes: additional attributes
	Name               string
	Value              string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceParameter) GetName() string {
	return "Parameter"
}

func (m VoiceParameter) GetText() string {
	return ""
}

func (m VoiceParameter) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Name":  m.Name,
		"Value": m.Value,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceParameter) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceStream <Stream> TwiML Noun
type VoiceStream struct {
	// name: Friendly name given to the Stream
	// connector_name: Unique name for Stream Connector
	// url: URL of the remote service where the Stream is routed
	// track: Track to be streamed to remote service
	// status_callback: Status Callback URL
	// status_callback_method: Status Callback URL method
	// OptionalAttributes: additional attributes
	Name                 string
	ConnectorName        string
	Url                  string
	Track                string
	StatusCallback       string
	StatusCallbackMethod string
	InnerElements        []Element
	OptionalAttributes   map[string]string
}

func (m VoiceStream) GetName() string {
	return "Stream"
}

func (m VoiceStream) GetText() string {
	return ""
}

func (m VoiceStream) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Name":                 m.Name,
		"ConnectorName":        m.ConnectorName,
		"Url":                  m.Url,
		"Track":                m.Track,
		"StatusCallback":       m.StatusCallback,
		"StatusCallbackMethod": m.StatusCallbackMethod,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceStream) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceStart <Start> TwiML Verb
type VoiceStart struct {
	// action: Action URL
	// method: Action URL method
	// OptionalAttributes: additional attributes
	Action             string
	Method             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceStart) GetName() string {
	return "Start"
}

func (m VoiceStart) GetText() string {
	return ""
}

func (m VoiceStart) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Action": m.Action,
		"Method": m.Method,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceStart) GetInnerElements() []Element {
	return m.InnerElements
}

// VoicePrompt <Prompt> Twiml Verb
type VoicePrompt struct {
	// for_: Name of the payment source data element
	// error_type: Type of error
	// card_type: Type of the credit card
	// attempt: Current attempt count
	// require_matching_inputs: Require customer to input requested information twice and verify matching.
	// OptionalAttributes: additional attributes
	For_                  string
	ErrorType             string
	CardType              string
	Attempt               string
	RequireMatchingInputs string
	InnerElements         []Element
	OptionalAttributes    map[string]string
}

func (m VoicePrompt) GetName() string {
	return "Prompt"
}

func (m VoicePrompt) GetText() string {
	return ""
}

func (m VoicePrompt) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"For_":                  m.For_,
		"ErrorType":             m.ErrorType,
		"CardType":              m.CardType,
		"Attempt":               m.Attempt,
		"RequireMatchingInputs": m.RequireMatchingInputs,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoicePrompt) GetInnerElements() []Element {
	return m.InnerElements
}

// VoicePause <Pause> TwiML Verb
type VoicePause struct {
	// length: Length in seconds to pause
	// OptionalAttributes: additional attributes
	Length             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoicePause) GetName() string {
	return "Pause"
}

func (m VoicePause) GetText() string {
	return ""
}

func (m VoicePause) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Length": m.Length,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoicePause) GetInnerElements() []Element {
	return m.InnerElements
}

// VoicePlay <Play> TwiML Verb
type VoicePlay struct {
	// url: Media URL
	// loop: Times to loop media
	// digits: Play DTMF tones for digits
	// OptionalAttributes: additional attributes
	Url                string
	Loop               string
	Digits             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoicePlay) GetName() string {
	return "Play"
}

func (m VoicePlay) GetText() string {
	return m.Url
}

func (m VoicePlay) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Loop":   m.Loop,
		"Digits": m.Digits,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoicePlay) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceSay <Say> TwiML Verb
type VoiceSay struct {
	// message: Message to say
	// voice: Voice to use
	// loop: Times to loop message
	// language: Message language
	// OptionalAttributes: additional attributes
	Message            string
	Voice              string
	Loop               string
	Language           string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceSay) GetName() string {
	return "Say"
}

func (m VoiceSay) GetText() string {
	return m.Message
}

func (m VoiceSay) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Voice":    m.Voice,
		"Loop":     m.Loop,
		"Language": m.Language,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceSay) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceW Improving Pronunciation by Specifying Parts of Speech in <Say>
type VoiceW struct {
	// words: Words to speak
	// role: Customize the pronunciation of words by specifying the wordâ€™s part of speech or alternate meaning
	// OptionalAttributes: additional attributes
	Words              string
	Role               string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceW) GetName() string {
	return "W"
}

func (m VoiceW) GetText() string {
	return m.Words
}

func (m VoiceW) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Role": m.Role,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceW) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceSub Pronouncing Acronyms and Abbreviations in <Say>
type VoiceSub struct {
	// words: Words to be substituted
	// alias: Substitute a different word (or pronunciation) for selected text such as an acronym or abbreviation
	// OptionalAttributes: additional attributes
	Words              string
	Alias              string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceSub) GetName() string {
	return "Sub"
}

func (m VoiceSub) GetText() string {
	return m.Words
}

func (m VoiceSub) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Alias": m.Alias,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceSub) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceSayAs Controlling How Special Types of Words Are Spoken in <Say>
type VoiceSayAs struct {
	// words: Words to be interpreted
	// interpret-as: Specify the type of words are spoken
	// format: Specify the format of the date when interpret-as is set to date
	// OptionalAttributes: additional attributes
	Words              string
	InterpretAs        string
	Format             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceSayAs) GetName() string {
	return "SayAs"
}

func (m VoiceSayAs) GetText() string {
	return m.Words
}

func (m VoiceSayAs) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"InterpretAs": m.InterpretAs,
		"Format":      m.Format,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceSayAs) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceProsody Controling Volume, Speaking Rate, and Pitch in <Say>
type VoiceProsody struct {
	// words: Words to speak
	// volume: Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
	// rate: Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
	// pitch: Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
	// OptionalAttributes: additional attributes
	Words              string
	Volume             string
	Rate               string
	Pitch              string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceProsody) GetName() string {
	return "Prosody"
}

func (m VoiceProsody) GetText() string {
	return m.Words
}

func (m VoiceProsody) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Volume": m.Volume,
		"Rate":   m.Rate,
		"Pitch":  m.Pitch,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceProsody) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceS Adding A Pause Between Sentences in <Say>
type VoiceS struct {
	// words: Words to speak
	// OptionalAttributes: additional attributes
	Words              string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceS) GetName() string {
	return "S"
}

func (m VoiceS) GetText() string {
	return m.Words
}

func (m VoiceS) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceS) GetInnerElements() []Element {
	return m.InnerElements
}

// VoicePhoneme Using Phonetic Pronunciation in <Say>
type VoicePhoneme struct {
	// words: Words to speak
	// alphabet: Specify the phonetic alphabet
	// ph: Specifiy the phonetic symbols for pronunciation
	// OptionalAttributes: additional attributes
	Words              string
	Alphabet           string
	Ph                 string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoicePhoneme) GetName() string {
	return "Phoneme"
}

func (m VoicePhoneme) GetText() string {
	return m.Words
}

func (m VoicePhoneme) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Alphabet": m.Alphabet,
		"Ph":       m.Ph,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoicePhoneme) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceLang Specifying Another Language for Specific Words in <Say>
type VoiceLang struct {
	// words: Words to speak
	// xml:lang: Specify the language
	// OptionalAttributes: additional attributes
	Words              string
	XmlLang            string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceLang) GetName() string {
	return "Lang"
}

func (m VoiceLang) GetText() string {
	return m.Words
}

func (m VoiceLang) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"XmlLang": m.XmlLang,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceLang) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceP Adding a Pause Between Paragraphs in <Say>
type VoiceP struct {
	// words: Words to speak
	// OptionalAttributes: additional attributes
	Words              string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceP) GetName() string {
	return "P"
}

func (m VoiceP) GetText() string {
	return m.Words
}

func (m VoiceP) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceP) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceEmphasis Emphasizing Words in <Say>
type VoiceEmphasis struct {
	// words: Words to emphasize
	// level: Specify the degree of emphasis
	// OptionalAttributes: additional attributes
	Words              string
	Level              string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceEmphasis) GetName() string {
	return "Emphasis"
}

func (m VoiceEmphasis) GetText() string {
	return m.Words
}

func (m VoiceEmphasis) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Level": m.Level,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceEmphasis) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceBreak Adding a Pause in <Say>
type VoiceBreak struct {
	// strength: Set a pause based on strength
	// time: Set a pause to a specific length of time in seconds or milliseconds, available values: [number]s, [number]ms
	// OptionalAttributes: additional attributes
	Strength           string
	Time               string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceBreak) GetName() string {
	return "Break"
}

func (m VoiceBreak) GetText() string {
	return ""
}

func (m VoiceBreak) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Strength": m.Strength,
		"Time":     m.Time,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceBreak) GetInnerElements() []Element {
	return m.InnerElements
}

// VoicePay <Pay> Twiml Verb
type VoicePay struct {
	// input: Input type Twilio should accept
	// action: Action URL
	// bank_account_type: Bank account type for ach transactions. If set, payment method attribute must be provided and value should be set to ach-debit. defaults to consumer-checking
	// status_callback: Status callback URL
	// status_callback_method: Status callback method
	// timeout: Time to wait to gather input
	// max_attempts: Maximum number of allowed retries when gathering input
	// security_code: Prompt for security code
	// postal_code: Prompt for postal code and it should be true/false or default postal code
	// min_postal_code_length: Prompt for minimum postal code length
	// payment_connector: Unique name for payment connector
	// payment_method: Payment method to be used. defaults to credit-card
	// token_type: Type of token
	// charge_amount: Amount to process. If value is greater than 0 then make the payment else create a payment token
	// currency: Currency of the amount attribute
	// description: Details regarding the payment
	// valid_card_types: Comma separated accepted card types
	// language: Language to use
	// OptionalAttributes: additional attributes
	Input                string
	Action               string
	BankAccountType      string
	StatusCallback       string
	StatusCallbackMethod string
	Timeout              string
	MaxAttempts          string
	SecurityCode         string
	PostalCode           string
	MinPostalCodeLength  string
	PaymentConnector     string
	PaymentMethod        string
	TokenType            string
	ChargeAmount         string
	Currency             string
	Description          string
	ValidCardTypes       string
	Language             string
	InnerElements        []Element
	OptionalAttributes   map[string]string
}

func (m VoicePay) GetName() string {
	return "Pay"
}

func (m VoicePay) GetText() string {
	return ""
}

func (m VoicePay) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Input":                m.Input,
		"Action":               m.Action,
		"BankAccountType":      m.BankAccountType,
		"StatusCallback":       m.StatusCallback,
		"StatusCallbackMethod": m.StatusCallbackMethod,
		"Timeout":              m.Timeout,
		"MaxAttempts":          m.MaxAttempts,
		"SecurityCode":         m.SecurityCode,
		"PostalCode":           m.PostalCode,
		"MinPostalCodeLength":  m.MinPostalCodeLength,
		"PaymentConnector":     m.PaymentConnector,
		"PaymentMethod":        m.PaymentMethod,
		"TokenType":            m.TokenType,
		"ChargeAmount":         m.ChargeAmount,
		"Currency":             m.Currency,
		"Description":          m.Description,
		"ValidCardTypes":       m.ValidCardTypes,
		"Language":             m.Language,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoicePay) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceSms <Sms> TwiML Noun
type VoiceSms struct {
	// message: Message body
	// to: Number to send message to
	// from: Number to send message from
	// action: Action URL
	// method: Action URL method
	// status_callback: Status callback URL
	// OptionalAttributes: additional attributes
	Message            string
	To                 string
	From               string
	Action             string
	Method             string
	StatusCallback     string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceSms) GetName() string {
	return "Sms"
}

func (m VoiceSms) GetText() string {
	return m.Message
}

func (m VoiceSms) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"To":             m.To,
		"From":           m.From,
		"Action":         m.Action,
		"Method":         m.Method,
		"StatusCallback": m.StatusCallback,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceSms) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceReject <Reject> TwiML Verb
type VoiceReject struct {
	// reason: Rejection reason
	// OptionalAttributes: additional attributes
	Reason             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceReject) GetName() string {
	return "Reject"
}

func (m VoiceReject) GetText() string {
	return ""
}

func (m VoiceReject) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Reason": m.Reason,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceReject) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceRedirect <Redirect> TwiML Verb
type VoiceRedirect struct {
	// url: Redirect URL
	// method: Redirect URL method
	// OptionalAttributes: additional attributes
	Url                string
	Method             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceRedirect) GetName() string {
	return "Redirect"
}

func (m VoiceRedirect) GetText() string {
	return m.Url
}

func (m VoiceRedirect) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Method": m.Method,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceRedirect) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceRecord <Record> TwiML Verb
type VoiceRecord struct {
	// action: Action URL
	// method: Action URL method
	// timeout: Timeout to begin recording
	// finish_on_key: Finish recording on key
	// max_length: Max time to record in seconds
	// play_beep: Play beep
	// trim: Trim the recording
	// recording_status_callback: Status callback URL
	// recording_status_callback_method: Status callback URL method
	// recording_status_callback_event: Recording status callback events
	// transcribe: Transcribe the recording
	// transcribe_callback: Transcribe callback URL
	// OptionalAttributes: additional attributes
	Action                        string
	Method                        string
	Timeout                       string
	FinishOnKey                   string
	MaxLength                     string
	PlayBeep                      string
	Trim                          string
	RecordingStatusCallback       string
	RecordingStatusCallbackMethod string
	RecordingStatusCallbackEvent  string
	Transcribe                    string
	TranscribeCallback            string
	InnerElements                 []Element
	OptionalAttributes            map[string]string
}

func (m VoiceRecord) GetName() string {
	return "Record"
}

func (m VoiceRecord) GetText() string {
	return ""
}

func (m VoiceRecord) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Action":                        m.Action,
		"Method":                        m.Method,
		"Timeout":                       m.Timeout,
		"FinishOnKey":                   m.FinishOnKey,
		"MaxLength":                     m.MaxLength,
		"PlayBeep":                      m.PlayBeep,
		"Trim":                          m.Trim,
		"RecordingStatusCallback":       m.RecordingStatusCallback,
		"RecordingStatusCallbackMethod": m.RecordingStatusCallbackMethod,
		"RecordingStatusCallbackEvent":  m.RecordingStatusCallbackEvent,
		"Transcribe":                    m.Transcribe,
		"TranscribeCallback":            m.TranscribeCallback,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceRecord) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceQueue <Queue> TwiML Noun
type VoiceQueue struct {
	// name: Queue name
	// url: Action URL
	// method: Action URL method
	// reservation_sid: TaskRouter Reservation SID
	// post_work_activity_sid: TaskRouter Activity SID
	// OptionalAttributes: additional attributes
	Name                string
	Url                 string
	Method              string
	ReservationSid      string
	PostWorkActivitySid string
	InnerElements       []Element
	OptionalAttributes  map[string]string
}

func (m VoiceQueue) GetName() string {
	return "Queue"
}

func (m VoiceQueue) GetText() string {
	return m.Name
}

func (m VoiceQueue) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Url":                 m.Url,
		"Method":              m.Method,
		"ReservationSid":      m.ReservationSid,
		"PostWorkActivitySid": m.PostWorkActivitySid,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceQueue) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceLeave <Leave> TwiML Verb
type VoiceLeave struct {
	// OptionalAttributes: additional attributes
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceLeave) GetName() string {
	return "Leave"
}

func (m VoiceLeave) GetText() string {
	return ""
}

func (m VoiceLeave) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceLeave) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceHangup <Hangup> TwiML Verb
type VoiceHangup struct {
	// OptionalAttributes: additional attributes
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceHangup) GetName() string {
	return "Hangup"
}

func (m VoiceHangup) GetText() string {
	return ""
}

func (m VoiceHangup) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceHangup) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceGather <Gather> TwiML Verb
type VoiceGather struct {
	// input: Input type Twilio should accept
	// action: Action URL
	// method: Action URL method
	// timeout: Time to wait to gather input
	// speech_timeout: Time to wait to gather speech input and it should be either auto or a positive integer.
	// max_speech_time: Max allowed time for speech input
	// profanity_filter: Profanity Filter on speech
	// finish_on_key: Finish gather on key
	// num_digits: Number of digits to collect
	// partial_result_callback: Partial result callback URL
	// partial_result_callback_method: Partial result callback URL method
	// language: Language to use
	// hints: Speech recognition hints
	// barge_in: Stop playing media upon speech
	// debug: Allow debug for gather
	// action_on_empty_result: Force webhook to the action URL event if there is no input
	// speech_model: Specify the model that is best suited for your use case
	// enhanced: Use enhanced speech model
	// OptionalAttributes: additional attributes
	Input                       string
	Action                      string
	Method                      string
	Timeout                     string
	SpeechTimeout               string
	MaxSpeechTime               string
	ProfanityFilter             string
	FinishOnKey                 string
	NumDigits                   string
	PartialResultCallback       string
	PartialResultCallbackMethod string
	Language                    string
	Hints                       string
	BargeIn                     string
	Debug                       string
	ActionOnEmptyResult         string
	SpeechModel                 string
	Enhanced                    string
	InnerElements               []Element
	OptionalAttributes          map[string]string
}

func (m VoiceGather) GetName() string {
	return "Gather"
}

func (m VoiceGather) GetText() string {
	return ""
}

func (m VoiceGather) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Input":                       m.Input,
		"Action":                      m.Action,
		"Method":                      m.Method,
		"Timeout":                     m.Timeout,
		"SpeechTimeout":               m.SpeechTimeout,
		"MaxSpeechTime":               m.MaxSpeechTime,
		"ProfanityFilter":             m.ProfanityFilter,
		"FinishOnKey":                 m.FinishOnKey,
		"NumDigits":                   m.NumDigits,
		"PartialResultCallback":       m.PartialResultCallback,
		"PartialResultCallbackMethod": m.PartialResultCallbackMethod,
		"Language":                    m.Language,
		"Hints":                       m.Hints,
		"BargeIn":                     m.BargeIn,
		"Debug":                       m.Debug,
		"ActionOnEmptyResult":         m.ActionOnEmptyResult,
		"SpeechModel":                 m.SpeechModel,
		"Enhanced":                    m.Enhanced,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceGather) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceEnqueue <Enqueue> TwiML Noun
type VoiceEnqueue struct {
	// name: Friendly name
	// action: Action URL
	// max_queue_size: Maximum size of queue
	// method: Action URL method
	// wait_url: Wait URL
	// wait_url_method: Wait URL method
	// workflow_sid: TaskRouter Workflow SID
	// OptionalAttributes: additional attributes
	Name               string
	Action             string
	MaxQueueSize       string
	Method             string
	WaitUrl            string
	WaitUrlMethod      string
	WorkflowSid        string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceEnqueue) GetName() string {
	return "Enqueue"
}

func (m VoiceEnqueue) GetText() string {
	return m.Name
}

func (m VoiceEnqueue) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Action":        m.Action,
		"MaxQueueSize":  m.MaxQueueSize,
		"Method":        m.Method,
		"WaitUrl":       m.WaitUrl,
		"WaitUrlMethod": m.WaitUrlMethod,
		"WorkflowSid":   m.WorkflowSid,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceEnqueue) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceTask <Task> TwiML Noun
type VoiceTask struct {
	// body: TaskRouter task attributes
	// priority: Task priority
	// timeout: Timeout associated with task
	// OptionalAttributes: additional attributes
	Body               string
	Priority           string
	Timeout            string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceTask) GetName() string {
	return "Task"
}

func (m VoiceTask) GetText() string {
	return m.Body
}

func (m VoiceTask) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Priority": m.Priority,
		"Timeout":  m.Timeout,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceTask) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceEcho <Echo> TwiML Verb
type VoiceEcho struct {
	// OptionalAttributes: additional attributes
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceEcho) GetName() string {
	return "Echo"
}

func (m VoiceEcho) GetText() string {
	return ""
}

func (m VoiceEcho) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceEcho) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceDial <Dial> TwiML Verb
type VoiceDial struct {
	// number: Phone number to dial
	// action: Action URL
	// method: Action URL method
	// timeout: Time to wait for answer
	// hangup_on_star: Hangup call on star press
	// time_limit: Max time length
	// caller_id: Caller ID to display
	// record: Record the call
	// trim: Trim the recording
	// recording_status_callback: Recording status callback URL
	// recording_status_callback_method: Recording status callback URL method
	// recording_status_callback_event: Recording status callback events
	// answer_on_bridge: Preserve the ringing behavior of the inbound call until the Dialed call picks up
	// ring_tone: Ringtone allows you to override the ringback tone that Twilio will play back to the caller while executing the Dial
	// recording_track: To indicate which audio track should be recorded
	// sequential: Used to determine if child TwiML nouns should be dialed in order, one after the other (sequential) or dial all at once (parallel). Default is false, parallel
	// refer_url: Webhook that will receive future SIP REFER requests
	// refer_method: The HTTP method to use for the refer Webhook
	// OptionalAttributes: additional attributes
	Number                        string
	Action                        string
	Method                        string
	Timeout                       string
	HangupOnStar                  string
	TimeLimit                     string
	CallerId                      string
	Record                        string
	Trim                          string
	RecordingStatusCallback       string
	RecordingStatusCallbackMethod string
	RecordingStatusCallbackEvent  string
	AnswerOnBridge                string
	RingTone                      string
	RecordingTrack                string
	Sequential                    string
	ReferUrl                      string
	ReferMethod                   string
	InnerElements                 []Element
	OptionalAttributes            map[string]string
}

func (m VoiceDial) GetName() string {
	return "Dial"
}

func (m VoiceDial) GetText() string {
	return m.Number
}

func (m VoiceDial) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Action":                        m.Action,
		"Method":                        m.Method,
		"Timeout":                       m.Timeout,
		"HangupOnStar":                  m.HangupOnStar,
		"TimeLimit":                     m.TimeLimit,
		"CallerId":                      m.CallerId,
		"Record":                        m.Record,
		"Trim":                          m.Trim,
		"RecordingStatusCallback":       m.RecordingStatusCallback,
		"RecordingStatusCallbackMethod": m.RecordingStatusCallbackMethod,
		"RecordingStatusCallbackEvent":  m.RecordingStatusCallbackEvent,
		"AnswerOnBridge":                m.AnswerOnBridge,
		"RingTone":                      m.RingTone,
		"RecordingTrack":                m.RecordingTrack,
		"Sequential":                    m.Sequential,
		"ReferUrl":                      m.ReferUrl,
		"ReferMethod":                   m.ReferMethod,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceDial) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceApplication <Application> TwiML Noun
type VoiceApplication struct {
	// application_sid: Application sid
	// url: TwiML URL
	// method: TwiML URL Method
	// status_callback_event: Events to trigger status callback
	// status_callback: Status Callback URL
	// status_callback_method: Status Callback URL Method
	// customer_id: Identity of the customer calling application
	// copy_parent_to: Copy parent call To field to called application side, otherwise use the application sid as To field
	// OptionalAttributes: additional attributes
	ApplicationSid       string
	Url                  string
	Method               string
	StatusCallbackEvent  string
	StatusCallback       string
	StatusCallbackMethod string
	CustomerId           string
	CopyParentTo         string
	InnerElements        []Element
	OptionalAttributes   map[string]string
}

func (m VoiceApplication) GetName() string {
	return "Application"
}

func (m VoiceApplication) GetText() string {
	return m.ApplicationSid
}

func (m VoiceApplication) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Url":                  m.Url,
		"Method":               m.Method,
		"StatusCallbackEvent":  m.StatusCallbackEvent,
		"StatusCallback":       m.StatusCallback,
		"StatusCallbackMethod": m.StatusCallbackMethod,
		"CustomerId":           m.CustomerId,
		"CopyParentTo":         m.CopyParentTo,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceApplication) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceApplicationSid <ApplicationSid> TwiML Noun
type VoiceApplicationSid struct {
	// sid: Application sid to dial
	// OptionalAttributes: additional attributes
	Sid                string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceApplicationSid) GetName() string {
	return "ApplicationSid"
}

func (m VoiceApplicationSid) GetText() string {
	return m.Sid
}

func (m VoiceApplicationSid) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceApplicationSid) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceSip <Sip> TwiML Noun
type VoiceSip struct {
	// sip_url: SIP URL
	// username: SIP Username
	// password: SIP Password
	// url: Action URL
	// method: Action URL method
	// status_callback_event: Status callback events
	// status_callback: Status callback URL
	// status_callback_method: Status callback URL method
	// machine_detection: Enable machine detection or end of greeting detection
	// amd_status_callback_method: HTTP Method to use with amd_status_callback
	// amd_status_callback: The URL we should call to send amd status information to your application
	// machine_detection_timeout: Number of seconds to wait for machine detection
	// machine_detection_speech_threshold: Number of milliseconds for measuring stick for the length of the speech activity
	// machine_detection_speech_end_threshold: Number of milliseconds of silence after speech activity
	// machine_detection_silence_timeout: Number of milliseconds of initial silence
	// OptionalAttributes: additional attributes
	SipUrl                             string
	Username                           string
	Password                           string
	Url                                string
	Method                             string
	StatusCallbackEvent                string
	StatusCallback                     string
	StatusCallbackMethod               string
	MachineDetection                   string
	AmdStatusCallbackMethod            string
	AmdStatusCallback                  string
	MachineDetectionTimeout            string
	MachineDetectionSpeechThreshold    string
	MachineDetectionSpeechEndThreshold string
	MachineDetectionSilenceTimeout     string
	InnerElements                      []Element
	OptionalAttributes                 map[string]string
}

func (m VoiceSip) GetName() string {
	return "Sip"
}

func (m VoiceSip) GetText() string {
	return m.SipUrl
}

func (m VoiceSip) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Username":                           m.Username,
		"Password":                           m.Password,
		"Url":                                m.Url,
		"Method":                             m.Method,
		"StatusCallbackEvent":                m.StatusCallbackEvent,
		"StatusCallback":                     m.StatusCallback,
		"StatusCallbackMethod":               m.StatusCallbackMethod,
		"MachineDetection":                   m.MachineDetection,
		"AmdStatusCallbackMethod":            m.AmdStatusCallbackMethod,
		"AmdStatusCallback":                  m.AmdStatusCallback,
		"MachineDetectionTimeout":            m.MachineDetectionTimeout,
		"MachineDetectionSpeechThreshold":    m.MachineDetectionSpeechThreshold,
		"MachineDetectionSpeechEndThreshold": m.MachineDetectionSpeechEndThreshold,
		"MachineDetectionSilenceTimeout":     m.MachineDetectionSilenceTimeout,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceSip) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceSim <Sim> TwiML Noun
type VoiceSim struct {
	// sim_sid: SIM SID
	// OptionalAttributes: additional attributes
	SimSid             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceSim) GetName() string {
	return "Sim"
}

func (m VoiceSim) GetText() string {
	return m.SimSid
}

func (m VoiceSim) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceSim) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceNumber <Number> TwiML Noun
type VoiceNumber struct {
	// phone_number: Phone Number to dial
	// send_digits: DTMF tones to play when the call is answered
	// url: TwiML URL
	// method: TwiML URL method
	// status_callback_event: Events to call status callback
	// status_callback: Status callback URL
	// status_callback_method: Status callback URL method
	// byoc: BYOC trunk SID (Beta)
	// machine_detection: Enable machine detection or end of greeting detection
	// amd_status_callback_method: HTTP Method to use with amd_status_callback
	// amd_status_callback: The URL we should call to send amd status information to your application
	// machine_detection_timeout: Number of seconds to wait for machine detection
	// machine_detection_speech_threshold: Number of milliseconds for measuring stick for the length of the speech activity
	// machine_detection_speech_end_threshold: Number of milliseconds of silence after speech activity
	// machine_detection_silence_timeout: Number of milliseconds of initial silence
	// OptionalAttributes: additional attributes
	PhoneNumber                        string
	SendDigits                         string
	Url                                string
	Method                             string
	StatusCallbackEvent                string
	StatusCallback                     string
	StatusCallbackMethod               string
	Byoc                               string
	MachineDetection                   string
	AmdStatusCallbackMethod            string
	AmdStatusCallback                  string
	MachineDetectionTimeout            string
	MachineDetectionSpeechThreshold    string
	MachineDetectionSpeechEndThreshold string
	MachineDetectionSilenceTimeout     string
	InnerElements                      []Element
	OptionalAttributes                 map[string]string
}

func (m VoiceNumber) GetName() string {
	return "Number"
}

func (m VoiceNumber) GetText() string {
	return m.PhoneNumber
}

func (m VoiceNumber) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"SendDigits":                         m.SendDigits,
		"Url":                                m.Url,
		"Method":                             m.Method,
		"StatusCallbackEvent":                m.StatusCallbackEvent,
		"StatusCallback":                     m.StatusCallback,
		"StatusCallbackMethod":               m.StatusCallbackMethod,
		"Byoc":                               m.Byoc,
		"MachineDetection":                   m.MachineDetection,
		"AmdStatusCallbackMethod":            m.AmdStatusCallbackMethod,
		"AmdStatusCallback":                  m.AmdStatusCallback,
		"MachineDetectionTimeout":            m.MachineDetectionTimeout,
		"MachineDetectionSpeechThreshold":    m.MachineDetectionSpeechThreshold,
		"MachineDetectionSpeechEndThreshold": m.MachineDetectionSpeechEndThreshold,
		"MachineDetectionSilenceTimeout":     m.MachineDetectionSilenceTimeout,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceNumber) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceConference <Conference> TwiML Noun
type VoiceConference struct {
	// name: Conference name
	// muted: Join the conference muted
	// beep: Play beep when joining
	// start_conference_on_enter: Start the conference on enter
	// end_conference_on_exit: End the conferenceon exit
	// wait_url: Wait URL
	// wait_method: Wait URL method
	// max_participants: Maximum number of participants
	// record: Record the conference
	// region: Conference region
	// coach: Call coach
	// trim: Trim the conference recording
	// status_callback_event: Events to call status callback URL
	// status_callback: Status callback URL
	// status_callback_method: Status callback URL method
	// recording_status_callback: Recording status callback URL
	// recording_status_callback_method: Recording status callback URL method
	// recording_status_callback_event: Recording status callback events
	// event_callback_url: Event callback URL
	// jitter_buffer_size: Size of jitter buffer for participant
	// participant_label: A label for participant
	// OptionalAttributes: additional attributes
	Name                          string
	Muted                         string
	Beep                          string
	StartConferenceOnEnter        string
	EndConferenceOnExit           string
	WaitUrl                       string
	WaitMethod                    string
	MaxParticipants               string
	Record                        string
	Region                        string
	Coach                         string
	Trim                          string
	StatusCallbackEvent           string
	StatusCallback                string
	StatusCallbackMethod          string
	RecordingStatusCallback       string
	RecordingStatusCallbackMethod string
	RecordingStatusCallbackEvent  string
	EventCallbackUrl              string
	JitterBufferSize              string
	ParticipantLabel              string
	InnerElements                 []Element
	OptionalAttributes            map[string]string
}

func (m VoiceConference) GetName() string {
	return "Conference"
}

func (m VoiceConference) GetText() string {
	return m.Name
}

func (m VoiceConference) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Muted":                         m.Muted,
		"Beep":                          m.Beep,
		"StartConferenceOnEnter":        m.StartConferenceOnEnter,
		"EndConferenceOnExit":           m.EndConferenceOnExit,
		"WaitUrl":                       m.WaitUrl,
		"WaitMethod":                    m.WaitMethod,
		"MaxParticipants":               m.MaxParticipants,
		"Record":                        m.Record,
		"Region":                        m.Region,
		"Coach":                         m.Coach,
		"Trim":                          m.Trim,
		"StatusCallbackEvent":           m.StatusCallbackEvent,
		"StatusCallback":                m.StatusCallback,
		"StatusCallbackMethod":          m.StatusCallbackMethod,
		"RecordingStatusCallback":       m.RecordingStatusCallback,
		"RecordingStatusCallbackMethod": m.RecordingStatusCallbackMethod,
		"RecordingStatusCallbackEvent":  m.RecordingStatusCallbackEvent,
		"EventCallbackUrl":              m.EventCallbackUrl,
		"JitterBufferSize":              m.JitterBufferSize,
		"ParticipantLabel":              m.ParticipantLabel,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceConference) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceClient <Client> TwiML Noun
type VoiceClient struct {
	// identity: Client identity
	// url: Client URL
	// method: Client URL Method
	// status_callback_event: Events to trigger status callback
	// status_callback: Status Callback URL
	// status_callback_method: Status Callback URL Method
	// OptionalAttributes: additional attributes
	Identity             string
	Url                  string
	Method               string
	StatusCallbackEvent  string
	StatusCallback       string
	StatusCallbackMethod string
	InnerElements        []Element
	OptionalAttributes   map[string]string
}

func (m VoiceClient) GetName() string {
	return "Client"
}

func (m VoiceClient) GetText() string {
	return m.Identity
}

func (m VoiceClient) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Url":                  m.Url,
		"Method":               m.Method,
		"StatusCallbackEvent":  m.StatusCallbackEvent,
		"StatusCallback":       m.StatusCallback,
		"StatusCallbackMethod": m.StatusCallbackMethod,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceClient) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceIdentity <Identity> TwiML Noun
type VoiceIdentity struct {
	// client_identity: Identity of the client to dial
	// OptionalAttributes: additional attributes
	ClientIdentity     string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceIdentity) GetName() string {
	return "Identity"
}

func (m VoiceIdentity) GetText() string {
	return m.ClientIdentity
}

func (m VoiceIdentity) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceIdentity) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceConnect <Connect> TwiML Verb
type VoiceConnect struct {
	// action: Action URL
	// method: Action URL method
	// OptionalAttributes: additional attributes
	Action             string
	Method             string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceConnect) GetName() string {
	return "Connect"
}

func (m VoiceConnect) GetText() string {
	return ""
}

func (m VoiceConnect) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Action": m.Action,
		"Method": m.Method,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceConnect) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceConversation <Conversation> TwiML Noun
type VoiceConversation struct {
	// service_instance_sid: Service instance Sid
	// inbound_autocreation: Inbound autocreation
	// routing_assignment_timeout: Routing assignment timeout
	// inbound_timeout: Inbound timeout
	// url: TwiML URL
	// method: TwiML URL method
	// record: Record
	// trim: Trim
	// recording_status_callback: Recording status callback URL
	// recording_status_callback_method: Recording status callback URL method
	// recording_status_callback_event: Recording status callback events
	// status_callback: Status callback URL
	// status_callback_method: Status callback URL method
	// status_callback_event: Events to call status callback URL
	// OptionalAttributes: additional attributes
	ServiceInstanceSid            string
	InboundAutocreation           string
	RoutingAssignmentTimeout      string
	InboundTimeout                string
	Url                           string
	Method                        string
	Record                        string
	Trim                          string
	RecordingStatusCallback       string
	RecordingStatusCallbackMethod string
	RecordingStatusCallbackEvent  string
	StatusCallback                string
	StatusCallbackMethod          string
	StatusCallbackEvent           string
	InnerElements                 []Element
	OptionalAttributes            map[string]string
}

func (m VoiceConversation) GetName() string {
	return "Conversation"
}

func (m VoiceConversation) GetText() string {
	return ""
}

func (m VoiceConversation) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"ServiceInstanceSid":            m.ServiceInstanceSid,
		"InboundAutocreation":           m.InboundAutocreation,
		"RoutingAssignmentTimeout":      m.RoutingAssignmentTimeout,
		"InboundTimeout":                m.InboundTimeout,
		"Url":                           m.Url,
		"Method":                        m.Method,
		"Record":                        m.Record,
		"Trim":                          m.Trim,
		"RecordingStatusCallback":       m.RecordingStatusCallback,
		"RecordingStatusCallbackMethod": m.RecordingStatusCallbackMethod,
		"RecordingStatusCallbackEvent":  m.RecordingStatusCallbackEvent,
		"StatusCallback":                m.StatusCallback,
		"StatusCallbackMethod":          m.StatusCallbackMethod,
		"StatusCallbackEvent":           m.StatusCallbackEvent,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceConversation) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceVirtualAgent <VirtualAgent> TwiML Noun
type VoiceVirtualAgent struct {
	// connector_name: Defines the conversation profile Dialogflow needs to use
	// language: Language to be used by Dialogflow to transcribe speech
	// sentiment_analysis: Whether sentiment analysis needs to be enabled or not
	// status_callback: URL to post status callbacks from Twilio
	// status_callback_method: HTTP method to use when requesting the status callback URL
	// OptionalAttributes: additional attributes
	ConnectorName        string
	Language             string
	SentimentAnalysis    string
	StatusCallback       string
	StatusCallbackMethod string
	InnerElements        []Element
	OptionalAttributes   map[string]string
}

func (m VoiceVirtualAgent) GetName() string {
	return "VirtualAgent"
}

func (m VoiceVirtualAgent) GetText() string {
	return ""
}

func (m VoiceVirtualAgent) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"ConnectorName":        m.ConnectorName,
		"Language":             m.Language,
		"SentimentAnalysis":    m.SentimentAnalysis,
		"StatusCallback":       m.StatusCallback,
		"StatusCallbackMethod": m.StatusCallbackMethod,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceVirtualAgent) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceConfig <Config> TwiML Noun
type VoiceConfig struct {
	// name: The name of the custom config
	// value: The value of the custom config
	// OptionalAttributes: additional attributes
	Name               string
	Value              string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceConfig) GetName() string {
	return "Config"
}

func (m VoiceConfig) GetText() string {
	return ""
}

func (m VoiceConfig) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"Name":  m.Name,
		"Value": m.Value,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceConfig) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceAutopilot <Autopilot> TwiML Noun
type VoiceAutopilot struct {
	// name: Autopilot assistant sid or unique name
	// OptionalAttributes: additional attributes
	Name               string
	InnerElements      []Element
	OptionalAttributes map[string]string
}

func (m VoiceAutopilot) GetName() string {
	return "Autopilot"
}

func (m VoiceAutopilot) GetText() string {
	return m.Name
}

func (m VoiceAutopilot) GetAttr() (map[string]string, map[string]string) {
	return m.OptionalAttributes, nil
}

func (m VoiceAutopilot) GetInnerElements() []Element {
	return m.InnerElements
}

// VoiceRoom <Room> TwiML Noun
type VoiceRoom struct {
	// name: Room name
	// participant_identity: Participant identity when connecting to the Room
	// OptionalAttributes: additional attributes
	Name                string
	ParticipantIdentity string
	InnerElements       []Element
	OptionalAttributes  map[string]string
}

func (m VoiceRoom) GetName() string {
	return "Room"
}

func (m VoiceRoom) GetText() string {
	return m.Name
}

func (m VoiceRoom) GetAttr() (map[string]string, map[string]string) {
	paramsAttr := map[string]string{
		"ParticipantIdentity": m.ParticipantIdentity,
	}
	return m.OptionalAttributes, paramsAttr
}

func (m VoiceRoom) GetInnerElements() []Element {
	return m.InnerElements
}
