/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.0.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package twilio

import (
	"encoding/json"
	"fmt"
    "github.com/twilio/twilio-go/client"
    "strings"
)

type V1ApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewV1ApiService(client *twilio.Client) *V1ApiService {
    return &V1ApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}

/*
V1FlowsCreate Method for V1FlowsCreate
Retrieve a specific Flow.
 * @param sid The SID of the Flow resource to fetch.
@return StudioV1Flow
*/
func (c *V1ApiService) V1FlowsCreate(sid string) (*StudioV1Flow, error) {
    path := "/v1/Flows/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    resp, err := c.client.Get(c.baseURL+path, nil)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &StudioV1Flow{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
V1FlowsDelete Method for V1FlowsDelete
Delete a specific Flow.
 * @param sid The SID of the Flow resource to delete.
*/
func (c *V1ApiService) V1FlowsDelete(sid string) (error) {
    path := "/v1/Flows/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    resp, err := c.client.Delete(c.baseURL+path, nil)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// V1FlowsListParams Optional parameters for the method 'V1FlowsList'
type V1FlowsListParams struct {
    PageSize int32 `json:"PageSize,omitempty"`
}

/*
V1FlowsList Method for V1FlowsList
Retrieve a list of all Flows.
 * @param optional nil or *V1FlowsListOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse200
*/
func (c *V1ApiService) V1FlowsList(params *V1FlowsListParams) (*InlineResponse200, error) {
    path := "/v1/Flows"

    resp, err := c.client.Get(c.baseURL+path, params)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse200{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
