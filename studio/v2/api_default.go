/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.0.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
	"strings"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService{
		client:  client,
		baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
	}
}

// FlowsCreateParams Optional parameters for the method 'FlowsCreate'
type FlowsCreateParams struct {
	CommitMessage *string                 `json:"CommitMessage,omitempty"`
	Definition    *map[string]interface{} `json:"Definition,omitempty"`
	FriendlyName  *string                 `json:"FriendlyName,omitempty"`
	Status        *string                 `json:"Status,omitempty"`
}

/*
FlowsCreate Method for FlowsCreate
Create a Flow.
 * @param optional nil or *FlowsCreateOpts - Optional Parameters:
 * @param "CommitMessage" (string) - Description on change made in the revision.
 * @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
 * @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
 * @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
@return StudioV2Flow
*/
func (c *DefaultApiService) FlowsCreate(params *FlowsCreateParams) (*StudioV2Flow, error) {
	path := "/v2/Flows"

	data := url.Values{}
	headers := 0

	if params != nil && params.CommitMessage != nil {
		data.Set("CommitMessage", *params.CommitMessage)
	}
	if params != nil && params.Definition != nil {
		v, err := json.Marshal(params.Definition)

		if err != nil {
			return nil, err
		}

		data.Set("Definition", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FlowsDelete Method for FlowsDelete
Delete a specific Flow.
 * @param sid The SID of the Flow resource to delete.
*/
func (c *DefaultApiService) FlowsDelete(sid string) error {
	path := "/v2/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// FlowsListParams Optional parameters for the method 'FlowsList'
type FlowsListParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
FlowsList Method for FlowsList
Retrieve a list of all Flows.
 * @param optional nil or *FlowsListOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse200
*/
func (c *DefaultApiService) FlowsList(params *FlowsListParams) (*InlineResponse200, error) {
	path := "/v2/Flows"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &InlineResponse200{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FlowsRead Method for FlowsRead
Retrieve a specific Flow.
 * @param sid The SID of the Flow resource to fetch.
@return StudioV2Flow
*/
func (c *DefaultApiService) FlowsRead(sid string) (*StudioV2Flow, error) {
	path := "/v2/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FlowsUpdateParams Optional parameters for the method 'FlowsUpdate'
type FlowsUpdateParams struct {
	CommitMessage *string                 `json:"CommitMessage,omitempty"`
	Definition    *map[string]interface{} `json:"Definition,omitempty"`
	FriendlyName  *string                 `json:"FriendlyName,omitempty"`
	Status        *string                 `json:"Status,omitempty"`
}

/*
FlowsUpdate Method for FlowsUpdate
Update a Flow.
 * @param sid The SID of the Flow resource to fetch.
 * @param optional nil or *FlowsUpdateOpts - Optional Parameters:
 * @param "CommitMessage" (string) - Description on change made in the revision.
 * @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
 * @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
 * @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
@return StudioV2Flow
*/
func (c *DefaultApiService) FlowsUpdate(sid string, params *FlowsUpdateParams) (*StudioV2Flow, error) {
	path := "/v2/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.CommitMessage != nil {
		data.Set("CommitMessage", *params.CommitMessage)
	}
	if params != nil && params.Definition != nil {
		v, err := json.Marshal(params.Definition)

		if err != nil {
			return nil, err
		}

		data.Set("Definition", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
