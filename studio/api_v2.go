/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.0.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package twilio

import (
	"encoding/json"
	"fmt"
    "github.com/twilio/twilio-go/client"
    "strings"
)

type V2ApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewV2ApiService(client *twilio.Client) *V2ApiService {
    return &V2ApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// V2FlowsCreateParams Optional parameters for the method 'V2FlowsCreate'
type V2FlowsCreateParams struct {
    CommitMessage string `json:"CommitMessage,omitempty"`
    Definition map[string]interface{} `json:"Definition,omitempty"`
    FriendlyName string `json:"FriendlyName,omitempty"`
    Status string `json:"Status,omitempty"`
}

/*
V2FlowsCreate Method for V2FlowsCreate
Create a Flow.
 * @param optional nil or *V2FlowsCreateOpts - Optional Parameters:
 * @param "CommitMessage" (string) - Description on change made in the revision.
 * @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
 * @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
 * @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
@return StudioV2Flow
*/
func (c *V2ApiService) V2FlowsCreate(params *V2FlowsCreateParams) (*StudioV2Flow, error) {
    path := "/v2/Flows"

    resp, err := c.client.Post(c.baseURL+path, params)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &StudioV2Flow{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
V2FlowsDelete Method for V2FlowsDelete
Delete a specific Flow.
 * @param sid The SID of the Flow resource to delete.
*/
func (c *V2ApiService) V2FlowsDelete(sid string) (error) {
    path := "/v2/Flows/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    resp, err := c.client.Delete(c.baseURL+path, nil)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// V2FlowsListParams Optional parameters for the method 'V2FlowsList'
type V2FlowsListParams struct {
    PageSize int32 `json:"PageSize,omitempty"`
}

/*
V2FlowsList Method for V2FlowsList
Retrieve a list of all Flows.
 * @param optional nil or *V2FlowsListOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2001
*/
func (c *V2ApiService) V2FlowsList(params *V2FlowsListParams) (*InlineResponse2001, error) {
    path := "/v2/Flows"

    resp, err := c.client.Get(c.baseURL+path, params)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &InlineResponse2001{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
V2FlowsRead Method for V2FlowsRead
Retrieve a specific Flow.
 * @param sid The SID of the Flow resource to fetch.
@return StudioV2Flow
*/
func (c *V2ApiService) V2FlowsRead(sid string) (*StudioV2Flow, error) {
    path := "/v2/Flows/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    resp, err := c.client.Get(c.baseURL+path, nil)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &StudioV2Flow{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// V2FlowsUpdateParams Optional parameters for the method 'V2FlowsUpdate'
type V2FlowsUpdateParams struct {
    CommitMessage string `json:"CommitMessage,omitempty"`
    Definition map[string]interface{} `json:"Definition,omitempty"`
    FriendlyName string `json:"FriendlyName,omitempty"`
    Status string `json:"Status,omitempty"`
}

/*
V2FlowsUpdate Method for V2FlowsUpdate
Update a Flow.
 * @param sid The SID of the Flow resource to fetch.
 * @param optional nil or *V2FlowsUpdateOpts - Optional Parameters:
 * @param "CommitMessage" (string) - Description on change made in the revision.
 * @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
 * @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
 * @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
@return StudioV2Flow
*/
func (c *V2ApiService) V2FlowsUpdate(sid string, params *V2FlowsUpdateParams) (*StudioV2Flow, error) {
    path := "/v2/Flows/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    resp, err := c.client.Post(c.baseURL+path, params)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &StudioV2Flow{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
