/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.15.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"

	twilio "github.com/twilio/twilio-go/client"
)

type DefaultApiService struct {
	baseURL string
	client  twilio.BaseClient
}

func NewDefaultApiService(client twilio.BaseClient) *DefaultApiService {
	return &DefaultApiService{
		client:  client,
		baseURL: "https://api.twilio.com",
	}
}

// CreateAccountParams Optional parameters for the method 'CreateAccount'
type CreateAccountParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

func (params *CreateAccountParams) SetFriendlyName(FriendlyName string) *CreateAccountParams {
	params.FriendlyName = &FriendlyName
	return params
}

// CreateAccount Method for CreateAccount
//
// Create a new Twilio Subaccount from the account making the request
//
// param: optional nil or *CreateAccountParams - Optional Parameters:
//
// param: "FriendlyName" (string) - A human readable description of the account to create, defaults to `SubAccount Created at {YYYY-MM-DD HH:MM meridian}`
//
// return: ApiV2010Account
func (c *DefaultApiService) CreateAccount(params *CreateAccountParams) (*ApiV2010Account, error) {
	path := "/2010-04-01/Accounts.json"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010Account{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateAddressParams Optional parameters for the method 'CreateAddress'
type CreateAddressParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	AutoCorrectAddress *bool   `json:"AutoCorrectAddress,omitempty"`
	City               *string `json:"City,omitempty"`
	CustomerName       *string `json:"CustomerName,omitempty"`
	EmergencyEnabled   *bool   `json:"EmergencyEnabled,omitempty"`
	FriendlyName       *string `json:"FriendlyName,omitempty"`
	IsoCountry         *string `json:"IsoCountry,omitempty"`
	PostalCode         *string `json:"PostalCode,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Street             *string `json:"Street,omitempty"`
}

func (params *CreateAddressParams) SetPathAccountSid(PathAccountSid string) *CreateAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateAddressParams) SetAutoCorrectAddress(AutoCorrectAddress bool) *CreateAddressParams {
	params.AutoCorrectAddress = &AutoCorrectAddress
	return params
}
func (params *CreateAddressParams) SetCity(City string) *CreateAddressParams {
	params.City = &City
	return params
}
func (params *CreateAddressParams) SetCustomerName(CustomerName string) *CreateAddressParams {
	params.CustomerName = &CustomerName
	return params
}
func (params *CreateAddressParams) SetEmergencyEnabled(EmergencyEnabled bool) *CreateAddressParams {
	params.EmergencyEnabled = &EmergencyEnabled
	return params
}
func (params *CreateAddressParams) SetFriendlyName(FriendlyName string) *CreateAddressParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateAddressParams) SetIsoCountry(IsoCountry string) *CreateAddressParams {
	params.IsoCountry = &IsoCountry
	return params
}
func (params *CreateAddressParams) SetPostalCode(PostalCode string) *CreateAddressParams {
	params.PostalCode = &PostalCode
	return params
}
func (params *CreateAddressParams) SetRegion(Region string) *CreateAddressParams {
	params.Region = &Region
	return params
}
func (params *CreateAddressParams) SetStreet(Street string) *CreateAddressParams {
	params.Street = &Street
	return params
}

// CreateAddress Method for CreateAddress
//
// param: optional nil or *CreateAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
//
// param: "AutoCorrectAddress" (bool) - Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
//
// param: "City" (string) - The city of the new address.
//
// param: "CustomerName" (string) - The name to associate with the new address.
//
// param: "EmergencyEnabled" (bool) - Whether to enable emergency calling on the new address. Can be: `true` or `false`.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new address. It can be up to 64 characters long.
//
// param: "IsoCountry" (string) - The ISO country code of the new address.
//
// param: "PostalCode" (string) - The postal code of the new address.
//
// param: "Region" (string) - The state or region of the new address.
//
// param: "Street" (string) - The number and street address of the new address.
//
// return: ApiV2010AccountAddress
func (c *DefaultApiService) CreateAddress(params *CreateAddressParams) (*ApiV2010AccountAddress, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Addresses.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AutoCorrectAddress != nil {
		data.Set("AutoCorrectAddress", fmt.Sprint(*params.AutoCorrectAddress))
	}
	if params != nil && params.City != nil {
		data.Set("City", *params.City)
	}
	if params != nil && params.CustomerName != nil {
		data.Set("CustomerName", *params.CustomerName)
	}
	if params != nil && params.EmergencyEnabled != nil {
		data.Set("EmergencyEnabled", fmt.Sprint(*params.EmergencyEnabled))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IsoCountry != nil {
		data.Set("IsoCountry", *params.IsoCountry)
	}
	if params != nil && params.PostalCode != nil {
		data.Set("PostalCode", *params.PostalCode)
	}
	if params != nil && params.Region != nil {
		data.Set("Region", *params.Region)
	}
	if params != nil && params.Street != nil {
		data.Set("Street", *params.Street)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountAddress{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateApplicationParams Optional parameters for the method 'CreateApplication'
type CreateApplicationParams struct {
	PathAccountSid        *string `json:"PathAccountSid,omitempty"`
	ApiVersion            *string `json:"ApiVersion,omitempty"`
	FriendlyName          *string `json:"FriendlyName,omitempty"`
	MessageStatusCallback *string `json:"MessageStatusCallback,omitempty"`
	SmsFallbackMethod     *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl        *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod             *string `json:"SmsMethod,omitempty"`
	SmsStatusCallback     *string `json:"SmsStatusCallback,omitempty"`
	SmsUrl                *string `json:"SmsUrl,omitempty"`
	StatusCallback        *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod  *string `json:"StatusCallbackMethod,omitempty"`
	VoiceCallerIdLookup   *bool   `json:"VoiceCallerIdLookup,omitempty"`
	VoiceFallbackMethod   *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl      *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod           *string `json:"VoiceMethod,omitempty"`
	VoiceUrl              *string `json:"VoiceUrl,omitempty"`
}

func (params *CreateApplicationParams) SetPathAccountSid(PathAccountSid string) *CreateApplicationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateApplicationParams) SetApiVersion(ApiVersion string) *CreateApplicationParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *CreateApplicationParams) SetFriendlyName(FriendlyName string) *CreateApplicationParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateApplicationParams) SetMessageStatusCallback(MessageStatusCallback string) *CreateApplicationParams {
	params.MessageStatusCallback = &MessageStatusCallback
	return params
}
func (params *CreateApplicationParams) SetSmsFallbackMethod(SmsFallbackMethod string) *CreateApplicationParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *CreateApplicationParams) SetSmsFallbackUrl(SmsFallbackUrl string) *CreateApplicationParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *CreateApplicationParams) SetSmsMethod(SmsMethod string) *CreateApplicationParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *CreateApplicationParams) SetSmsStatusCallback(SmsStatusCallback string) *CreateApplicationParams {
	params.SmsStatusCallback = &SmsStatusCallback
	return params
}
func (params *CreateApplicationParams) SetSmsUrl(SmsUrl string) *CreateApplicationParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *CreateApplicationParams) SetStatusCallback(StatusCallback string) *CreateApplicationParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateApplicationParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateApplicationParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateApplicationParams) SetVoiceCallerIdLookup(VoiceCallerIdLookup bool) *CreateApplicationParams {
	params.VoiceCallerIdLookup = &VoiceCallerIdLookup
	return params
}
func (params *CreateApplicationParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *CreateApplicationParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *CreateApplicationParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *CreateApplicationParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *CreateApplicationParams) SetVoiceMethod(VoiceMethod string) *CreateApplicationParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *CreateApplicationParams) SetVoiceUrl(VoiceUrl string) *CreateApplicationParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// CreateApplication Method for CreateApplication
//
// Create a new application within your account
//
// param: optional nil or *CreateApplicationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "ApiVersion" (string) - The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new application. It can be up to 64 characters long.
//
// param: "MessageStatusCallback" (string) - The URL we should call using a POST method to send message status information to your application.
//
// param: "SmsFallbackMethod" (string) - The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
//
// param: "SmsStatusCallback" (string) - The URL we should call using a POST method to send status information about SMS messages sent by the application.
//
// param: "SmsUrl" (string) - The URL we should call when the phone number receives an incoming SMS message.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
//
// param: "VoiceCallerIdLookup" (bool) - Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
//
// param: "VoiceMethod" (string) - The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
//
// param: "VoiceUrl" (string) - The URL we should call when the phone number assigned to this application receives a call.
//
// return: ApiV2010AccountApplication
func (c *DefaultApiService) CreateApplication(params *CreateApplicationParams) (*ApiV2010AccountApplication, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Applications.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MessageStatusCallback != nil {
		data.Set("MessageStatusCallback", *params.MessageStatusCallback)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsStatusCallback != nil {
		data.Set("SmsStatusCallback", *params.SmsStatusCallback)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.VoiceCallerIdLookup != nil {
		data.Set("VoiceCallerIdLookup", fmt.Sprint(*params.VoiceCallerIdLookup))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountApplication{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCallParams Optional parameters for the method 'CreateCall'
type CreateCallParams struct {
	PathAccountSid                     *string   `json:"PathAccountSid,omitempty"`
	ApplicationSid                     *string   `json:"ApplicationSid,omitempty"`
	AsyncAmd                           *string   `json:"AsyncAmd,omitempty"`
	AsyncAmdStatusCallback             *string   `json:"AsyncAmdStatusCallback,omitempty"`
	AsyncAmdStatusCallbackMethod       *string   `json:"AsyncAmdStatusCallbackMethod,omitempty"`
	Byoc                               *string   `json:"Byoc,omitempty"`
	CallReason                         *string   `json:"CallReason,omitempty"`
	CallToken                          *string   `json:"CallToken,omitempty"`
	CallerId                           *string   `json:"CallerId,omitempty"`
	FallbackMethod                     *string   `json:"FallbackMethod,omitempty"`
	FallbackUrl                        *string   `json:"FallbackUrl,omitempty"`
	From                               *string   `json:"From,omitempty"`
	MachineDetection                   *string   `json:"MachineDetection,omitempty"`
	MachineDetectionSilenceTimeout     *int32    `json:"MachineDetectionSilenceTimeout,omitempty"`
	MachineDetectionSpeechEndThreshold *int32    `json:"MachineDetectionSpeechEndThreshold,omitempty"`
	MachineDetectionSpeechThreshold    *int32    `json:"MachineDetectionSpeechThreshold,omitempty"`
	MachineDetectionTimeout            *int32    `json:"MachineDetectionTimeout,omitempty"`
	Method                             *string   `json:"Method,omitempty"`
	Record                             *bool     `json:"Record,omitempty"`
	RecordingChannels                  *string   `json:"RecordingChannels,omitempty"`
	RecordingStatusCallback            *string   `json:"RecordingStatusCallback,omitempty"`
	RecordingStatusCallbackEvent       *[]string `json:"RecordingStatusCallbackEvent,omitempty"`
	RecordingStatusCallbackMethod      *string   `json:"RecordingStatusCallbackMethod,omitempty"`
	RecordingTrack                     *string   `json:"RecordingTrack,omitempty"`
	SendDigits                         *string   `json:"SendDigits,omitempty"`
	SipAuthPassword                    *string   `json:"SipAuthPassword,omitempty"`
	SipAuthUsername                    *string   `json:"SipAuthUsername,omitempty"`
	StatusCallback                     *string   `json:"StatusCallback,omitempty"`
	StatusCallbackEvent                *[]string `json:"StatusCallbackEvent,omitempty"`
	StatusCallbackMethod               *string   `json:"StatusCallbackMethod,omitempty"`
	Timeout                            *int32    `json:"Timeout,omitempty"`
	To                                 *string   `json:"To,omitempty"`
	Trim                               *string   `json:"Trim,omitempty"`
	Twiml                              *string   `json:"Twiml,omitempty"`
	Url                                *string   `json:"Url,omitempty"`
}

func (params *CreateCallParams) SetPathAccountSid(PathAccountSid string) *CreateCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateCallParams) SetApplicationSid(ApplicationSid string) *CreateCallParams {
	params.ApplicationSid = &ApplicationSid
	return params
}
func (params *CreateCallParams) SetAsyncAmd(AsyncAmd string) *CreateCallParams {
	params.AsyncAmd = &AsyncAmd
	return params
}
func (params *CreateCallParams) SetAsyncAmdStatusCallback(AsyncAmdStatusCallback string) *CreateCallParams {
	params.AsyncAmdStatusCallback = &AsyncAmdStatusCallback
	return params
}
func (params *CreateCallParams) SetAsyncAmdStatusCallbackMethod(AsyncAmdStatusCallbackMethod string) *CreateCallParams {
	params.AsyncAmdStatusCallbackMethod = &AsyncAmdStatusCallbackMethod
	return params
}
func (params *CreateCallParams) SetByoc(Byoc string) *CreateCallParams {
	params.Byoc = &Byoc
	return params
}
func (params *CreateCallParams) SetCallReason(CallReason string) *CreateCallParams {
	params.CallReason = &CallReason
	return params
}
func (params *CreateCallParams) SetCallToken(CallToken string) *CreateCallParams {
	params.CallToken = &CallToken
	return params
}
func (params *CreateCallParams) SetCallerId(CallerId string) *CreateCallParams {
	params.CallerId = &CallerId
	return params
}
func (params *CreateCallParams) SetFallbackMethod(FallbackMethod string) *CreateCallParams {
	params.FallbackMethod = &FallbackMethod
	return params
}
func (params *CreateCallParams) SetFallbackUrl(FallbackUrl string) *CreateCallParams {
	params.FallbackUrl = &FallbackUrl
	return params
}
func (params *CreateCallParams) SetFrom(From string) *CreateCallParams {
	params.From = &From
	return params
}
func (params *CreateCallParams) SetMachineDetection(MachineDetection string) *CreateCallParams {
	params.MachineDetection = &MachineDetection
	return params
}
func (params *CreateCallParams) SetMachineDetectionSilenceTimeout(MachineDetectionSilenceTimeout int32) *CreateCallParams {
	params.MachineDetectionSilenceTimeout = &MachineDetectionSilenceTimeout
	return params
}
func (params *CreateCallParams) SetMachineDetectionSpeechEndThreshold(MachineDetectionSpeechEndThreshold int32) *CreateCallParams {
	params.MachineDetectionSpeechEndThreshold = &MachineDetectionSpeechEndThreshold
	return params
}
func (params *CreateCallParams) SetMachineDetectionSpeechThreshold(MachineDetectionSpeechThreshold int32) *CreateCallParams {
	params.MachineDetectionSpeechThreshold = &MachineDetectionSpeechThreshold
	return params
}
func (params *CreateCallParams) SetMachineDetectionTimeout(MachineDetectionTimeout int32) *CreateCallParams {
	params.MachineDetectionTimeout = &MachineDetectionTimeout
	return params
}
func (params *CreateCallParams) SetMethod(Method string) *CreateCallParams {
	params.Method = &Method
	return params
}
func (params *CreateCallParams) SetRecord(Record bool) *CreateCallParams {
	params.Record = &Record
	return params
}
func (params *CreateCallParams) SetRecordingChannels(RecordingChannels string) *CreateCallParams {
	params.RecordingChannels = &RecordingChannels
	return params
}
func (params *CreateCallParams) SetRecordingStatusCallback(RecordingStatusCallback string) *CreateCallParams {
	params.RecordingStatusCallback = &RecordingStatusCallback
	return params
}
func (params *CreateCallParams) SetRecordingStatusCallbackEvent(RecordingStatusCallbackEvent []string) *CreateCallParams {
	params.RecordingStatusCallbackEvent = &RecordingStatusCallbackEvent
	return params
}
func (params *CreateCallParams) SetRecordingStatusCallbackMethod(RecordingStatusCallbackMethod string) *CreateCallParams {
	params.RecordingStatusCallbackMethod = &RecordingStatusCallbackMethod
	return params
}
func (params *CreateCallParams) SetRecordingTrack(RecordingTrack string) *CreateCallParams {
	params.RecordingTrack = &RecordingTrack
	return params
}
func (params *CreateCallParams) SetSendDigits(SendDigits string) *CreateCallParams {
	params.SendDigits = &SendDigits
	return params
}
func (params *CreateCallParams) SetSipAuthPassword(SipAuthPassword string) *CreateCallParams {
	params.SipAuthPassword = &SipAuthPassword
	return params
}
func (params *CreateCallParams) SetSipAuthUsername(SipAuthUsername string) *CreateCallParams {
	params.SipAuthUsername = &SipAuthUsername
	return params
}
func (params *CreateCallParams) SetStatusCallback(StatusCallback string) *CreateCallParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateCallParams) SetStatusCallbackEvent(StatusCallbackEvent []string) *CreateCallParams {
	params.StatusCallbackEvent = &StatusCallbackEvent
	return params
}
func (params *CreateCallParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateCallParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateCallParams) SetTimeout(Timeout int32) *CreateCallParams {
	params.Timeout = &Timeout
	return params
}
func (params *CreateCallParams) SetTo(To string) *CreateCallParams {
	params.To = &To
	return params
}
func (params *CreateCallParams) SetTrim(Trim string) *CreateCallParams {
	params.Trim = &Trim
	return params
}
func (params *CreateCallParams) SetTwiml(Twiml string) *CreateCallParams {
	params.Twiml = &Twiml
	return params
}
func (params *CreateCallParams) SetUrl(Url string) *CreateCallParams {
	params.Url = &Url
	return params
}

// CreateCall Method for CreateCall
//
// Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
//
// param: optional nil or *CreateCallParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "ApplicationSid" (string) - The SID of the Application resource that will handle the call, if the call will be handled by an application.
//
// param: "AsyncAmd" (string) - Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
//
// param: "AsyncAmdStatusCallback" (string) - The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
//
// param: "AsyncAmdStatusCallbackMethod" (string) - The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
//
// param: "Byoc" (string) - The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
//
// param: "CallReason" (string) - The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
//
// param: "CallToken" (string) - A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. this field should be populated by the incoming call's call_token to make this outgoing call as a forwarded call of incoming call. A forwarded call should bear the same caller-id of incoming call.
//
// param: "CallerId" (string) - The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
//
// param: "FallbackMethod" (string) - The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "FallbackUrl" (string) - The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "From" (string) - The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
//
// param: "MachineDetection" (string) - Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
//
// param: "MachineDetectionSilenceTimeout" (int32) - The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
//
// param: "MachineDetectionSpeechEndThreshold" (int32) - The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
//
// param: "MachineDetectionSpeechThreshold" (int32) - The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
//
// param: "MachineDetectionTimeout" (int32) - The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
//
// param: "Method" (string) - The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "Record" (bool) - Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
//
// param: "RecordingChannels" (string) - The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
//
// param: "RecordingStatusCallback" (string) - The URL that we call when the recording is available to be accessed.
//
// param: "RecordingStatusCallbackEvent" ([]string) - The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
//
// param: "RecordingStatusCallbackMethod" (string) - The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
//
// param: "RecordingTrack" (string) - The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
//
// param: "SendDigits" (string) - A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
//
// param: "SipAuthPassword" (string) - The password required to authenticate the user account specified in `sip_auth_username`.
//
// param: "SipAuthUsername" (string) - The username used to authenticate the caller making a SIP call.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
//
// param: "StatusCallbackEvent" ([]string) - The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "Timeout" (int32) - The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
//
// param: "To" (string) - The phone number, SIP address, or client identifier to call.
//
// param: "Trim" (string) - Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
//
// param: "Twiml" (string) - TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored.
//
// param: "Url" (string) - The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
//
// return: ApiV2010AccountCall
func (c *DefaultApiService) CreateCall(params *CreateCallParams) (*ApiV2010AccountCall, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApplicationSid != nil {
		data.Set("ApplicationSid", *params.ApplicationSid)
	}
	if params != nil && params.AsyncAmd != nil {
		data.Set("AsyncAmd", *params.AsyncAmd)
	}
	if params != nil && params.AsyncAmdStatusCallback != nil {
		data.Set("AsyncAmdStatusCallback", *params.AsyncAmdStatusCallback)
	}
	if params != nil && params.AsyncAmdStatusCallbackMethod != nil {
		data.Set("AsyncAmdStatusCallbackMethod", *params.AsyncAmdStatusCallbackMethod)
	}
	if params != nil && params.Byoc != nil {
		data.Set("Byoc", *params.Byoc)
	}
	if params != nil && params.CallReason != nil {
		data.Set("CallReason", *params.CallReason)
	}
	if params != nil && params.CallToken != nil {
		data.Set("CallToken", *params.CallToken)
	}
	if params != nil && params.CallerId != nil {
		data.Set("CallerId", *params.CallerId)
	}
	if params != nil && params.FallbackMethod != nil {
		data.Set("FallbackMethod", *params.FallbackMethod)
	}
	if params != nil && params.FallbackUrl != nil {
		data.Set("FallbackUrl", *params.FallbackUrl)
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.MachineDetection != nil {
		data.Set("MachineDetection", *params.MachineDetection)
	}
	if params != nil && params.MachineDetectionSilenceTimeout != nil {
		data.Set("MachineDetectionSilenceTimeout", fmt.Sprint(*params.MachineDetectionSilenceTimeout))
	}
	if params != nil && params.MachineDetectionSpeechEndThreshold != nil {
		data.Set("MachineDetectionSpeechEndThreshold", fmt.Sprint(*params.MachineDetectionSpeechEndThreshold))
	}
	if params != nil && params.MachineDetectionSpeechThreshold != nil {
		data.Set("MachineDetectionSpeechThreshold", fmt.Sprint(*params.MachineDetectionSpeechThreshold))
	}
	if params != nil && params.MachineDetectionTimeout != nil {
		data.Set("MachineDetectionTimeout", fmt.Sprint(*params.MachineDetectionTimeout))
	}
	if params != nil && params.Method != nil {
		data.Set("Method", *params.Method)
	}
	if params != nil && params.Record != nil {
		data.Set("Record", fmt.Sprint(*params.Record))
	}
	if params != nil && params.RecordingChannels != nil {
		data.Set("RecordingChannels", *params.RecordingChannels)
	}
	if params != nil && params.RecordingStatusCallback != nil {
		data.Set("RecordingStatusCallback", *params.RecordingStatusCallback)
	}
	if params != nil && params.RecordingStatusCallbackEvent != nil {
		data.Set("RecordingStatusCallbackEvent", strings.Join(*params.RecordingStatusCallbackEvent, ","))
	}
	if params != nil && params.RecordingStatusCallbackMethod != nil {
		data.Set("RecordingStatusCallbackMethod", *params.RecordingStatusCallbackMethod)
	}
	if params != nil && params.RecordingTrack != nil {
		data.Set("RecordingTrack", *params.RecordingTrack)
	}
	if params != nil && params.SendDigits != nil {
		data.Set("SendDigits", *params.SendDigits)
	}
	if params != nil && params.SipAuthPassword != nil {
		data.Set("SipAuthPassword", *params.SipAuthPassword)
	}
	if params != nil && params.SipAuthUsername != nil {
		data.Set("SipAuthUsername", *params.SipAuthUsername)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackEvent != nil {
		data.Set("StatusCallbackEvent", strings.Join(*params.StatusCallbackEvent, ","))
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.Timeout != nil {
		data.Set("Timeout", fmt.Sprint(*params.Timeout))
	}
	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}
	if params != nil && params.Trim != nil {
		data.Set("Trim", *params.Trim)
	}
	if params != nil && params.Twiml != nil {
		data.Set("Twiml", *params.Twiml)
	}
	if params != nil && params.Url != nil {
		data.Set("Url", *params.Url)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCall{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCallFeedbackSummaryParams Optional parameters for the method 'CreateCallFeedbackSummary'
type CreateCallFeedbackSummaryParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	EndDate              *string `json:"EndDate,omitempty"`
	IncludeSubaccounts   *bool   `json:"IncludeSubaccounts,omitempty"`
	StartDate            *string `json:"StartDate,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
}

func (params *CreateCallFeedbackSummaryParams) SetPathAccountSid(PathAccountSid string) *CreateCallFeedbackSummaryParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateCallFeedbackSummaryParams) SetEndDate(EndDate string) *CreateCallFeedbackSummaryParams {
	params.EndDate = &EndDate
	return params
}
func (params *CreateCallFeedbackSummaryParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *CreateCallFeedbackSummaryParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *CreateCallFeedbackSummaryParams) SetStartDate(StartDate string) *CreateCallFeedbackSummaryParams {
	params.StartDate = &StartDate
	return params
}
func (params *CreateCallFeedbackSummaryParams) SetStatusCallback(StatusCallback string) *CreateCallFeedbackSummaryParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateCallFeedbackSummaryParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateCallFeedbackSummaryParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}

// CreateCallFeedbackSummary Method for CreateCallFeedbackSummary
//
// Create a FeedbackSummary resource for a call
//
// param: optional nil or *CreateCallFeedbackSummaryParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "EndDate" (string) - Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
//
// param: "IncludeSubaccounts" (bool) - Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
//
// param: "StartDate" (string) - Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
//
// param: "StatusCallback" (string) - The URL that we will request when the feedback summary is complete.
//
// param: "StatusCallbackMethod" (string) - The HTTP method (`GET` or `POST`) we use to make the request to the `StatusCallback` URL.
//
// return: ApiV2010AccountCallCallFeedbackSummary
func (c *DefaultApiService) CreateCallFeedbackSummary(params *CreateCallFeedbackSummaryParams) (*ApiV2010AccountCallCallFeedbackSummary, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallFeedbackSummary{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCallRecordingParams Optional parameters for the method 'CreateCallRecording'
type CreateCallRecordingParams struct {
	PathAccountSid                *string   `json:"PathAccountSid,omitempty"`
	RecordingChannels             *string   `json:"RecordingChannels,omitempty"`
	RecordingStatusCallback       *string   `json:"RecordingStatusCallback,omitempty"`
	RecordingStatusCallbackEvent  *[]string `json:"RecordingStatusCallbackEvent,omitempty"`
	RecordingStatusCallbackMethod *string   `json:"RecordingStatusCallbackMethod,omitempty"`
	RecordingTrack                *string   `json:"RecordingTrack,omitempty"`
	Trim                          *string   `json:"Trim,omitempty"`
}

func (params *CreateCallRecordingParams) SetPathAccountSid(PathAccountSid string) *CreateCallRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateCallRecordingParams) SetRecordingChannels(RecordingChannels string) *CreateCallRecordingParams {
	params.RecordingChannels = &RecordingChannels
	return params
}
func (params *CreateCallRecordingParams) SetRecordingStatusCallback(RecordingStatusCallback string) *CreateCallRecordingParams {
	params.RecordingStatusCallback = &RecordingStatusCallback
	return params
}
func (params *CreateCallRecordingParams) SetRecordingStatusCallbackEvent(RecordingStatusCallbackEvent []string) *CreateCallRecordingParams {
	params.RecordingStatusCallbackEvent = &RecordingStatusCallbackEvent
	return params
}
func (params *CreateCallRecordingParams) SetRecordingStatusCallbackMethod(RecordingStatusCallbackMethod string) *CreateCallRecordingParams {
	params.RecordingStatusCallbackMethod = &RecordingStatusCallbackMethod
	return params
}
func (params *CreateCallRecordingParams) SetRecordingTrack(RecordingTrack string) *CreateCallRecordingParams {
	params.RecordingTrack = &RecordingTrack
	return params
}
func (params *CreateCallRecordingParams) SetTrim(Trim string) *CreateCallRecordingParams {
	params.Trim = &Trim
	return params
}

// CreateCallRecording Method for CreateCallRecording
//
// Create a recording for the call
//
// param: CallSid The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
//
// param: optional nil or *CreateCallRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "RecordingChannels" (string) - The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
//
// param: "RecordingStatusCallback" (string) - The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
//
// param: "RecordingStatusCallbackEvent" ([]string) - The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
//
// param: "RecordingStatusCallbackMethod" (string) - The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
//
// param: "RecordingTrack" (string) - The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
//
// param: "Trim" (string) - Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
//
// return: ApiV2010AccountCallCallRecording
func (c *DefaultApiService) CreateCallRecording(CallSid string, params *CreateCallRecordingParams) (*ApiV2010AccountCallCallRecording, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.RecordingChannels != nil {
		data.Set("RecordingChannels", *params.RecordingChannels)
	}
	if params != nil && params.RecordingStatusCallback != nil {
		data.Set("RecordingStatusCallback", *params.RecordingStatusCallback)
	}
	if params != nil && params.RecordingStatusCallbackEvent != nil {
		data.Set("RecordingStatusCallbackEvent", strings.Join(*params.RecordingStatusCallbackEvent, ","))
	}
	if params != nil && params.RecordingStatusCallbackMethod != nil {
		data.Set("RecordingStatusCallbackMethod", *params.RecordingStatusCallbackMethod)
	}
	if params != nil && params.RecordingTrack != nil {
		data.Set("RecordingTrack", *params.RecordingTrack)
	}
	if params != nil && params.Trim != nil {
		data.Set("Trim", *params.Trim)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallRecording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateIncomingPhoneNumberParams Optional parameters for the method 'CreateIncomingPhoneNumber'
type CreateIncomingPhoneNumberParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	AddressSid           *string `json:"AddressSid,omitempty"`
	ApiVersion           *string `json:"ApiVersion,omitempty"`
	AreaCode             *string `json:"AreaCode,omitempty"`
	BundleSid            *string `json:"BundleSid,omitempty"`
	EmergencyAddressSid  *string `json:"EmergencyAddressSid,omitempty"`
	EmergencyStatus      *string `json:"EmergencyStatus,omitempty"`
	FriendlyName         *string `json:"FriendlyName,omitempty"`
	IdentitySid          *string `json:"IdentitySid,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty"`
	SmsApplicationSid    *string `json:"SmsApplicationSid,omitempty"`
	SmsFallbackMethod    *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl       *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod            *string `json:"SmsMethod,omitempty"`
	SmsUrl               *string `json:"SmsUrl,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	TrunkSid             *string `json:"TrunkSid,omitempty"`
	VoiceApplicationSid  *string `json:"VoiceApplicationSid,omitempty"`
	VoiceCallerIdLookup  *bool   `json:"VoiceCallerIdLookup,omitempty"`
	VoiceFallbackMethod  *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl     *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod          *string `json:"VoiceMethod,omitempty"`
	VoiceReceiveMode     *string `json:"VoiceReceiveMode,omitempty"`
	VoiceUrl             *string `json:"VoiceUrl,omitempty"`
}

func (params *CreateIncomingPhoneNumberParams) SetPathAccountSid(PathAccountSid string) *CreateIncomingPhoneNumberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetAddressSid(AddressSid string) *CreateIncomingPhoneNumberParams {
	params.AddressSid = &AddressSid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetApiVersion(ApiVersion string) *CreateIncomingPhoneNumberParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetAreaCode(AreaCode string) *CreateIncomingPhoneNumberParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetBundleSid(BundleSid string) *CreateIncomingPhoneNumberParams {
	params.BundleSid = &BundleSid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetEmergencyAddressSid(EmergencyAddressSid string) *CreateIncomingPhoneNumberParams {
	params.EmergencyAddressSid = &EmergencyAddressSid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetEmergencyStatus(EmergencyStatus string) *CreateIncomingPhoneNumberParams {
	params.EmergencyStatus = &EmergencyStatus
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetFriendlyName(FriendlyName string) *CreateIncomingPhoneNumberParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetIdentitySid(IdentitySid string) *CreateIncomingPhoneNumberParams {
	params.IdentitySid = &IdentitySid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetPhoneNumber(PhoneNumber string) *CreateIncomingPhoneNumberParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetSmsApplicationSid(SmsApplicationSid string) *CreateIncomingPhoneNumberParams {
	params.SmsApplicationSid = &SmsApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetSmsFallbackMethod(SmsFallbackMethod string) *CreateIncomingPhoneNumberParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetSmsFallbackUrl(SmsFallbackUrl string) *CreateIncomingPhoneNumberParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetSmsMethod(SmsMethod string) *CreateIncomingPhoneNumberParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetSmsUrl(SmsUrl string) *CreateIncomingPhoneNumberParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetStatusCallback(StatusCallback string) *CreateIncomingPhoneNumberParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateIncomingPhoneNumberParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetTrunkSid(TrunkSid string) *CreateIncomingPhoneNumberParams {
	params.TrunkSid = &TrunkSid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetVoiceApplicationSid(VoiceApplicationSid string) *CreateIncomingPhoneNumberParams {
	params.VoiceApplicationSid = &VoiceApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetVoiceCallerIdLookup(VoiceCallerIdLookup bool) *CreateIncomingPhoneNumberParams {
	params.VoiceCallerIdLookup = &VoiceCallerIdLookup
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *CreateIncomingPhoneNumberParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *CreateIncomingPhoneNumberParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetVoiceMethod(VoiceMethod string) *CreateIncomingPhoneNumberParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetVoiceReceiveMode(VoiceReceiveMode string) *CreateIncomingPhoneNumberParams {
	params.VoiceReceiveMode = &VoiceReceiveMode
	return params
}
func (params *CreateIncomingPhoneNumberParams) SetVoiceUrl(VoiceUrl string) *CreateIncomingPhoneNumberParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// CreateIncomingPhoneNumber Method for CreateIncomingPhoneNumber
//
// Purchase a phone-number for the account.
//
// param: optional nil or *CreateIncomingPhoneNumberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "AddressSid" (string) - The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
//
// param: "ApiVersion" (string) - The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
//
// param: "AreaCode" (string) - The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an `area_code` or a `phone_number`.** (US and Canada only).
//
// param: "BundleSid" (string) - The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
//
// param: "EmergencyAddressSid" (string) - The SID of the emergency address configuration to use for emergency calling from the new phone number.
//
// param: "EmergencyStatus" (string) - The configuration status parameter that determines whether the new phone number is enabled for emergency calling.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number.
//
// param: "IdentitySid" (string) - The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
//
// param: "PhoneNumber" (string) - The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
//
// param: "SmsApplicationSid" (string) - The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
//
// param: "SmsFallbackMethod" (string) - The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsUrl" (string) - The URL we should call when the new phone number receives an incoming SMS message.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "TrunkSid" (string) - The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
//
// param: "VoiceApplicationSid" (string) - The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
//
// param: "VoiceCallerIdLookup" (bool) - Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
//
// param: "VoiceMethod" (string) - The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceReceiveMode" (string) - The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.
//
// param: "VoiceUrl" (string) - The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
//
// return: ApiV2010AccountIncomingPhoneNumber
func (c *DefaultApiService) CreateIncomingPhoneNumber(params *CreateIncomingPhoneNumberParams) (*ApiV2010AccountIncomingPhoneNumber, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AddressSid != nil {
		data.Set("AddressSid", *params.AddressSid)
	}
	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", *params.AreaCode)
	}
	if params != nil && params.BundleSid != nil {
		data.Set("BundleSid", *params.BundleSid)
	}
	if params != nil && params.EmergencyAddressSid != nil {
		data.Set("EmergencyAddressSid", *params.EmergencyAddressSid)
	}
	if params != nil && params.EmergencyStatus != nil {
		data.Set("EmergencyStatus", *params.EmergencyStatus)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IdentitySid != nil {
		data.Set("IdentitySid", *params.IdentitySid)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.SmsApplicationSid != nil {
		data.Set("SmsApplicationSid", *params.SmsApplicationSid)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.TrunkSid != nil {
		data.Set("TrunkSid", *params.TrunkSid)
	}
	if params != nil && params.VoiceApplicationSid != nil {
		data.Set("VoiceApplicationSid", *params.VoiceApplicationSid)
	}
	if params != nil && params.VoiceCallerIdLookup != nil {
		data.Set("VoiceCallerIdLookup", fmt.Sprint(*params.VoiceCallerIdLookup))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceReceiveMode != nil {
		data.Set("VoiceReceiveMode", *params.VoiceReceiveMode)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumber{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateIncomingPhoneNumberAssignedAddOnParams Optional parameters for the method 'CreateIncomingPhoneNumberAssignedAddOn'
type CreateIncomingPhoneNumberAssignedAddOnParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	InstalledAddOnSid *string `json:"InstalledAddOnSid,omitempty"`
}

func (params *CreateIncomingPhoneNumberAssignedAddOnParams) SetPathAccountSid(PathAccountSid string) *CreateIncomingPhoneNumberAssignedAddOnParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateIncomingPhoneNumberAssignedAddOnParams) SetInstalledAddOnSid(InstalledAddOnSid string) *CreateIncomingPhoneNumberAssignedAddOnParams {
	params.InstalledAddOnSid = &InstalledAddOnSid
	return params
}

// CreateIncomingPhoneNumberAssignedAddOn Method for CreateIncomingPhoneNumberAssignedAddOn
//
// Assign an Add-on installation to the Number specified.
//
// param: ResourceSid The SID of the Phone Number to assign the Add-on.
//
// param: optional nil or *CreateIncomingPhoneNumberAssignedAddOnParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "InstalledAddOnSid" (string) - The SID that identifies the Add-on installation.
//
// return: ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
func (c *DefaultApiService) CreateIncomingPhoneNumberAssignedAddOn(ResourceSid string, params *CreateIncomingPhoneNumberAssignedAddOnParams) (*ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ResourceSid"+"}", ResourceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.InstalledAddOnSid != nil {
		data.Set("InstalledAddOnSid", *params.InstalledAddOnSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateIncomingPhoneNumberLocalParams Optional parameters for the method 'CreateIncomingPhoneNumberLocal'
type CreateIncomingPhoneNumberLocalParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	AddressSid           *string `json:"AddressSid,omitempty"`
	ApiVersion           *string `json:"ApiVersion,omitempty"`
	BundleSid            *string `json:"BundleSid,omitempty"`
	EmergencyAddressSid  *string `json:"EmergencyAddressSid,omitempty"`
	EmergencyStatus      *string `json:"EmergencyStatus,omitempty"`
	FriendlyName         *string `json:"FriendlyName,omitempty"`
	IdentitySid          *string `json:"IdentitySid,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty"`
	SmsApplicationSid    *string `json:"SmsApplicationSid,omitempty"`
	SmsFallbackMethod    *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl       *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod            *string `json:"SmsMethod,omitempty"`
	SmsUrl               *string `json:"SmsUrl,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	TrunkSid             *string `json:"TrunkSid,omitempty"`
	VoiceApplicationSid  *string `json:"VoiceApplicationSid,omitempty"`
	VoiceCallerIdLookup  *bool   `json:"VoiceCallerIdLookup,omitempty"`
	VoiceFallbackMethod  *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl     *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod          *string `json:"VoiceMethod,omitempty"`
	VoiceReceiveMode     *string `json:"VoiceReceiveMode,omitempty"`
	VoiceUrl             *string `json:"VoiceUrl,omitempty"`
}

func (params *CreateIncomingPhoneNumberLocalParams) SetPathAccountSid(PathAccountSid string) *CreateIncomingPhoneNumberLocalParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetAddressSid(AddressSid string) *CreateIncomingPhoneNumberLocalParams {
	params.AddressSid = &AddressSid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetApiVersion(ApiVersion string) *CreateIncomingPhoneNumberLocalParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetBundleSid(BundleSid string) *CreateIncomingPhoneNumberLocalParams {
	params.BundleSid = &BundleSid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetEmergencyAddressSid(EmergencyAddressSid string) *CreateIncomingPhoneNumberLocalParams {
	params.EmergencyAddressSid = &EmergencyAddressSid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetEmergencyStatus(EmergencyStatus string) *CreateIncomingPhoneNumberLocalParams {
	params.EmergencyStatus = &EmergencyStatus
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetFriendlyName(FriendlyName string) *CreateIncomingPhoneNumberLocalParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetIdentitySid(IdentitySid string) *CreateIncomingPhoneNumberLocalParams {
	params.IdentitySid = &IdentitySid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetPhoneNumber(PhoneNumber string) *CreateIncomingPhoneNumberLocalParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetSmsApplicationSid(SmsApplicationSid string) *CreateIncomingPhoneNumberLocalParams {
	params.SmsApplicationSid = &SmsApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetSmsFallbackMethod(SmsFallbackMethod string) *CreateIncomingPhoneNumberLocalParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetSmsFallbackUrl(SmsFallbackUrl string) *CreateIncomingPhoneNumberLocalParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetSmsMethod(SmsMethod string) *CreateIncomingPhoneNumberLocalParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetSmsUrl(SmsUrl string) *CreateIncomingPhoneNumberLocalParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetStatusCallback(StatusCallback string) *CreateIncomingPhoneNumberLocalParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateIncomingPhoneNumberLocalParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetTrunkSid(TrunkSid string) *CreateIncomingPhoneNumberLocalParams {
	params.TrunkSid = &TrunkSid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetVoiceApplicationSid(VoiceApplicationSid string) *CreateIncomingPhoneNumberLocalParams {
	params.VoiceApplicationSid = &VoiceApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetVoiceCallerIdLookup(VoiceCallerIdLookup bool) *CreateIncomingPhoneNumberLocalParams {
	params.VoiceCallerIdLookup = &VoiceCallerIdLookup
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *CreateIncomingPhoneNumberLocalParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *CreateIncomingPhoneNumberLocalParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetVoiceMethod(VoiceMethod string) *CreateIncomingPhoneNumberLocalParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetVoiceReceiveMode(VoiceReceiveMode string) *CreateIncomingPhoneNumberLocalParams {
	params.VoiceReceiveMode = &VoiceReceiveMode
	return params
}
func (params *CreateIncomingPhoneNumberLocalParams) SetVoiceUrl(VoiceUrl string) *CreateIncomingPhoneNumberLocalParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// CreateIncomingPhoneNumberLocal Method for CreateIncomingPhoneNumberLocal
//
// param: optional nil or *CreateIncomingPhoneNumberLocalParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "AddressSid" (string) - The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
//
// param: "ApiVersion" (string) - The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
//
// param: "BundleSid" (string) - The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
//
// param: "EmergencyAddressSid" (string) - The SID of the emergency address configuration to use for emergency calling from the new phone number.
//
// param: "EmergencyStatus" (string) - The configuration status parameter that determines whether the new phone number is enabled for emergency calling.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
//
// param: "IdentitySid" (string) - The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
//
// param: "PhoneNumber" (string) - The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
//
// param: "SmsApplicationSid" (string) - The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
//
// param: "SmsFallbackMethod" (string) - The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsUrl" (string) - The URL we should call when the new phone number receives an incoming SMS message.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "TrunkSid" (string) - The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
//
// param: "VoiceApplicationSid" (string) - The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
//
// param: "VoiceCallerIdLookup" (bool) - Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
//
// param: "VoiceMethod" (string) - The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceReceiveMode" (string) - The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.
//
// param: "VoiceUrl" (string) - The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
//
// return: ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal
func (c *DefaultApiService) CreateIncomingPhoneNumberLocal(params *CreateIncomingPhoneNumberLocalParams) (*ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AddressSid != nil {
		data.Set("AddressSid", *params.AddressSid)
	}
	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.BundleSid != nil {
		data.Set("BundleSid", *params.BundleSid)
	}
	if params != nil && params.EmergencyAddressSid != nil {
		data.Set("EmergencyAddressSid", *params.EmergencyAddressSid)
	}
	if params != nil && params.EmergencyStatus != nil {
		data.Set("EmergencyStatus", *params.EmergencyStatus)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IdentitySid != nil {
		data.Set("IdentitySid", *params.IdentitySid)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.SmsApplicationSid != nil {
		data.Set("SmsApplicationSid", *params.SmsApplicationSid)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.TrunkSid != nil {
		data.Set("TrunkSid", *params.TrunkSid)
	}
	if params != nil && params.VoiceApplicationSid != nil {
		data.Set("VoiceApplicationSid", *params.VoiceApplicationSid)
	}
	if params != nil && params.VoiceCallerIdLookup != nil {
		data.Set("VoiceCallerIdLookup", fmt.Sprint(*params.VoiceCallerIdLookup))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceReceiveMode != nil {
		data.Set("VoiceReceiveMode", *params.VoiceReceiveMode)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateIncomingPhoneNumberMobileParams Optional parameters for the method 'CreateIncomingPhoneNumberMobile'
type CreateIncomingPhoneNumberMobileParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	AddressSid           *string `json:"AddressSid,omitempty"`
	ApiVersion           *string `json:"ApiVersion,omitempty"`
	BundleSid            *string `json:"BundleSid,omitempty"`
	EmergencyAddressSid  *string `json:"EmergencyAddressSid,omitempty"`
	EmergencyStatus      *string `json:"EmergencyStatus,omitempty"`
	FriendlyName         *string `json:"FriendlyName,omitempty"`
	IdentitySid          *string `json:"IdentitySid,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty"`
	SmsApplicationSid    *string `json:"SmsApplicationSid,omitempty"`
	SmsFallbackMethod    *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl       *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod            *string `json:"SmsMethod,omitempty"`
	SmsUrl               *string `json:"SmsUrl,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	TrunkSid             *string `json:"TrunkSid,omitempty"`
	VoiceApplicationSid  *string `json:"VoiceApplicationSid,omitempty"`
	VoiceCallerIdLookup  *bool   `json:"VoiceCallerIdLookup,omitempty"`
	VoiceFallbackMethod  *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl     *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod          *string `json:"VoiceMethod,omitempty"`
	VoiceReceiveMode     *string `json:"VoiceReceiveMode,omitempty"`
	VoiceUrl             *string `json:"VoiceUrl,omitempty"`
}

func (params *CreateIncomingPhoneNumberMobileParams) SetPathAccountSid(PathAccountSid string) *CreateIncomingPhoneNumberMobileParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetAddressSid(AddressSid string) *CreateIncomingPhoneNumberMobileParams {
	params.AddressSid = &AddressSid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetApiVersion(ApiVersion string) *CreateIncomingPhoneNumberMobileParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetBundleSid(BundleSid string) *CreateIncomingPhoneNumberMobileParams {
	params.BundleSid = &BundleSid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetEmergencyAddressSid(EmergencyAddressSid string) *CreateIncomingPhoneNumberMobileParams {
	params.EmergencyAddressSid = &EmergencyAddressSid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetEmergencyStatus(EmergencyStatus string) *CreateIncomingPhoneNumberMobileParams {
	params.EmergencyStatus = &EmergencyStatus
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetFriendlyName(FriendlyName string) *CreateIncomingPhoneNumberMobileParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetIdentitySid(IdentitySid string) *CreateIncomingPhoneNumberMobileParams {
	params.IdentitySid = &IdentitySid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetPhoneNumber(PhoneNumber string) *CreateIncomingPhoneNumberMobileParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetSmsApplicationSid(SmsApplicationSid string) *CreateIncomingPhoneNumberMobileParams {
	params.SmsApplicationSid = &SmsApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetSmsFallbackMethod(SmsFallbackMethod string) *CreateIncomingPhoneNumberMobileParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetSmsFallbackUrl(SmsFallbackUrl string) *CreateIncomingPhoneNumberMobileParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetSmsMethod(SmsMethod string) *CreateIncomingPhoneNumberMobileParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetSmsUrl(SmsUrl string) *CreateIncomingPhoneNumberMobileParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetStatusCallback(StatusCallback string) *CreateIncomingPhoneNumberMobileParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateIncomingPhoneNumberMobileParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetTrunkSid(TrunkSid string) *CreateIncomingPhoneNumberMobileParams {
	params.TrunkSid = &TrunkSid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetVoiceApplicationSid(VoiceApplicationSid string) *CreateIncomingPhoneNumberMobileParams {
	params.VoiceApplicationSid = &VoiceApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetVoiceCallerIdLookup(VoiceCallerIdLookup bool) *CreateIncomingPhoneNumberMobileParams {
	params.VoiceCallerIdLookup = &VoiceCallerIdLookup
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *CreateIncomingPhoneNumberMobileParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *CreateIncomingPhoneNumberMobileParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetVoiceMethod(VoiceMethod string) *CreateIncomingPhoneNumberMobileParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetVoiceReceiveMode(VoiceReceiveMode string) *CreateIncomingPhoneNumberMobileParams {
	params.VoiceReceiveMode = &VoiceReceiveMode
	return params
}
func (params *CreateIncomingPhoneNumberMobileParams) SetVoiceUrl(VoiceUrl string) *CreateIncomingPhoneNumberMobileParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// CreateIncomingPhoneNumberMobile Method for CreateIncomingPhoneNumberMobile
//
// param: optional nil or *CreateIncomingPhoneNumberMobileParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "AddressSid" (string) - The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
//
// param: "ApiVersion" (string) - The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
//
// param: "BundleSid" (string) - The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
//
// param: "EmergencyAddressSid" (string) - The SID of the emergency address configuration to use for emergency calling from the new phone number.
//
// param: "EmergencyStatus" (string) - The configuration status parameter that determines whether the new phone number is enabled for emergency calling.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, the is a formatted version of the phone number.
//
// param: "IdentitySid" (string) - The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
//
// param: "PhoneNumber" (string) - The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
//
// param: "SmsApplicationSid" (string) - The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those of the application.
//
// param: "SmsFallbackMethod" (string) - The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsUrl" (string) - The URL we should call when the new phone number receives an incoming SMS message.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "TrunkSid" (string) - The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
//
// param: "VoiceApplicationSid" (string) - The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
//
// param: "VoiceCallerIdLookup" (bool) - Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
//
// param: "VoiceMethod" (string) - The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceReceiveMode" (string) - The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.
//
// param: "VoiceUrl" (string) - The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
//
// return: ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile
func (c *DefaultApiService) CreateIncomingPhoneNumberMobile(params *CreateIncomingPhoneNumberMobileParams) (*ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AddressSid != nil {
		data.Set("AddressSid", *params.AddressSid)
	}
	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.BundleSid != nil {
		data.Set("BundleSid", *params.BundleSid)
	}
	if params != nil && params.EmergencyAddressSid != nil {
		data.Set("EmergencyAddressSid", *params.EmergencyAddressSid)
	}
	if params != nil && params.EmergencyStatus != nil {
		data.Set("EmergencyStatus", *params.EmergencyStatus)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IdentitySid != nil {
		data.Set("IdentitySid", *params.IdentitySid)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.SmsApplicationSid != nil {
		data.Set("SmsApplicationSid", *params.SmsApplicationSid)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.TrunkSid != nil {
		data.Set("TrunkSid", *params.TrunkSid)
	}
	if params != nil && params.VoiceApplicationSid != nil {
		data.Set("VoiceApplicationSid", *params.VoiceApplicationSid)
	}
	if params != nil && params.VoiceCallerIdLookup != nil {
		data.Set("VoiceCallerIdLookup", fmt.Sprint(*params.VoiceCallerIdLookup))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceReceiveMode != nil {
		data.Set("VoiceReceiveMode", *params.VoiceReceiveMode)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateIncomingPhoneNumberTollFreeParams Optional parameters for the method 'CreateIncomingPhoneNumberTollFree'
type CreateIncomingPhoneNumberTollFreeParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	AddressSid           *string `json:"AddressSid,omitempty"`
	ApiVersion           *string `json:"ApiVersion,omitempty"`
	BundleSid            *string `json:"BundleSid,omitempty"`
	EmergencyAddressSid  *string `json:"EmergencyAddressSid,omitempty"`
	EmergencyStatus      *string `json:"EmergencyStatus,omitempty"`
	FriendlyName         *string `json:"FriendlyName,omitempty"`
	IdentitySid          *string `json:"IdentitySid,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty"`
	SmsApplicationSid    *string `json:"SmsApplicationSid,omitempty"`
	SmsFallbackMethod    *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl       *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod            *string `json:"SmsMethod,omitempty"`
	SmsUrl               *string `json:"SmsUrl,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	TrunkSid             *string `json:"TrunkSid,omitempty"`
	VoiceApplicationSid  *string `json:"VoiceApplicationSid,omitempty"`
	VoiceCallerIdLookup  *bool   `json:"VoiceCallerIdLookup,omitempty"`
	VoiceFallbackMethod  *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl     *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod          *string `json:"VoiceMethod,omitempty"`
	VoiceReceiveMode     *string `json:"VoiceReceiveMode,omitempty"`
	VoiceUrl             *string `json:"VoiceUrl,omitempty"`
}

func (params *CreateIncomingPhoneNumberTollFreeParams) SetPathAccountSid(PathAccountSid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetAddressSid(AddressSid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.AddressSid = &AddressSid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetApiVersion(ApiVersion string) *CreateIncomingPhoneNumberTollFreeParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetBundleSid(BundleSid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.BundleSid = &BundleSid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetEmergencyAddressSid(EmergencyAddressSid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.EmergencyAddressSid = &EmergencyAddressSid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetEmergencyStatus(EmergencyStatus string) *CreateIncomingPhoneNumberTollFreeParams {
	params.EmergencyStatus = &EmergencyStatus
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetFriendlyName(FriendlyName string) *CreateIncomingPhoneNumberTollFreeParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetIdentitySid(IdentitySid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.IdentitySid = &IdentitySid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetPhoneNumber(PhoneNumber string) *CreateIncomingPhoneNumberTollFreeParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetSmsApplicationSid(SmsApplicationSid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.SmsApplicationSid = &SmsApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetSmsFallbackMethod(SmsFallbackMethod string) *CreateIncomingPhoneNumberTollFreeParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetSmsFallbackUrl(SmsFallbackUrl string) *CreateIncomingPhoneNumberTollFreeParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetSmsMethod(SmsMethod string) *CreateIncomingPhoneNumberTollFreeParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetSmsUrl(SmsUrl string) *CreateIncomingPhoneNumberTollFreeParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetStatusCallback(StatusCallback string) *CreateIncomingPhoneNumberTollFreeParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateIncomingPhoneNumberTollFreeParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetTrunkSid(TrunkSid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.TrunkSid = &TrunkSid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetVoiceApplicationSid(VoiceApplicationSid string) *CreateIncomingPhoneNumberTollFreeParams {
	params.VoiceApplicationSid = &VoiceApplicationSid
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetVoiceCallerIdLookup(VoiceCallerIdLookup bool) *CreateIncomingPhoneNumberTollFreeParams {
	params.VoiceCallerIdLookup = &VoiceCallerIdLookup
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *CreateIncomingPhoneNumberTollFreeParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *CreateIncomingPhoneNumberTollFreeParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetVoiceMethod(VoiceMethod string) *CreateIncomingPhoneNumberTollFreeParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetVoiceReceiveMode(VoiceReceiveMode string) *CreateIncomingPhoneNumberTollFreeParams {
	params.VoiceReceiveMode = &VoiceReceiveMode
	return params
}
func (params *CreateIncomingPhoneNumberTollFreeParams) SetVoiceUrl(VoiceUrl string) *CreateIncomingPhoneNumberTollFreeParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// CreateIncomingPhoneNumberTollFree Method for CreateIncomingPhoneNumberTollFree
//
// param: optional nil or *CreateIncomingPhoneNumberTollFreeParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "AddressSid" (string) - The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
//
// param: "ApiVersion" (string) - The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
//
// param: "BundleSid" (string) - The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
//
// param: "EmergencyAddressSid" (string) - The SID of the emergency address configuration to use for emergency calling from the new phone number.
//
// param: "EmergencyStatus" (string) - The configuration status parameter that determines whether the new phone number is enabled for emergency calling.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
//
// param: "IdentitySid" (string) - The SID of the Identity resource that we should associate with the new phone number. Some regions require an Identity to meet local regulations.
//
// param: "PhoneNumber" (string) - The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
//
// param: "SmsApplicationSid" (string) - The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all `sms_*_url` values and use those of the application.
//
// param: "SmsFallbackMethod" (string) - The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsUrl" (string) - The URL we should call when the new phone number receives an incoming SMS message.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "TrunkSid" (string) - The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
//
// param: "VoiceApplicationSid" (string) - The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
//
// param: "VoiceCallerIdLookup" (bool) - Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
//
// param: "VoiceMethod" (string) - The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceReceiveMode" (string) - The configuration parameter for the new phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.
//
// param: "VoiceUrl" (string) - The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
//
// return: ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree
func (c *DefaultApiService) CreateIncomingPhoneNumberTollFree(params *CreateIncomingPhoneNumberTollFreeParams) (*ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AddressSid != nil {
		data.Set("AddressSid", *params.AddressSid)
	}
	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.BundleSid != nil {
		data.Set("BundleSid", *params.BundleSid)
	}
	if params != nil && params.EmergencyAddressSid != nil {
		data.Set("EmergencyAddressSid", *params.EmergencyAddressSid)
	}
	if params != nil && params.EmergencyStatus != nil {
		data.Set("EmergencyStatus", *params.EmergencyStatus)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IdentitySid != nil {
		data.Set("IdentitySid", *params.IdentitySid)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.SmsApplicationSid != nil {
		data.Set("SmsApplicationSid", *params.SmsApplicationSid)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.TrunkSid != nil {
		data.Set("TrunkSid", *params.TrunkSid)
	}
	if params != nil && params.VoiceApplicationSid != nil {
		data.Set("VoiceApplicationSid", *params.VoiceApplicationSid)
	}
	if params != nil && params.VoiceCallerIdLookup != nil {
		data.Set("VoiceCallerIdLookup", fmt.Sprint(*params.VoiceCallerIdLookup))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceReceiveMode != nil {
		data.Set("VoiceReceiveMode", *params.VoiceReceiveMode)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateMessageParams Optional parameters for the method 'CreateMessage'
type CreateMessageParams struct {
	PathAccountSid      *string   `json:"PathAccountSid,omitempty"`
	AddressRetention    *string   `json:"AddressRetention,omitempty"`
	ApplicationSid      *string   `json:"ApplicationSid,omitempty"`
	Attempt             *int32    `json:"Attempt,omitempty"`
	Body                *string   `json:"Body,omitempty"`
	ContentRetention    *string   `json:"ContentRetention,omitempty"`
	ForceDelivery       *bool     `json:"ForceDelivery,omitempty"`
	From                *string   `json:"From,omitempty"`
	MaxPrice            *float32  `json:"MaxPrice,omitempty"`
	MediaUrl            *[]string `json:"MediaUrl,omitempty"`
	MessagingServiceSid *string   `json:"MessagingServiceSid,omitempty"`
	PersistentAction    *[]string `json:"PersistentAction,omitempty"`
	ProvideFeedback     *bool     `json:"ProvideFeedback,omitempty"`
	SmartEncoded        *bool     `json:"SmartEncoded,omitempty"`
	StatusCallback      *string   `json:"StatusCallback,omitempty"`
	To                  *string   `json:"To,omitempty"`
	ValidityPeriod      *int32    `json:"ValidityPeriod,omitempty"`
}

func (params *CreateMessageParams) SetPathAccountSid(PathAccountSid string) *CreateMessageParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateMessageParams) SetAddressRetention(AddressRetention string) *CreateMessageParams {
	params.AddressRetention = &AddressRetention
	return params
}
func (params *CreateMessageParams) SetApplicationSid(ApplicationSid string) *CreateMessageParams {
	params.ApplicationSid = &ApplicationSid
	return params
}
func (params *CreateMessageParams) SetAttempt(Attempt int32) *CreateMessageParams {
	params.Attempt = &Attempt
	return params
}
func (params *CreateMessageParams) SetBody(Body string) *CreateMessageParams {
	params.Body = &Body
	return params
}
func (params *CreateMessageParams) SetContentRetention(ContentRetention string) *CreateMessageParams {
	params.ContentRetention = &ContentRetention
	return params
}
func (params *CreateMessageParams) SetForceDelivery(ForceDelivery bool) *CreateMessageParams {
	params.ForceDelivery = &ForceDelivery
	return params
}
func (params *CreateMessageParams) SetFrom(From string) *CreateMessageParams {
	params.From = &From
	return params
}
func (params *CreateMessageParams) SetMaxPrice(MaxPrice float32) *CreateMessageParams {
	params.MaxPrice = &MaxPrice
	return params
}
func (params *CreateMessageParams) SetMediaUrl(MediaUrl []string) *CreateMessageParams {
	params.MediaUrl = &MediaUrl
	return params
}
func (params *CreateMessageParams) SetMessagingServiceSid(MessagingServiceSid string) *CreateMessageParams {
	params.MessagingServiceSid = &MessagingServiceSid
	return params
}
func (params *CreateMessageParams) SetPersistentAction(PersistentAction []string) *CreateMessageParams {
	params.PersistentAction = &PersistentAction
	return params
}
func (params *CreateMessageParams) SetProvideFeedback(ProvideFeedback bool) *CreateMessageParams {
	params.ProvideFeedback = &ProvideFeedback
	return params
}
func (params *CreateMessageParams) SetSmartEncoded(SmartEncoded bool) *CreateMessageParams {
	params.SmartEncoded = &SmartEncoded
	return params
}
func (params *CreateMessageParams) SetStatusCallback(StatusCallback string) *CreateMessageParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateMessageParams) SetTo(To string) *CreateMessageParams {
	params.To = &To
	return params
}
func (params *CreateMessageParams) SetValidityPeriod(ValidityPeriod int32) *CreateMessageParams {
	params.ValidityPeriod = &ValidityPeriod
	return params
}

// CreateMessage Method for CreateMessage
//
// Send a message from the account used to make the request
//
// param: optional nil or *CreateMessageParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "AddressRetention" (string) - Determines if the address can be stored or obfuscated based on privacy settings
//
// param: "ApplicationSid" (string) - The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
//
// param: "Attempt" (int32) - Total number of attempts made ( including this ) to send out the message regardless of the provider used
//
// param: "Body" (string) - The text of the message you want to send. Can be up to 1,600 characters in length.
//
// param: "ContentRetention" (string) - Determines if the message content can be stored or redacted based on privacy settings
//
// param: "ForceDelivery" (bool) - Reserved
//
// param: "From" (string) - A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
//
// param: "MaxPrice" (float32) - The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
//
// param: "MediaUrl" ([]string) - The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
//
// param: "MessagingServiceSid" (string) - The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
//
// param: "PersistentAction" ([]string) - Rich actions for Channels Messages.
//
// param: "ProvideFeedback" (bool) - Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
//
// param: "SmartEncoded" (bool) - Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
//
// param: "To" (string) - The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
//
// param: "ValidityPeriod" (int32) - How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
//
// return: ApiV2010AccountMessage
func (c *DefaultApiService) CreateMessage(params *CreateMessageParams) (*ApiV2010AccountMessage, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AddressRetention != nil {
		data.Set("AddressRetention", *params.AddressRetention)
	}
	if params != nil && params.ApplicationSid != nil {
		data.Set("ApplicationSid", *params.ApplicationSid)
	}
	if params != nil && params.Attempt != nil {
		data.Set("Attempt", fmt.Sprint(*params.Attempt))
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.ContentRetention != nil {
		data.Set("ContentRetention", *params.ContentRetention)
	}
	if params != nil && params.ForceDelivery != nil {
		data.Set("ForceDelivery", fmt.Sprint(*params.ForceDelivery))
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.MaxPrice != nil {
		data.Set("MaxPrice", fmt.Sprint(*params.MaxPrice))
	}
	if params != nil && params.MediaUrl != nil {
		data.Set("MediaUrl", strings.Join(*params.MediaUrl, ","))
	}
	if params != nil && params.MessagingServiceSid != nil {
		data.Set("MessagingServiceSid", *params.MessagingServiceSid)
	}
	if params != nil && params.PersistentAction != nil {
		data.Set("PersistentAction", strings.Join(*params.PersistentAction, ","))
	}
	if params != nil && params.ProvideFeedback != nil {
		data.Set("ProvideFeedback", fmt.Sprint(*params.ProvideFeedback))
	}
	if params != nil && params.SmartEncoded != nil {
		data.Set("SmartEncoded", fmt.Sprint(*params.SmartEncoded))
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}
	if params != nil && params.ValidityPeriod != nil {
		data.Set("ValidityPeriod", fmt.Sprint(*params.ValidityPeriod))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateMessageFeedbackParams Optional parameters for the method 'CreateMessageFeedback'
type CreateMessageFeedbackParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Outcome        *string `json:"Outcome,omitempty"`
}

func (params *CreateMessageFeedbackParams) SetPathAccountSid(PathAccountSid string) *CreateMessageFeedbackParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateMessageFeedbackParams) SetOutcome(Outcome string) *CreateMessageFeedbackParams {
	params.Outcome = &Outcome
	return params
}

// CreateMessageFeedback Method for CreateMessageFeedback
//
// param: MessageSid The SID of the Message resource for which the feedback was provided.
//
// param: optional nil or *CreateMessageFeedbackParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "Outcome" (string) - Whether the feedback has arrived. Can be: `unconfirmed` or `confirmed`. If `provide_feedback`=`true` in [the initial HTTP POST](https://www.twilio.com/docs/sms/api/message-resource#create-a-message-resource), the initial value of this property is `unconfirmed`. After the message arrives, update the value to `confirmed`.
//
// return: ApiV2010AccountMessageMessageFeedback
func (c *DefaultApiService) CreateMessageFeedback(MessageSid string, params *CreateMessageFeedbackParams) (*ApiV2010AccountMessageMessageFeedback, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"MessageSid"+"}", MessageSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Outcome != nil {
		data.Set("Outcome", *params.Outcome)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountMessageMessageFeedback{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateNewKeyParams Optional parameters for the method 'CreateNewKey'
type CreateNewKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *CreateNewKeyParams) SetPathAccountSid(PathAccountSid string) *CreateNewKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateNewKeyParams) SetFriendlyName(FriendlyName string) *CreateNewKeyParams {
	params.FriendlyName = &FriendlyName
	return params
}

// CreateNewKey Method for CreateNewKey
//
// param: optional nil or *CreateNewKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// return: ApiV2010AccountNewKey
func (c *DefaultApiService) CreateNewKey(params *CreateNewKeyParams) (*ApiV2010AccountNewKey, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Keys.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountNewKey{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateNewSigningKeyParams Optional parameters for the method 'CreateNewSigningKey'
type CreateNewSigningKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *CreateNewSigningKeyParams) SetPathAccountSid(PathAccountSid string) *CreateNewSigningKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateNewSigningKeyParams) SetFriendlyName(FriendlyName string) *CreateNewSigningKeyParams {
	params.FriendlyName = &FriendlyName
	return params
}

// CreateNewSigningKey Method for CreateNewSigningKey
//
// Create a new Signing Key for the account making the request.
//
// param: optional nil or *CreateNewSigningKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Key resource.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// return: ApiV2010AccountNewSigningKey
func (c *DefaultApiService) CreateNewSigningKey(params *CreateNewSigningKeyParams) (*ApiV2010AccountNewSigningKey, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SigningKeys.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountNewSigningKey{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateParticipantParams Optional parameters for the method 'CreateParticipant'
type CreateParticipantParams struct {
	PathAccountSid                          *string   `json:"PathAccountSid,omitempty"`
	Beep                                    *string   `json:"Beep,omitempty"`
	Byoc                                    *string   `json:"Byoc,omitempty"`
	CallReason                              *string   `json:"CallReason,omitempty"`
	CallSidToCoach                          *string   `json:"CallSidToCoach,omitempty"`
	CallerId                                *string   `json:"CallerId,omitempty"`
	Coaching                                *bool     `json:"Coaching,omitempty"`
	ConferenceRecord                        *string   `json:"ConferenceRecord,omitempty"`
	ConferenceRecordingStatusCallback       *string   `json:"ConferenceRecordingStatusCallback,omitempty"`
	ConferenceRecordingStatusCallbackEvent  *[]string `json:"ConferenceRecordingStatusCallbackEvent,omitempty"`
	ConferenceRecordingStatusCallbackMethod *string   `json:"ConferenceRecordingStatusCallbackMethod,omitempty"`
	ConferenceStatusCallback                *string   `json:"ConferenceStatusCallback,omitempty"`
	ConferenceStatusCallbackEvent           *[]string `json:"ConferenceStatusCallbackEvent,omitempty"`
	ConferenceStatusCallbackMethod          *string   `json:"ConferenceStatusCallbackMethod,omitempty"`
	ConferenceTrim                          *string   `json:"ConferenceTrim,omitempty"`
	EarlyMedia                              *bool     `json:"EarlyMedia,omitempty"`
	EndConferenceOnExit                     *bool     `json:"EndConferenceOnExit,omitempty"`
	From                                    *string   `json:"From,omitempty"`
	JitterBufferSize                        *string   `json:"JitterBufferSize,omitempty"`
	Label                                   *string   `json:"Label,omitempty"`
	MaxParticipants                         *int32    `json:"MaxParticipants,omitempty"`
	Muted                                   *bool     `json:"Muted,omitempty"`
	Record                                  *bool     `json:"Record,omitempty"`
	RecordingChannels                       *string   `json:"RecordingChannels,omitempty"`
	RecordingStatusCallback                 *string   `json:"RecordingStatusCallback,omitempty"`
	RecordingStatusCallbackEvent            *[]string `json:"RecordingStatusCallbackEvent,omitempty"`
	RecordingStatusCallbackMethod           *string   `json:"RecordingStatusCallbackMethod,omitempty"`
	RecordingTrack                          *string   `json:"RecordingTrack,omitempty"`
	Region                                  *string   `json:"Region,omitempty"`
	SipAuthPassword                         *string   `json:"SipAuthPassword,omitempty"`
	SipAuthUsername                         *string   `json:"SipAuthUsername,omitempty"`
	StartConferenceOnEnter                  *bool     `json:"StartConferenceOnEnter,omitempty"`
	StatusCallback                          *string   `json:"StatusCallback,omitempty"`
	StatusCallbackEvent                     *[]string `json:"StatusCallbackEvent,omitempty"`
	StatusCallbackMethod                    *string   `json:"StatusCallbackMethod,omitempty"`
	Timeout                                 *int32    `json:"Timeout,omitempty"`
	To                                      *string   `json:"To,omitempty"`
	WaitMethod                              *string   `json:"WaitMethod,omitempty"`
	WaitUrl                                 *string   `json:"WaitUrl,omitempty"`
}

func (params *CreateParticipantParams) SetPathAccountSid(PathAccountSid string) *CreateParticipantParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateParticipantParams) SetBeep(Beep string) *CreateParticipantParams {
	params.Beep = &Beep
	return params
}
func (params *CreateParticipantParams) SetByoc(Byoc string) *CreateParticipantParams {
	params.Byoc = &Byoc
	return params
}
func (params *CreateParticipantParams) SetCallReason(CallReason string) *CreateParticipantParams {
	params.CallReason = &CallReason
	return params
}
func (params *CreateParticipantParams) SetCallSidToCoach(CallSidToCoach string) *CreateParticipantParams {
	params.CallSidToCoach = &CallSidToCoach
	return params
}
func (params *CreateParticipantParams) SetCallerId(CallerId string) *CreateParticipantParams {
	params.CallerId = &CallerId
	return params
}
func (params *CreateParticipantParams) SetCoaching(Coaching bool) *CreateParticipantParams {
	params.Coaching = &Coaching
	return params
}
func (params *CreateParticipantParams) SetConferenceRecord(ConferenceRecord string) *CreateParticipantParams {
	params.ConferenceRecord = &ConferenceRecord
	return params
}
func (params *CreateParticipantParams) SetConferenceRecordingStatusCallback(ConferenceRecordingStatusCallback string) *CreateParticipantParams {
	params.ConferenceRecordingStatusCallback = &ConferenceRecordingStatusCallback
	return params
}
func (params *CreateParticipantParams) SetConferenceRecordingStatusCallbackEvent(ConferenceRecordingStatusCallbackEvent []string) *CreateParticipantParams {
	params.ConferenceRecordingStatusCallbackEvent = &ConferenceRecordingStatusCallbackEvent
	return params
}
func (params *CreateParticipantParams) SetConferenceRecordingStatusCallbackMethod(ConferenceRecordingStatusCallbackMethod string) *CreateParticipantParams {
	params.ConferenceRecordingStatusCallbackMethod = &ConferenceRecordingStatusCallbackMethod
	return params
}
func (params *CreateParticipantParams) SetConferenceStatusCallback(ConferenceStatusCallback string) *CreateParticipantParams {
	params.ConferenceStatusCallback = &ConferenceStatusCallback
	return params
}
func (params *CreateParticipantParams) SetConferenceStatusCallbackEvent(ConferenceStatusCallbackEvent []string) *CreateParticipantParams {
	params.ConferenceStatusCallbackEvent = &ConferenceStatusCallbackEvent
	return params
}
func (params *CreateParticipantParams) SetConferenceStatusCallbackMethod(ConferenceStatusCallbackMethod string) *CreateParticipantParams {
	params.ConferenceStatusCallbackMethod = &ConferenceStatusCallbackMethod
	return params
}
func (params *CreateParticipantParams) SetConferenceTrim(ConferenceTrim string) *CreateParticipantParams {
	params.ConferenceTrim = &ConferenceTrim
	return params
}
func (params *CreateParticipantParams) SetEarlyMedia(EarlyMedia bool) *CreateParticipantParams {
	params.EarlyMedia = &EarlyMedia
	return params
}
func (params *CreateParticipantParams) SetEndConferenceOnExit(EndConferenceOnExit bool) *CreateParticipantParams {
	params.EndConferenceOnExit = &EndConferenceOnExit
	return params
}
func (params *CreateParticipantParams) SetFrom(From string) *CreateParticipantParams {
	params.From = &From
	return params
}
func (params *CreateParticipantParams) SetJitterBufferSize(JitterBufferSize string) *CreateParticipantParams {
	params.JitterBufferSize = &JitterBufferSize
	return params
}
func (params *CreateParticipantParams) SetLabel(Label string) *CreateParticipantParams {
	params.Label = &Label
	return params
}
func (params *CreateParticipantParams) SetMaxParticipants(MaxParticipants int32) *CreateParticipantParams {
	params.MaxParticipants = &MaxParticipants
	return params
}
func (params *CreateParticipantParams) SetMuted(Muted bool) *CreateParticipantParams {
	params.Muted = &Muted
	return params
}
func (params *CreateParticipantParams) SetRecord(Record bool) *CreateParticipantParams {
	params.Record = &Record
	return params
}
func (params *CreateParticipantParams) SetRecordingChannels(RecordingChannels string) *CreateParticipantParams {
	params.RecordingChannels = &RecordingChannels
	return params
}
func (params *CreateParticipantParams) SetRecordingStatusCallback(RecordingStatusCallback string) *CreateParticipantParams {
	params.RecordingStatusCallback = &RecordingStatusCallback
	return params
}
func (params *CreateParticipantParams) SetRecordingStatusCallbackEvent(RecordingStatusCallbackEvent []string) *CreateParticipantParams {
	params.RecordingStatusCallbackEvent = &RecordingStatusCallbackEvent
	return params
}
func (params *CreateParticipantParams) SetRecordingStatusCallbackMethod(RecordingStatusCallbackMethod string) *CreateParticipantParams {
	params.RecordingStatusCallbackMethod = &RecordingStatusCallbackMethod
	return params
}
func (params *CreateParticipantParams) SetRecordingTrack(RecordingTrack string) *CreateParticipantParams {
	params.RecordingTrack = &RecordingTrack
	return params
}
func (params *CreateParticipantParams) SetRegion(Region string) *CreateParticipantParams {
	params.Region = &Region
	return params
}
func (params *CreateParticipantParams) SetSipAuthPassword(SipAuthPassword string) *CreateParticipantParams {
	params.SipAuthPassword = &SipAuthPassword
	return params
}
func (params *CreateParticipantParams) SetSipAuthUsername(SipAuthUsername string) *CreateParticipantParams {
	params.SipAuthUsername = &SipAuthUsername
	return params
}
func (params *CreateParticipantParams) SetStartConferenceOnEnter(StartConferenceOnEnter bool) *CreateParticipantParams {
	params.StartConferenceOnEnter = &StartConferenceOnEnter
	return params
}
func (params *CreateParticipantParams) SetStatusCallback(StatusCallback string) *CreateParticipantParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateParticipantParams) SetStatusCallbackEvent(StatusCallbackEvent []string) *CreateParticipantParams {
	params.StatusCallbackEvent = &StatusCallbackEvent
	return params
}
func (params *CreateParticipantParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateParticipantParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateParticipantParams) SetTimeout(Timeout int32) *CreateParticipantParams {
	params.Timeout = &Timeout
	return params
}
func (params *CreateParticipantParams) SetTo(To string) *CreateParticipantParams {
	params.To = &To
	return params
}
func (params *CreateParticipantParams) SetWaitMethod(WaitMethod string) *CreateParticipantParams {
	params.WaitMethod = &WaitMethod
	return params
}
func (params *CreateParticipantParams) SetWaitUrl(WaitUrl string) *CreateParticipantParams {
	params.WaitUrl = &WaitUrl
	return params
}

// CreateParticipant Method for CreateParticipant
//
// param: ConferenceSid The SID of the participant's conference.
//
// param: optional nil or *CreateParticipantParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "Beep" (string) - Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
//
// param: "Byoc" (string) - The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
//
// param: "CallReason" (string) - The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
//
// param: "CallSidToCoach" (string) - The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
//
// param: "CallerId" (string) - The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
//
// param: "Coaching" (bool) - Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
//
// param: "ConferenceRecord" (string) - Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
//
// param: "ConferenceRecordingStatusCallback" (string) - The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
//
// param: "ConferenceRecordingStatusCallbackEvent" ([]string) - The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, and `failed`. Separate multiple values with a space. The default value is `in-progress completed failed`.
//
// param: "ConferenceRecordingStatusCallbackMethod" (string) - The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "ConferenceStatusCallback" (string) - The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
//
// param: "ConferenceStatusCallbackEvent" ([]string) - The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
//
// param: "ConferenceStatusCallbackMethod" (string) - The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "ConferenceTrim" (string) - Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
//
// param: "EarlyMedia" (bool) - Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
//
// param: "EndConferenceOnExit" (bool) - Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
//
// param: "From" (string) - The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
//
// param: "JitterBufferSize" (string) - Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
//
// param: "Label" (string) - A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
//
// param: "MaxParticipants" (int32) - The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
//
// param: "Muted" (bool) - Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
//
// param: "Record" (bool) - Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
//
// param: "RecordingChannels" (string) - The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
//
// param: "RecordingStatusCallback" (string) - The URL that we should call using the `recording_status_callback_method` when the recording status changes.
//
// param: "RecordingStatusCallbackEvent" ([]string) - The recording state changes that should generate a call to `recording_status_callback`. Can be: `in-progress`, `completed`, and `failed`. Separate multiple values with a space. The default value is `in-progress completed failed`.
//
// param: "RecordingStatusCallbackMethod" (string) - The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "RecordingTrack" (string) - The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
//
// param: "Region" (string) - The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
//
// param: "SipAuthPassword" (string) - The SIP password for authentication.
//
// param: "SipAuthUsername" (string) - The SIP username used for authentication.
//
// param: "StartConferenceOnEnter" (bool) - Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackEvent" ([]string) - The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
//
// param: "Timeout" (int32) - The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
//
// param: "To" (string) - The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
//
// param: "WaitMethod" (string) - The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
//
// param: "WaitUrl" (string) - The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
//
// return: ApiV2010AccountConferenceParticipant
func (c *DefaultApiService) CreateParticipant(ConferenceSid string, params *CreateParticipantParams) (*ApiV2010AccountConferenceParticipant, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Beep != nil {
		data.Set("Beep", *params.Beep)
	}
	if params != nil && params.Byoc != nil {
		data.Set("Byoc", *params.Byoc)
	}
	if params != nil && params.CallReason != nil {
		data.Set("CallReason", *params.CallReason)
	}
	if params != nil && params.CallSidToCoach != nil {
		data.Set("CallSidToCoach", *params.CallSidToCoach)
	}
	if params != nil && params.CallerId != nil {
		data.Set("CallerId", *params.CallerId)
	}
	if params != nil && params.Coaching != nil {
		data.Set("Coaching", fmt.Sprint(*params.Coaching))
	}
	if params != nil && params.ConferenceRecord != nil {
		data.Set("ConferenceRecord", *params.ConferenceRecord)
	}
	if params != nil && params.ConferenceRecordingStatusCallback != nil {
		data.Set("ConferenceRecordingStatusCallback", *params.ConferenceRecordingStatusCallback)
	}
	if params != nil && params.ConferenceRecordingStatusCallbackEvent != nil {
		data.Set("ConferenceRecordingStatusCallbackEvent", strings.Join(*params.ConferenceRecordingStatusCallbackEvent, ","))
	}
	if params != nil && params.ConferenceRecordingStatusCallbackMethod != nil {
		data.Set("ConferenceRecordingStatusCallbackMethod", *params.ConferenceRecordingStatusCallbackMethod)
	}
	if params != nil && params.ConferenceStatusCallback != nil {
		data.Set("ConferenceStatusCallback", *params.ConferenceStatusCallback)
	}
	if params != nil && params.ConferenceStatusCallbackEvent != nil {
		data.Set("ConferenceStatusCallbackEvent", strings.Join(*params.ConferenceStatusCallbackEvent, ","))
	}
	if params != nil && params.ConferenceStatusCallbackMethod != nil {
		data.Set("ConferenceStatusCallbackMethod", *params.ConferenceStatusCallbackMethod)
	}
	if params != nil && params.ConferenceTrim != nil {
		data.Set("ConferenceTrim", *params.ConferenceTrim)
	}
	if params != nil && params.EarlyMedia != nil {
		data.Set("EarlyMedia", fmt.Sprint(*params.EarlyMedia))
	}
	if params != nil && params.EndConferenceOnExit != nil {
		data.Set("EndConferenceOnExit", fmt.Sprint(*params.EndConferenceOnExit))
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.JitterBufferSize != nil {
		data.Set("JitterBufferSize", *params.JitterBufferSize)
	}
	if params != nil && params.Label != nil {
		data.Set("Label", *params.Label)
	}
	if params != nil && params.MaxParticipants != nil {
		data.Set("MaxParticipants", fmt.Sprint(*params.MaxParticipants))
	}
	if params != nil && params.Muted != nil {
		data.Set("Muted", fmt.Sprint(*params.Muted))
	}
	if params != nil && params.Record != nil {
		data.Set("Record", fmt.Sprint(*params.Record))
	}
	if params != nil && params.RecordingChannels != nil {
		data.Set("RecordingChannels", *params.RecordingChannels)
	}
	if params != nil && params.RecordingStatusCallback != nil {
		data.Set("RecordingStatusCallback", *params.RecordingStatusCallback)
	}
	if params != nil && params.RecordingStatusCallbackEvent != nil {
		data.Set("RecordingStatusCallbackEvent", strings.Join(*params.RecordingStatusCallbackEvent, ","))
	}
	if params != nil && params.RecordingStatusCallbackMethod != nil {
		data.Set("RecordingStatusCallbackMethod", *params.RecordingStatusCallbackMethod)
	}
	if params != nil && params.RecordingTrack != nil {
		data.Set("RecordingTrack", *params.RecordingTrack)
	}
	if params != nil && params.Region != nil {
		data.Set("Region", *params.Region)
	}
	if params != nil && params.SipAuthPassword != nil {
		data.Set("SipAuthPassword", *params.SipAuthPassword)
	}
	if params != nil && params.SipAuthUsername != nil {
		data.Set("SipAuthUsername", *params.SipAuthUsername)
	}
	if params != nil && params.StartConferenceOnEnter != nil {
		data.Set("StartConferenceOnEnter", fmt.Sprint(*params.StartConferenceOnEnter))
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackEvent != nil {
		data.Set("StatusCallbackEvent", strings.Join(*params.StatusCallbackEvent, ","))
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.Timeout != nil {
		data.Set("Timeout", fmt.Sprint(*params.Timeout))
	}
	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}
	if params != nil && params.WaitMethod != nil {
		data.Set("WaitMethod", *params.WaitMethod)
	}
	if params != nil && params.WaitUrl != nil {
		data.Set("WaitUrl", *params.WaitUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConferenceParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreatePaymentsParams Optional parameters for the method 'CreatePayments'
type CreatePaymentsParams struct {
	PathAccountSid      *string                 `json:"PathAccountSid,omitempty"`
	BankAccountType     *string                 `json:"BankAccountType,omitempty"`
	ChargeAmount        *float32                `json:"ChargeAmount,omitempty"`
	Currency            *string                 `json:"Currency,omitempty"`
	Description         *string                 `json:"Description,omitempty"`
	IdempotencyKey      *string                 `json:"IdempotencyKey,omitempty"`
	Input               *string                 `json:"Input,omitempty"`
	MinPostalCodeLength *int32                  `json:"MinPostalCodeLength,omitempty"`
	Parameter           *map[string]interface{} `json:"Parameter,omitempty"`
	PaymentConnector    *string                 `json:"PaymentConnector,omitempty"`
	PaymentMethod       *string                 `json:"PaymentMethod,omitempty"`
	PostalCode          *bool                   `json:"PostalCode,omitempty"`
	SecurityCode        *bool                   `json:"SecurityCode,omitempty"`
	StatusCallback      *string                 `json:"StatusCallback,omitempty"`
	Timeout             *int32                  `json:"Timeout,omitempty"`
	TokenType           *string                 `json:"TokenType,omitempty"`
	ValidCardTypes      *string                 `json:"ValidCardTypes,omitempty"`
}

func (params *CreatePaymentsParams) SetPathAccountSid(PathAccountSid string) *CreatePaymentsParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreatePaymentsParams) SetBankAccountType(BankAccountType string) *CreatePaymentsParams {
	params.BankAccountType = &BankAccountType
	return params
}
func (params *CreatePaymentsParams) SetChargeAmount(ChargeAmount float32) *CreatePaymentsParams {
	params.ChargeAmount = &ChargeAmount
	return params
}
func (params *CreatePaymentsParams) SetCurrency(Currency string) *CreatePaymentsParams {
	params.Currency = &Currency
	return params
}
func (params *CreatePaymentsParams) SetDescription(Description string) *CreatePaymentsParams {
	params.Description = &Description
	return params
}
func (params *CreatePaymentsParams) SetIdempotencyKey(IdempotencyKey string) *CreatePaymentsParams {
	params.IdempotencyKey = &IdempotencyKey
	return params
}
func (params *CreatePaymentsParams) SetInput(Input string) *CreatePaymentsParams {
	params.Input = &Input
	return params
}
func (params *CreatePaymentsParams) SetMinPostalCodeLength(MinPostalCodeLength int32) *CreatePaymentsParams {
	params.MinPostalCodeLength = &MinPostalCodeLength
	return params
}
func (params *CreatePaymentsParams) SetParameter(Parameter map[string]interface{}) *CreatePaymentsParams {
	params.Parameter = &Parameter
	return params
}
func (params *CreatePaymentsParams) SetPaymentConnector(PaymentConnector string) *CreatePaymentsParams {
	params.PaymentConnector = &PaymentConnector
	return params
}
func (params *CreatePaymentsParams) SetPaymentMethod(PaymentMethod string) *CreatePaymentsParams {
	params.PaymentMethod = &PaymentMethod
	return params
}
func (params *CreatePaymentsParams) SetPostalCode(PostalCode bool) *CreatePaymentsParams {
	params.PostalCode = &PostalCode
	return params
}
func (params *CreatePaymentsParams) SetSecurityCode(SecurityCode bool) *CreatePaymentsParams {
	params.SecurityCode = &SecurityCode
	return params
}
func (params *CreatePaymentsParams) SetStatusCallback(StatusCallback string) *CreatePaymentsParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreatePaymentsParams) SetTimeout(Timeout int32) *CreatePaymentsParams {
	params.Timeout = &Timeout
	return params
}
func (params *CreatePaymentsParams) SetTokenType(TokenType string) *CreatePaymentsParams {
	params.TokenType = &TokenType
	return params
}
func (params *CreatePaymentsParams) SetValidCardTypes(ValidCardTypes string) *CreatePaymentsParams {
	params.ValidCardTypes = &ValidCardTypes
	return params
}

// CreatePayments Method for CreatePayments
//
// create an instance of payments. This will start a new payments session
//
// param: CallSid The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
//
// param: optional nil or *CreatePaymentsParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "BankAccountType" (string) - Type of bank account if payment source is ACH. One of `consumer-checking`, `consumer-savings`, or `commercial-checking`. The default value is `consumer-checking`.
//
// param: "ChargeAmount" (float32) - A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
//
// param: "Currency" (string) - The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the <Pay> Connector are accepted.
//
// param: "Description" (string) - The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
//
// param: "IdempotencyKey" (string) - A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
//
// param: "Input" (string) - A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
//
// param: "MinPostalCodeLength" (int32) - A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
//
// param: "Parameter" (map[string]interface{}) - A single level JSON string that is required when accepting certain information specific only to ACH payments. The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
//
// param: "PaymentConnector" (string) - This is the unique name corresponding to the Payment Gateway Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
//
// param: "PaymentMethod" (string) - Type of payment being captured. One of `credit-card` or `ach-debit`. The default value is `credit-card`.
//
// param: "PostalCode" (bool) - Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
//
// param: "SecurityCode" (bool) - Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
//
// param: "StatusCallback" (string) - Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
//
// param: "Timeout" (int32) - The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
//
// param: "TokenType" (string) - Indicates whether the payment method should be tokenized as a `one-time` or `reusable` token. The default value is `reusable`. Do not enter a charge amount when tokenizing. If a charge amount is entered, the payment method will be charged and not tokenized.
//
// param: "ValidCardTypes" (string) - Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
//
// return: ApiV2010AccountCallPayments
func (c *DefaultApiService) CreatePayments(CallSid string, params *CreatePaymentsParams) (*ApiV2010AccountCallPayments, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.BankAccountType != nil {
		data.Set("BankAccountType", *params.BankAccountType)
	}
	if params != nil && params.ChargeAmount != nil {
		data.Set("ChargeAmount", fmt.Sprint(*params.ChargeAmount))
	}
	if params != nil && params.Currency != nil {
		data.Set("Currency", *params.Currency)
	}
	if params != nil && params.Description != nil {
		data.Set("Description", *params.Description)
	}
	if params != nil && params.IdempotencyKey != nil {
		data.Set("IdempotencyKey", *params.IdempotencyKey)
	}
	if params != nil && params.Input != nil {
		data.Set("Input", *params.Input)
	}
	if params != nil && params.MinPostalCodeLength != nil {
		data.Set("MinPostalCodeLength", fmt.Sprint(*params.MinPostalCodeLength))
	}
	if params != nil && params.Parameter != nil {
		v, err := json.Marshal(params.Parameter)

		if err != nil {
			return nil, err
		}

		data.Set("Parameter", string(v))
	}
	if params != nil && params.PaymentConnector != nil {
		data.Set("PaymentConnector", *params.PaymentConnector)
	}
	if params != nil && params.PaymentMethod != nil {
		data.Set("PaymentMethod", *params.PaymentMethod)
	}
	if params != nil && params.PostalCode != nil {
		data.Set("PostalCode", fmt.Sprint(*params.PostalCode))
	}
	if params != nil && params.SecurityCode != nil {
		data.Set("SecurityCode", fmt.Sprint(*params.SecurityCode))
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.Timeout != nil {
		data.Set("Timeout", fmt.Sprint(*params.Timeout))
	}
	if params != nil && params.TokenType != nil {
		data.Set("TokenType", *params.TokenType)
	}
	if params != nil && params.ValidCardTypes != nil {
		data.Set("ValidCardTypes", *params.ValidCardTypes)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallPayments{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateQueueParams Optional parameters for the method 'CreateQueue'
type CreateQueueParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	MaxSize        *int32  `json:"MaxSize,omitempty"`
}

func (params *CreateQueueParams) SetPathAccountSid(PathAccountSid string) *CreateQueueParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateQueueParams) SetFriendlyName(FriendlyName string) *CreateQueueParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateQueueParams) SetMaxSize(MaxSize int32) *CreateQueueParams {
	params.MaxSize = &MaxSize
	return params
}

// CreateQueue Method for CreateQueue
//
// Create a queue
//
// param: optional nil or *CreateQueueParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe this resource. It can be up to 64 characters long.
//
// param: "MaxSize" (int32) - The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
//
// return: ApiV2010AccountQueue
func (c *DefaultApiService) CreateQueue(params *CreateQueueParams) (*ApiV2010AccountQueue, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MaxSize != nil {
		data.Set("MaxSize", fmt.Sprint(*params.MaxSize))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountQueue{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipAuthCallsCredentialListMappingParams Optional parameters for the method 'CreateSipAuthCallsCredentialListMapping'
type CreateSipAuthCallsCredentialListMappingParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	CredentialListSid *string `json:"CredentialListSid,omitempty"`
}

func (params *CreateSipAuthCallsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *CreateSipAuthCallsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipAuthCallsCredentialListMappingParams) SetCredentialListSid(CredentialListSid string) *CreateSipAuthCallsCredentialListMappingParams {
	params.CredentialListSid = &CredentialListSid
	return params
}

// CreateSipAuthCallsCredentialListMapping Method for CreateSipAuthCallsCredentialListMapping
//
// Create a new credential list mapping resource
//
// param: DomainSid The SID of the SIP domain that will contain the new resource.
//
// param: optional nil or *CreateSipAuthCallsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "CredentialListSid" (string) - The SID of the CredentialList resource to map to the SIP domain.
//
// return: ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
func (c *DefaultApiService) CreateSipAuthCallsCredentialListMapping(DomainSid string, params *CreateSipAuthCallsCredentialListMappingParams) (*ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CredentialListSid != nil {
		data.Set("CredentialListSid", *params.CredentialListSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipAuthCallsIpAccessControlListMappingParams Optional parameters for the method 'CreateSipAuthCallsIpAccessControlListMapping'
type CreateSipAuthCallsIpAccessControlListMappingParams struct {
	PathAccountSid         *string `json:"PathAccountSid,omitempty"`
	IpAccessControlListSid *string `json:"IpAccessControlListSid,omitempty"`
}

func (params *CreateSipAuthCallsIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *CreateSipAuthCallsIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipAuthCallsIpAccessControlListMappingParams) SetIpAccessControlListSid(IpAccessControlListSid string) *CreateSipAuthCallsIpAccessControlListMappingParams {
	params.IpAccessControlListSid = &IpAccessControlListSid
	return params
}

// CreateSipAuthCallsIpAccessControlListMapping Method for CreateSipAuthCallsIpAccessControlListMapping
//
// Create a new IP Access Control List mapping
//
// param: DomainSid The SID of the SIP domain that will contain the new resource.
//
// param: optional nil or *CreateSipAuthCallsIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "IpAccessControlListSid" (string) - The SID of the IpAccessControlList resource to map to the SIP domain.
//
// return: ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
func (c *DefaultApiService) CreateSipAuthCallsIpAccessControlListMapping(DomainSid string, params *CreateSipAuthCallsIpAccessControlListMappingParams) (*ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.IpAccessControlListSid != nil {
		data.Set("IpAccessControlListSid", *params.IpAccessControlListSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipAuthRegistrationsCredentialListMappingParams Optional parameters for the method 'CreateSipAuthRegistrationsCredentialListMapping'
type CreateSipAuthRegistrationsCredentialListMappingParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	CredentialListSid *string `json:"CredentialListSid,omitempty"`
}

func (params *CreateSipAuthRegistrationsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *CreateSipAuthRegistrationsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipAuthRegistrationsCredentialListMappingParams) SetCredentialListSid(CredentialListSid string) *CreateSipAuthRegistrationsCredentialListMappingParams {
	params.CredentialListSid = &CredentialListSid
	return params
}

// CreateSipAuthRegistrationsCredentialListMapping Method for CreateSipAuthRegistrationsCredentialListMapping
//
// Create a new credential list mapping resource
//
// param: DomainSid The SID of the SIP domain that will contain the new resource.
//
// param: optional nil or *CreateSipAuthRegistrationsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "CredentialListSid" (string) - The SID of the CredentialList resource to map to the SIP domain.
//
// return: ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
func (c *DefaultApiService) CreateSipAuthRegistrationsCredentialListMapping(DomainSid string, params *CreateSipAuthRegistrationsCredentialListMappingParams) (*ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CredentialListSid != nil {
		data.Set("CredentialListSid", *params.CredentialListSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipCredentialParams Optional parameters for the method 'CreateSipCredential'
type CreateSipCredentialParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Password       *string `json:"Password,omitempty"`
	Username       *string `json:"Username,omitempty"`
}

func (params *CreateSipCredentialParams) SetPathAccountSid(PathAccountSid string) *CreateSipCredentialParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipCredentialParams) SetPassword(Password string) *CreateSipCredentialParams {
	params.Password = &Password
	return params
}
func (params *CreateSipCredentialParams) SetUsername(Username string) *CreateSipCredentialParams {
	params.Username = &Username
	return params
}

// CreateSipCredential Method for CreateSipCredential
//
// Create a new credential resource.
//
// param: CredentialListSid The unique id that identifies the credential list to include the created credential.
//
// param: optional nil or *CreateSipCredentialParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "Password" (string) - The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
//
// param: "Username" (string) - The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
//
// return: ApiV2010AccountSipSipCredentialListSipCredential
func (c *DefaultApiService) CreateSipCredential(CredentialListSid string, params *CreateSipCredentialParams) (*ApiV2010AccountSipSipCredentialListSipCredential, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CredentialListSid"+"}", CredentialListSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Password != nil {
		data.Set("Password", *params.Password)
	}
	if params != nil && params.Username != nil {
		data.Set("Username", *params.Username)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipCredentialListSipCredential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipCredentialListParams Optional parameters for the method 'CreateSipCredentialList'
type CreateSipCredentialListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *CreateSipCredentialListParams) SetPathAccountSid(PathAccountSid string) *CreateSipCredentialListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipCredentialListParams) SetFriendlyName(FriendlyName string) *CreateSipCredentialListParams {
	params.FriendlyName = &FriendlyName
	return params
}

// CreateSipCredentialList Method for CreateSipCredentialList
//
// Create a Credential List
//
// param: optional nil or *CreateSipCredentialListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "FriendlyName" (string) - A human readable descriptive text that describes the CredentialList, up to 64 characters long.
//
// return: ApiV2010AccountSipSipCredentialList
func (c *DefaultApiService) CreateSipCredentialList(params *CreateSipCredentialListParams) (*ApiV2010AccountSipSipCredentialList, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipCredentialList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipCredentialListMappingParams Optional parameters for the method 'CreateSipCredentialListMapping'
type CreateSipCredentialListMappingParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	CredentialListSid *string `json:"CredentialListSid,omitempty"`
}

func (params *CreateSipCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *CreateSipCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipCredentialListMappingParams) SetCredentialListSid(CredentialListSid string) *CreateSipCredentialListMappingParams {
	params.CredentialListSid = &CredentialListSid
	return params
}

// CreateSipCredentialListMapping Method for CreateSipCredentialListMapping
//
// Create a CredentialListMapping resource for an account.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
//
// param: optional nil or *CreateSipCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "CredentialListSid" (string) - A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
//
// return: ApiV2010AccountSipSipDomainSipCredentialListMapping
func (c *DefaultApiService) CreateSipCredentialListMapping(DomainSid string, params *CreateSipCredentialListMappingParams) (*ApiV2010AccountSipSipDomainSipCredentialListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CredentialListSid != nil {
		data.Set("CredentialListSid", *params.CredentialListSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipCredentialListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipDomainParams Optional parameters for the method 'CreateSipDomain'
type CreateSipDomainParams struct {
	PathAccountSid            *string `json:"PathAccountSid,omitempty"`
	ByocTrunkSid              *string `json:"ByocTrunkSid,omitempty"`
	DomainName                *string `json:"DomainName,omitempty"`
	EmergencyCallerSid        *string `json:"EmergencyCallerSid,omitempty"`
	EmergencyCallingEnabled   *bool   `json:"EmergencyCallingEnabled,omitempty"`
	FriendlyName              *string `json:"FriendlyName,omitempty"`
	Secure                    *bool   `json:"Secure,omitempty"`
	SipRegistration           *bool   `json:"SipRegistration,omitempty"`
	VoiceFallbackMethod       *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl          *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod               *string `json:"VoiceMethod,omitempty"`
	VoiceStatusCallbackMethod *string `json:"VoiceStatusCallbackMethod,omitempty"`
	VoiceStatusCallbackUrl    *string `json:"VoiceStatusCallbackUrl,omitempty"`
	VoiceUrl                  *string `json:"VoiceUrl,omitempty"`
}

func (params *CreateSipDomainParams) SetPathAccountSid(PathAccountSid string) *CreateSipDomainParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipDomainParams) SetByocTrunkSid(ByocTrunkSid string) *CreateSipDomainParams {
	params.ByocTrunkSid = &ByocTrunkSid
	return params
}
func (params *CreateSipDomainParams) SetDomainName(DomainName string) *CreateSipDomainParams {
	params.DomainName = &DomainName
	return params
}
func (params *CreateSipDomainParams) SetEmergencyCallerSid(EmergencyCallerSid string) *CreateSipDomainParams {
	params.EmergencyCallerSid = &EmergencyCallerSid
	return params
}
func (params *CreateSipDomainParams) SetEmergencyCallingEnabled(EmergencyCallingEnabled bool) *CreateSipDomainParams {
	params.EmergencyCallingEnabled = &EmergencyCallingEnabled
	return params
}
func (params *CreateSipDomainParams) SetFriendlyName(FriendlyName string) *CreateSipDomainParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateSipDomainParams) SetSecure(Secure bool) *CreateSipDomainParams {
	params.Secure = &Secure
	return params
}
func (params *CreateSipDomainParams) SetSipRegistration(SipRegistration bool) *CreateSipDomainParams {
	params.SipRegistration = &SipRegistration
	return params
}
func (params *CreateSipDomainParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *CreateSipDomainParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *CreateSipDomainParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *CreateSipDomainParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *CreateSipDomainParams) SetVoiceMethod(VoiceMethod string) *CreateSipDomainParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *CreateSipDomainParams) SetVoiceStatusCallbackMethod(VoiceStatusCallbackMethod string) *CreateSipDomainParams {
	params.VoiceStatusCallbackMethod = &VoiceStatusCallbackMethod
	return params
}
func (params *CreateSipDomainParams) SetVoiceStatusCallbackUrl(VoiceStatusCallbackUrl string) *CreateSipDomainParams {
	params.VoiceStatusCallbackUrl = &VoiceStatusCallbackUrl
	return params
}
func (params *CreateSipDomainParams) SetVoiceUrl(VoiceUrl string) *CreateSipDomainParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// CreateSipDomain Method for CreateSipDomain
//
// Create a new Domain
//
// param: optional nil or *CreateSipDomainParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "ByocTrunkSid" (string) - The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
//
// param: "DomainName" (string) - The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
//
// param: "EmergencyCallerSid" (string) - Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
//
// param: "EmergencyCallingEnabled" (bool) - Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe the resource. It can be up to 64 characters long.
//
// param: "Secure" (bool) - Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
//
// param: "SipRegistration" (bool) - Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
//
// param: "VoiceMethod" (string) - The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
//
// param: "VoiceStatusCallbackMethod" (string) - The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
//
// param: "VoiceStatusCallbackUrl" (string) - The URL that we should call to pass status parameters (such as call ended) to your application.
//
// param: "VoiceUrl" (string) - The URL we should when the domain receives a call.
//
// return: ApiV2010AccountSipSipDomain
func (c *DefaultApiService) CreateSipDomain(params *CreateSipDomainParams) (*ApiV2010AccountSipSipDomain, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ByocTrunkSid != nil {
		data.Set("ByocTrunkSid", *params.ByocTrunkSid)
	}
	if params != nil && params.DomainName != nil {
		data.Set("DomainName", *params.DomainName)
	}
	if params != nil && params.EmergencyCallerSid != nil {
		data.Set("EmergencyCallerSid", *params.EmergencyCallerSid)
	}
	if params != nil && params.EmergencyCallingEnabled != nil {
		data.Set("EmergencyCallingEnabled", fmt.Sprint(*params.EmergencyCallingEnabled))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Secure != nil {
		data.Set("Secure", fmt.Sprint(*params.Secure))
	}
	if params != nil && params.SipRegistration != nil {
		data.Set("SipRegistration", fmt.Sprint(*params.SipRegistration))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceStatusCallbackMethod != nil {
		data.Set("VoiceStatusCallbackMethod", *params.VoiceStatusCallbackMethod)
	}
	if params != nil && params.VoiceStatusCallbackUrl != nil {
		data.Set("VoiceStatusCallbackUrl", *params.VoiceStatusCallbackUrl)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomain{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipIpAccessControlListParams Optional parameters for the method 'CreateSipIpAccessControlList'
type CreateSipIpAccessControlListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *CreateSipIpAccessControlListParams) SetPathAccountSid(PathAccountSid string) *CreateSipIpAccessControlListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipIpAccessControlListParams) SetFriendlyName(FriendlyName string) *CreateSipIpAccessControlListParams {
	params.FriendlyName = &FriendlyName
	return params
}

// CreateSipIpAccessControlList Method for CreateSipIpAccessControlList
//
// Create a new IpAccessControlList resource
//
// param: optional nil or *CreateSipIpAccessControlListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "FriendlyName" (string) - A human readable descriptive text that describes the IpAccessControlList, up to 64 characters long.
//
// return: ApiV2010AccountSipSipIpAccessControlList
func (c *DefaultApiService) CreateSipIpAccessControlList(params *CreateSipIpAccessControlListParams) (*ApiV2010AccountSipSipIpAccessControlList, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipIpAccessControlList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipIpAccessControlListMappingParams Optional parameters for the method 'CreateSipIpAccessControlListMapping'
type CreateSipIpAccessControlListMappingParams struct {
	PathAccountSid         *string `json:"PathAccountSid,omitempty"`
	IpAccessControlListSid *string `json:"IpAccessControlListSid,omitempty"`
}

func (params *CreateSipIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *CreateSipIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipIpAccessControlListMappingParams) SetIpAccessControlListSid(IpAccessControlListSid string) *CreateSipIpAccessControlListMappingParams {
	params.IpAccessControlListSid = &IpAccessControlListSid
	return params
}

// CreateSipIpAccessControlListMapping Method for CreateSipIpAccessControlListMapping
//
// Create a new IpAccessControlListMapping resource.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP domain.
//
// param: optional nil or *CreateSipIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "IpAccessControlListSid" (string) - The unique id of the IP access control list to map to the SIP domain.
//
// return: ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
func (c *DefaultApiService) CreateSipIpAccessControlListMapping(DomainSid string, params *CreateSipIpAccessControlListMappingParams) (*ApiV2010AccountSipSipDomainSipIpAccessControlListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.IpAccessControlListSid != nil {
		data.Set("IpAccessControlListSid", *params.IpAccessControlListSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipIpAccessControlListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSipIpAddressParams Optional parameters for the method 'CreateSipIpAddress'
type CreateSipIpAddressParams struct {
	PathAccountSid   *string `json:"PathAccountSid,omitempty"`
	CidrPrefixLength *int32  `json:"CidrPrefixLength,omitempty"`
	FriendlyName     *string `json:"FriendlyName,omitempty"`
	IpAddress        *string `json:"IpAddress,omitempty"`
}

func (params *CreateSipIpAddressParams) SetPathAccountSid(PathAccountSid string) *CreateSipIpAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateSipIpAddressParams) SetCidrPrefixLength(CidrPrefixLength int32) *CreateSipIpAddressParams {
	params.CidrPrefixLength = &CidrPrefixLength
	return params
}
func (params *CreateSipIpAddressParams) SetFriendlyName(FriendlyName string) *CreateSipIpAddressParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateSipIpAddressParams) SetIpAddress(IpAddress string) *CreateSipIpAddressParams {
	params.IpAddress = &IpAddress
	return params
}

// CreateSipIpAddress Method for CreateSipIpAddress
//
// Create a new IpAddress resource.
//
// param: IpAccessControlListSid The IpAccessControlList Sid with which to associate the created IpAddress resource.
//
// param: optional nil or *CreateSipIpAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "CidrPrefixLength" (int32) - An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
//
// param: "FriendlyName" (string) - A human readable descriptive text for this resource, up to 64 characters long.
//
// param: "IpAddress" (string) - An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
//
// return: ApiV2010AccountSipSipIpAccessControlListSipIpAddress
func (c *DefaultApiService) CreateSipIpAddress(IpAccessControlListSid string, params *CreateSipIpAddressParams) (*ApiV2010AccountSipSipIpAccessControlListSipIpAddress, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"IpAccessControlListSid"+"}", IpAccessControlListSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CidrPrefixLength != nil {
		data.Set("CidrPrefixLength", fmt.Sprint(*params.CidrPrefixLength))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IpAddress != nil {
		data.Set("IpAddress", *params.IpAddress)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipIpAccessControlListSipIpAddress{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateTokenParams Optional parameters for the method 'CreateToken'
type CreateTokenParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Ttl            *int32  `json:"Ttl,omitempty"`
}

func (params *CreateTokenParams) SetPathAccountSid(PathAccountSid string) *CreateTokenParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateTokenParams) SetTtl(Ttl int32) *CreateTokenParams {
	params.Ttl = &Ttl
	return params
}

// CreateToken Method for CreateToken
//
// Create a new token for ICE servers
//
// param: optional nil or *CreateTokenParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "Ttl" (int32) - The duration in seconds for which the generated credentials are valid. The default value is 86400 (24 hours).
//
// return: ApiV2010AccountToken
func (c *DefaultApiService) CreateToken(params *CreateTokenParams) (*ApiV2010AccountToken, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Tokens.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountToken{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateUsageTriggerParams Optional parameters for the method 'CreateUsageTrigger'
type CreateUsageTriggerParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	CallbackMethod *string `json:"CallbackMethod,omitempty"`
	CallbackUrl    *string `json:"CallbackUrl,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	Recurring      *string `json:"Recurring,omitempty"`
	TriggerBy      *string `json:"TriggerBy,omitempty"`
	TriggerValue   *string `json:"TriggerValue,omitempty"`
	UsageCategory  *string `json:"UsageCategory,omitempty"`
}

func (params *CreateUsageTriggerParams) SetPathAccountSid(PathAccountSid string) *CreateUsageTriggerParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateUsageTriggerParams) SetCallbackMethod(CallbackMethod string) *CreateUsageTriggerParams {
	params.CallbackMethod = &CallbackMethod
	return params
}
func (params *CreateUsageTriggerParams) SetCallbackUrl(CallbackUrl string) *CreateUsageTriggerParams {
	params.CallbackUrl = &CallbackUrl
	return params
}
func (params *CreateUsageTriggerParams) SetFriendlyName(FriendlyName string) *CreateUsageTriggerParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateUsageTriggerParams) SetRecurring(Recurring string) *CreateUsageTriggerParams {
	params.Recurring = &Recurring
	return params
}
func (params *CreateUsageTriggerParams) SetTriggerBy(TriggerBy string) *CreateUsageTriggerParams {
	params.TriggerBy = &TriggerBy
	return params
}
func (params *CreateUsageTriggerParams) SetTriggerValue(TriggerValue string) *CreateUsageTriggerParams {
	params.TriggerValue = &TriggerValue
	return params
}
func (params *CreateUsageTriggerParams) SetUsageCategory(UsageCategory string) *CreateUsageTriggerParams {
	params.UsageCategory = &UsageCategory
	return params
}

// CreateUsageTrigger Method for CreateUsageTrigger
//
// Create a new UsageTrigger
//
// param: optional nil or *CreateUsageTriggerParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
//
// param: "CallbackMethod" (string) - The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.
//
// param: "CallbackUrl" (string) - The URL we should call using `callback_method` when the trigger fires.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// param: "Recurring" (string) - The frequency of a recurring UsageTrigger.  Can be: `daily`, `monthly`, or `yearly` for recurring triggers or empty for non-recurring triggers. A trigger will only fire once during each period. Recurring times are in GMT.
//
// param: "TriggerBy" (string) - The field in the [UsageRecord](https://www.twilio.com/docs/usage/api/usage-record) resource that should fire the trigger.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).  The default is `usage`.
//
// param: "TriggerValue" (string) - The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
//
// param: "UsageCategory" (string) - The usage category that the trigger should watch.  Use one of the supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) for this value.
//
// return: ApiV2010AccountUsageUsageTrigger
func (c *DefaultApiService) CreateUsageTrigger(params *CreateUsageTriggerParams) (*ApiV2010AccountUsageUsageTrigger, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CallbackMethod != nil {
		data.Set("CallbackMethod", *params.CallbackMethod)
	}
	if params != nil && params.CallbackUrl != nil {
		data.Set("CallbackUrl", *params.CallbackUrl)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Recurring != nil {
		data.Set("Recurring", *params.Recurring)
	}
	if params != nil && params.TriggerBy != nil {
		data.Set("TriggerBy", *params.TriggerBy)
	}
	if params != nil && params.TriggerValue != nil {
		data.Set("TriggerValue", *params.TriggerValue)
	}
	if params != nil && params.UsageCategory != nil {
		data.Set("UsageCategory", *params.UsageCategory)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountUsageUsageTrigger{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateValidationRequestParams Optional parameters for the method 'CreateValidationRequest'
type CreateValidationRequestParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	CallDelay            *int32  `json:"CallDelay,omitempty"`
	Extension            *string `json:"Extension,omitempty"`
	FriendlyName         *string `json:"FriendlyName,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
}

func (params *CreateValidationRequestParams) SetPathAccountSid(PathAccountSid string) *CreateValidationRequestParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *CreateValidationRequestParams) SetCallDelay(CallDelay int32) *CreateValidationRequestParams {
	params.CallDelay = &CallDelay
	return params
}
func (params *CreateValidationRequestParams) SetExtension(Extension string) *CreateValidationRequestParams {
	params.Extension = &Extension
	return params
}
func (params *CreateValidationRequestParams) SetFriendlyName(FriendlyName string) *CreateValidationRequestParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateValidationRequestParams) SetPhoneNumber(PhoneNumber string) *CreateValidationRequestParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *CreateValidationRequestParams) SetStatusCallback(StatusCallback string) *CreateValidationRequestParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreateValidationRequestParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateValidationRequestParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}

// CreateValidationRequest Method for CreateValidationRequest
//
// param: optional nil or *CreateValidationRequestParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for the new caller ID resource.
//
// param: "CallDelay" (int32) - The number of seconds to delay before initiating the verification call. Can be an integer between `0` and `60`, inclusive. The default is `0`.
//
// param: "Extension" (string) - The digits to dial after connecting the verification call.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new caller ID resource. It can be up to 64 characters long. The default value is a formatted version of the phone number.
//
// param: "PhoneNumber" (string) - The phone number to verify in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information about the verification process to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`, and the default is `POST`.
//
// return: ApiV2010AccountValidationRequest
func (c *DefaultApiService) CreateValidationRequest(params *CreateValidationRequestParams) (*ApiV2010AccountValidationRequest, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CallDelay != nil {
		data.Set("CallDelay", fmt.Sprint(*params.CallDelay))
	}
	if params != nil && params.Extension != nil {
		data.Set("Extension", *params.Extension)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountValidationRequest{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// DeleteAddressParams Optional parameters for the method 'DeleteAddress'
type DeleteAddressParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteAddressParams) SetPathAccountSid(PathAccountSid string) *DeleteAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteAddress Method for DeleteAddress
//
// param: Sid The Twilio-provided string that uniquely identifies the Address resource to delete.
//
// param: optional nil or *DeleteAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
//
func (c *DefaultApiService) DeleteAddress(Sid string, params *DeleteAddressParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteApplicationParams Optional parameters for the method 'DeleteApplication'
type DeleteApplicationParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteApplicationParams) SetPathAccountSid(PathAccountSid string) *DeleteApplicationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteApplication Method for DeleteApplication
//
// Delete the application by the specified application sid
//
// param: Sid The Twilio-provided string that uniquely identifies the Application resource to delete.
//
// param: optional nil or *DeleteApplicationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
//
func (c *DefaultApiService) DeleteApplication(Sid string, params *DeleteApplicationParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteCallParams Optional parameters for the method 'DeleteCall'
type DeleteCallParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteCallParams) SetPathAccountSid(PathAccountSid string) *DeleteCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteCall Method for DeleteCall
//
// Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
//
// param: Sid The Twilio-provided Call SID that uniquely identifies the Call resource to delete
//
// param: optional nil or *DeleteCallParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
//
func (c *DefaultApiService) DeleteCall(Sid string, params *DeleteCallParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteCallFeedbackSummaryParams Optional parameters for the method 'DeleteCallFeedbackSummary'
type DeleteCallFeedbackSummaryParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteCallFeedbackSummaryParams) SetPathAccountSid(PathAccountSid string) *DeleteCallFeedbackSummaryParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteCallFeedbackSummary Method for DeleteCallFeedbackSummary
//
// Delete a FeedbackSummary resource from a call
//
// param: Sid A 34 character string that uniquely identifies this resource.
//
// param: optional nil or *DeleteCallFeedbackSummaryParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
func (c *DefaultApiService) DeleteCallFeedbackSummary(Sid string, params *DeleteCallFeedbackSummaryParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteCallRecordingParams Optional parameters for the method 'DeleteCallRecording'
type DeleteCallRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteCallRecordingParams) SetPathAccountSid(PathAccountSid string) *DeleteCallRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteCallRecording Method for DeleteCallRecording
//
// Delete a recording from your account
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording resource to delete.
//
// param: optional nil or *DeleteCallRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
//
func (c *DefaultApiService) DeleteCallRecording(CallSid string, Sid string, params *DeleteCallRecordingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteConferenceRecordingParams Optional parameters for the method 'DeleteConferenceRecording'
type DeleteConferenceRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteConferenceRecordingParams) SetPathAccountSid(PathAccountSid string) *DeleteConferenceRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteConferenceRecording Method for DeleteConferenceRecording
//
// Delete a recording from your account
//
// param: ConferenceSid The Conference SID that identifies the conference associated with the recording to delete.
//
// param: Sid The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
//
// param: optional nil or *DeleteConferenceRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
//
func (c *DefaultApiService) DeleteConferenceRecording(ConferenceSid string, Sid string, params *DeleteConferenceRecordingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteConnectAppParams Optional parameters for the method 'DeleteConnectApp'
type DeleteConnectAppParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteConnectAppParams) SetPathAccountSid(PathAccountSid string) *DeleteConnectAppParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteConnectApp Method for DeleteConnectApp
//
// Delete an instance of a connect-app
//
// param: Sid The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
//
// param: optional nil or *DeleteConnectAppParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
//
func (c *DefaultApiService) DeleteConnectApp(Sid string, params *DeleteConnectAppParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteIncomingPhoneNumberParams Optional parameters for the method 'DeleteIncomingPhoneNumber'
type DeleteIncomingPhoneNumberParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteIncomingPhoneNumberParams) SetPathAccountSid(PathAccountSid string) *DeleteIncomingPhoneNumberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteIncomingPhoneNumber Method for DeleteIncomingPhoneNumber
//
// Delete a phone-numbers belonging to the account used to make the request.
//
// param: Sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete.
//
// param: optional nil or *DeleteIncomingPhoneNumberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete.
//
func (c *DefaultApiService) DeleteIncomingPhoneNumber(Sid string, params *DeleteIncomingPhoneNumberParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteIncomingPhoneNumberAssignedAddOnParams Optional parameters for the method 'DeleteIncomingPhoneNumberAssignedAddOn'
type DeleteIncomingPhoneNumberAssignedAddOnParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteIncomingPhoneNumberAssignedAddOnParams) SetPathAccountSid(PathAccountSid string) *DeleteIncomingPhoneNumberAssignedAddOnParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteIncomingPhoneNumberAssignedAddOn Method for DeleteIncomingPhoneNumberAssignedAddOn
//
// Remove the assignment of an Add-on installation from the Number specified.
//
// param: ResourceSid The SID of the Phone Number to which the Add-on is assigned.
//
// param: Sid The Twilio-provided string that uniquely identifies the resource to delete.
//
// param: optional nil or *DeleteIncomingPhoneNumberAssignedAddOnParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to delete.
//
func (c *DefaultApiService) DeleteIncomingPhoneNumberAssignedAddOn(ResourceSid string, Sid string, params *DeleteIncomingPhoneNumberAssignedAddOnParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ResourceSid"+"}", ResourceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteKeyParams Optional parameters for the method 'DeleteKey'
type DeleteKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteKeyParams) SetPathAccountSid(PathAccountSid string) *DeleteKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteKey Method for DeleteKey
//
// param: Sid The Twilio-provided string that uniquely identifies the Key resource to delete.
//
// param: optional nil or *DeleteKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to delete.
//
func (c *DefaultApiService) DeleteKey(Sid string, params *DeleteKeyParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteMediaParams Optional parameters for the method 'DeleteMedia'
type DeleteMediaParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteMediaParams) SetPathAccountSid(PathAccountSid string) *DeleteMediaParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteMedia Method for DeleteMedia
//
// Delete media from your account. Once delete, you will no longer be billed
//
// param: MessageSid The SID of the Message resource that this Media resource belongs to.
//
// param: Sid The Twilio-provided string that uniquely identifies the Media resource to delete
//
// param: optional nil or *DeleteMediaParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to delete.
//
func (c *DefaultApiService) DeleteMedia(MessageSid string, Sid string, params *DeleteMediaParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"MessageSid"+"}", MessageSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteMessageParams Optional parameters for the method 'DeleteMessage'
type DeleteMessageParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteMessageParams) SetPathAccountSid(PathAccountSid string) *DeleteMessageParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteMessage Method for DeleteMessage
//
// Deletes a message record from your account
//
// param: Sid The Twilio-provided string that uniquely identifies the Message resource to delete.
//
// param: optional nil or *DeleteMessageParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to delete.
//
func (c *DefaultApiService) DeleteMessage(Sid string, params *DeleteMessageParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteOutgoingCallerIdParams Optional parameters for the method 'DeleteOutgoingCallerId'
type DeleteOutgoingCallerIdParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteOutgoingCallerIdParams) SetPathAccountSid(PathAccountSid string) *DeleteOutgoingCallerIdParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteOutgoingCallerId Method for DeleteOutgoingCallerId
//
// Delete the caller-id specified from the account
//
// param: Sid The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to delete.
//
// param: optional nil or *DeleteOutgoingCallerIdParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to delete.
//
func (c *DefaultApiService) DeleteOutgoingCallerId(Sid string, params *DeleteOutgoingCallerIdParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteParticipantParams Optional parameters for the method 'DeleteParticipant'
type DeleteParticipantParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteParticipantParams) SetPathAccountSid(PathAccountSid string) *DeleteParticipantParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteParticipant Method for DeleteParticipant
//
// Kick a participant from a given conference
//
// param: ConferenceSid The SID of the conference with the participants to delete.
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
//
// param: optional nil or *DeleteParticipantParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
//
func (c *DefaultApiService) DeleteParticipant(ConferenceSid string, CallSid string, params *DeleteParticipantParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteQueueParams Optional parameters for the method 'DeleteQueue'
type DeleteQueueParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteQueueParams) SetPathAccountSid(PathAccountSid string) *DeleteQueueParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteQueue Method for DeleteQueue
//
// Remove an empty queue
//
// param: Sid The Twilio-provided string that uniquely identifies the Queue resource to delete
//
// param: optional nil or *DeleteQueueParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to delete.
//
func (c *DefaultApiService) DeleteQueue(Sid string, params *DeleteQueueParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteRecordingParams Optional parameters for the method 'DeleteRecording'
type DeleteRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteRecordingParams) SetPathAccountSid(PathAccountSid string) *DeleteRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteRecording Method for DeleteRecording
//
// Delete a recording from your account
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording resource to delete.
//
// param: optional nil or *DeleteRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
//
func (c *DefaultApiService) DeleteRecording(Sid string, params *DeleteRecordingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteRecordingAddOnResultParams Optional parameters for the method 'DeleteRecordingAddOnResult'
type DeleteRecordingAddOnResultParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteRecordingAddOnResultParams) SetPathAccountSid(PathAccountSid string) *DeleteRecordingAddOnResultParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteRecordingAddOnResult Method for DeleteRecordingAddOnResult
//
// Delete a result and purge all associated Payloads
//
// param: ReferenceSid The SID of the recording to which the result to delete belongs.
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
//
// param: optional nil or *DeleteRecordingAddOnResultParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
//
func (c *DefaultApiService) DeleteRecordingAddOnResult(ReferenceSid string, Sid string, params *DeleteRecordingAddOnResultParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ReferenceSid"+"}", ReferenceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteRecordingAddOnResultPayloadParams Optional parameters for the method 'DeleteRecordingAddOnResultPayload'
type DeleteRecordingAddOnResultPayloadParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteRecordingAddOnResultPayloadParams) SetPathAccountSid(PathAccountSid string) *DeleteRecordingAddOnResultPayloadParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteRecordingAddOnResultPayload Method for DeleteRecordingAddOnResultPayload
//
// Delete a payload from the result along with all associated Data
//
// param: ReferenceSid The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs.
//
// param: AddOnResultSid The SID of the AddOnResult to which the payloads to delete belongs.
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to delete.
//
// param: optional nil or *DeleteRecordingAddOnResultPayloadParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to delete.
//
func (c *DefaultApiService) DeleteRecordingAddOnResultPayload(ReferenceSid string, AddOnResultSid string, Sid string, params *DeleteRecordingAddOnResultPayloadParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ReferenceSid"+"}", ReferenceSid, -1)
	path = strings.Replace(path, "{"+"AddOnResultSid"+"}", AddOnResultSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteRecordingTranscriptionParams Optional parameters for the method 'DeleteRecordingTranscription'
type DeleteRecordingTranscriptionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteRecordingTranscriptionParams) SetPathAccountSid(PathAccountSid string) *DeleteRecordingTranscriptionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteRecordingTranscription Method for DeleteRecordingTranscription
//
// param: RecordingSid The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to delete.
//
// param: Sid The Twilio-provided string that uniquely identifies the Transcription resource to delete.
//
// param: optional nil or *DeleteRecordingTranscriptionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
//
func (c *DefaultApiService) DeleteRecordingTranscription(RecordingSid string, Sid string, params *DeleteRecordingTranscriptionParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"RecordingSid"+"}", RecordingSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSigningKeyParams Optional parameters for the method 'DeleteSigningKey'
type DeleteSigningKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSigningKeyParams) SetPathAccountSid(PathAccountSid string) *DeleteSigningKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSigningKey Method for DeleteSigningKey
//
// param: Sid
//
// param: optional nil or *DeleteSigningKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) -
//
func (c *DefaultApiService) DeleteSigningKey(Sid string, params *DeleteSigningKeyParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipAuthCallsCredentialListMappingParams Optional parameters for the method 'DeleteSipAuthCallsCredentialListMapping'
type DeleteSipAuthCallsCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipAuthCallsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *DeleteSipAuthCallsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipAuthCallsCredentialListMapping Method for DeleteSipAuthCallsCredentialListMapping
//
// Delete a credential list mapping from the requested domain
//
// param: DomainSid The SID of the SIP domain that contains the resource to delete.
//
// param: Sid The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
//
// param: optional nil or *DeleteSipAuthCallsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
//
func (c *DefaultApiService) DeleteSipAuthCallsCredentialListMapping(DomainSid string, Sid string, params *DeleteSipAuthCallsCredentialListMappingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipAuthCallsIpAccessControlListMappingParams Optional parameters for the method 'DeleteSipAuthCallsIpAccessControlListMapping'
type DeleteSipAuthCallsIpAccessControlListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipAuthCallsIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *DeleteSipAuthCallsIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipAuthCallsIpAccessControlListMapping Method for DeleteSipAuthCallsIpAccessControlListMapping
//
// Delete an IP Access Control List mapping from the requested domain
//
// param: DomainSid The SID of the SIP domain that contains the resources to delete.
//
// param: Sid The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to delete.
//
// param: optional nil or *DeleteSipAuthCallsIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to delete.
//
func (c *DefaultApiService) DeleteSipAuthCallsIpAccessControlListMapping(DomainSid string, Sid string, params *DeleteSipAuthCallsIpAccessControlListMappingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipAuthRegistrationsCredentialListMappingParams Optional parameters for the method 'DeleteSipAuthRegistrationsCredentialListMapping'
type DeleteSipAuthRegistrationsCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipAuthRegistrationsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *DeleteSipAuthRegistrationsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipAuthRegistrationsCredentialListMapping Method for DeleteSipAuthRegistrationsCredentialListMapping
//
// Delete a credential list mapping from the requested domain
//
// param: DomainSid The SID of the SIP domain that contains the resources to delete.
//
// param: Sid The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
//
// param: optional nil or *DeleteSipAuthRegistrationsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
//
func (c *DefaultApiService) DeleteSipAuthRegistrationsCredentialListMapping(DomainSid string, Sid string, params *DeleteSipAuthRegistrationsCredentialListMappingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipCredentialParams Optional parameters for the method 'DeleteSipCredential'
type DeleteSipCredentialParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipCredentialParams) SetPathAccountSid(PathAccountSid string) *DeleteSipCredentialParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipCredential Method for DeleteSipCredential
//
// Delete a credential resource.
//
// param: CredentialListSid The unique id that identifies the credential list that contains the desired credentials.
//
// param: Sid The unique id that identifies the resource to delete.
//
// param: optional nil or *DeleteSipCredentialParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
func (c *DefaultApiService) DeleteSipCredential(CredentialListSid string, Sid string, params *DeleteSipCredentialParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CredentialListSid"+"}", CredentialListSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipCredentialListParams Optional parameters for the method 'DeleteSipCredentialList'
type DeleteSipCredentialListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipCredentialListParams) SetPathAccountSid(PathAccountSid string) *DeleteSipCredentialListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipCredentialList Method for DeleteSipCredentialList
//
// Delete a Credential List
//
// param: Sid The credential list Sid that uniquely identifies this resource
//
// param: optional nil or *DeleteSipCredentialListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
func (c *DefaultApiService) DeleteSipCredentialList(Sid string, params *DeleteSipCredentialListParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipCredentialListMappingParams Optional parameters for the method 'DeleteSipCredentialListMapping'
type DeleteSipCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *DeleteSipCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipCredentialListMapping Method for DeleteSipCredentialListMapping
//
// Delete a CredentialListMapping resource from an account.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
//
// param: Sid A 34 character string that uniquely identifies the resource to delete.
//
// param: optional nil or *DeleteSipCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
func (c *DefaultApiService) DeleteSipCredentialListMapping(DomainSid string, Sid string, params *DeleteSipCredentialListMappingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipDomainParams Optional parameters for the method 'DeleteSipDomain'
type DeleteSipDomainParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipDomainParams) SetPathAccountSid(PathAccountSid string) *DeleteSipDomainParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipDomain Method for DeleteSipDomain
//
// Delete an instance of a Domain
//
// param: Sid The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
//
// param: optional nil or *DeleteSipDomainParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
//
func (c *DefaultApiService) DeleteSipDomain(Sid string, params *DeleteSipDomainParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipIpAccessControlListParams Optional parameters for the method 'DeleteSipIpAccessControlList'
type DeleteSipIpAccessControlListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipIpAccessControlListParams) SetPathAccountSid(PathAccountSid string) *DeleteSipIpAccessControlListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipIpAccessControlList Method for DeleteSipIpAccessControlList
//
// Delete an IpAccessControlList from the requested account
//
// param: Sid A 34 character string that uniquely identifies the resource to delete.
//
// param: optional nil or *DeleteSipIpAccessControlListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
func (c *DefaultApiService) DeleteSipIpAccessControlList(Sid string, params *DeleteSipIpAccessControlListParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipIpAccessControlListMappingParams Optional parameters for the method 'DeleteSipIpAccessControlListMapping'
type DeleteSipIpAccessControlListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *DeleteSipIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipIpAccessControlListMapping Method for DeleteSipIpAccessControlListMapping
//
// Delete an IpAccessControlListMapping resource.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP domain.
//
// param: Sid A 34 character string that uniquely identifies the resource to delete.
//
// param: optional nil or *DeleteSipIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
func (c *DefaultApiService) DeleteSipIpAccessControlListMapping(DomainSid string, Sid string, params *DeleteSipIpAccessControlListMappingParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSipIpAddressParams Optional parameters for the method 'DeleteSipIpAddress'
type DeleteSipIpAddressParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteSipIpAddressParams) SetPathAccountSid(PathAccountSid string) *DeleteSipIpAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteSipIpAddress Method for DeleteSipIpAddress
//
// Delete an IpAddress resource.
//
// param: IpAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to delete.
//
// param: Sid A 34 character string that uniquely identifies the resource to delete.
//
// param: optional nil or *DeleteSipIpAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
func (c *DefaultApiService) DeleteSipIpAddress(IpAccessControlListSid string, Sid string, params *DeleteSipIpAddressParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"IpAccessControlListSid"+"}", IpAccessControlListSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteTranscriptionParams Optional parameters for the method 'DeleteTranscription'
type DeleteTranscriptionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteTranscriptionParams) SetPathAccountSid(PathAccountSid string) *DeleteTranscriptionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteTranscription Method for DeleteTranscription
//
// Delete a transcription from the account used to make the request
//
// param: Sid The Twilio-provided string that uniquely identifies the Transcription resource to delete.
//
// param: optional nil or *DeleteTranscriptionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to delete.
//
func (c *DefaultApiService) DeleteTranscription(Sid string, params *DeleteTranscriptionParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteUsageTriggerParams Optional parameters for the method 'DeleteUsageTrigger'
type DeleteUsageTriggerParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *DeleteUsageTriggerParams) SetPathAccountSid(PathAccountSid string) *DeleteUsageTriggerParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// DeleteUsageTrigger Method for DeleteUsageTrigger
//
// param: Sid The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
//
// param: optional nil or *DeleteUsageTriggerParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
//
func (c *DefaultApiService) DeleteUsageTrigger(Sid string, params *DeleteUsageTriggerParams) error {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// FetchAccount Method for FetchAccount
//
// Fetch the account specified by the provided Account Sid
//
// param: Sid The Account Sid that uniquely identifies the account to fetch
//
// return: ApiV2010Account
func (c *DefaultApiService) FetchAccount(Sid string) (*ApiV2010Account, error) {
	path := "/2010-04-01/Accounts/{Sid}.json"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010Account{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchAddressParams Optional parameters for the method 'FetchAddress'
type FetchAddressParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchAddressParams) SetPathAccountSid(PathAccountSid string) *FetchAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchAddress Method for FetchAddress
//
// param: Sid The Twilio-provided string that uniquely identifies the Address resource to fetch.
//
// param: optional nil or *FetchAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
//
// return: ApiV2010AccountAddress
func (c *DefaultApiService) FetchAddress(Sid string, params *FetchAddressParams) (*ApiV2010AccountAddress, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountAddress{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchApplicationParams Optional parameters for the method 'FetchApplication'
type FetchApplicationParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchApplicationParams) SetPathAccountSid(PathAccountSid string) *FetchApplicationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchApplication Method for FetchApplication
//
// Fetch the application specified by the provided sid
//
// param: Sid The Twilio-provided string that uniquely identifies the Application resource to fetch.
//
// param: optional nil or *FetchApplicationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
//
// return: ApiV2010AccountApplication
func (c *DefaultApiService) FetchApplication(Sid string, params *FetchApplicationParams) (*ApiV2010AccountApplication, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountApplication{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchAuthorizedConnectAppParams Optional parameters for the method 'FetchAuthorizedConnectApp'
type FetchAuthorizedConnectAppParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchAuthorizedConnectAppParams) SetPathAccountSid(PathAccountSid string) *FetchAuthorizedConnectAppParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchAuthorizedConnectApp Method for FetchAuthorizedConnectApp
//
// Fetch an instance of an authorized-connect-app
//
// param: ConnectAppSid The SID of the Connect App to fetch.
//
// param: optional nil or *FetchAuthorizedConnectAppParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resource to fetch.
//
// return: ApiV2010AccountAuthorizedConnectApp
func (c *DefaultApiService) FetchAuthorizedConnectApp(ConnectAppSid string, params *FetchAuthorizedConnectAppParams) (*ApiV2010AccountAuthorizedConnectApp, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConnectAppSid"+"}", ConnectAppSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountAuthorizedConnectApp{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchAvailablePhoneNumberCountryParams Optional parameters for the method 'FetchAvailablePhoneNumberCountry'
type FetchAvailablePhoneNumberCountryParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchAvailablePhoneNumberCountryParams) SetPathAccountSid(PathAccountSid string) *FetchAvailablePhoneNumberCountryParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchAvailablePhoneNumberCountry Method for FetchAvailablePhoneNumberCountry
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country to fetch available phone number information about.
//
// param: optional nil or *FetchAvailablePhoneNumberCountryParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resource.
//
// return: ApiV2010AccountAvailablePhoneNumberCountry
func (c *DefaultApiService) FetchAvailablePhoneNumberCountry(CountryCode string, params *FetchAvailablePhoneNumberCountryParams) (*ApiV2010AccountAvailablePhoneNumberCountry, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountAvailablePhoneNumberCountry{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchBalanceParams Optional parameters for the method 'FetchBalance'
type FetchBalanceParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchBalanceParams) SetPathAccountSid(PathAccountSid string) *FetchBalanceParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchBalance Method for FetchBalance
//
// Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information
//
// param: optional nil or *FetchBalanceParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique SID identifier of the Account.
//
// return: ApiV2010AccountBalance
func (c *DefaultApiService) FetchBalance(params *FetchBalanceParams) (*ApiV2010AccountBalance, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Balance.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountBalance{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCallParams Optional parameters for the method 'FetchCall'
type FetchCallParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchCallParams) SetPathAccountSid(PathAccountSid string) *FetchCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchCall Method for FetchCall
//
// Fetch the call specified by the provided Call SID
//
// param: Sid The SID of the Call resource to fetch.
//
// param: optional nil or *FetchCallParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
//
// return: ApiV2010AccountCall
func (c *DefaultApiService) FetchCall(Sid string, params *FetchCallParams) (*ApiV2010AccountCall, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCall{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCallFeedbackParams Optional parameters for the method 'FetchCallFeedback'
type FetchCallFeedbackParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchCallFeedbackParams) SetPathAccountSid(PathAccountSid string) *FetchCallFeedbackParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchCallFeedback Method for FetchCallFeedback
//
// Fetch a Feedback resource from a call
//
// param: CallSid The call sid that uniquely identifies the call
//
// param: optional nil or *FetchCallFeedbackParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// return: ApiV2010AccountCallCallFeedback
func (c *DefaultApiService) FetchCallFeedback(CallSid string, params *FetchCallFeedbackParams) (*ApiV2010AccountCallCallFeedback, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallFeedback{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCallFeedbackSummaryParams Optional parameters for the method 'FetchCallFeedbackSummary'
type FetchCallFeedbackSummaryParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchCallFeedbackSummaryParams) SetPathAccountSid(PathAccountSid string) *FetchCallFeedbackSummaryParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchCallFeedbackSummary Method for FetchCallFeedbackSummary
//
// Fetch a FeedbackSummary resource from a call
//
// param: Sid A 34 character string that uniquely identifies this resource.
//
// param: optional nil or *FetchCallFeedbackSummaryParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// return: ApiV2010AccountCallCallFeedbackSummary
func (c *DefaultApiService) FetchCallFeedbackSummary(Sid string, params *FetchCallFeedbackSummaryParams) (*ApiV2010AccountCallCallFeedbackSummary, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallFeedbackSummary{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCallNotificationParams Optional parameters for the method 'FetchCallNotification'
type FetchCallNotificationParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchCallNotificationParams) SetPathAccountSid(PathAccountSid string) *FetchCallNotificationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchCallNotification Method for FetchCallNotification
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resource to fetch.
//
// param: Sid The Twilio-provided string that uniquely identifies the Call Notification resource to fetch.
//
// param: optional nil or *FetchCallNotificationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resource to fetch.
//
// return: ApiV2010AccountCallCallNotificationInstance
func (c *DefaultApiService) FetchCallNotification(CallSid string, Sid string, params *FetchCallNotificationParams) (*ApiV2010AccountCallCallNotificationInstance, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallNotificationInstance{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCallRecordingParams Optional parameters for the method 'FetchCallRecording'
type FetchCallRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchCallRecordingParams) SetPathAccountSid(PathAccountSid string) *FetchCallRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchCallRecording Method for FetchCallRecording
//
// Fetch an instance of a recording for a call
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording resource to fetch.
//
// param: optional nil or *FetchCallRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
//
// return: ApiV2010AccountCallCallRecording
func (c *DefaultApiService) FetchCallRecording(CallSid string, Sid string, params *FetchCallRecordingParams) (*ApiV2010AccountCallCallRecording, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallRecording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchConferenceParams Optional parameters for the method 'FetchConference'
type FetchConferenceParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchConferenceParams) SetPathAccountSid(PathAccountSid string) *FetchConferenceParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchConference Method for FetchConference
//
// Fetch an instance of a conference
//
// param: Sid The Twilio-provided string that uniquely identifies the Conference resource to fetch
//
// param: optional nil or *FetchConferenceParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
//
// return: ApiV2010AccountConference
func (c *DefaultApiService) FetchConference(Sid string, params *FetchConferenceParams) (*ApiV2010AccountConference, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConference{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchConferenceRecordingParams Optional parameters for the method 'FetchConferenceRecording'
type FetchConferenceRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchConferenceRecordingParams) SetPathAccountSid(PathAccountSid string) *FetchConferenceRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchConferenceRecording Method for FetchConferenceRecording
//
// Fetch an instance of a recording for a call
//
// param: ConferenceSid The Conference SID that identifies the conference associated with the recording to fetch.
//
// param: Sid The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
//
// param: optional nil or *FetchConferenceRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
//
// return: ApiV2010AccountConferenceConferenceRecording
func (c *DefaultApiService) FetchConferenceRecording(ConferenceSid string, Sid string, params *FetchConferenceRecordingParams) (*ApiV2010AccountConferenceConferenceRecording, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConferenceConferenceRecording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchConnectAppParams Optional parameters for the method 'FetchConnectApp'
type FetchConnectAppParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchConnectAppParams) SetPathAccountSid(PathAccountSid string) *FetchConnectAppParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchConnectApp Method for FetchConnectApp
//
// Fetch an instance of a connect-app
//
// param: Sid The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
//
// param: optional nil or *FetchConnectAppParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
//
// return: ApiV2010AccountConnectApp
func (c *DefaultApiService) FetchConnectApp(Sid string, params *FetchConnectAppParams) (*ApiV2010AccountConnectApp, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConnectApp{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchIncomingPhoneNumberParams Optional parameters for the method 'FetchIncomingPhoneNumber'
type FetchIncomingPhoneNumberParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchIncomingPhoneNumberParams) SetPathAccountSid(PathAccountSid string) *FetchIncomingPhoneNumberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchIncomingPhoneNumber Method for FetchIncomingPhoneNumber
//
// Fetch an incoming-phone-number belonging to the account used to make the request.
//
// param: Sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch.
//
// param: optional nil or *FetchIncomingPhoneNumberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch.
//
// return: ApiV2010AccountIncomingPhoneNumber
func (c *DefaultApiService) FetchIncomingPhoneNumber(Sid string, params *FetchIncomingPhoneNumberParams) (*ApiV2010AccountIncomingPhoneNumber, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumber{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchIncomingPhoneNumberAssignedAddOnParams Optional parameters for the method 'FetchIncomingPhoneNumberAssignedAddOn'
type FetchIncomingPhoneNumberAssignedAddOnParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchIncomingPhoneNumberAssignedAddOnParams) SetPathAccountSid(PathAccountSid string) *FetchIncomingPhoneNumberAssignedAddOnParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchIncomingPhoneNumberAssignedAddOn Method for FetchIncomingPhoneNumberAssignedAddOn
//
// Fetch an instance of an Add-on installation currently assigned to this Number.
//
// param: ResourceSid The SID of the Phone Number to which the Add-on is assigned.
//
// param: Sid The Twilio-provided string that uniquely identifies the resource to fetch.
//
// param: optional nil or *FetchIncomingPhoneNumberAssignedAddOnParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
//
// return: ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
func (c *DefaultApiService) FetchIncomingPhoneNumberAssignedAddOn(ResourceSid string, Sid string, params *FetchIncomingPhoneNumberAssignedAddOnParams) (*ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ResourceSid"+"}", ResourceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchIncomingPhoneNumberAssignedAddOnExtensionParams Optional parameters for the method 'FetchIncomingPhoneNumberAssignedAddOnExtension'
type FetchIncomingPhoneNumberAssignedAddOnExtensionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchIncomingPhoneNumberAssignedAddOnExtensionParams) SetPathAccountSid(PathAccountSid string) *FetchIncomingPhoneNumberAssignedAddOnExtensionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchIncomingPhoneNumberAssignedAddOnExtension Method for FetchIncomingPhoneNumberAssignedAddOnExtension
//
// Fetch an instance of an Extension for the Assigned Add-on.
//
// param: ResourceSid The SID of the Phone Number to which the Add-on is assigned.
//
// param: AssignedAddOnSid The SID that uniquely identifies the assigned Add-on installation.
//
// param: Sid The Twilio-provided string that uniquely identifies the resource to fetch.
//
// param: optional nil or *FetchIncomingPhoneNumberAssignedAddOnExtensionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
//
// return: ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension
func (c *DefaultApiService) FetchIncomingPhoneNumberAssignedAddOnExtension(ResourceSid string, AssignedAddOnSid string, Sid string, params *FetchIncomingPhoneNumberAssignedAddOnExtensionParams) (*ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ResourceSid"+"}", ResourceSid, -1)
	path = strings.Replace(path, "{"+"AssignedAddOnSid"+"}", AssignedAddOnSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchKeyParams Optional parameters for the method 'FetchKey'
type FetchKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchKeyParams) SetPathAccountSid(PathAccountSid string) *FetchKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchKey Method for FetchKey
//
// param: Sid The Twilio-provided string that uniquely identifies the Key resource to fetch.
//
// param: optional nil or *FetchKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resource to fetch.
//
// return: ApiV2010AccountKey
func (c *DefaultApiService) FetchKey(Sid string, params *FetchKeyParams) (*ApiV2010AccountKey, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountKey{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchMediaParams Optional parameters for the method 'FetchMedia'
type FetchMediaParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchMediaParams) SetPathAccountSid(PathAccountSid string) *FetchMediaParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchMedia Method for FetchMedia
//
// Fetch a single media instance belonging to the account used to make the request
//
// param: MessageSid The SID of the Message resource that this Media resource belongs to.
//
// param: Sid The Twilio-provided string that uniquely identifies the Media resource to fetch
//
// param: optional nil or *FetchMediaParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to fetch.
//
// return: ApiV2010AccountMessageMedia
func (c *DefaultApiService) FetchMedia(MessageSid string, Sid string, params *FetchMediaParams) (*ApiV2010AccountMessageMedia, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"MessageSid"+"}", MessageSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountMessageMedia{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchMemberParams Optional parameters for the method 'FetchMember'
type FetchMemberParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchMemberParams) SetPathAccountSid(PathAccountSid string) *FetchMemberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchMember Method for FetchMember
//
// Fetch a specific member from the queue
//
// param: QueueSid The SID of the Queue in which to find the members to fetch.
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
//
// param: optional nil or *FetchMemberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
//
// return: ApiV2010AccountQueueMember
func (c *DefaultApiService) FetchMember(QueueSid string, CallSid string, params *FetchMemberParams) (*ApiV2010AccountQueueMember, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"QueueSid"+"}", QueueSid, -1)
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountQueueMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchMessageParams Optional parameters for the method 'FetchMessage'
type FetchMessageParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchMessageParams) SetPathAccountSid(PathAccountSid string) *FetchMessageParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchMessage Method for FetchMessage
//
// Fetch a message belonging to the account used to make the request
//
// param: Sid The Twilio-provided string that uniquely identifies the Message resource to fetch.
//
// param: optional nil or *FetchMessageParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resource to fetch.
//
// return: ApiV2010AccountMessage
func (c *DefaultApiService) FetchMessage(Sid string, params *FetchMessageParams) (*ApiV2010AccountMessage, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchNotificationParams Optional parameters for the method 'FetchNotification'
type FetchNotificationParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchNotificationParams) SetPathAccountSid(PathAccountSid string) *FetchNotificationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchNotification Method for FetchNotification
//
// Fetch a notification belonging to the account used to make the request
//
// param: Sid The Twilio-provided string that uniquely identifies the Notification resource to fetch.
//
// param: optional nil or *FetchNotificationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource to fetch.
//
// return: ApiV2010AccountNotificationInstance
func (c *DefaultApiService) FetchNotification(Sid string, params *FetchNotificationParams) (*ApiV2010AccountNotificationInstance, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Notifications/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountNotificationInstance{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchOutgoingCallerIdParams Optional parameters for the method 'FetchOutgoingCallerId'
type FetchOutgoingCallerIdParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchOutgoingCallerIdParams) SetPathAccountSid(PathAccountSid string) *FetchOutgoingCallerIdParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchOutgoingCallerId Method for FetchOutgoingCallerId
//
// Fetch an outgoing-caller-id belonging to the account used to make the request
//
// param: Sid The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to fetch.
//
// param: optional nil or *FetchOutgoingCallerIdParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resource to fetch.
//
// return: ApiV2010AccountOutgoingCallerId
func (c *DefaultApiService) FetchOutgoingCallerId(Sid string, params *FetchOutgoingCallerIdParams) (*ApiV2010AccountOutgoingCallerId, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountOutgoingCallerId{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchParticipantParams Optional parameters for the method 'FetchParticipant'
type FetchParticipantParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchParticipantParams) SetPathAccountSid(PathAccountSid string) *FetchParticipantParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchParticipant Method for FetchParticipant
//
// Fetch an instance of a participant
//
// param: ConferenceSid The SID of the conference with the participant to fetch.
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
//
// param: optional nil or *FetchParticipantParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
//
// return: ApiV2010AccountConferenceParticipant
func (c *DefaultApiService) FetchParticipant(ConferenceSid string, CallSid string, params *FetchParticipantParams) (*ApiV2010AccountConferenceParticipant, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConferenceParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchQueueParams Optional parameters for the method 'FetchQueue'
type FetchQueueParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchQueueParams) SetPathAccountSid(PathAccountSid string) *FetchQueueParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchQueue Method for FetchQueue
//
// Fetch an instance of a queue identified by the QueueSid
//
// param: Sid The Twilio-provided string that uniquely identifies the Queue resource to fetch
//
// param: optional nil or *FetchQueueParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to fetch.
//
// return: ApiV2010AccountQueue
func (c *DefaultApiService) FetchQueue(Sid string, params *FetchQueueParams) (*ApiV2010AccountQueue, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountQueue{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchRecordingParams Optional parameters for the method 'FetchRecording'
type FetchRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchRecordingParams) SetPathAccountSid(PathAccountSid string) *FetchRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchRecording Method for FetchRecording
//
// Fetch an instance of a recording
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording resource to fetch.
//
// param: optional nil or *FetchRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
//
// return: ApiV2010AccountRecording
func (c *DefaultApiService) FetchRecording(Sid string, params *FetchRecordingParams) (*ApiV2010AccountRecording, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountRecording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchRecordingAddOnResultParams Optional parameters for the method 'FetchRecordingAddOnResult'
type FetchRecordingAddOnResultParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchRecordingAddOnResultParams) SetPathAccountSid(PathAccountSid string) *FetchRecordingAddOnResultParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchRecordingAddOnResult Method for FetchRecordingAddOnResult
//
// Fetch an instance of an AddOnResult
//
// param: ReferenceSid The SID of the recording to which the result to fetch belongs.
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
//
// param: optional nil or *FetchRecordingAddOnResultParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
//
// return: ApiV2010AccountRecordingRecordingAddOnResult
func (c *DefaultApiService) FetchRecordingAddOnResult(ReferenceSid string, Sid string, params *FetchRecordingAddOnResultParams) (*ApiV2010AccountRecordingRecordingAddOnResult, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ReferenceSid"+"}", ReferenceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountRecordingRecordingAddOnResult{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchRecordingAddOnResultPayloadParams Optional parameters for the method 'FetchRecordingAddOnResultPayload'
type FetchRecordingAddOnResultPayloadParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchRecordingAddOnResultPayloadParams) SetPathAccountSid(PathAccountSid string) *FetchRecordingAddOnResultPayloadParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchRecordingAddOnResultPayload Method for FetchRecordingAddOnResultPayload
//
// Fetch an instance of a result payload
//
// param: ReferenceSid The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
//
// param: AddOnResultSid The SID of the AddOnResult to which the payload to fetch belongs.
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
//
// param: optional nil or *FetchRecordingAddOnResultPayloadParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
//
// return: ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload
func (c *DefaultApiService) FetchRecordingAddOnResultPayload(ReferenceSid string, AddOnResultSid string, Sid string, params *FetchRecordingAddOnResultPayloadParams) (*ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ReferenceSid"+"}", ReferenceSid, -1)
	path = strings.Replace(path, "{"+"AddOnResultSid"+"}", AddOnResultSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchRecordingTranscriptionParams Optional parameters for the method 'FetchRecordingTranscription'
type FetchRecordingTranscriptionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchRecordingTranscriptionParams) SetPathAccountSid(PathAccountSid string) *FetchRecordingTranscriptionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchRecordingTranscription Method for FetchRecordingTranscription
//
// param: RecordingSid The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcription to fetch.
//
// param: Sid The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
//
// param: optional nil or *FetchRecordingTranscriptionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
//
// return: ApiV2010AccountRecordingRecordingTranscription
func (c *DefaultApiService) FetchRecordingTranscription(RecordingSid string, Sid string, params *FetchRecordingTranscriptionParams) (*ApiV2010AccountRecordingRecordingTranscription, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"RecordingSid"+"}", RecordingSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountRecordingRecordingTranscription{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchShortCodeParams Optional parameters for the method 'FetchShortCode'
type FetchShortCodeParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchShortCodeParams) SetPathAccountSid(PathAccountSid string) *FetchShortCodeParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchShortCode Method for FetchShortCode
//
// Fetch an instance of a short code
//
// param: Sid The Twilio-provided string that uniquely identifies the ShortCode resource to fetch
//
// param: optional nil or *FetchShortCodeParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch.
//
// return: ApiV2010AccountShortCode
func (c *DefaultApiService) FetchShortCode(Sid string, params *FetchShortCodeParams) (*ApiV2010AccountShortCode, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountShortCode{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSigningKeyParams Optional parameters for the method 'FetchSigningKey'
type FetchSigningKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSigningKeyParams) SetPathAccountSid(PathAccountSid string) *FetchSigningKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSigningKey Method for FetchSigningKey
//
// param: Sid
//
// param: optional nil or *FetchSigningKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) -
//
// return: ApiV2010AccountSigningKey
func (c *DefaultApiService) FetchSigningKey(Sid string, params *FetchSigningKeyParams) (*ApiV2010AccountSigningKey, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSigningKey{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipAuthCallsCredentialListMappingParams Optional parameters for the method 'FetchSipAuthCallsCredentialListMapping'
type FetchSipAuthCallsCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipAuthCallsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *FetchSipAuthCallsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipAuthCallsCredentialListMapping Method for FetchSipAuthCallsCredentialListMapping
//
// Fetch a specific instance of a credential list mapping
//
// param: DomainSid The SID of the SIP domain that contains the resource to fetch.
//
// param: Sid The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
//
// param: optional nil or *FetchSipAuthCallsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
//
// return: ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
func (c *DefaultApiService) FetchSipAuthCallsCredentialListMapping(DomainSid string, Sid string, params *FetchSipAuthCallsCredentialListMappingParams) (*ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipAuthCallsIpAccessControlListMappingParams Optional parameters for the method 'FetchSipAuthCallsIpAccessControlListMapping'
type FetchSipAuthCallsIpAccessControlListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipAuthCallsIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *FetchSipAuthCallsIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipAuthCallsIpAccessControlListMapping Method for FetchSipAuthCallsIpAccessControlListMapping
//
// Fetch a specific instance of an IP Access Control List mapping
//
// param: DomainSid The SID of the SIP domain that contains the resource to fetch.
//
// param: Sid The Twilio-provided string that uniquely identifies the IpAccessControlListMapping resource to fetch.
//
// param: optional nil or *FetchSipAuthCallsIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resource to fetch.
//
// return: ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
func (c *DefaultApiService) FetchSipAuthCallsIpAccessControlListMapping(DomainSid string, Sid string, params *FetchSipAuthCallsIpAccessControlListMappingParams) (*ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipAuthRegistrationsCredentialListMappingParams Optional parameters for the method 'FetchSipAuthRegistrationsCredentialListMapping'
type FetchSipAuthRegistrationsCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipAuthRegistrationsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *FetchSipAuthRegistrationsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipAuthRegistrationsCredentialListMapping Method for FetchSipAuthRegistrationsCredentialListMapping
//
// Fetch a specific instance of a credential list mapping
//
// param: DomainSid The SID of the SIP domain that contains the resource to fetch.
//
// param: Sid The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
//
// param: optional nil or *FetchSipAuthRegistrationsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
//
// return: ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
func (c *DefaultApiService) FetchSipAuthRegistrationsCredentialListMapping(DomainSid string, Sid string, params *FetchSipAuthRegistrationsCredentialListMappingParams) (*ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipCredentialParams Optional parameters for the method 'FetchSipCredential'
type FetchSipCredentialParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipCredentialParams) SetPathAccountSid(PathAccountSid string) *FetchSipCredentialParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipCredential Method for FetchSipCredential
//
// Fetch a single credential.
//
// param: CredentialListSid The unique id that identifies the credential list that contains the desired credential.
//
// param: Sid The unique id that identifies the resource to fetch.
//
// param: optional nil or *FetchSipCredentialParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// return: ApiV2010AccountSipSipCredentialListSipCredential
func (c *DefaultApiService) FetchSipCredential(CredentialListSid string, Sid string, params *FetchSipCredentialParams) (*ApiV2010AccountSipSipCredentialListSipCredential, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CredentialListSid"+"}", CredentialListSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipCredentialListSipCredential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipCredentialListParams Optional parameters for the method 'FetchSipCredentialList'
type FetchSipCredentialListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipCredentialListParams) SetPathAccountSid(PathAccountSid string) *FetchSipCredentialListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipCredentialList Method for FetchSipCredentialList
//
// Get a Credential List
//
// param: Sid The credential list Sid that uniquely identifies this resource
//
// param: optional nil or *FetchSipCredentialListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// return: ApiV2010AccountSipSipCredentialList
func (c *DefaultApiService) FetchSipCredentialList(Sid string, params *FetchSipCredentialListParams) (*ApiV2010AccountSipSipCredentialList, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipCredentialList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipCredentialListMappingParams Optional parameters for the method 'FetchSipCredentialListMapping'
type FetchSipCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *FetchSipCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipCredentialListMapping Method for FetchSipCredentialListMapping
//
// Fetch a single CredentialListMapping resource from an account.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
//
// param: Sid A 34 character string that uniquely identifies the resource to fetch.
//
// param: optional nil or *FetchSipCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// return: ApiV2010AccountSipSipDomainSipCredentialListMapping
func (c *DefaultApiService) FetchSipCredentialListMapping(DomainSid string, Sid string, params *FetchSipCredentialListMappingParams) (*ApiV2010AccountSipSipDomainSipCredentialListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipCredentialListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipDomainParams Optional parameters for the method 'FetchSipDomain'
type FetchSipDomainParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipDomainParams) SetPathAccountSid(PathAccountSid string) *FetchSipDomainParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipDomain Method for FetchSipDomain
//
// Fetch an instance of a Domain
//
// param: Sid The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
//
// param: optional nil or *FetchSipDomainParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
//
// return: ApiV2010AccountSipSipDomain
func (c *DefaultApiService) FetchSipDomain(Sid string, params *FetchSipDomainParams) (*ApiV2010AccountSipSipDomain, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomain{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipIpAccessControlListParams Optional parameters for the method 'FetchSipIpAccessControlList'
type FetchSipIpAccessControlListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipIpAccessControlListParams) SetPathAccountSid(PathAccountSid string) *FetchSipIpAccessControlListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipIpAccessControlList Method for FetchSipIpAccessControlList
//
// Fetch a specific instance of an IpAccessControlList
//
// param: Sid A 34 character string that uniquely identifies the resource to fetch.
//
// param: optional nil or *FetchSipIpAccessControlListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// return: ApiV2010AccountSipSipIpAccessControlList
func (c *DefaultApiService) FetchSipIpAccessControlList(Sid string, params *FetchSipIpAccessControlListParams) (*ApiV2010AccountSipSipIpAccessControlList, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipIpAccessControlList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipIpAccessControlListMappingParams Optional parameters for the method 'FetchSipIpAccessControlListMapping'
type FetchSipIpAccessControlListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *FetchSipIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipIpAccessControlListMapping Method for FetchSipIpAccessControlListMapping
//
// Fetch an IpAccessControlListMapping resource.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP domain.
//
// param: Sid A 34 character string that uniquely identifies the resource to fetch.
//
// param: optional nil or *FetchSipIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// return: ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
func (c *DefaultApiService) FetchSipIpAccessControlListMapping(DomainSid string, Sid string, params *FetchSipIpAccessControlListMappingParams) (*ApiV2010AccountSipSipDomainSipIpAccessControlListMapping, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomainSipIpAccessControlListMapping{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSipIpAddressParams Optional parameters for the method 'FetchSipIpAddress'
type FetchSipIpAddressParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchSipIpAddressParams) SetPathAccountSid(PathAccountSid string) *FetchSipIpAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchSipIpAddress Method for FetchSipIpAddress
//
// Read one IpAddress resource.
//
// param: IpAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
//
// param: Sid A 34 character string that uniquely identifies the IpAddress resource to fetch.
//
// param: optional nil or *FetchSipIpAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// return: ApiV2010AccountSipSipIpAccessControlListSipIpAddress
func (c *DefaultApiService) FetchSipIpAddress(IpAccessControlListSid string, Sid string, params *FetchSipIpAddressParams) (*ApiV2010AccountSipSipIpAccessControlListSipIpAddress, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"IpAccessControlListSid"+"}", IpAccessControlListSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipIpAccessControlListSipIpAddress{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchTranscriptionParams Optional parameters for the method 'FetchTranscription'
type FetchTranscriptionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchTranscriptionParams) SetPathAccountSid(PathAccountSid string) *FetchTranscriptionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchTranscription Method for FetchTranscription
//
// Fetch an instance of a Transcription
//
// param: Sid The Twilio-provided string that uniquely identifies the Transcription resource to fetch.
//
// param: optional nil or *FetchTranscriptionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resource to fetch.
//
// return: ApiV2010AccountTranscription
func (c *DefaultApiService) FetchTranscription(Sid string, params *FetchTranscriptionParams) (*ApiV2010AccountTranscription, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountTranscription{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchUsageTriggerParams Optional parameters for the method 'FetchUsageTrigger'
type FetchUsageTriggerParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
}

func (params *FetchUsageTriggerParams) SetPathAccountSid(PathAccountSid string) *FetchUsageTriggerParams {
	params.PathAccountSid = &PathAccountSid
	return params
}

// FetchUsageTrigger Method for FetchUsageTrigger
//
// Fetch and instance of a usage-trigger
//
// param: Sid The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
//
// param: optional nil or *FetchUsageTriggerParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
//
// return: ApiV2010AccountUsageUsageTrigger
func (c *DefaultApiService) FetchUsageTrigger(Sid string, params *FetchUsageTriggerParams) (*ApiV2010AccountUsageUsageTrigger, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountUsageUsageTrigger{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAccountParams Optional parameters for the method 'ListAccount'
type ListAccountParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Status       *string `json:"Status,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty"`
}

func (params *ListAccountParams) SetFriendlyName(FriendlyName string) *ListAccountParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListAccountParams) SetStatus(Status string) *ListAccountParams {
	params.Status = &Status
	return params
}
func (params *ListAccountParams) SetPageSize(PageSize int32) *ListAccountParams {
	params.PageSize = &PageSize
	return params
}

// ListAccount Method for ListAccount
//
// Retrieves a collection of Accounts belonging to the account used to make the request
//
// param: optional nil or *ListAccountParams - Optional Parameters:
//
// param: "FriendlyName" (string) - Only return the Account resources with friendly names that exactly match this name.
//
// param: "Status" (string) - Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAccountResponse
func (c *DefaultApiService) ListAccount(params *ListAccountParams) (*ListAccountResponse, error) {
	path := "/2010-04-01/Accounts.json"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAccountResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAddressParams Optional parameters for the method 'ListAddress'
type ListAddressParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	CustomerName   *string `json:"CustomerName,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	IsoCountry     *string `json:"IsoCountry,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListAddressParams) SetPathAccountSid(PathAccountSid string) *ListAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAddressParams) SetCustomerName(CustomerName string) *ListAddressParams {
	params.CustomerName = &CustomerName
	return params
}
func (params *ListAddressParams) SetFriendlyName(FriendlyName string) *ListAddressParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListAddressParams) SetIsoCountry(IsoCountry string) *ListAddressParams {
	params.IsoCountry = &IsoCountry
	return params
}
func (params *ListAddressParams) SetPageSize(PageSize int32) *ListAddressParams {
	params.PageSize = &PageSize
	return params
}

// ListAddress Method for ListAddress
//
// param: optional nil or *ListAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
//
// param: "CustomerName" (string) - The `customer_name` of the Address resources to read.
//
// param: "FriendlyName" (string) - The string that identifies the Address resources to read.
//
// param: "IsoCountry" (string) - The ISO country code of the Address resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAddressResponse
func (c *DefaultApiService) ListAddress(params *ListAddressParams) (*ListAddressResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Addresses.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CustomerName != nil {
		data.Set("CustomerName", *params.CustomerName)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IsoCountry != nil {
		data.Set("IsoCountry", *params.IsoCountry)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAddressResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListApplicationParams Optional parameters for the method 'ListApplication'
type ListApplicationParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListApplicationParams) SetPathAccountSid(PathAccountSid string) *ListApplicationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListApplicationParams) SetFriendlyName(FriendlyName string) *ListApplicationParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListApplicationParams) SetPageSize(PageSize int32) *ListApplicationParams {
	params.PageSize = &PageSize
	return params
}

// ListApplication Method for ListApplication
//
// Retrieve a list of applications representing an application within the requesting account
//
// param: optional nil or *ListApplicationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
//
// param: "FriendlyName" (string) - The string that identifies the Application resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListApplicationResponse
func (c *DefaultApiService) ListApplication(params *ListApplicationParams) (*ListApplicationResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Applications.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListApplicationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAuthorizedConnectAppParams Optional parameters for the method 'ListAuthorizedConnectApp'
type ListAuthorizedConnectAppParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListAuthorizedConnectAppParams) SetPathAccountSid(PathAccountSid string) *ListAuthorizedConnectAppParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAuthorizedConnectAppParams) SetPageSize(PageSize int32) *ListAuthorizedConnectAppParams {
	params.PageSize = &PageSize
	return params
}

// ListAuthorizedConnectApp Method for ListAuthorizedConnectApp
//
// Retrieve a list of authorized-connect-apps belonging to the account used to make the request
//
// param: optional nil or *ListAuthorizedConnectAppParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AuthorizedConnectApp resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAuthorizedConnectAppResponse
func (c *DefaultApiService) ListAuthorizedConnectApp(params *ListAuthorizedConnectAppParams) (*ListAuthorizedConnectAppResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAuthorizedConnectAppResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberCountryParams Optional parameters for the method 'ListAvailablePhoneNumberCountry'
type ListAvailablePhoneNumberCountryParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberCountryParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberCountryParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberCountryParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberCountryParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberCountry Method for ListAvailablePhoneNumberCountry
//
// param: optional nil or *ListAvailablePhoneNumberCountryParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the available phone number Country resources.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberCountryResponse
func (c *DefaultApiService) ListAvailablePhoneNumberCountry(params *ListAvailablePhoneNumberCountryParams) (*ListAvailablePhoneNumberCountryResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberCountryResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberLocalParams Optional parameters for the method 'ListAvailablePhoneNumberLocal'
type ListAvailablePhoneNumberLocalParams struct {
	PathAccountSid                *string `json:"PathAccountSid,omitempty"`
	AreaCode                      *int32  `json:"AreaCode,omitempty"`
	Contains                      *string `json:"Contains,omitempty"`
	SmsEnabled                    *bool   `json:"SmsEnabled,omitempty"`
	MmsEnabled                    *bool   `json:"MmsEnabled,omitempty"`
	VoiceEnabled                  *bool   `json:"VoiceEnabled,omitempty"`
	ExcludeAllAddressRequired     *bool   `json:"ExcludeAllAddressRequired,omitempty"`
	ExcludeLocalAddressRequired   *bool   `json:"ExcludeLocalAddressRequired,omitempty"`
	ExcludeForeignAddressRequired *bool   `json:"ExcludeForeignAddressRequired,omitempty"`
	Beta                          *bool   `json:"Beta,omitempty"`
	NearNumber                    *string `json:"NearNumber,omitempty"`
	NearLatLong                   *string `json:"NearLatLong,omitempty"`
	Distance                      *int32  `json:"Distance,omitempty"`
	InPostalCode                  *string `json:"InPostalCode,omitempty"`
	InRegion                      *string `json:"InRegion,omitempty"`
	InRateCenter                  *string `json:"InRateCenter,omitempty"`
	InLata                        *string `json:"InLata,omitempty"`
	InLocality                    *string `json:"InLocality,omitempty"`
	FaxEnabled                    *bool   `json:"FaxEnabled,omitempty"`
	PageSize                      *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberLocalParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberLocalParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetAreaCode(AreaCode int32) *ListAvailablePhoneNumberLocalParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetContains(Contains string) *ListAvailablePhoneNumberLocalParams {
	params.Contains = &Contains
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetSmsEnabled(SmsEnabled bool) *ListAvailablePhoneNumberLocalParams {
	params.SmsEnabled = &SmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetMmsEnabled(MmsEnabled bool) *ListAvailablePhoneNumberLocalParams {
	params.MmsEnabled = &MmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetVoiceEnabled(VoiceEnabled bool) *ListAvailablePhoneNumberLocalParams {
	params.VoiceEnabled = &VoiceEnabled
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetExcludeAllAddressRequired(ExcludeAllAddressRequired bool) *ListAvailablePhoneNumberLocalParams {
	params.ExcludeAllAddressRequired = &ExcludeAllAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetExcludeLocalAddressRequired(ExcludeLocalAddressRequired bool) *ListAvailablePhoneNumberLocalParams {
	params.ExcludeLocalAddressRequired = &ExcludeLocalAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetExcludeForeignAddressRequired(ExcludeForeignAddressRequired bool) *ListAvailablePhoneNumberLocalParams {
	params.ExcludeForeignAddressRequired = &ExcludeForeignAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetBeta(Beta bool) *ListAvailablePhoneNumberLocalParams {
	params.Beta = &Beta
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetNearNumber(NearNumber string) *ListAvailablePhoneNumberLocalParams {
	params.NearNumber = &NearNumber
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetNearLatLong(NearLatLong string) *ListAvailablePhoneNumberLocalParams {
	params.NearLatLong = &NearLatLong
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetDistance(Distance int32) *ListAvailablePhoneNumberLocalParams {
	params.Distance = &Distance
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetInPostalCode(InPostalCode string) *ListAvailablePhoneNumberLocalParams {
	params.InPostalCode = &InPostalCode
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetInRegion(InRegion string) *ListAvailablePhoneNumberLocalParams {
	params.InRegion = &InRegion
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetInRateCenter(InRateCenter string) *ListAvailablePhoneNumberLocalParams {
	params.InRateCenter = &InRateCenter
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetInLata(InLata string) *ListAvailablePhoneNumberLocalParams {
	params.InLata = &InLata
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetInLocality(InLocality string) *ListAvailablePhoneNumberLocalParams {
	params.InLocality = &InLocality
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetFaxEnabled(FaxEnabled bool) *ListAvailablePhoneNumberLocalParams {
	params.FaxEnabled = &FaxEnabled
	return params
}
func (params *ListAvailablePhoneNumberLocalParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberLocalParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberLocal Method for ListAvailablePhoneNumberLocal
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
//
// param: optional nil or *ListAvailablePhoneNumberLocalParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
//
// param: "AreaCode" (int32) - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
//
// param: "Contains" (string) - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters.
//
// param: "SmsEnabled" (bool) - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
//
// param: "MmsEnabled" (bool) - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
//
// param: "VoiceEnabled" (bool) - Whether the phone numbers can receive calls. Can be: `true` or `false`.
//
// param: "ExcludeAllAddressRequired" (bool) - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeLocalAddressRequired" (bool) - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeForeignAddressRequired" (bool) - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "Beta" (bool) - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "NearNumber" (string) - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
//
// param: "NearLatLong" (string) - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
//
// param: "Distance" (int32) - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
//
// param: "InPostalCode" (string) - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRegion" (string) - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRateCenter" (string) - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
//
// param: "InLata" (string) - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InLocality" (string) - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
//
// param: "FaxEnabled" (bool) - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberLocalResponse
func (c *DefaultApiService) ListAvailablePhoneNumberLocal(CountryCode string, params *ListAvailablePhoneNumberLocalParams) (*ListAvailablePhoneNumberLocalResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", fmt.Sprint(*params.AreaCode))
	}
	if params != nil && params.Contains != nil {
		data.Set("Contains", *params.Contains)
	}
	if params != nil && params.SmsEnabled != nil {
		data.Set("SmsEnabled", fmt.Sprint(*params.SmsEnabled))
	}
	if params != nil && params.MmsEnabled != nil {
		data.Set("MmsEnabled", fmt.Sprint(*params.MmsEnabled))
	}
	if params != nil && params.VoiceEnabled != nil {
		data.Set("VoiceEnabled", fmt.Sprint(*params.VoiceEnabled))
	}
	if params != nil && params.ExcludeAllAddressRequired != nil {
		data.Set("ExcludeAllAddressRequired", fmt.Sprint(*params.ExcludeAllAddressRequired))
	}
	if params != nil && params.ExcludeLocalAddressRequired != nil {
		data.Set("ExcludeLocalAddressRequired", fmt.Sprint(*params.ExcludeLocalAddressRequired))
	}
	if params != nil && params.ExcludeForeignAddressRequired != nil {
		data.Set("ExcludeForeignAddressRequired", fmt.Sprint(*params.ExcludeForeignAddressRequired))
	}
	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.NearNumber != nil {
		data.Set("NearNumber", *params.NearNumber)
	}
	if params != nil && params.NearLatLong != nil {
		data.Set("NearLatLong", *params.NearLatLong)
	}
	if params != nil && params.Distance != nil {
		data.Set("Distance", fmt.Sprint(*params.Distance))
	}
	if params != nil && params.InPostalCode != nil {
		data.Set("InPostalCode", *params.InPostalCode)
	}
	if params != nil && params.InRegion != nil {
		data.Set("InRegion", *params.InRegion)
	}
	if params != nil && params.InRateCenter != nil {
		data.Set("InRateCenter", *params.InRateCenter)
	}
	if params != nil && params.InLata != nil {
		data.Set("InLata", *params.InLata)
	}
	if params != nil && params.InLocality != nil {
		data.Set("InLocality", *params.InLocality)
	}
	if params != nil && params.FaxEnabled != nil {
		data.Set("FaxEnabled", fmt.Sprint(*params.FaxEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberLocalResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberMachineToMachineParams Optional parameters for the method 'ListAvailablePhoneNumberMachineToMachine'
type ListAvailablePhoneNumberMachineToMachineParams struct {
	PathAccountSid                *string `json:"PathAccountSid,omitempty"`
	AreaCode                      *int32  `json:"AreaCode,omitempty"`
	Contains                      *string `json:"Contains,omitempty"`
	SmsEnabled                    *bool   `json:"SmsEnabled,omitempty"`
	MmsEnabled                    *bool   `json:"MmsEnabled,omitempty"`
	VoiceEnabled                  *bool   `json:"VoiceEnabled,omitempty"`
	ExcludeAllAddressRequired     *bool   `json:"ExcludeAllAddressRequired,omitempty"`
	ExcludeLocalAddressRequired   *bool   `json:"ExcludeLocalAddressRequired,omitempty"`
	ExcludeForeignAddressRequired *bool   `json:"ExcludeForeignAddressRequired,omitempty"`
	Beta                          *bool   `json:"Beta,omitempty"`
	NearNumber                    *string `json:"NearNumber,omitempty"`
	NearLatLong                   *string `json:"NearLatLong,omitempty"`
	Distance                      *int32  `json:"Distance,omitempty"`
	InPostalCode                  *string `json:"InPostalCode,omitempty"`
	InRegion                      *string `json:"InRegion,omitempty"`
	InRateCenter                  *string `json:"InRateCenter,omitempty"`
	InLata                        *string `json:"InLata,omitempty"`
	InLocality                    *string `json:"InLocality,omitempty"`
	FaxEnabled                    *bool   `json:"FaxEnabled,omitempty"`
	PageSize                      *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberMachineToMachineParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetAreaCode(AreaCode int32) *ListAvailablePhoneNumberMachineToMachineParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetContains(Contains string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.Contains = &Contains
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetSmsEnabled(SmsEnabled bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.SmsEnabled = &SmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetMmsEnabled(MmsEnabled bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.MmsEnabled = &MmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetVoiceEnabled(VoiceEnabled bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.VoiceEnabled = &VoiceEnabled
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetExcludeAllAddressRequired(ExcludeAllAddressRequired bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.ExcludeAllAddressRequired = &ExcludeAllAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetExcludeLocalAddressRequired(ExcludeLocalAddressRequired bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.ExcludeLocalAddressRequired = &ExcludeLocalAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetExcludeForeignAddressRequired(ExcludeForeignAddressRequired bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.ExcludeForeignAddressRequired = &ExcludeForeignAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetBeta(Beta bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.Beta = &Beta
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetNearNumber(NearNumber string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.NearNumber = &NearNumber
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetNearLatLong(NearLatLong string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.NearLatLong = &NearLatLong
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetDistance(Distance int32) *ListAvailablePhoneNumberMachineToMachineParams {
	params.Distance = &Distance
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetInPostalCode(InPostalCode string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.InPostalCode = &InPostalCode
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetInRegion(InRegion string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.InRegion = &InRegion
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetInRateCenter(InRateCenter string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.InRateCenter = &InRateCenter
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetInLata(InLata string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.InLata = &InLata
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetInLocality(InLocality string) *ListAvailablePhoneNumberMachineToMachineParams {
	params.InLocality = &InLocality
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetFaxEnabled(FaxEnabled bool) *ListAvailablePhoneNumberMachineToMachineParams {
	params.FaxEnabled = &FaxEnabled
	return params
}
func (params *ListAvailablePhoneNumberMachineToMachineParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberMachineToMachineParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberMachineToMachine Method for ListAvailablePhoneNumberMachineToMachine
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
//
// param: optional nil or *ListAvailablePhoneNumberMachineToMachineParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
//
// param: "AreaCode" (int32) - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
//
// param: "Contains" (string) - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
//
// param: "SmsEnabled" (bool) - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
//
// param: "MmsEnabled" (bool) - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
//
// param: "VoiceEnabled" (bool) - Whether the phone numbers can receive calls. Can be: `true` or `false`.
//
// param: "ExcludeAllAddressRequired" (bool) - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeLocalAddressRequired" (bool) - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeForeignAddressRequired" (bool) - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "Beta" (bool) - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "NearNumber" (string) - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
//
// param: "NearLatLong" (string) - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
//
// param: "Distance" (int32) - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
//
// param: "InPostalCode" (string) - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRegion" (string) - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRateCenter" (string) - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
//
// param: "InLata" (string) - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InLocality" (string) - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
//
// param: "FaxEnabled" (bool) - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberMachineToMachineResponse
func (c *DefaultApiService) ListAvailablePhoneNumberMachineToMachine(CountryCode string, params *ListAvailablePhoneNumberMachineToMachineParams) (*ListAvailablePhoneNumberMachineToMachineResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/MachineToMachine.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", fmt.Sprint(*params.AreaCode))
	}
	if params != nil && params.Contains != nil {
		data.Set("Contains", *params.Contains)
	}
	if params != nil && params.SmsEnabled != nil {
		data.Set("SmsEnabled", fmt.Sprint(*params.SmsEnabled))
	}
	if params != nil && params.MmsEnabled != nil {
		data.Set("MmsEnabled", fmt.Sprint(*params.MmsEnabled))
	}
	if params != nil && params.VoiceEnabled != nil {
		data.Set("VoiceEnabled", fmt.Sprint(*params.VoiceEnabled))
	}
	if params != nil && params.ExcludeAllAddressRequired != nil {
		data.Set("ExcludeAllAddressRequired", fmt.Sprint(*params.ExcludeAllAddressRequired))
	}
	if params != nil && params.ExcludeLocalAddressRequired != nil {
		data.Set("ExcludeLocalAddressRequired", fmt.Sprint(*params.ExcludeLocalAddressRequired))
	}
	if params != nil && params.ExcludeForeignAddressRequired != nil {
		data.Set("ExcludeForeignAddressRequired", fmt.Sprint(*params.ExcludeForeignAddressRequired))
	}
	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.NearNumber != nil {
		data.Set("NearNumber", *params.NearNumber)
	}
	if params != nil && params.NearLatLong != nil {
		data.Set("NearLatLong", *params.NearLatLong)
	}
	if params != nil && params.Distance != nil {
		data.Set("Distance", fmt.Sprint(*params.Distance))
	}
	if params != nil && params.InPostalCode != nil {
		data.Set("InPostalCode", *params.InPostalCode)
	}
	if params != nil && params.InRegion != nil {
		data.Set("InRegion", *params.InRegion)
	}
	if params != nil && params.InRateCenter != nil {
		data.Set("InRateCenter", *params.InRateCenter)
	}
	if params != nil && params.InLata != nil {
		data.Set("InLata", *params.InLata)
	}
	if params != nil && params.InLocality != nil {
		data.Set("InLocality", *params.InLocality)
	}
	if params != nil && params.FaxEnabled != nil {
		data.Set("FaxEnabled", fmt.Sprint(*params.FaxEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberMachineToMachineResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberMobileParams Optional parameters for the method 'ListAvailablePhoneNumberMobile'
type ListAvailablePhoneNumberMobileParams struct {
	PathAccountSid                *string `json:"PathAccountSid,omitempty"`
	AreaCode                      *int32  `json:"AreaCode,omitempty"`
	Contains                      *string `json:"Contains,omitempty"`
	SmsEnabled                    *bool   `json:"SmsEnabled,omitempty"`
	MmsEnabled                    *bool   `json:"MmsEnabled,omitempty"`
	VoiceEnabled                  *bool   `json:"VoiceEnabled,omitempty"`
	ExcludeAllAddressRequired     *bool   `json:"ExcludeAllAddressRequired,omitempty"`
	ExcludeLocalAddressRequired   *bool   `json:"ExcludeLocalAddressRequired,omitempty"`
	ExcludeForeignAddressRequired *bool   `json:"ExcludeForeignAddressRequired,omitempty"`
	Beta                          *bool   `json:"Beta,omitempty"`
	NearNumber                    *string `json:"NearNumber,omitempty"`
	NearLatLong                   *string `json:"NearLatLong,omitempty"`
	Distance                      *int32  `json:"Distance,omitempty"`
	InPostalCode                  *string `json:"InPostalCode,omitempty"`
	InRegion                      *string `json:"InRegion,omitempty"`
	InRateCenter                  *string `json:"InRateCenter,omitempty"`
	InLata                        *string `json:"InLata,omitempty"`
	InLocality                    *string `json:"InLocality,omitempty"`
	FaxEnabled                    *bool   `json:"FaxEnabled,omitempty"`
	PageSize                      *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberMobileParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberMobileParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetAreaCode(AreaCode int32) *ListAvailablePhoneNumberMobileParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetContains(Contains string) *ListAvailablePhoneNumberMobileParams {
	params.Contains = &Contains
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetSmsEnabled(SmsEnabled bool) *ListAvailablePhoneNumberMobileParams {
	params.SmsEnabled = &SmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetMmsEnabled(MmsEnabled bool) *ListAvailablePhoneNumberMobileParams {
	params.MmsEnabled = &MmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetVoiceEnabled(VoiceEnabled bool) *ListAvailablePhoneNumberMobileParams {
	params.VoiceEnabled = &VoiceEnabled
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetExcludeAllAddressRequired(ExcludeAllAddressRequired bool) *ListAvailablePhoneNumberMobileParams {
	params.ExcludeAllAddressRequired = &ExcludeAllAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetExcludeLocalAddressRequired(ExcludeLocalAddressRequired bool) *ListAvailablePhoneNumberMobileParams {
	params.ExcludeLocalAddressRequired = &ExcludeLocalAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetExcludeForeignAddressRequired(ExcludeForeignAddressRequired bool) *ListAvailablePhoneNumberMobileParams {
	params.ExcludeForeignAddressRequired = &ExcludeForeignAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetBeta(Beta bool) *ListAvailablePhoneNumberMobileParams {
	params.Beta = &Beta
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetNearNumber(NearNumber string) *ListAvailablePhoneNumberMobileParams {
	params.NearNumber = &NearNumber
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetNearLatLong(NearLatLong string) *ListAvailablePhoneNumberMobileParams {
	params.NearLatLong = &NearLatLong
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetDistance(Distance int32) *ListAvailablePhoneNumberMobileParams {
	params.Distance = &Distance
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetInPostalCode(InPostalCode string) *ListAvailablePhoneNumberMobileParams {
	params.InPostalCode = &InPostalCode
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetInRegion(InRegion string) *ListAvailablePhoneNumberMobileParams {
	params.InRegion = &InRegion
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetInRateCenter(InRateCenter string) *ListAvailablePhoneNumberMobileParams {
	params.InRateCenter = &InRateCenter
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetInLata(InLata string) *ListAvailablePhoneNumberMobileParams {
	params.InLata = &InLata
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetInLocality(InLocality string) *ListAvailablePhoneNumberMobileParams {
	params.InLocality = &InLocality
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetFaxEnabled(FaxEnabled bool) *ListAvailablePhoneNumberMobileParams {
	params.FaxEnabled = &FaxEnabled
	return params
}
func (params *ListAvailablePhoneNumberMobileParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberMobileParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberMobile Method for ListAvailablePhoneNumberMobile
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
//
// param: optional nil or *ListAvailablePhoneNumberMobileParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
//
// param: "AreaCode" (int32) - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
//
// param: "Contains" (string) - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
//
// param: "SmsEnabled" (bool) - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
//
// param: "MmsEnabled" (bool) - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
//
// param: "VoiceEnabled" (bool) - Whether the phone numbers can receive calls. Can be: `true` or `false`.
//
// param: "ExcludeAllAddressRequired" (bool) - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeLocalAddressRequired" (bool) - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeForeignAddressRequired" (bool) - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "Beta" (bool) - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "NearNumber" (string) - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
//
// param: "NearLatLong" (string) - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
//
// param: "Distance" (int32) - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
//
// param: "InPostalCode" (string) - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRegion" (string) - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRateCenter" (string) - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
//
// param: "InLata" (string) - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InLocality" (string) - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
//
// param: "FaxEnabled" (bool) - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberMobileResponse
func (c *DefaultApiService) ListAvailablePhoneNumberMobile(CountryCode string, params *ListAvailablePhoneNumberMobileParams) (*ListAvailablePhoneNumberMobileResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Mobile.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", fmt.Sprint(*params.AreaCode))
	}
	if params != nil && params.Contains != nil {
		data.Set("Contains", *params.Contains)
	}
	if params != nil && params.SmsEnabled != nil {
		data.Set("SmsEnabled", fmt.Sprint(*params.SmsEnabled))
	}
	if params != nil && params.MmsEnabled != nil {
		data.Set("MmsEnabled", fmt.Sprint(*params.MmsEnabled))
	}
	if params != nil && params.VoiceEnabled != nil {
		data.Set("VoiceEnabled", fmt.Sprint(*params.VoiceEnabled))
	}
	if params != nil && params.ExcludeAllAddressRequired != nil {
		data.Set("ExcludeAllAddressRequired", fmt.Sprint(*params.ExcludeAllAddressRequired))
	}
	if params != nil && params.ExcludeLocalAddressRequired != nil {
		data.Set("ExcludeLocalAddressRequired", fmt.Sprint(*params.ExcludeLocalAddressRequired))
	}
	if params != nil && params.ExcludeForeignAddressRequired != nil {
		data.Set("ExcludeForeignAddressRequired", fmt.Sprint(*params.ExcludeForeignAddressRequired))
	}
	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.NearNumber != nil {
		data.Set("NearNumber", *params.NearNumber)
	}
	if params != nil && params.NearLatLong != nil {
		data.Set("NearLatLong", *params.NearLatLong)
	}
	if params != nil && params.Distance != nil {
		data.Set("Distance", fmt.Sprint(*params.Distance))
	}
	if params != nil && params.InPostalCode != nil {
		data.Set("InPostalCode", *params.InPostalCode)
	}
	if params != nil && params.InRegion != nil {
		data.Set("InRegion", *params.InRegion)
	}
	if params != nil && params.InRateCenter != nil {
		data.Set("InRateCenter", *params.InRateCenter)
	}
	if params != nil && params.InLata != nil {
		data.Set("InLata", *params.InLata)
	}
	if params != nil && params.InLocality != nil {
		data.Set("InLocality", *params.InLocality)
	}
	if params != nil && params.FaxEnabled != nil {
		data.Set("FaxEnabled", fmt.Sprint(*params.FaxEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberMobileResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberNationalParams Optional parameters for the method 'ListAvailablePhoneNumberNational'
type ListAvailablePhoneNumberNationalParams struct {
	PathAccountSid                *string `json:"PathAccountSid,omitempty"`
	AreaCode                      *int32  `json:"AreaCode,omitempty"`
	Contains                      *string `json:"Contains,omitempty"`
	SmsEnabled                    *bool   `json:"SmsEnabled,omitempty"`
	MmsEnabled                    *bool   `json:"MmsEnabled,omitempty"`
	VoiceEnabled                  *bool   `json:"VoiceEnabled,omitempty"`
	ExcludeAllAddressRequired     *bool   `json:"ExcludeAllAddressRequired,omitempty"`
	ExcludeLocalAddressRequired   *bool   `json:"ExcludeLocalAddressRequired,omitempty"`
	ExcludeForeignAddressRequired *bool   `json:"ExcludeForeignAddressRequired,omitempty"`
	Beta                          *bool   `json:"Beta,omitempty"`
	NearNumber                    *string `json:"NearNumber,omitempty"`
	NearLatLong                   *string `json:"NearLatLong,omitempty"`
	Distance                      *int32  `json:"Distance,omitempty"`
	InPostalCode                  *string `json:"InPostalCode,omitempty"`
	InRegion                      *string `json:"InRegion,omitempty"`
	InRateCenter                  *string `json:"InRateCenter,omitempty"`
	InLata                        *string `json:"InLata,omitempty"`
	InLocality                    *string `json:"InLocality,omitempty"`
	FaxEnabled                    *bool   `json:"FaxEnabled,omitempty"`
	PageSize                      *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberNationalParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberNationalParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetAreaCode(AreaCode int32) *ListAvailablePhoneNumberNationalParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetContains(Contains string) *ListAvailablePhoneNumberNationalParams {
	params.Contains = &Contains
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetSmsEnabled(SmsEnabled bool) *ListAvailablePhoneNumberNationalParams {
	params.SmsEnabled = &SmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetMmsEnabled(MmsEnabled bool) *ListAvailablePhoneNumberNationalParams {
	params.MmsEnabled = &MmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetVoiceEnabled(VoiceEnabled bool) *ListAvailablePhoneNumberNationalParams {
	params.VoiceEnabled = &VoiceEnabled
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetExcludeAllAddressRequired(ExcludeAllAddressRequired bool) *ListAvailablePhoneNumberNationalParams {
	params.ExcludeAllAddressRequired = &ExcludeAllAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetExcludeLocalAddressRequired(ExcludeLocalAddressRequired bool) *ListAvailablePhoneNumberNationalParams {
	params.ExcludeLocalAddressRequired = &ExcludeLocalAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetExcludeForeignAddressRequired(ExcludeForeignAddressRequired bool) *ListAvailablePhoneNumberNationalParams {
	params.ExcludeForeignAddressRequired = &ExcludeForeignAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetBeta(Beta bool) *ListAvailablePhoneNumberNationalParams {
	params.Beta = &Beta
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetNearNumber(NearNumber string) *ListAvailablePhoneNumberNationalParams {
	params.NearNumber = &NearNumber
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetNearLatLong(NearLatLong string) *ListAvailablePhoneNumberNationalParams {
	params.NearLatLong = &NearLatLong
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetDistance(Distance int32) *ListAvailablePhoneNumberNationalParams {
	params.Distance = &Distance
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetInPostalCode(InPostalCode string) *ListAvailablePhoneNumberNationalParams {
	params.InPostalCode = &InPostalCode
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetInRegion(InRegion string) *ListAvailablePhoneNumberNationalParams {
	params.InRegion = &InRegion
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetInRateCenter(InRateCenter string) *ListAvailablePhoneNumberNationalParams {
	params.InRateCenter = &InRateCenter
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetInLata(InLata string) *ListAvailablePhoneNumberNationalParams {
	params.InLata = &InLata
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetInLocality(InLocality string) *ListAvailablePhoneNumberNationalParams {
	params.InLocality = &InLocality
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetFaxEnabled(FaxEnabled bool) *ListAvailablePhoneNumberNationalParams {
	params.FaxEnabled = &FaxEnabled
	return params
}
func (params *ListAvailablePhoneNumberNationalParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberNationalParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberNational Method for ListAvailablePhoneNumberNational
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
//
// param: optional nil or *ListAvailablePhoneNumberNationalParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
//
// param: "AreaCode" (int32) - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
//
// param: "Contains" (string) - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
//
// param: "SmsEnabled" (bool) - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
//
// param: "MmsEnabled" (bool) - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
//
// param: "VoiceEnabled" (bool) - Whether the phone numbers can receive calls. Can be: `true` or `false`.
//
// param: "ExcludeAllAddressRequired" (bool) - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeLocalAddressRequired" (bool) - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeForeignAddressRequired" (bool) - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "Beta" (bool) - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "NearNumber" (string) - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
//
// param: "NearLatLong" (string) - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
//
// param: "Distance" (int32) - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
//
// param: "InPostalCode" (string) - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRegion" (string) - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRateCenter" (string) - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
//
// param: "InLata" (string) - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InLocality" (string) - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
//
// param: "FaxEnabled" (bool) - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberNationalResponse
func (c *DefaultApiService) ListAvailablePhoneNumberNational(CountryCode string, params *ListAvailablePhoneNumberNationalParams) (*ListAvailablePhoneNumberNationalResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", fmt.Sprint(*params.AreaCode))
	}
	if params != nil && params.Contains != nil {
		data.Set("Contains", *params.Contains)
	}
	if params != nil && params.SmsEnabled != nil {
		data.Set("SmsEnabled", fmt.Sprint(*params.SmsEnabled))
	}
	if params != nil && params.MmsEnabled != nil {
		data.Set("MmsEnabled", fmt.Sprint(*params.MmsEnabled))
	}
	if params != nil && params.VoiceEnabled != nil {
		data.Set("VoiceEnabled", fmt.Sprint(*params.VoiceEnabled))
	}
	if params != nil && params.ExcludeAllAddressRequired != nil {
		data.Set("ExcludeAllAddressRequired", fmt.Sprint(*params.ExcludeAllAddressRequired))
	}
	if params != nil && params.ExcludeLocalAddressRequired != nil {
		data.Set("ExcludeLocalAddressRequired", fmt.Sprint(*params.ExcludeLocalAddressRequired))
	}
	if params != nil && params.ExcludeForeignAddressRequired != nil {
		data.Set("ExcludeForeignAddressRequired", fmt.Sprint(*params.ExcludeForeignAddressRequired))
	}
	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.NearNumber != nil {
		data.Set("NearNumber", *params.NearNumber)
	}
	if params != nil && params.NearLatLong != nil {
		data.Set("NearLatLong", *params.NearLatLong)
	}
	if params != nil && params.Distance != nil {
		data.Set("Distance", fmt.Sprint(*params.Distance))
	}
	if params != nil && params.InPostalCode != nil {
		data.Set("InPostalCode", *params.InPostalCode)
	}
	if params != nil && params.InRegion != nil {
		data.Set("InRegion", *params.InRegion)
	}
	if params != nil && params.InRateCenter != nil {
		data.Set("InRateCenter", *params.InRateCenter)
	}
	if params != nil && params.InLata != nil {
		data.Set("InLata", *params.InLata)
	}
	if params != nil && params.InLocality != nil {
		data.Set("InLocality", *params.InLocality)
	}
	if params != nil && params.FaxEnabled != nil {
		data.Set("FaxEnabled", fmt.Sprint(*params.FaxEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberNationalResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberSharedCostParams Optional parameters for the method 'ListAvailablePhoneNumberSharedCost'
type ListAvailablePhoneNumberSharedCostParams struct {
	PathAccountSid                *string `json:"PathAccountSid,omitempty"`
	AreaCode                      *int32  `json:"AreaCode,omitempty"`
	Contains                      *string `json:"Contains,omitempty"`
	SmsEnabled                    *bool   `json:"SmsEnabled,omitempty"`
	MmsEnabled                    *bool   `json:"MmsEnabled,omitempty"`
	VoiceEnabled                  *bool   `json:"VoiceEnabled,omitempty"`
	ExcludeAllAddressRequired     *bool   `json:"ExcludeAllAddressRequired,omitempty"`
	ExcludeLocalAddressRequired   *bool   `json:"ExcludeLocalAddressRequired,omitempty"`
	ExcludeForeignAddressRequired *bool   `json:"ExcludeForeignAddressRequired,omitempty"`
	Beta                          *bool   `json:"Beta,omitempty"`
	NearNumber                    *string `json:"NearNumber,omitempty"`
	NearLatLong                   *string `json:"NearLatLong,omitempty"`
	Distance                      *int32  `json:"Distance,omitempty"`
	InPostalCode                  *string `json:"InPostalCode,omitempty"`
	InRegion                      *string `json:"InRegion,omitempty"`
	InRateCenter                  *string `json:"InRateCenter,omitempty"`
	InLata                        *string `json:"InLata,omitempty"`
	InLocality                    *string `json:"InLocality,omitempty"`
	FaxEnabled                    *bool   `json:"FaxEnabled,omitempty"`
	PageSize                      *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberSharedCostParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberSharedCostParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetAreaCode(AreaCode int32) *ListAvailablePhoneNumberSharedCostParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetContains(Contains string) *ListAvailablePhoneNumberSharedCostParams {
	params.Contains = &Contains
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetSmsEnabled(SmsEnabled bool) *ListAvailablePhoneNumberSharedCostParams {
	params.SmsEnabled = &SmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetMmsEnabled(MmsEnabled bool) *ListAvailablePhoneNumberSharedCostParams {
	params.MmsEnabled = &MmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetVoiceEnabled(VoiceEnabled bool) *ListAvailablePhoneNumberSharedCostParams {
	params.VoiceEnabled = &VoiceEnabled
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetExcludeAllAddressRequired(ExcludeAllAddressRequired bool) *ListAvailablePhoneNumberSharedCostParams {
	params.ExcludeAllAddressRequired = &ExcludeAllAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetExcludeLocalAddressRequired(ExcludeLocalAddressRequired bool) *ListAvailablePhoneNumberSharedCostParams {
	params.ExcludeLocalAddressRequired = &ExcludeLocalAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetExcludeForeignAddressRequired(ExcludeForeignAddressRequired bool) *ListAvailablePhoneNumberSharedCostParams {
	params.ExcludeForeignAddressRequired = &ExcludeForeignAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetBeta(Beta bool) *ListAvailablePhoneNumberSharedCostParams {
	params.Beta = &Beta
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetNearNumber(NearNumber string) *ListAvailablePhoneNumberSharedCostParams {
	params.NearNumber = &NearNumber
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetNearLatLong(NearLatLong string) *ListAvailablePhoneNumberSharedCostParams {
	params.NearLatLong = &NearLatLong
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetDistance(Distance int32) *ListAvailablePhoneNumberSharedCostParams {
	params.Distance = &Distance
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetInPostalCode(InPostalCode string) *ListAvailablePhoneNumberSharedCostParams {
	params.InPostalCode = &InPostalCode
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetInRegion(InRegion string) *ListAvailablePhoneNumberSharedCostParams {
	params.InRegion = &InRegion
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetInRateCenter(InRateCenter string) *ListAvailablePhoneNumberSharedCostParams {
	params.InRateCenter = &InRateCenter
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetInLata(InLata string) *ListAvailablePhoneNumberSharedCostParams {
	params.InLata = &InLata
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetInLocality(InLocality string) *ListAvailablePhoneNumberSharedCostParams {
	params.InLocality = &InLocality
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetFaxEnabled(FaxEnabled bool) *ListAvailablePhoneNumberSharedCostParams {
	params.FaxEnabled = &FaxEnabled
	return params
}
func (params *ListAvailablePhoneNumberSharedCostParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberSharedCostParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberSharedCost Method for ListAvailablePhoneNumberSharedCost
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
//
// param: optional nil or *ListAvailablePhoneNumberSharedCostParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
//
// param: "AreaCode" (int32) - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
//
// param: "Contains" (string) - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
//
// param: "SmsEnabled" (bool) - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
//
// param: "MmsEnabled" (bool) - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
//
// param: "VoiceEnabled" (bool) - Whether the phone numbers can receive calls. Can be: `true` or `false`.
//
// param: "ExcludeAllAddressRequired" (bool) - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeLocalAddressRequired" (bool) - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeForeignAddressRequired" (bool) - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "Beta" (bool) - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "NearNumber" (string) - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
//
// param: "NearLatLong" (string) - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
//
// param: "Distance" (int32) - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
//
// param: "InPostalCode" (string) - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRegion" (string) - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRateCenter" (string) - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
//
// param: "InLata" (string) - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InLocality" (string) - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
//
// param: "FaxEnabled" (bool) - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberSharedCostResponse
func (c *DefaultApiService) ListAvailablePhoneNumberSharedCost(CountryCode string, params *ListAvailablePhoneNumberSharedCostParams) (*ListAvailablePhoneNumberSharedCostResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/SharedCost.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", fmt.Sprint(*params.AreaCode))
	}
	if params != nil && params.Contains != nil {
		data.Set("Contains", *params.Contains)
	}
	if params != nil && params.SmsEnabled != nil {
		data.Set("SmsEnabled", fmt.Sprint(*params.SmsEnabled))
	}
	if params != nil && params.MmsEnabled != nil {
		data.Set("MmsEnabled", fmt.Sprint(*params.MmsEnabled))
	}
	if params != nil && params.VoiceEnabled != nil {
		data.Set("VoiceEnabled", fmt.Sprint(*params.VoiceEnabled))
	}
	if params != nil && params.ExcludeAllAddressRequired != nil {
		data.Set("ExcludeAllAddressRequired", fmt.Sprint(*params.ExcludeAllAddressRequired))
	}
	if params != nil && params.ExcludeLocalAddressRequired != nil {
		data.Set("ExcludeLocalAddressRequired", fmt.Sprint(*params.ExcludeLocalAddressRequired))
	}
	if params != nil && params.ExcludeForeignAddressRequired != nil {
		data.Set("ExcludeForeignAddressRequired", fmt.Sprint(*params.ExcludeForeignAddressRequired))
	}
	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.NearNumber != nil {
		data.Set("NearNumber", *params.NearNumber)
	}
	if params != nil && params.NearLatLong != nil {
		data.Set("NearLatLong", *params.NearLatLong)
	}
	if params != nil && params.Distance != nil {
		data.Set("Distance", fmt.Sprint(*params.Distance))
	}
	if params != nil && params.InPostalCode != nil {
		data.Set("InPostalCode", *params.InPostalCode)
	}
	if params != nil && params.InRegion != nil {
		data.Set("InRegion", *params.InRegion)
	}
	if params != nil && params.InRateCenter != nil {
		data.Set("InRateCenter", *params.InRateCenter)
	}
	if params != nil && params.InLata != nil {
		data.Set("InLata", *params.InLata)
	}
	if params != nil && params.InLocality != nil {
		data.Set("InLocality", *params.InLocality)
	}
	if params != nil && params.FaxEnabled != nil {
		data.Set("FaxEnabled", fmt.Sprint(*params.FaxEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberSharedCostResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberTollFreeParams Optional parameters for the method 'ListAvailablePhoneNumberTollFree'
type ListAvailablePhoneNumberTollFreeParams struct {
	PathAccountSid                *string `json:"PathAccountSid,omitempty"`
	AreaCode                      *int32  `json:"AreaCode,omitempty"`
	Contains                      *string `json:"Contains,omitempty"`
	SmsEnabled                    *bool   `json:"SmsEnabled,omitempty"`
	MmsEnabled                    *bool   `json:"MmsEnabled,omitempty"`
	VoiceEnabled                  *bool   `json:"VoiceEnabled,omitempty"`
	ExcludeAllAddressRequired     *bool   `json:"ExcludeAllAddressRequired,omitempty"`
	ExcludeLocalAddressRequired   *bool   `json:"ExcludeLocalAddressRequired,omitempty"`
	ExcludeForeignAddressRequired *bool   `json:"ExcludeForeignAddressRequired,omitempty"`
	Beta                          *bool   `json:"Beta,omitempty"`
	NearNumber                    *string `json:"NearNumber,omitempty"`
	NearLatLong                   *string `json:"NearLatLong,omitempty"`
	Distance                      *int32  `json:"Distance,omitempty"`
	InPostalCode                  *string `json:"InPostalCode,omitempty"`
	InRegion                      *string `json:"InRegion,omitempty"`
	InRateCenter                  *string `json:"InRateCenter,omitempty"`
	InLata                        *string `json:"InLata,omitempty"`
	InLocality                    *string `json:"InLocality,omitempty"`
	FaxEnabled                    *bool   `json:"FaxEnabled,omitempty"`
	PageSize                      *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberTollFreeParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberTollFreeParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetAreaCode(AreaCode int32) *ListAvailablePhoneNumberTollFreeParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetContains(Contains string) *ListAvailablePhoneNumberTollFreeParams {
	params.Contains = &Contains
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetSmsEnabled(SmsEnabled bool) *ListAvailablePhoneNumberTollFreeParams {
	params.SmsEnabled = &SmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetMmsEnabled(MmsEnabled bool) *ListAvailablePhoneNumberTollFreeParams {
	params.MmsEnabled = &MmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetVoiceEnabled(VoiceEnabled bool) *ListAvailablePhoneNumberTollFreeParams {
	params.VoiceEnabled = &VoiceEnabled
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetExcludeAllAddressRequired(ExcludeAllAddressRequired bool) *ListAvailablePhoneNumberTollFreeParams {
	params.ExcludeAllAddressRequired = &ExcludeAllAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetExcludeLocalAddressRequired(ExcludeLocalAddressRequired bool) *ListAvailablePhoneNumberTollFreeParams {
	params.ExcludeLocalAddressRequired = &ExcludeLocalAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetExcludeForeignAddressRequired(ExcludeForeignAddressRequired bool) *ListAvailablePhoneNumberTollFreeParams {
	params.ExcludeForeignAddressRequired = &ExcludeForeignAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetBeta(Beta bool) *ListAvailablePhoneNumberTollFreeParams {
	params.Beta = &Beta
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetNearNumber(NearNumber string) *ListAvailablePhoneNumberTollFreeParams {
	params.NearNumber = &NearNumber
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetNearLatLong(NearLatLong string) *ListAvailablePhoneNumberTollFreeParams {
	params.NearLatLong = &NearLatLong
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetDistance(Distance int32) *ListAvailablePhoneNumberTollFreeParams {
	params.Distance = &Distance
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetInPostalCode(InPostalCode string) *ListAvailablePhoneNumberTollFreeParams {
	params.InPostalCode = &InPostalCode
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetInRegion(InRegion string) *ListAvailablePhoneNumberTollFreeParams {
	params.InRegion = &InRegion
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetInRateCenter(InRateCenter string) *ListAvailablePhoneNumberTollFreeParams {
	params.InRateCenter = &InRateCenter
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetInLata(InLata string) *ListAvailablePhoneNumberTollFreeParams {
	params.InLata = &InLata
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetInLocality(InLocality string) *ListAvailablePhoneNumberTollFreeParams {
	params.InLocality = &InLocality
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetFaxEnabled(FaxEnabled bool) *ListAvailablePhoneNumberTollFreeParams {
	params.FaxEnabled = &FaxEnabled
	return params
}
func (params *ListAvailablePhoneNumberTollFreeParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberTollFreeParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberTollFree Method for ListAvailablePhoneNumberTollFree
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
//
// param: optional nil or *ListAvailablePhoneNumberTollFreeParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
//
// param: "AreaCode" (int32) - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
//
// param: "Contains" (string) - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
//
// param: "SmsEnabled" (bool) - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
//
// param: "MmsEnabled" (bool) - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
//
// param: "VoiceEnabled" (bool) - Whether the phone numbers can receive calls. Can be: `true` or `false`.
//
// param: "ExcludeAllAddressRequired" (bool) - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeLocalAddressRequired" (bool) - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeForeignAddressRequired" (bool) - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "Beta" (bool) - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "NearNumber" (string) - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
//
// param: "NearLatLong" (string) - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
//
// param: "Distance" (int32) - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
//
// param: "InPostalCode" (string) - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRegion" (string) - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRateCenter" (string) - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
//
// param: "InLata" (string) - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InLocality" (string) - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
//
// param: "FaxEnabled" (bool) - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberTollFreeResponse
func (c *DefaultApiService) ListAvailablePhoneNumberTollFree(CountryCode string, params *ListAvailablePhoneNumberTollFreeParams) (*ListAvailablePhoneNumberTollFreeResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", fmt.Sprint(*params.AreaCode))
	}
	if params != nil && params.Contains != nil {
		data.Set("Contains", *params.Contains)
	}
	if params != nil && params.SmsEnabled != nil {
		data.Set("SmsEnabled", fmt.Sprint(*params.SmsEnabled))
	}
	if params != nil && params.MmsEnabled != nil {
		data.Set("MmsEnabled", fmt.Sprint(*params.MmsEnabled))
	}
	if params != nil && params.VoiceEnabled != nil {
		data.Set("VoiceEnabled", fmt.Sprint(*params.VoiceEnabled))
	}
	if params != nil && params.ExcludeAllAddressRequired != nil {
		data.Set("ExcludeAllAddressRequired", fmt.Sprint(*params.ExcludeAllAddressRequired))
	}
	if params != nil && params.ExcludeLocalAddressRequired != nil {
		data.Set("ExcludeLocalAddressRequired", fmt.Sprint(*params.ExcludeLocalAddressRequired))
	}
	if params != nil && params.ExcludeForeignAddressRequired != nil {
		data.Set("ExcludeForeignAddressRequired", fmt.Sprint(*params.ExcludeForeignAddressRequired))
	}
	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.NearNumber != nil {
		data.Set("NearNumber", *params.NearNumber)
	}
	if params != nil && params.NearLatLong != nil {
		data.Set("NearLatLong", *params.NearLatLong)
	}
	if params != nil && params.Distance != nil {
		data.Set("Distance", fmt.Sprint(*params.Distance))
	}
	if params != nil && params.InPostalCode != nil {
		data.Set("InPostalCode", *params.InPostalCode)
	}
	if params != nil && params.InRegion != nil {
		data.Set("InRegion", *params.InRegion)
	}
	if params != nil && params.InRateCenter != nil {
		data.Set("InRateCenter", *params.InRateCenter)
	}
	if params != nil && params.InLata != nil {
		data.Set("InLata", *params.InLata)
	}
	if params != nil && params.InLocality != nil {
		data.Set("InLocality", *params.InLocality)
	}
	if params != nil && params.FaxEnabled != nil {
		data.Set("FaxEnabled", fmt.Sprint(*params.FaxEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberTollFreeResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListAvailablePhoneNumberVoipParams Optional parameters for the method 'ListAvailablePhoneNumberVoip'
type ListAvailablePhoneNumberVoipParams struct {
	PathAccountSid                *string `json:"PathAccountSid,omitempty"`
	AreaCode                      *int32  `json:"AreaCode,omitempty"`
	Contains                      *string `json:"Contains,omitempty"`
	SmsEnabled                    *bool   `json:"SmsEnabled,omitempty"`
	MmsEnabled                    *bool   `json:"MmsEnabled,omitempty"`
	VoiceEnabled                  *bool   `json:"VoiceEnabled,omitempty"`
	ExcludeAllAddressRequired     *bool   `json:"ExcludeAllAddressRequired,omitempty"`
	ExcludeLocalAddressRequired   *bool   `json:"ExcludeLocalAddressRequired,omitempty"`
	ExcludeForeignAddressRequired *bool   `json:"ExcludeForeignAddressRequired,omitempty"`
	Beta                          *bool   `json:"Beta,omitempty"`
	NearNumber                    *string `json:"NearNumber,omitempty"`
	NearLatLong                   *string `json:"NearLatLong,omitempty"`
	Distance                      *int32  `json:"Distance,omitempty"`
	InPostalCode                  *string `json:"InPostalCode,omitempty"`
	InRegion                      *string `json:"InRegion,omitempty"`
	InRateCenter                  *string `json:"InRateCenter,omitempty"`
	InLata                        *string `json:"InLata,omitempty"`
	InLocality                    *string `json:"InLocality,omitempty"`
	FaxEnabled                    *bool   `json:"FaxEnabled,omitempty"`
	PageSize                      *int32  `json:"PageSize,omitempty"`
}

func (params *ListAvailablePhoneNumberVoipParams) SetPathAccountSid(PathAccountSid string) *ListAvailablePhoneNumberVoipParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetAreaCode(AreaCode int32) *ListAvailablePhoneNumberVoipParams {
	params.AreaCode = &AreaCode
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetContains(Contains string) *ListAvailablePhoneNumberVoipParams {
	params.Contains = &Contains
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetSmsEnabled(SmsEnabled bool) *ListAvailablePhoneNumberVoipParams {
	params.SmsEnabled = &SmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetMmsEnabled(MmsEnabled bool) *ListAvailablePhoneNumberVoipParams {
	params.MmsEnabled = &MmsEnabled
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetVoiceEnabled(VoiceEnabled bool) *ListAvailablePhoneNumberVoipParams {
	params.VoiceEnabled = &VoiceEnabled
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetExcludeAllAddressRequired(ExcludeAllAddressRequired bool) *ListAvailablePhoneNumberVoipParams {
	params.ExcludeAllAddressRequired = &ExcludeAllAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetExcludeLocalAddressRequired(ExcludeLocalAddressRequired bool) *ListAvailablePhoneNumberVoipParams {
	params.ExcludeLocalAddressRequired = &ExcludeLocalAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetExcludeForeignAddressRequired(ExcludeForeignAddressRequired bool) *ListAvailablePhoneNumberVoipParams {
	params.ExcludeForeignAddressRequired = &ExcludeForeignAddressRequired
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetBeta(Beta bool) *ListAvailablePhoneNumberVoipParams {
	params.Beta = &Beta
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetNearNumber(NearNumber string) *ListAvailablePhoneNumberVoipParams {
	params.NearNumber = &NearNumber
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetNearLatLong(NearLatLong string) *ListAvailablePhoneNumberVoipParams {
	params.NearLatLong = &NearLatLong
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetDistance(Distance int32) *ListAvailablePhoneNumberVoipParams {
	params.Distance = &Distance
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetInPostalCode(InPostalCode string) *ListAvailablePhoneNumberVoipParams {
	params.InPostalCode = &InPostalCode
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetInRegion(InRegion string) *ListAvailablePhoneNumberVoipParams {
	params.InRegion = &InRegion
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetInRateCenter(InRateCenter string) *ListAvailablePhoneNumberVoipParams {
	params.InRateCenter = &InRateCenter
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetInLata(InLata string) *ListAvailablePhoneNumberVoipParams {
	params.InLata = &InLata
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetInLocality(InLocality string) *ListAvailablePhoneNumberVoipParams {
	params.InLocality = &InLocality
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetFaxEnabled(FaxEnabled bool) *ListAvailablePhoneNumberVoipParams {
	params.FaxEnabled = &FaxEnabled
	return params
}
func (params *ListAvailablePhoneNumberVoipParams) SetPageSize(PageSize int32) *ListAvailablePhoneNumberVoipParams {
	params.PageSize = &PageSize
	return params
}

// ListAvailablePhoneNumberVoip Method for ListAvailablePhoneNumberVoip
//
// param: CountryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
//
// param: optional nil or *ListAvailablePhoneNumberVoipParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
//
// param: "AreaCode" (int32) - The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
//
// param: "Contains" (string) - The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
//
// param: "SmsEnabled" (bool) - Whether the phone numbers can receive text messages. Can be: `true` or `false`.
//
// param: "MmsEnabled" (bool) - Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
//
// param: "VoiceEnabled" (bool) - Whether the phone numbers can receive calls. Can be: `true` or `false`.
//
// param: "ExcludeAllAddressRequired" (bool) - Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeLocalAddressRequired" (bool) - Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "ExcludeForeignAddressRequired" (bool) - Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
//
// param: "Beta" (bool) - Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "NearNumber" (string) - Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
//
// param: "NearLatLong" (string) - Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
//
// param: "Distance" (int32) - The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
//
// param: "InPostalCode" (string) - Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRegion" (string) - Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InRateCenter" (string) - Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
//
// param: "InLata" (string) - Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
//
// param: "InLocality" (string) - Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
//
// param: "FaxEnabled" (bool) - Whether the phone numbers can receive faxes. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListAvailablePhoneNumberVoipResponse
func (c *DefaultApiService) ListAvailablePhoneNumberVoip(CountryCode string, params *ListAvailablePhoneNumberVoipParams) (*ListAvailablePhoneNumberVoipResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Voip.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CountryCode"+"}", CountryCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AreaCode != nil {
		data.Set("AreaCode", fmt.Sprint(*params.AreaCode))
	}
	if params != nil && params.Contains != nil {
		data.Set("Contains", *params.Contains)
	}
	if params != nil && params.SmsEnabled != nil {
		data.Set("SmsEnabled", fmt.Sprint(*params.SmsEnabled))
	}
	if params != nil && params.MmsEnabled != nil {
		data.Set("MmsEnabled", fmt.Sprint(*params.MmsEnabled))
	}
	if params != nil && params.VoiceEnabled != nil {
		data.Set("VoiceEnabled", fmt.Sprint(*params.VoiceEnabled))
	}
	if params != nil && params.ExcludeAllAddressRequired != nil {
		data.Set("ExcludeAllAddressRequired", fmt.Sprint(*params.ExcludeAllAddressRequired))
	}
	if params != nil && params.ExcludeLocalAddressRequired != nil {
		data.Set("ExcludeLocalAddressRequired", fmt.Sprint(*params.ExcludeLocalAddressRequired))
	}
	if params != nil && params.ExcludeForeignAddressRequired != nil {
		data.Set("ExcludeForeignAddressRequired", fmt.Sprint(*params.ExcludeForeignAddressRequired))
	}
	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.NearNumber != nil {
		data.Set("NearNumber", *params.NearNumber)
	}
	if params != nil && params.NearLatLong != nil {
		data.Set("NearLatLong", *params.NearLatLong)
	}
	if params != nil && params.Distance != nil {
		data.Set("Distance", fmt.Sprint(*params.Distance))
	}
	if params != nil && params.InPostalCode != nil {
		data.Set("InPostalCode", *params.InPostalCode)
	}
	if params != nil && params.InRegion != nil {
		data.Set("InRegion", *params.InRegion)
	}
	if params != nil && params.InRateCenter != nil {
		data.Set("InRateCenter", *params.InRateCenter)
	}
	if params != nil && params.InLata != nil {
		data.Set("InLata", *params.InLata)
	}
	if params != nil && params.InLocality != nil {
		data.Set("InLocality", *params.InLocality)
	}
	if params != nil && params.FaxEnabled != nil {
		data.Set("FaxEnabled", fmt.Sprint(*params.FaxEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListAvailablePhoneNumberVoipResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCallParams Optional parameters for the method 'ListCall'
type ListCallParams struct {
	PathAccountSid  *string    `json:"PathAccountSid,omitempty"`
	To              *string    `json:"To,omitempty"`
	From            *string    `json:"From,omitempty"`
	ParentCallSid   *string    `json:"ParentCallSid,omitempty"`
	Status          *string    `json:"Status,omitempty"`
	StartTime       *time.Time `json:"StartTime,omitempty"`
	StartTimeBefore *time.Time `json:"StartTime&lt;,omitempty"`
	StartTimeAfter  *time.Time `json:"StartTime&gt;,omitempty"`
	EndTime         *time.Time `json:"EndTime,omitempty"`
	EndTimeBefore   *time.Time `json:"EndTime&lt;,omitempty"`
	EndTimeAfter    *time.Time `json:"EndTime&gt;,omitempty"`
	PageSize        *int32     `json:"PageSize,omitempty"`
}

func (params *ListCallParams) SetPathAccountSid(PathAccountSid string) *ListCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListCallParams) SetTo(To string) *ListCallParams {
	params.To = &To
	return params
}
func (params *ListCallParams) SetFrom(From string) *ListCallParams {
	params.From = &From
	return params
}
func (params *ListCallParams) SetParentCallSid(ParentCallSid string) *ListCallParams {
	params.ParentCallSid = &ParentCallSid
	return params
}
func (params *ListCallParams) SetStatus(Status string) *ListCallParams {
	params.Status = &Status
	return params
}
func (params *ListCallParams) SetStartTime(StartTime time.Time) *ListCallParams {
	params.StartTime = &StartTime
	return params
}
func (params *ListCallParams) SetStartTimeBefore(StartTimeBefore time.Time) *ListCallParams {
	params.StartTimeBefore = &StartTimeBefore
	return params
}
func (params *ListCallParams) SetStartTimeAfter(StartTimeAfter time.Time) *ListCallParams {
	params.StartTimeAfter = &StartTimeAfter
	return params
}
func (params *ListCallParams) SetEndTime(EndTime time.Time) *ListCallParams {
	params.EndTime = &EndTime
	return params
}
func (params *ListCallParams) SetEndTimeBefore(EndTimeBefore time.Time) *ListCallParams {
	params.EndTimeBefore = &EndTimeBefore
	return params
}
func (params *ListCallParams) SetEndTimeAfter(EndTimeAfter time.Time) *ListCallParams {
	params.EndTimeAfter = &EndTimeAfter
	return params
}
func (params *ListCallParams) SetPageSize(PageSize int32) *ListCallParams {
	params.PageSize = &PageSize
	return params
}

// ListCall Method for ListCall
//
// Retrieves a collection of calls made to and from your account
//
// param: optional nil or *ListCallParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
//
// param: "To" (string) - Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
//
// param: "From" (string) - Only include calls from this phone number, SIP address, Client identifier or SIM SID.
//
// param: "ParentCallSid" (string) - Only include calls spawned by calls with this SID.
//
// param: "Status" (string) - The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
//
// param: "StartTime" (time.Time) - Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
//
// param: "StartTimeBefore" (time.Time) - Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
//
// param: "StartTimeAfter" (time.Time) - Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
//
// param: "EndTime" (time.Time) - Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
//
// param: "EndTimeBefore" (time.Time) - Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
//
// param: "EndTimeAfter" (time.Time) - Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCallResponse
func (c *DefaultApiService) ListCall(params *ListCallParams) (*ListCallResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.ParentCallSid != nil {
		data.Set("ParentCallSid", *params.ParentCallSid)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.StartTime != nil {
		data.Set("StartTime", fmt.Sprint((*params.StartTime).Format(time.RFC3339)))
	}
	if params != nil && params.StartTimeBefore != nil {
		data.Set("StartTime<", fmt.Sprint((*params.StartTimeBefore).Format(time.RFC3339)))
	}
	if params != nil && params.StartTimeAfter != nil {
		data.Set("StartTime>", fmt.Sprint((*params.StartTimeAfter).Format(time.RFC3339)))
	}
	if params != nil && params.EndTime != nil {
		data.Set("EndTime", fmt.Sprint((*params.EndTime).Format(time.RFC3339)))
	}
	if params != nil && params.EndTimeBefore != nil {
		data.Set("EndTime<", fmt.Sprint((*params.EndTimeBefore).Format(time.RFC3339)))
	}
	if params != nil && params.EndTimeAfter != nil {
		data.Set("EndTime>", fmt.Sprint((*params.EndTimeAfter).Format(time.RFC3339)))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCallResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCallEventParams Optional parameters for the method 'ListCallEvent'
type ListCallEventParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListCallEventParams) SetPathAccountSid(PathAccountSid string) *ListCallEventParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListCallEventParams) SetPageSize(PageSize int32) *ListCallEventParams {
	params.PageSize = &PageSize
	return params
}

// ListCallEvent Method for ListCallEvent
//
// Retrieve a list of all events for a call.
//
// param: CallSid The unique SID identifier of the Call.
//
// param: optional nil or *ListCallEventParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique SID identifier of the Account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCallEventResponse
func (c *DefaultApiService) ListCallEvent(CallSid string, params *ListCallEventParams) (*ListCallEventResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCallEventResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCallNotificationParams Optional parameters for the method 'ListCallNotification'
type ListCallNotificationParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	Log               *int32  `json:"Log,omitempty"`
	MessageDate       *string `json:"MessageDate,omitempty"`
	MessageDateBefore *string `json:"MessageDate&lt;,omitempty"`
	MessageDateAfter  *string `json:"MessageDate&gt;,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

func (params *ListCallNotificationParams) SetPathAccountSid(PathAccountSid string) *ListCallNotificationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListCallNotificationParams) SetLog(Log int32) *ListCallNotificationParams {
	params.Log = &Log
	return params
}
func (params *ListCallNotificationParams) SetMessageDate(MessageDate string) *ListCallNotificationParams {
	params.MessageDate = &MessageDate
	return params
}
func (params *ListCallNotificationParams) SetMessageDateBefore(MessageDateBefore string) *ListCallNotificationParams {
	params.MessageDateBefore = &MessageDateBefore
	return params
}
func (params *ListCallNotificationParams) SetMessageDateAfter(MessageDateAfter string) *ListCallNotificationParams {
	params.MessageDateAfter = &MessageDateAfter
	return params
}
func (params *ListCallNotificationParams) SetPageSize(PageSize int32) *ListCallNotificationParams {
	params.PageSize = &PageSize
	return params
}

// ListCallNotification Method for ListCallNotification
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the Call Notification resources to read.
//
// param: optional nil or *ListCallNotificationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call Notification resources to read.
//
// param: "Log" (int32) - Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
//
// param: "MessageDate" (string) - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
//
// param: "MessageDateBefore" (string) - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
//
// param: "MessageDateAfter" (string) - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCallNotificationResponse
func (c *DefaultApiService) ListCallNotification(CallSid string, params *ListCallNotificationParams) (*ListCallNotificationResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Log != nil {
		data.Set("Log", fmt.Sprint(*params.Log))
	}
	if params != nil && params.MessageDate != nil {
		data.Set("MessageDate", fmt.Sprint(*params.MessageDate))
	}
	if params != nil && params.MessageDateBefore != nil {
		data.Set("MessageDate<", fmt.Sprint(*params.MessageDateBefore))
	}
	if params != nil && params.MessageDateAfter != nil {
		data.Set("MessageDate>", fmt.Sprint(*params.MessageDateAfter))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCallNotificationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCallRecordingParams Optional parameters for the method 'ListCallRecording'
type ListCallRecordingParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	DateCreated       *string `json:"DateCreated,omitempty"`
	DateCreatedBefore *string `json:"DateCreated&lt;,omitempty"`
	DateCreatedAfter  *string `json:"DateCreated&gt;,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

func (params *ListCallRecordingParams) SetPathAccountSid(PathAccountSid string) *ListCallRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListCallRecordingParams) SetDateCreated(DateCreated string) *ListCallRecordingParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *ListCallRecordingParams) SetDateCreatedBefore(DateCreatedBefore string) *ListCallRecordingParams {
	params.DateCreatedBefore = &DateCreatedBefore
	return params
}
func (params *ListCallRecordingParams) SetDateCreatedAfter(DateCreatedAfter string) *ListCallRecordingParams {
	params.DateCreatedAfter = &DateCreatedAfter
	return params
}
func (params *ListCallRecordingParams) SetPageSize(PageSize int32) *ListCallRecordingParams {
	params.PageSize = &PageSize
	return params
}

// ListCallRecording Method for ListCallRecording
//
// Retrieve a list of recordings belonging to the call used to make the request
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
//
// param: optional nil or *ListCallRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
//
// param: "DateCreated" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
//
// param: "DateCreatedBefore" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
//
// param: "DateCreatedAfter" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCallRecordingResponse
func (c *DefaultApiService) ListCallRecording(CallSid string, params *ListCallRecordingParams) (*ListCallRecordingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint(*params.DateCreated))
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreated<", fmt.Sprint(*params.DateCreatedBefore))
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreated>", fmt.Sprint(*params.DateCreatedAfter))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCallRecordingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListConferenceParams Optional parameters for the method 'ListConference'
type ListConferenceParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	DateCreated       *string `json:"DateCreated,omitempty"`
	DateCreatedBefore *string `json:"DateCreated&lt;,omitempty"`
	DateCreatedAfter  *string `json:"DateCreated&gt;,omitempty"`
	DateUpdated       *string `json:"DateUpdated,omitempty"`
	DateUpdatedBefore *string `json:"DateUpdated&lt;,omitempty"`
	DateUpdatedAfter  *string `json:"DateUpdated&gt;,omitempty"`
	FriendlyName      *string `json:"FriendlyName,omitempty"`
	Status            *string `json:"Status,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

func (params *ListConferenceParams) SetPathAccountSid(PathAccountSid string) *ListConferenceParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListConferenceParams) SetDateCreated(DateCreated string) *ListConferenceParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *ListConferenceParams) SetDateCreatedBefore(DateCreatedBefore string) *ListConferenceParams {
	params.DateCreatedBefore = &DateCreatedBefore
	return params
}
func (params *ListConferenceParams) SetDateCreatedAfter(DateCreatedAfter string) *ListConferenceParams {
	params.DateCreatedAfter = &DateCreatedAfter
	return params
}
func (params *ListConferenceParams) SetDateUpdated(DateUpdated string) *ListConferenceParams {
	params.DateUpdated = &DateUpdated
	return params
}
func (params *ListConferenceParams) SetDateUpdatedBefore(DateUpdatedBefore string) *ListConferenceParams {
	params.DateUpdatedBefore = &DateUpdatedBefore
	return params
}
func (params *ListConferenceParams) SetDateUpdatedAfter(DateUpdatedAfter string) *ListConferenceParams {
	params.DateUpdatedAfter = &DateUpdatedAfter
	return params
}
func (params *ListConferenceParams) SetFriendlyName(FriendlyName string) *ListConferenceParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListConferenceParams) SetStatus(Status string) *ListConferenceParams {
	params.Status = &Status
	return params
}
func (params *ListConferenceParams) SetPageSize(PageSize int32) *ListConferenceParams {
	params.PageSize = &PageSize
	return params
}

// ListConference Method for ListConference
//
// Retrieve a list of conferences belonging to the account used to make the request
//
// param: optional nil or *ListConferenceParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
//
// param: "DateCreated" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
//
// param: "DateCreatedBefore" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
//
// param: "DateCreatedAfter" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
//
// param: "DateUpdated" (string) - The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
//
// param: "DateUpdatedBefore" (string) - The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
//
// param: "DateUpdatedAfter" (string) - The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
//
// param: "FriendlyName" (string) - The string that identifies the Conference resources to read.
//
// param: "Status" (string) - The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListConferenceResponse
func (c *DefaultApiService) ListConference(params *ListConferenceParams) (*ListConferenceResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint(*params.DateCreated))
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreated<", fmt.Sprint(*params.DateCreatedBefore))
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreated>", fmt.Sprint(*params.DateCreatedAfter))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", fmt.Sprint(*params.DateUpdated))
	}
	if params != nil && params.DateUpdatedBefore != nil {
		data.Set("DateUpdated<", fmt.Sprint(*params.DateUpdatedBefore))
	}
	if params != nil && params.DateUpdatedAfter != nil {
		data.Set("DateUpdated>", fmt.Sprint(*params.DateUpdatedAfter))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListConferenceResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListConferenceRecordingParams Optional parameters for the method 'ListConferenceRecording'
type ListConferenceRecordingParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	DateCreated       *string `json:"DateCreated,omitempty"`
	DateCreatedBefore *string `json:"DateCreated&lt;,omitempty"`
	DateCreatedAfter  *string `json:"DateCreated&gt;,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

func (params *ListConferenceRecordingParams) SetPathAccountSid(PathAccountSid string) *ListConferenceRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListConferenceRecordingParams) SetDateCreated(DateCreated string) *ListConferenceRecordingParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *ListConferenceRecordingParams) SetDateCreatedBefore(DateCreatedBefore string) *ListConferenceRecordingParams {
	params.DateCreatedBefore = &DateCreatedBefore
	return params
}
func (params *ListConferenceRecordingParams) SetDateCreatedAfter(DateCreatedAfter string) *ListConferenceRecordingParams {
	params.DateCreatedAfter = &DateCreatedAfter
	return params
}
func (params *ListConferenceRecordingParams) SetPageSize(PageSize int32) *ListConferenceRecordingParams {
	params.PageSize = &PageSize
	return params
}

// ListConferenceRecording Method for ListConferenceRecording
//
// Retrieve a list of recordings belonging to the call used to make the request
//
// param: ConferenceSid The Conference SID that identifies the conference associated with the recording to read.
//
// param: optional nil or *ListConferenceRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
//
// param: "DateCreated" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
//
// param: "DateCreatedBefore" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
//
// param: "DateCreatedAfter" (string) - The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListConferenceRecordingResponse
func (c *DefaultApiService) ListConferenceRecording(ConferenceSid string, params *ListConferenceRecordingParams) (*ListConferenceRecordingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint(*params.DateCreated))
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreated<", fmt.Sprint(*params.DateCreatedBefore))
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreated>", fmt.Sprint(*params.DateCreatedAfter))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListConferenceRecordingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListConnectAppParams Optional parameters for the method 'ListConnectApp'
type ListConnectAppParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListConnectAppParams) SetPathAccountSid(PathAccountSid string) *ListConnectAppParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListConnectAppParams) SetPageSize(PageSize int32) *ListConnectAppParams {
	params.PageSize = &PageSize
	return params
}

// ListConnectApp Method for ListConnectApp
//
// Retrieve a list of connect-apps belonging to the account used to make the request
//
// param: optional nil or *ListConnectAppParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListConnectAppResponse
func (c *DefaultApiService) ListConnectApp(params *ListConnectAppParams) (*ListConnectAppResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/ConnectApps.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListConnectAppResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListDependentPhoneNumberParams Optional parameters for the method 'ListDependentPhoneNumber'
type ListDependentPhoneNumberParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListDependentPhoneNumberParams) SetPathAccountSid(PathAccountSid string) *ListDependentPhoneNumberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListDependentPhoneNumberParams) SetPageSize(PageSize int32) *ListDependentPhoneNumberParams {
	params.PageSize = &PageSize
	return params
}

// ListDependentPhoneNumber Method for ListDependentPhoneNumber
//
// param: AddressSid The SID of the Address resource associated with the phone number.
//
// param: optional nil or *ListDependentPhoneNumberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DependentPhoneNumber resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListDependentPhoneNumberResponse
func (c *DefaultApiService) ListDependentPhoneNumber(AddressSid string, params *ListDependentPhoneNumberParams) (*ListDependentPhoneNumberResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"AddressSid"+"}", AddressSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListDependentPhoneNumberResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListIncomingPhoneNumberParams Optional parameters for the method 'ListIncomingPhoneNumber'
type ListIncomingPhoneNumberParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Beta           *bool   `json:"Beta,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PhoneNumber    *string `json:"PhoneNumber,omitempty"`
	Origin         *string `json:"Origin,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListIncomingPhoneNumberParams) SetPathAccountSid(PathAccountSid string) *ListIncomingPhoneNumberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListIncomingPhoneNumberParams) SetBeta(Beta bool) *ListIncomingPhoneNumberParams {
	params.Beta = &Beta
	return params
}
func (params *ListIncomingPhoneNumberParams) SetFriendlyName(FriendlyName string) *ListIncomingPhoneNumberParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListIncomingPhoneNumberParams) SetPhoneNumber(PhoneNumber string) *ListIncomingPhoneNumberParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *ListIncomingPhoneNumberParams) SetOrigin(Origin string) *ListIncomingPhoneNumberParams {
	params.Origin = &Origin
	return params
}
func (params *ListIncomingPhoneNumberParams) SetPageSize(PageSize int32) *ListIncomingPhoneNumberParams {
	params.PageSize = &PageSize
	return params
}

// ListIncomingPhoneNumber Method for ListIncomingPhoneNumber
//
// Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
//
// param: optional nil or *ListIncomingPhoneNumberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read.
//
// param: "Beta" (bool) - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "FriendlyName" (string) - A string that identifies the IncomingPhoneNumber resources to read.
//
// param: "PhoneNumber" (string) - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
//
// param: "Origin" (string) - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListIncomingPhoneNumberResponse
func (c *DefaultApiService) ListIncomingPhoneNumber(params *ListIncomingPhoneNumberParams) (*ListIncomingPhoneNumberResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.Origin != nil {
		data.Set("Origin", *params.Origin)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIncomingPhoneNumberResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListIncomingPhoneNumberAssignedAddOnParams Optional parameters for the method 'ListIncomingPhoneNumberAssignedAddOn'
type ListIncomingPhoneNumberAssignedAddOnParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListIncomingPhoneNumberAssignedAddOnParams) SetPathAccountSid(PathAccountSid string) *ListIncomingPhoneNumberAssignedAddOnParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListIncomingPhoneNumberAssignedAddOnParams) SetPageSize(PageSize int32) *ListIncomingPhoneNumberAssignedAddOnParams {
	params.PageSize = &PageSize
	return params
}

// ListIncomingPhoneNumberAssignedAddOn Method for ListIncomingPhoneNumberAssignedAddOn
//
// Retrieve a list of Add-on installations currently assigned to this Number.
//
// param: ResourceSid The SID of the Phone Number to which the Add-on is assigned.
//
// param: optional nil or *ListIncomingPhoneNumberAssignedAddOnParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListIncomingPhoneNumberAssignedAddOnResponse
func (c *DefaultApiService) ListIncomingPhoneNumberAssignedAddOn(ResourceSid string, params *ListIncomingPhoneNumberAssignedAddOnParams) (*ListIncomingPhoneNumberAssignedAddOnResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ResourceSid"+"}", ResourceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIncomingPhoneNumberAssignedAddOnResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListIncomingPhoneNumberAssignedAddOnExtensionParams Optional parameters for the method 'ListIncomingPhoneNumberAssignedAddOnExtension'
type ListIncomingPhoneNumberAssignedAddOnExtensionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListIncomingPhoneNumberAssignedAddOnExtensionParams) SetPathAccountSid(PathAccountSid string) *ListIncomingPhoneNumberAssignedAddOnExtensionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListIncomingPhoneNumberAssignedAddOnExtensionParams) SetPageSize(PageSize int32) *ListIncomingPhoneNumberAssignedAddOnExtensionParams {
	params.PageSize = &PageSize
	return params
}

// ListIncomingPhoneNumberAssignedAddOnExtension Method for ListIncomingPhoneNumberAssignedAddOnExtension
//
// Retrieve a list of Extensions for the Assigned Add-on.
//
// param: ResourceSid The SID of the Phone Number to which the Add-on is assigned.
//
// param: AssignedAddOnSid The SID that uniquely identifies the assigned Add-on installation.
//
// param: optional nil or *ListIncomingPhoneNumberAssignedAddOnExtensionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListIncomingPhoneNumberAssignedAddOnExtensionResponse
func (c *DefaultApiService) ListIncomingPhoneNumberAssignedAddOnExtension(ResourceSid string, AssignedAddOnSid string, params *ListIncomingPhoneNumberAssignedAddOnExtensionParams) (*ListIncomingPhoneNumberAssignedAddOnExtensionResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ResourceSid"+"}", ResourceSid, -1)
	path = strings.Replace(path, "{"+"AssignedAddOnSid"+"}", AssignedAddOnSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIncomingPhoneNumberAssignedAddOnExtensionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListIncomingPhoneNumberLocalParams Optional parameters for the method 'ListIncomingPhoneNumberLocal'
type ListIncomingPhoneNumberLocalParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Beta           *bool   `json:"Beta,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PhoneNumber    *string `json:"PhoneNumber,omitempty"`
	Origin         *string `json:"Origin,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListIncomingPhoneNumberLocalParams) SetPathAccountSid(PathAccountSid string) *ListIncomingPhoneNumberLocalParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListIncomingPhoneNumberLocalParams) SetBeta(Beta bool) *ListIncomingPhoneNumberLocalParams {
	params.Beta = &Beta
	return params
}
func (params *ListIncomingPhoneNumberLocalParams) SetFriendlyName(FriendlyName string) *ListIncomingPhoneNumberLocalParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListIncomingPhoneNumberLocalParams) SetPhoneNumber(PhoneNumber string) *ListIncomingPhoneNumberLocalParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *ListIncomingPhoneNumberLocalParams) SetOrigin(Origin string) *ListIncomingPhoneNumberLocalParams {
	params.Origin = &Origin
	return params
}
func (params *ListIncomingPhoneNumberLocalParams) SetPageSize(PageSize int32) *ListIncomingPhoneNumberLocalParams {
	params.PageSize = &PageSize
	return params
}

// ListIncomingPhoneNumberLocal Method for ListIncomingPhoneNumberLocal
//
// param: optional nil or *ListIncomingPhoneNumberLocalParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
//
// param: "Beta" (bool) - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "FriendlyName" (string) - A string that identifies the resources to read.
//
// param: "PhoneNumber" (string) - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
//
// param: "Origin" (string) - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListIncomingPhoneNumberLocalResponse
func (c *DefaultApiService) ListIncomingPhoneNumberLocal(params *ListIncomingPhoneNumberLocalParams) (*ListIncomingPhoneNumberLocalResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.Origin != nil {
		data.Set("Origin", *params.Origin)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIncomingPhoneNumberLocalResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListIncomingPhoneNumberMobileParams Optional parameters for the method 'ListIncomingPhoneNumberMobile'
type ListIncomingPhoneNumberMobileParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Beta           *bool   `json:"Beta,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PhoneNumber    *string `json:"PhoneNumber,omitempty"`
	Origin         *string `json:"Origin,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListIncomingPhoneNumberMobileParams) SetPathAccountSid(PathAccountSid string) *ListIncomingPhoneNumberMobileParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListIncomingPhoneNumberMobileParams) SetBeta(Beta bool) *ListIncomingPhoneNumberMobileParams {
	params.Beta = &Beta
	return params
}
func (params *ListIncomingPhoneNumberMobileParams) SetFriendlyName(FriendlyName string) *ListIncomingPhoneNumberMobileParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListIncomingPhoneNumberMobileParams) SetPhoneNumber(PhoneNumber string) *ListIncomingPhoneNumberMobileParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *ListIncomingPhoneNumberMobileParams) SetOrigin(Origin string) *ListIncomingPhoneNumberMobileParams {
	params.Origin = &Origin
	return params
}
func (params *ListIncomingPhoneNumberMobileParams) SetPageSize(PageSize int32) *ListIncomingPhoneNumberMobileParams {
	params.PageSize = &PageSize
	return params
}

// ListIncomingPhoneNumberMobile Method for ListIncomingPhoneNumberMobile
//
// param: optional nil or *ListIncomingPhoneNumberMobileParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
//
// param: "Beta" (bool) - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "FriendlyName" (string) - A string that identifies the resources to read.
//
// param: "PhoneNumber" (string) - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
//
// param: "Origin" (string) - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListIncomingPhoneNumberMobileResponse
func (c *DefaultApiService) ListIncomingPhoneNumberMobile(params *ListIncomingPhoneNumberMobileParams) (*ListIncomingPhoneNumberMobileResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.Origin != nil {
		data.Set("Origin", *params.Origin)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIncomingPhoneNumberMobileResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListIncomingPhoneNumberTollFreeParams Optional parameters for the method 'ListIncomingPhoneNumberTollFree'
type ListIncomingPhoneNumberTollFreeParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Beta           *bool   `json:"Beta,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PhoneNumber    *string `json:"PhoneNumber,omitempty"`
	Origin         *string `json:"Origin,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListIncomingPhoneNumberTollFreeParams) SetPathAccountSid(PathAccountSid string) *ListIncomingPhoneNumberTollFreeParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListIncomingPhoneNumberTollFreeParams) SetBeta(Beta bool) *ListIncomingPhoneNumberTollFreeParams {
	params.Beta = &Beta
	return params
}
func (params *ListIncomingPhoneNumberTollFreeParams) SetFriendlyName(FriendlyName string) *ListIncomingPhoneNumberTollFreeParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListIncomingPhoneNumberTollFreeParams) SetPhoneNumber(PhoneNumber string) *ListIncomingPhoneNumberTollFreeParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *ListIncomingPhoneNumberTollFreeParams) SetOrigin(Origin string) *ListIncomingPhoneNumberTollFreeParams {
	params.Origin = &Origin
	return params
}
func (params *ListIncomingPhoneNumberTollFreeParams) SetPageSize(PageSize int32) *ListIncomingPhoneNumberTollFreeParams {
	params.PageSize = &PageSize
	return params
}

// ListIncomingPhoneNumberTollFree Method for ListIncomingPhoneNumberTollFree
//
// param: optional nil or *ListIncomingPhoneNumberTollFreeParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
//
// param: "Beta" (bool) - Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
//
// param: "FriendlyName" (string) - A string that identifies the resources to read.
//
// param: "PhoneNumber" (string) - The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
//
// param: "Origin" (string) - Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListIncomingPhoneNumberTollFreeResponse
func (c *DefaultApiService) ListIncomingPhoneNumberTollFree(params *ListIncomingPhoneNumberTollFreeParams) (*ListIncomingPhoneNumberTollFreeResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Beta != nil {
		data.Set("Beta", fmt.Sprint(*params.Beta))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.Origin != nil {
		data.Set("Origin", *params.Origin)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListIncomingPhoneNumberTollFreeResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListKeyParams Optional parameters for the method 'ListKey'
type ListKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListKeyParams) SetPathAccountSid(PathAccountSid string) *ListKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListKeyParams) SetPageSize(PageSize int32) *ListKeyParams {
	params.PageSize = &PageSize
	return params
}

// ListKey Method for ListKey
//
// param: optional nil or *ListKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListKeyResponse
func (c *DefaultApiService) ListKey(params *ListKeyParams) (*ListKeyResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Keys.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListKeyResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListMediaParams Optional parameters for the method 'ListMedia'
type ListMediaParams struct {
	PathAccountSid    *string    `json:"PathAccountSid,omitempty"`
	DateCreated       *time.Time `json:"DateCreated,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreated&lt;,omitempty"`
	DateCreatedAfter  *time.Time `json:"DateCreated&gt;,omitempty"`
	PageSize          *int32     `json:"PageSize,omitempty"`
}

func (params *ListMediaParams) SetPathAccountSid(PathAccountSid string) *ListMediaParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListMediaParams) SetDateCreated(DateCreated time.Time) *ListMediaParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *ListMediaParams) SetDateCreatedBefore(DateCreatedBefore time.Time) *ListMediaParams {
	params.DateCreatedBefore = &DateCreatedBefore
	return params
}
func (params *ListMediaParams) SetDateCreatedAfter(DateCreatedAfter time.Time) *ListMediaParams {
	params.DateCreatedAfter = &DateCreatedAfter
	return params
}
func (params *ListMediaParams) SetPageSize(PageSize int32) *ListMediaParams {
	params.PageSize = &PageSize
	return params
}

// ListMedia Method for ListMedia
//
// Retrieve a list of Media resources belonging to the account used to make the request
//
// param: MessageSid The SID of the Message resource that this Media resource belongs to.
//
// param: optional nil or *ListMediaParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Media resource(s) to read.
//
// param: "DateCreated" (time.Time) - Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
//
// param: "DateCreatedBefore" (time.Time) - Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
//
// param: "DateCreatedAfter" (time.Time) - Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListMediaResponse
func (c *DefaultApiService) ListMedia(MessageSid string, params *ListMediaParams) (*ListMediaResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"MessageSid"+"}", MessageSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreated<", fmt.Sprint((*params.DateCreatedBefore).Format(time.RFC3339)))
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreated>", fmt.Sprint((*params.DateCreatedAfter).Format(time.RFC3339)))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMediaResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListMemberParams Optional parameters for the method 'ListMember'
type ListMemberParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListMemberParams) SetPathAccountSid(PathAccountSid string) *ListMemberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListMemberParams) SetPageSize(PageSize int32) *ListMemberParams {
	params.PageSize = &PageSize
	return params
}

// ListMember Method for ListMember
//
// Retrieve the members of the queue
//
// param: QueueSid The SID of the Queue in which to find the members
//
// param: optional nil or *ListMemberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListMemberResponse
func (c *DefaultApiService) ListMember(QueueSid string, params *ListMemberParams) (*ListMemberResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"QueueSid"+"}", QueueSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMemberResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListMessageParams Optional parameters for the method 'ListMessage'
type ListMessageParams struct {
	PathAccountSid *string    `json:"PathAccountSid,omitempty"`
	To             *string    `json:"To,omitempty"`
	From           *string    `json:"From,omitempty"`
	DateSent       *time.Time `json:"DateSent,omitempty"`
	DateSentBefore *time.Time `json:"DateSent&lt;,omitempty"`
	DateSentAfter  *time.Time `json:"DateSent&gt;,omitempty"`
	PageSize       *int32     `json:"PageSize,omitempty"`
}

func (params *ListMessageParams) SetPathAccountSid(PathAccountSid string) *ListMessageParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListMessageParams) SetTo(To string) *ListMessageParams {
	params.To = &To
	return params
}
func (params *ListMessageParams) SetFrom(From string) *ListMessageParams {
	params.From = &From
	return params
}
func (params *ListMessageParams) SetDateSent(DateSent time.Time) *ListMessageParams {
	params.DateSent = &DateSent
	return params
}
func (params *ListMessageParams) SetDateSentBefore(DateSentBefore time.Time) *ListMessageParams {
	params.DateSentBefore = &DateSentBefore
	return params
}
func (params *ListMessageParams) SetDateSentAfter(DateSentAfter time.Time) *ListMessageParams {
	params.DateSentAfter = &DateSentAfter
	return params
}
func (params *ListMessageParams) SetPageSize(PageSize int32) *ListMessageParams {
	params.PageSize = &PageSize
	return params
}

// ListMessage Method for ListMessage
//
// Retrieve a list of messages belonging to the account used to make the request
//
// param: optional nil or *ListMessageParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to read.
//
// param: "To" (string) - Read messages sent to only this phone number.
//
// param: "From" (string) - Read messages sent from only this phone number or alphanumeric sender ID.
//
// param: "DateSent" (time.Time) - The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
//
// param: "DateSentBefore" (time.Time) - The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
//
// param: "DateSentAfter" (time.Time) - The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListMessageResponse
func (c *DefaultApiService) ListMessage(params *ListMessageParams) (*ListMessageResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.DateSent != nil {
		data.Set("DateSent", fmt.Sprint((*params.DateSent).Format(time.RFC3339)))
	}
	if params != nil && params.DateSentBefore != nil {
		data.Set("DateSent<", fmt.Sprint((*params.DateSentBefore).Format(time.RFC3339)))
	}
	if params != nil && params.DateSentAfter != nil {
		data.Set("DateSent>", fmt.Sprint((*params.DateSentAfter).Format(time.RFC3339)))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMessageResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListNotificationParams Optional parameters for the method 'ListNotification'
type ListNotificationParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	Log               *int32  `json:"Log,omitempty"`
	MessageDate       *string `json:"MessageDate,omitempty"`
	MessageDateBefore *string `json:"MessageDate&lt;,omitempty"`
	MessageDateAfter  *string `json:"MessageDate&gt;,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

func (params *ListNotificationParams) SetPathAccountSid(PathAccountSid string) *ListNotificationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListNotificationParams) SetLog(Log int32) *ListNotificationParams {
	params.Log = &Log
	return params
}
func (params *ListNotificationParams) SetMessageDate(MessageDate string) *ListNotificationParams {
	params.MessageDate = &MessageDate
	return params
}
func (params *ListNotificationParams) SetMessageDateBefore(MessageDateBefore string) *ListNotificationParams {
	params.MessageDateBefore = &MessageDateBefore
	return params
}
func (params *ListNotificationParams) SetMessageDateAfter(MessageDateAfter string) *ListNotificationParams {
	params.MessageDateAfter = &MessageDateAfter
	return params
}
func (params *ListNotificationParams) SetPageSize(PageSize int32) *ListNotificationParams {
	params.PageSize = &PageSize
	return params
}

// ListNotification Method for ListNotification
//
// Retrieve a list of notifications belonging to the account used to make the request
//
// param: optional nil or *ListNotificationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resources to read.
//
// param: "Log" (int32) - Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
//
// param: "MessageDate" (string) - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
//
// param: "MessageDateBefore" (string) - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
//
// param: "MessageDateAfter" (string) - Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListNotificationResponse
func (c *DefaultApiService) ListNotification(params *ListNotificationParams) (*ListNotificationResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Notifications.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Log != nil {
		data.Set("Log", fmt.Sprint(*params.Log))
	}
	if params != nil && params.MessageDate != nil {
		data.Set("MessageDate", fmt.Sprint(*params.MessageDate))
	}
	if params != nil && params.MessageDateBefore != nil {
		data.Set("MessageDate<", fmt.Sprint(*params.MessageDateBefore))
	}
	if params != nil && params.MessageDateAfter != nil {
		data.Set("MessageDate>", fmt.Sprint(*params.MessageDateAfter))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListNotificationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListOutgoingCallerIdParams Optional parameters for the method 'ListOutgoingCallerId'
type ListOutgoingCallerIdParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PhoneNumber    *string `json:"PhoneNumber,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListOutgoingCallerIdParams) SetPathAccountSid(PathAccountSid string) *ListOutgoingCallerIdParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListOutgoingCallerIdParams) SetPhoneNumber(PhoneNumber string) *ListOutgoingCallerIdParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *ListOutgoingCallerIdParams) SetFriendlyName(FriendlyName string) *ListOutgoingCallerIdParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListOutgoingCallerIdParams) SetPageSize(PageSize int32) *ListOutgoingCallerIdParams {
	params.PageSize = &PageSize
	return params
}

// ListOutgoingCallerId Method for ListOutgoingCallerId
//
// Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
//
// param: optional nil or *ListOutgoingCallerIdParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to read.
//
// param: "PhoneNumber" (string) - The phone number of the OutgoingCallerId resources to read.
//
// param: "FriendlyName" (string) - The string that identifies the OutgoingCallerId resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListOutgoingCallerIdResponse
func (c *DefaultApiService) ListOutgoingCallerId(params *ListOutgoingCallerIdParams) (*ListOutgoingCallerIdResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PhoneNumber != nil {
		data.Set("PhoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListOutgoingCallerIdResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListParticipantParams Optional parameters for the method 'ListParticipant'
type ListParticipantParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Muted          *bool   `json:"Muted,omitempty"`
	Hold           *bool   `json:"Hold,omitempty"`
	Coaching       *bool   `json:"Coaching,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListParticipantParams) SetPathAccountSid(PathAccountSid string) *ListParticipantParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListParticipantParams) SetMuted(Muted bool) *ListParticipantParams {
	params.Muted = &Muted
	return params
}
func (params *ListParticipantParams) SetHold(Hold bool) *ListParticipantParams {
	params.Hold = &Hold
	return params
}
func (params *ListParticipantParams) SetCoaching(Coaching bool) *ListParticipantParams {
	params.Coaching = &Coaching
	return params
}
func (params *ListParticipantParams) SetPageSize(PageSize int32) *ListParticipantParams {
	params.PageSize = &PageSize
	return params
}

// ListParticipant Method for ListParticipant
//
// Retrieve a list of participants belonging to the account used to make the request
//
// param: ConferenceSid The SID of the conference with the participants to read.
//
// param: optional nil or *ListParticipantParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
//
// param: "Muted" (bool) - Whether to return only participants that are muted. Can be: `true` or `false`.
//
// param: "Hold" (bool) - Whether to return only participants that are on hold. Can be: `true` or `false`.
//
// param: "Coaching" (bool) - Whether to return only participants who are coaching another call. Can be: `true` or `false`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListParticipantResponse
func (c *DefaultApiService) ListParticipant(ConferenceSid string, params *ListParticipantParams) (*ListParticipantResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Muted != nil {
		data.Set("Muted", fmt.Sprint(*params.Muted))
	}
	if params != nil && params.Hold != nil {
		data.Set("Hold", fmt.Sprint(*params.Hold))
	}
	if params != nil && params.Coaching != nil {
		data.Set("Coaching", fmt.Sprint(*params.Coaching))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListParticipantResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListQueueParams Optional parameters for the method 'ListQueue'
type ListQueueParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListQueueParams) SetPathAccountSid(PathAccountSid string) *ListQueueParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListQueueParams) SetPageSize(PageSize int32) *ListQueueParams {
	params.PageSize = &PageSize
	return params
}

// ListQueue Method for ListQueue
//
// Retrieve a list of queues belonging to the account used to make the request
//
// param: optional nil or *ListQueueParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListQueueResponse
func (c *DefaultApiService) ListQueue(params *ListQueueParams) (*ListQueueResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListQueueResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListRecordingParams Optional parameters for the method 'ListRecording'
type ListRecordingParams struct {
	PathAccountSid    *string    `json:"PathAccountSid,omitempty"`
	DateCreated       *time.Time `json:"DateCreated,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreated&lt;,omitempty"`
	DateCreatedAfter  *time.Time `json:"DateCreated&gt;,omitempty"`
	CallSid           *string    `json:"CallSid,omitempty"`
	ConferenceSid     *string    `json:"ConferenceSid,omitempty"`
	PageSize          *int32     `json:"PageSize,omitempty"`
}

func (params *ListRecordingParams) SetPathAccountSid(PathAccountSid string) *ListRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListRecordingParams) SetDateCreated(DateCreated time.Time) *ListRecordingParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *ListRecordingParams) SetDateCreatedBefore(DateCreatedBefore time.Time) *ListRecordingParams {
	params.DateCreatedBefore = &DateCreatedBefore
	return params
}
func (params *ListRecordingParams) SetDateCreatedAfter(DateCreatedAfter time.Time) *ListRecordingParams {
	params.DateCreatedAfter = &DateCreatedAfter
	return params
}
func (params *ListRecordingParams) SetCallSid(CallSid string) *ListRecordingParams {
	params.CallSid = &CallSid
	return params
}
func (params *ListRecordingParams) SetConferenceSid(ConferenceSid string) *ListRecordingParams {
	params.ConferenceSid = &ConferenceSid
	return params
}
func (params *ListRecordingParams) SetPageSize(PageSize int32) *ListRecordingParams {
	params.PageSize = &PageSize
	return params
}

// ListRecording Method for ListRecording
//
// Retrieve a list of recordings belonging to the account used to make the request
//
// param: optional nil or *ListRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
//
// param: "DateCreated" (time.Time) - Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
//
// param: "DateCreatedBefore" (time.Time) - Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
//
// param: "DateCreatedAfter" (time.Time) - Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
//
// param: "CallSid" (string) - The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
//
// param: "ConferenceSid" (string) - The Conference SID that identifies the conference associated with the recording to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListRecordingResponse
func (c *DefaultApiService) ListRecording(params *ListRecordingParams) (*ListRecordingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreated<", fmt.Sprint((*params.DateCreatedBefore).Format(time.RFC3339)))
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreated>", fmt.Sprint((*params.DateCreatedAfter).Format(time.RFC3339)))
	}
	if params != nil && params.CallSid != nil {
		data.Set("CallSid", *params.CallSid)
	}
	if params != nil && params.ConferenceSid != nil {
		data.Set("ConferenceSid", *params.ConferenceSid)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRecordingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListRecordingAddOnResultParams Optional parameters for the method 'ListRecordingAddOnResult'
type ListRecordingAddOnResultParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListRecordingAddOnResultParams) SetPathAccountSid(PathAccountSid string) *ListRecordingAddOnResultParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListRecordingAddOnResultParams) SetPageSize(PageSize int32) *ListRecordingAddOnResultParams {
	params.PageSize = &PageSize
	return params
}

// ListRecordingAddOnResult Method for ListRecordingAddOnResult
//
// Retrieve a list of results belonging to the recording
//
// param: ReferenceSid The SID of the recording to which the result to read belongs.
//
// param: optional nil or *ListRecordingAddOnResultParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListRecordingAddOnResultResponse
func (c *DefaultApiService) ListRecordingAddOnResult(ReferenceSid string, params *ListRecordingAddOnResultParams) (*ListRecordingAddOnResultResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ReferenceSid"+"}", ReferenceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRecordingAddOnResultResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListRecordingAddOnResultPayloadParams Optional parameters for the method 'ListRecordingAddOnResultPayload'
type ListRecordingAddOnResultPayloadParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListRecordingAddOnResultPayloadParams) SetPathAccountSid(PathAccountSid string) *ListRecordingAddOnResultPayloadParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListRecordingAddOnResultPayloadParams) SetPageSize(PageSize int32) *ListRecordingAddOnResultPayloadParams {
	params.PageSize = &PageSize
	return params
}

// ListRecordingAddOnResultPayload Method for ListRecordingAddOnResultPayload
//
// Retrieve a list of payloads belonging to the AddOnResult
//
// param: ReferenceSid The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs.
//
// param: AddOnResultSid The SID of the AddOnResult to which the payloads to read belongs.
//
// param: optional nil or *ListRecordingAddOnResultPayloadParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListRecordingAddOnResultPayloadResponse
func (c *DefaultApiService) ListRecordingAddOnResultPayload(ReferenceSid string, AddOnResultSid string, params *ListRecordingAddOnResultPayloadParams) (*ListRecordingAddOnResultPayloadResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ReferenceSid"+"}", ReferenceSid, -1)
	path = strings.Replace(path, "{"+"AddOnResultSid"+"}", AddOnResultSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRecordingAddOnResultPayloadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListRecordingTranscriptionParams Optional parameters for the method 'ListRecordingTranscription'
type ListRecordingTranscriptionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListRecordingTranscriptionParams) SetPathAccountSid(PathAccountSid string) *ListRecordingTranscriptionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListRecordingTranscriptionParams) SetPageSize(PageSize int32) *ListRecordingTranscriptionParams {
	params.PageSize = &PageSize
	return params
}

// ListRecordingTranscription Method for ListRecordingTranscription
//
// param: RecordingSid The SID of the [Recording](https://www.twilio.com/docs/voice/api/recording) that created the transcriptions to read.
//
// param: optional nil or *ListRecordingTranscriptionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListRecordingTranscriptionResponse
func (c *DefaultApiService) ListRecordingTranscription(RecordingSid string, params *ListRecordingTranscriptionParams) (*ListRecordingTranscriptionResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"RecordingSid"+"}", RecordingSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRecordingTranscriptionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListShortCodeParams Optional parameters for the method 'ListShortCode'
type ListShortCodeParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	ShortCode      *string `json:"ShortCode,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListShortCodeParams) SetPathAccountSid(PathAccountSid string) *ListShortCodeParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListShortCodeParams) SetFriendlyName(FriendlyName string) *ListShortCodeParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListShortCodeParams) SetShortCode(ShortCode string) *ListShortCodeParams {
	params.ShortCode = &ShortCode
	return params
}
func (params *ListShortCodeParams) SetPageSize(PageSize int32) *ListShortCodeParams {
	params.PageSize = &PageSize
	return params
}

// ListShortCode Method for ListShortCode
//
// Retrieve a list of short-codes belonging to the account used to make the request
//
// param: optional nil or *ListShortCodeParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read.
//
// param: "FriendlyName" (string) - The string that identifies the ShortCode resources to read.
//
// param: "ShortCode" (string) - Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListShortCodeResponse
func (c *DefaultApiService) ListShortCode(params *ListShortCodeParams) (*ListShortCodeResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.ShortCode != nil {
		data.Set("ShortCode", *params.ShortCode)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListShortCodeResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSigningKeyParams Optional parameters for the method 'ListSigningKey'
type ListSigningKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSigningKeyParams) SetPathAccountSid(PathAccountSid string) *ListSigningKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSigningKeyParams) SetPageSize(PageSize int32) *ListSigningKeyParams {
	params.PageSize = &PageSize
	return params
}

// ListSigningKey Method for ListSigningKey
//
// param: optional nil or *ListSigningKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) -
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSigningKeyResponse
func (c *DefaultApiService) ListSigningKey(params *ListSigningKeyParams) (*ListSigningKeyResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SigningKeys.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSigningKeyResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipAuthCallsCredentialListMappingParams Optional parameters for the method 'ListSipAuthCallsCredentialListMapping'
type ListSipAuthCallsCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipAuthCallsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *ListSipAuthCallsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipAuthCallsCredentialListMappingParams) SetPageSize(PageSize int32) *ListSipAuthCallsCredentialListMappingParams {
	params.PageSize = &PageSize
	return params
}

// ListSipAuthCallsCredentialListMapping Method for ListSipAuthCallsCredentialListMapping
//
// Retrieve a list of credential list mappings belonging to the domain used in the request
//
// param: DomainSid The SID of the SIP domain that contains the resources to read.
//
// param: optional nil or *ListSipAuthCallsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipAuthCallsCredentialListMappingResponse
func (c *DefaultApiService) ListSipAuthCallsCredentialListMapping(DomainSid string, params *ListSipAuthCallsCredentialListMappingParams) (*ListSipAuthCallsCredentialListMappingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipAuthCallsCredentialListMappingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipAuthCallsIpAccessControlListMappingParams Optional parameters for the method 'ListSipAuthCallsIpAccessControlListMapping'
type ListSipAuthCallsIpAccessControlListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipAuthCallsIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *ListSipAuthCallsIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipAuthCallsIpAccessControlListMappingParams) SetPageSize(PageSize int32) *ListSipAuthCallsIpAccessControlListMappingParams {
	params.PageSize = &PageSize
	return params
}

// ListSipAuthCallsIpAccessControlListMapping Method for ListSipAuthCallsIpAccessControlListMapping
//
// Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
//
// param: DomainSid The SID of the SIP domain that contains the resources to read.
//
// param: optional nil or *ListSipAuthCallsIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IpAccessControlListMapping resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipAuthCallsIpAccessControlListMappingResponse
func (c *DefaultApiService) ListSipAuthCallsIpAccessControlListMapping(DomainSid string, params *ListSipAuthCallsIpAccessControlListMappingParams) (*ListSipAuthCallsIpAccessControlListMappingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipAuthCallsIpAccessControlListMappingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipAuthRegistrationsCredentialListMappingParams Optional parameters for the method 'ListSipAuthRegistrationsCredentialListMapping'
type ListSipAuthRegistrationsCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipAuthRegistrationsCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *ListSipAuthRegistrationsCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipAuthRegistrationsCredentialListMappingParams) SetPageSize(PageSize int32) *ListSipAuthRegistrationsCredentialListMappingParams {
	params.PageSize = &PageSize
	return params
}

// ListSipAuthRegistrationsCredentialListMapping Method for ListSipAuthRegistrationsCredentialListMapping
//
// Retrieve a list of credential list mappings belonging to the domain used in the request
//
// param: DomainSid The SID of the SIP domain that contains the resources to read.
//
// param: optional nil or *ListSipAuthRegistrationsCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipAuthRegistrationsCredentialListMappingResponse
func (c *DefaultApiService) ListSipAuthRegistrationsCredentialListMapping(DomainSid string, params *ListSipAuthRegistrationsCredentialListMappingParams) (*ListSipAuthRegistrationsCredentialListMappingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipAuthRegistrationsCredentialListMappingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipCredentialParams Optional parameters for the method 'ListSipCredential'
type ListSipCredentialParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipCredentialParams) SetPathAccountSid(PathAccountSid string) *ListSipCredentialParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipCredentialParams) SetPageSize(PageSize int32) *ListSipCredentialParams {
	params.PageSize = &PageSize
	return params
}

// ListSipCredential Method for ListSipCredential
//
// Retrieve a list of credentials.
//
// param: CredentialListSid The unique id that identifies the credential list that contains the desired credentials.
//
// param: optional nil or *ListSipCredentialParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipCredentialResponse
func (c *DefaultApiService) ListSipCredential(CredentialListSid string, params *ListSipCredentialParams) (*ListSipCredentialResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CredentialListSid"+"}", CredentialListSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipCredentialResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipCredentialListParams Optional parameters for the method 'ListSipCredentialList'
type ListSipCredentialListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipCredentialListParams) SetPathAccountSid(PathAccountSid string) *ListSipCredentialListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipCredentialListParams) SetPageSize(PageSize int32) *ListSipCredentialListParams {
	params.PageSize = &PageSize
	return params
}

// ListSipCredentialList Method for ListSipCredentialList
//
// Get All Credential Lists
//
// param: optional nil or *ListSipCredentialListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipCredentialListResponse
func (c *DefaultApiService) ListSipCredentialList(params *ListSipCredentialListParams) (*ListSipCredentialListResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipCredentialListResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipCredentialListMappingParams Optional parameters for the method 'ListSipCredentialListMapping'
type ListSipCredentialListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipCredentialListMappingParams) SetPathAccountSid(PathAccountSid string) *ListSipCredentialListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipCredentialListMappingParams) SetPageSize(PageSize int32) *ListSipCredentialListMappingParams {
	params.PageSize = &PageSize
	return params
}

// ListSipCredentialListMapping Method for ListSipCredentialListMapping
//
// Read multiple CredentialListMapping resources from an account.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
//
// param: optional nil or *ListSipCredentialListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipCredentialListMappingResponse
func (c *DefaultApiService) ListSipCredentialListMapping(DomainSid string, params *ListSipCredentialListMappingParams) (*ListSipCredentialListMappingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipCredentialListMappingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipDomainParams Optional parameters for the method 'ListSipDomain'
type ListSipDomainParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipDomainParams) SetPathAccountSid(PathAccountSid string) *ListSipDomainParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipDomainParams) SetPageSize(PageSize int32) *ListSipDomainParams {
	params.PageSize = &PageSize
	return params
}

// ListSipDomain Method for ListSipDomain
//
// Retrieve a list of domains belonging to the account used to make the request
//
// param: optional nil or *ListSipDomainParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipDomainResponse
func (c *DefaultApiService) ListSipDomain(params *ListSipDomainParams) (*ListSipDomainResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipDomainResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipIpAccessControlListParams Optional parameters for the method 'ListSipIpAccessControlList'
type ListSipIpAccessControlListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipIpAccessControlListParams) SetPathAccountSid(PathAccountSid string) *ListSipIpAccessControlListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipIpAccessControlListParams) SetPageSize(PageSize int32) *ListSipIpAccessControlListParams {
	params.PageSize = &PageSize
	return params
}

// ListSipIpAccessControlList Method for ListSipIpAccessControlList
//
// Retrieve a list of IpAccessControlLists that belong to the account used to make the request
//
// param: optional nil or *ListSipIpAccessControlListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipIpAccessControlListResponse
func (c *DefaultApiService) ListSipIpAccessControlList(params *ListSipIpAccessControlListParams) (*ListSipIpAccessControlListResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipIpAccessControlListResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipIpAccessControlListMappingParams Optional parameters for the method 'ListSipIpAccessControlListMapping'
type ListSipIpAccessControlListMappingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipIpAccessControlListMappingParams) SetPathAccountSid(PathAccountSid string) *ListSipIpAccessControlListMappingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipIpAccessControlListMappingParams) SetPageSize(PageSize int32) *ListSipIpAccessControlListMappingParams {
	params.PageSize = &PageSize
	return params
}

// ListSipIpAccessControlListMapping Method for ListSipIpAccessControlListMapping
//
// Retrieve a list of IpAccessControlListMapping resources.
//
// param: DomainSid A 34 character string that uniquely identifies the SIP domain.
//
// param: optional nil or *ListSipIpAccessControlListMappingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipIpAccessControlListMappingResponse
func (c *DefaultApiService) ListSipIpAccessControlListMapping(DomainSid string, params *ListSipIpAccessControlListMappingParams) (*ListSipIpAccessControlListMappingResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"DomainSid"+"}", DomainSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipIpAccessControlListMappingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSipIpAddressParams Optional parameters for the method 'ListSipIpAddress'
type ListSipIpAddressParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListSipIpAddressParams) SetPathAccountSid(PathAccountSid string) *ListSipIpAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListSipIpAddressParams) SetPageSize(PageSize int32) *ListSipIpAddressParams {
	params.PageSize = &PageSize
	return params
}

// ListSipIpAddress Method for ListSipIpAddress
//
// Read multiple IpAddress resources.
//
// param: IpAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to read.
//
// param: optional nil or *ListSipIpAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSipIpAddressResponse
func (c *DefaultApiService) ListSipIpAddress(IpAccessControlListSid string, params *ListSipIpAddressParams) (*ListSipIpAddressResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"IpAccessControlListSid"+"}", IpAccessControlListSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSipIpAddressResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListTranscriptionParams Optional parameters for the method 'ListTranscription'
type ListTranscriptionParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListTranscriptionParams) SetPathAccountSid(PathAccountSid string) *ListTranscriptionParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListTranscriptionParams) SetPageSize(PageSize int32) *ListTranscriptionParams {
	params.PageSize = &PageSize
	return params
}

// ListTranscription Method for ListTranscription
//
// Retrieve a list of transcriptions belonging to the account used to make the request
//
// param: optional nil or *ListTranscriptionParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Transcription resources to read.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListTranscriptionResponse
func (c *DefaultApiService) ListTranscription(params *ListTranscriptionParams) (*ListTranscriptionResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Transcriptions.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTranscriptionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordParams Optional parameters for the method 'ListUsageRecord'
type ListUsageRecordParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordParams) SetCategory(Category string) *ListUsageRecordParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordParams) SetStartDate(StartDate string) *ListUsageRecordParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordParams) SetEndDate(EndDate string) *ListUsageRecordParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordParams) SetPageSize(PageSize int32) *ListUsageRecordParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecord Method for ListUsageRecord
//
// Retrieve a list of usage-records belonging to the account used to make the request
//
// param: optional nil or *ListUsageRecordParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordResponse
func (c *DefaultApiService) ListUsageRecord(params *ListUsageRecordParams) (*ListUsageRecordResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordAllTimeParams Optional parameters for the method 'ListUsageRecordAllTime'
type ListUsageRecordAllTimeParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordAllTimeParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordAllTimeParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordAllTimeParams) SetCategory(Category string) *ListUsageRecordAllTimeParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordAllTimeParams) SetStartDate(StartDate string) *ListUsageRecordAllTimeParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordAllTimeParams) SetEndDate(EndDate string) *ListUsageRecordAllTimeParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordAllTimeParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordAllTimeParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordAllTimeParams) SetPageSize(PageSize int32) *ListUsageRecordAllTimeParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordAllTime Method for ListUsageRecordAllTime
//
// param: optional nil or *ListUsageRecordAllTimeParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordAllTimeResponse
func (c *DefaultApiService) ListUsageRecordAllTime(params *ListUsageRecordAllTimeParams) (*ListUsageRecordAllTimeResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordAllTimeResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordDailyParams Optional parameters for the method 'ListUsageRecordDaily'
type ListUsageRecordDailyParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordDailyParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordDailyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordDailyParams) SetCategory(Category string) *ListUsageRecordDailyParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordDailyParams) SetStartDate(StartDate string) *ListUsageRecordDailyParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordDailyParams) SetEndDate(EndDate string) *ListUsageRecordDailyParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordDailyParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordDailyParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordDailyParams) SetPageSize(PageSize int32) *ListUsageRecordDailyParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordDaily Method for ListUsageRecordDaily
//
// param: optional nil or *ListUsageRecordDailyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordDailyResponse
func (c *DefaultApiService) ListUsageRecordDaily(params *ListUsageRecordDailyParams) (*ListUsageRecordDailyResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordDailyResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordLastMonthParams Optional parameters for the method 'ListUsageRecordLastMonth'
type ListUsageRecordLastMonthParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordLastMonthParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordLastMonthParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordLastMonthParams) SetCategory(Category string) *ListUsageRecordLastMonthParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordLastMonthParams) SetStartDate(StartDate string) *ListUsageRecordLastMonthParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordLastMonthParams) SetEndDate(EndDate string) *ListUsageRecordLastMonthParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordLastMonthParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordLastMonthParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordLastMonthParams) SetPageSize(PageSize int32) *ListUsageRecordLastMonthParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordLastMonth Method for ListUsageRecordLastMonth
//
// param: optional nil or *ListUsageRecordLastMonthParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordLastMonthResponse
func (c *DefaultApiService) ListUsageRecordLastMonth(params *ListUsageRecordLastMonthParams) (*ListUsageRecordLastMonthResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordLastMonthResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordMonthlyParams Optional parameters for the method 'ListUsageRecordMonthly'
type ListUsageRecordMonthlyParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordMonthlyParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordMonthlyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordMonthlyParams) SetCategory(Category string) *ListUsageRecordMonthlyParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordMonthlyParams) SetStartDate(StartDate string) *ListUsageRecordMonthlyParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordMonthlyParams) SetEndDate(EndDate string) *ListUsageRecordMonthlyParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordMonthlyParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordMonthlyParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordMonthlyParams) SetPageSize(PageSize int32) *ListUsageRecordMonthlyParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordMonthly Method for ListUsageRecordMonthly
//
// param: optional nil or *ListUsageRecordMonthlyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordMonthlyResponse
func (c *DefaultApiService) ListUsageRecordMonthly(params *ListUsageRecordMonthlyParams) (*ListUsageRecordMonthlyResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordMonthlyResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordThisMonthParams Optional parameters for the method 'ListUsageRecordThisMonth'
type ListUsageRecordThisMonthParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordThisMonthParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordThisMonthParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordThisMonthParams) SetCategory(Category string) *ListUsageRecordThisMonthParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordThisMonthParams) SetStartDate(StartDate string) *ListUsageRecordThisMonthParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordThisMonthParams) SetEndDate(EndDate string) *ListUsageRecordThisMonthParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordThisMonthParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordThisMonthParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordThisMonthParams) SetPageSize(PageSize int32) *ListUsageRecordThisMonthParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordThisMonth Method for ListUsageRecordThisMonth
//
// param: optional nil or *ListUsageRecordThisMonthParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordThisMonthResponse
func (c *DefaultApiService) ListUsageRecordThisMonth(params *ListUsageRecordThisMonthParams) (*ListUsageRecordThisMonthResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordThisMonthResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordTodayParams Optional parameters for the method 'ListUsageRecordToday'
type ListUsageRecordTodayParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordTodayParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordTodayParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordTodayParams) SetCategory(Category string) *ListUsageRecordTodayParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordTodayParams) SetStartDate(StartDate string) *ListUsageRecordTodayParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordTodayParams) SetEndDate(EndDate string) *ListUsageRecordTodayParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordTodayParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordTodayParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordTodayParams) SetPageSize(PageSize int32) *ListUsageRecordTodayParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordToday Method for ListUsageRecordToday
//
// param: optional nil or *ListUsageRecordTodayParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordTodayResponse
func (c *DefaultApiService) ListUsageRecordToday(params *ListUsageRecordTodayParams) (*ListUsageRecordTodayResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordTodayResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordYearlyParams Optional parameters for the method 'ListUsageRecordYearly'
type ListUsageRecordYearlyParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordYearlyParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordYearlyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordYearlyParams) SetCategory(Category string) *ListUsageRecordYearlyParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordYearlyParams) SetStartDate(StartDate string) *ListUsageRecordYearlyParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordYearlyParams) SetEndDate(EndDate string) *ListUsageRecordYearlyParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordYearlyParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordYearlyParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordYearlyParams) SetPageSize(PageSize int32) *ListUsageRecordYearlyParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordYearly Method for ListUsageRecordYearly
//
// param: optional nil or *ListUsageRecordYearlyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordYearlyResponse
func (c *DefaultApiService) ListUsageRecordYearly(params *ListUsageRecordYearlyParams) (*ListUsageRecordYearlyResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordYearlyResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageRecordYesterdayParams Optional parameters for the method 'ListUsageRecordYesterday'
type ListUsageRecordYesterdayParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	Category           *string `json:"Category,omitempty"`
	StartDate          *string `json:"StartDate,omitempty"`
	EndDate            *string `json:"EndDate,omitempty"`
	IncludeSubaccounts *bool   `json:"IncludeSubaccounts,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageRecordYesterdayParams) SetPathAccountSid(PathAccountSid string) *ListUsageRecordYesterdayParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageRecordYesterdayParams) SetCategory(Category string) *ListUsageRecordYesterdayParams {
	params.Category = &Category
	return params
}
func (params *ListUsageRecordYesterdayParams) SetStartDate(StartDate string) *ListUsageRecordYesterdayParams {
	params.StartDate = &StartDate
	return params
}
func (params *ListUsageRecordYesterdayParams) SetEndDate(EndDate string) *ListUsageRecordYesterdayParams {
	params.EndDate = &EndDate
	return params
}
func (params *ListUsageRecordYesterdayParams) SetIncludeSubaccounts(IncludeSubaccounts bool) *ListUsageRecordYesterdayParams {
	params.IncludeSubaccounts = &IncludeSubaccounts
	return params
}
func (params *ListUsageRecordYesterdayParams) SetPageSize(PageSize int32) *ListUsageRecordYesterdayParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageRecordYesterday Method for ListUsageRecordYesterday
//
// param: optional nil or *ListUsageRecordYesterdayParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageRecord resources to read.
//
// param: "Category" (string) - The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
//
// param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
//
// param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
//
// param: "IncludeSubaccounts" (bool) - Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageRecordYesterdayResponse
func (c *DefaultApiService) ListUsageRecordYesterday(params *ListUsageRecordYesterdayParams) (*ListUsageRecordYesterdayResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Category != nil {
		data.Set("Category", *params.Category)
	}
	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.IncludeSubaccounts != nil {
		data.Set("IncludeSubaccounts", fmt.Sprint(*params.IncludeSubaccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageRecordYesterdayResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUsageTriggerParams Optional parameters for the method 'ListUsageTrigger'
type ListUsageTriggerParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Recurring      *string `json:"Recurring,omitempty"`
	TriggerBy      *string `json:"TriggerBy,omitempty"`
	UsageCategory  *string `json:"UsageCategory,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty"`
}

func (params *ListUsageTriggerParams) SetPathAccountSid(PathAccountSid string) *ListUsageTriggerParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *ListUsageTriggerParams) SetRecurring(Recurring string) *ListUsageTriggerParams {
	params.Recurring = &Recurring
	return params
}
func (params *ListUsageTriggerParams) SetTriggerBy(TriggerBy string) *ListUsageTriggerParams {
	params.TriggerBy = &TriggerBy
	return params
}
func (params *ListUsageTriggerParams) SetUsageCategory(UsageCategory string) *ListUsageTriggerParams {
	params.UsageCategory = &UsageCategory
	return params
}
func (params *ListUsageTriggerParams) SetPageSize(PageSize int32) *ListUsageTriggerParams {
	params.PageSize = &PageSize
	return params
}

// ListUsageTrigger Method for ListUsageTrigger
//
// Retrieve a list of usage-triggers belonging to the account used to make the request
//
// param: optional nil or *ListUsageTriggerParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
//
// param: "Recurring" (string) - The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
//
// param: "TriggerBy" (string) - The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
//
// param: "UsageCategory" (string) - The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUsageTriggerResponse
func (c *DefaultApiService) ListUsageTrigger(params *ListUsageTriggerParams) (*ListUsageTriggerResponse, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Recurring != nil {
		data.Set("Recurring", *params.Recurring)
	}
	if params != nil && params.TriggerBy != nil {
		data.Set("TriggerBy", *params.TriggerBy)
	}
	if params != nil && params.UsageCategory != nil {
		data.Set("UsageCategory", *params.UsageCategory)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUsageTriggerResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateAccountParams Optional parameters for the method 'UpdateAccount'
type UpdateAccountParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Status       *string `json:"Status,omitempty"`
}

func (params *UpdateAccountParams) SetFriendlyName(FriendlyName string) *UpdateAccountParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateAccountParams) SetStatus(Status string) *UpdateAccountParams {
	params.Status = &Status
	return params
}

// UpdateAccount Method for UpdateAccount
//
// Modify the properties of a given Account
//
// param: Sid The Account Sid that uniquely identifies the account to update
//
// param: optional nil or *UpdateAccountParams - Optional Parameters:
//
// param: "FriendlyName" (string) - Update the human-readable description of this Account
//
// param: "Status" (string) - Alter the status of this account: use `closed` to irreversibly close this account, `suspended` to temporarily suspend it, or `active` to reactivate it.
//
// return: ApiV2010Account
func (c *DefaultApiService) UpdateAccount(Sid string, params *UpdateAccountParams) (*ApiV2010Account, error) {
	path := "/2010-04-01/Accounts/{Sid}.json"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010Account{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateAddressParams Optional parameters for the method 'UpdateAddress'
type UpdateAddressParams struct {
	PathAccountSid     *string `json:"PathAccountSid,omitempty"`
	AutoCorrectAddress *bool   `json:"AutoCorrectAddress,omitempty"`
	City               *string `json:"City,omitempty"`
	CustomerName       *string `json:"CustomerName,omitempty"`
	EmergencyEnabled   *bool   `json:"EmergencyEnabled,omitempty"`
	FriendlyName       *string `json:"FriendlyName,omitempty"`
	PostalCode         *string `json:"PostalCode,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Street             *string `json:"Street,omitempty"`
}

func (params *UpdateAddressParams) SetPathAccountSid(PathAccountSid string) *UpdateAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateAddressParams) SetAutoCorrectAddress(AutoCorrectAddress bool) *UpdateAddressParams {
	params.AutoCorrectAddress = &AutoCorrectAddress
	return params
}
func (params *UpdateAddressParams) SetCity(City string) *UpdateAddressParams {
	params.City = &City
	return params
}
func (params *UpdateAddressParams) SetCustomerName(CustomerName string) *UpdateAddressParams {
	params.CustomerName = &CustomerName
	return params
}
func (params *UpdateAddressParams) SetEmergencyEnabled(EmergencyEnabled bool) *UpdateAddressParams {
	params.EmergencyEnabled = &EmergencyEnabled
	return params
}
func (params *UpdateAddressParams) SetFriendlyName(FriendlyName string) *UpdateAddressParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateAddressParams) SetPostalCode(PostalCode string) *UpdateAddressParams {
	params.PostalCode = &PostalCode
	return params
}
func (params *UpdateAddressParams) SetRegion(Region string) *UpdateAddressParams {
	params.Region = &Region
	return params
}
func (params *UpdateAddressParams) SetStreet(Street string) *UpdateAddressParams {
	params.Street = &Street
	return params
}

// UpdateAddress Method for UpdateAddress
//
// param: Sid The Twilio-provided string that uniquely identifies the Address resource to update.
//
// param: optional nil or *UpdateAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
//
// param: "AutoCorrectAddress" (bool) - Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
//
// param: "City" (string) - The city of the address.
//
// param: "CustomerName" (string) - The name to associate with the address.
//
// param: "EmergencyEnabled" (bool) - Whether to enable emergency calling on the address. Can be: `true` or `false`.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the address. It can be up to 64 characters long.
//
// param: "PostalCode" (string) - The postal code of the address.
//
// param: "Region" (string) - The state or region of the address.
//
// param: "Street" (string) - The number and street address of the address.
//
// return: ApiV2010AccountAddress
func (c *DefaultApiService) UpdateAddress(Sid string, params *UpdateAddressParams) (*ApiV2010AccountAddress, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AutoCorrectAddress != nil {
		data.Set("AutoCorrectAddress", fmt.Sprint(*params.AutoCorrectAddress))
	}
	if params != nil && params.City != nil {
		data.Set("City", *params.City)
	}
	if params != nil && params.CustomerName != nil {
		data.Set("CustomerName", *params.CustomerName)
	}
	if params != nil && params.EmergencyEnabled != nil {
		data.Set("EmergencyEnabled", fmt.Sprint(*params.EmergencyEnabled))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PostalCode != nil {
		data.Set("PostalCode", *params.PostalCode)
	}
	if params != nil && params.Region != nil {
		data.Set("Region", *params.Region)
	}
	if params != nil && params.Street != nil {
		data.Set("Street", *params.Street)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountAddress{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateApplicationParams Optional parameters for the method 'UpdateApplication'
type UpdateApplicationParams struct {
	PathAccountSid        *string `json:"PathAccountSid,omitempty"`
	ApiVersion            *string `json:"ApiVersion,omitempty"`
	FriendlyName          *string `json:"FriendlyName,omitempty"`
	MessageStatusCallback *string `json:"MessageStatusCallback,omitempty"`
	SmsFallbackMethod     *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl        *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod             *string `json:"SmsMethod,omitempty"`
	SmsStatusCallback     *string `json:"SmsStatusCallback,omitempty"`
	SmsUrl                *string `json:"SmsUrl,omitempty"`
	StatusCallback        *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod  *string `json:"StatusCallbackMethod,omitempty"`
	VoiceCallerIdLookup   *bool   `json:"VoiceCallerIdLookup,omitempty"`
	VoiceFallbackMethod   *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl      *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod           *string `json:"VoiceMethod,omitempty"`
	VoiceUrl              *string `json:"VoiceUrl,omitempty"`
}

func (params *UpdateApplicationParams) SetPathAccountSid(PathAccountSid string) *UpdateApplicationParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateApplicationParams) SetApiVersion(ApiVersion string) *UpdateApplicationParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *UpdateApplicationParams) SetFriendlyName(FriendlyName string) *UpdateApplicationParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateApplicationParams) SetMessageStatusCallback(MessageStatusCallback string) *UpdateApplicationParams {
	params.MessageStatusCallback = &MessageStatusCallback
	return params
}
func (params *UpdateApplicationParams) SetSmsFallbackMethod(SmsFallbackMethod string) *UpdateApplicationParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *UpdateApplicationParams) SetSmsFallbackUrl(SmsFallbackUrl string) *UpdateApplicationParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *UpdateApplicationParams) SetSmsMethod(SmsMethod string) *UpdateApplicationParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *UpdateApplicationParams) SetSmsStatusCallback(SmsStatusCallback string) *UpdateApplicationParams {
	params.SmsStatusCallback = &SmsStatusCallback
	return params
}
func (params *UpdateApplicationParams) SetSmsUrl(SmsUrl string) *UpdateApplicationParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *UpdateApplicationParams) SetStatusCallback(StatusCallback string) *UpdateApplicationParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *UpdateApplicationParams) SetStatusCallbackMethod(StatusCallbackMethod string) *UpdateApplicationParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *UpdateApplicationParams) SetVoiceCallerIdLookup(VoiceCallerIdLookup bool) *UpdateApplicationParams {
	params.VoiceCallerIdLookup = &VoiceCallerIdLookup
	return params
}
func (params *UpdateApplicationParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *UpdateApplicationParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *UpdateApplicationParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *UpdateApplicationParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *UpdateApplicationParams) SetVoiceMethod(VoiceMethod string) *UpdateApplicationParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *UpdateApplicationParams) SetVoiceUrl(VoiceUrl string) *UpdateApplicationParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// UpdateApplication Method for UpdateApplication
//
// Updates the application&#39;s properties
//
// param: Sid The Twilio-provided string that uniquely identifies the Application resource to update.
//
// param: optional nil or *UpdateApplicationParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
//
// param: "ApiVersion" (string) - The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// param: "MessageStatusCallback" (string) - The URL we should call using a POST method to send message status information to your application.
//
// param: "SmsFallbackMethod" (string) - The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
//
// param: "SmsStatusCallback" (string) - Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
//
// param: "SmsUrl" (string) - The URL we should call when the phone number receives an incoming SMS message.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
//
// param: "VoiceCallerIdLookup" (bool) - Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
//
// param: "VoiceMethod" (string) - The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
//
// param: "VoiceUrl" (string) - The URL we should call when the phone number assigned to this application receives a call.
//
// return: ApiV2010AccountApplication
func (c *DefaultApiService) UpdateApplication(Sid string, params *UpdateApplicationParams) (*ApiV2010AccountApplication, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MessageStatusCallback != nil {
		data.Set("MessageStatusCallback", *params.MessageStatusCallback)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsStatusCallback != nil {
		data.Set("SmsStatusCallback", *params.SmsStatusCallback)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.VoiceCallerIdLookup != nil {
		data.Set("VoiceCallerIdLookup", fmt.Sprint(*params.VoiceCallerIdLookup))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountApplication{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateCallParams Optional parameters for the method 'UpdateCall'
type UpdateCallParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	FallbackMethod       *string `json:"FallbackMethod,omitempty"`
	FallbackUrl          *string `json:"FallbackUrl,omitempty"`
	Method               *string `json:"Method,omitempty"`
	Status               *string `json:"Status,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	Twiml                *string `json:"Twiml,omitempty"`
	Url                  *string `json:"Url,omitempty"`
}

func (params *UpdateCallParams) SetPathAccountSid(PathAccountSid string) *UpdateCallParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateCallParams) SetFallbackMethod(FallbackMethod string) *UpdateCallParams {
	params.FallbackMethod = &FallbackMethod
	return params
}
func (params *UpdateCallParams) SetFallbackUrl(FallbackUrl string) *UpdateCallParams {
	params.FallbackUrl = &FallbackUrl
	return params
}
func (params *UpdateCallParams) SetMethod(Method string) *UpdateCallParams {
	params.Method = &Method
	return params
}
func (params *UpdateCallParams) SetStatus(Status string) *UpdateCallParams {
	params.Status = &Status
	return params
}
func (params *UpdateCallParams) SetStatusCallback(StatusCallback string) *UpdateCallParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *UpdateCallParams) SetStatusCallbackMethod(StatusCallbackMethod string) *UpdateCallParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *UpdateCallParams) SetTwiml(Twiml string) *UpdateCallParams {
	params.Twiml = &Twiml
	return params
}
func (params *UpdateCallParams) SetUrl(Url string) *UpdateCallParams {
	params.Url = &Url
	return params
}

// UpdateCall Method for UpdateCall
//
// Initiates a call redirect or terminates a call
//
// param: Sid The Twilio-provided string that uniquely identifies the Call resource to update
//
// param: optional nil or *UpdateCallParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
//
// param: "FallbackMethod" (string) - The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "FallbackUrl" (string) - The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "Method" (string) - The HTTP method we should use when calling the `url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "Status" (string) - The new status of the resource. Can be: `canceled` or `completed`. Specifying `canceled` will attempt to hang up calls that are queued or ringing; however, it will not affect calls already in progress. Specifying `completed` will attempt to hang up a call even if it's already in progress.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use when requesting the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
//
// param: "Twiml" (string) - TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
//
// param: "Url" (string) - The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
//
// return: ApiV2010AccountCall
func (c *DefaultApiService) UpdateCall(Sid string, params *UpdateCallParams) (*ApiV2010AccountCall, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FallbackMethod != nil {
		data.Set("FallbackMethod", *params.FallbackMethod)
	}
	if params != nil && params.FallbackUrl != nil {
		data.Set("FallbackUrl", *params.FallbackUrl)
	}
	if params != nil && params.Method != nil {
		data.Set("Method", *params.Method)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.Twiml != nil {
		data.Set("Twiml", *params.Twiml)
	}
	if params != nil && params.Url != nil {
		data.Set("Url", *params.Url)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCall{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateCallFeedbackParams Optional parameters for the method 'UpdateCallFeedback'
type UpdateCallFeedbackParams struct {
	PathAccountSid *string   `json:"PathAccountSid,omitempty"`
	Issue          *[]string `json:"Issue,omitempty"`
	QualityScore   *int32    `json:"QualityScore,omitempty"`
}

func (params *UpdateCallFeedbackParams) SetPathAccountSid(PathAccountSid string) *UpdateCallFeedbackParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateCallFeedbackParams) SetIssue(Issue []string) *UpdateCallFeedbackParams {
	params.Issue = &Issue
	return params
}
func (params *UpdateCallFeedbackParams) SetQualityScore(QualityScore int32) *UpdateCallFeedbackParams {
	params.QualityScore = &QualityScore
	return params
}

// UpdateCallFeedback Method for UpdateCallFeedback
//
// Update a Feedback resource for a call
//
// param: CallSid The call sid that uniquely identifies the call
//
// param: optional nil or *UpdateCallFeedbackParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "Issue" ([]string) - One or more issues experienced during the call. The issues can be: `imperfect-audio`, `dropped-call`, `incorrect-caller-id`, `post-dial-delay`, `digits-not-captured`, `audio-latency`, `unsolicited-call`, or `one-way-audio`.
//
// param: "QualityScore" (int32) - The call quality expressed as an integer from `1` to `5` where `1` represents very poor call quality and `5` represents a perfect call.
//
// return: ApiV2010AccountCallCallFeedback
func (c *DefaultApiService) UpdateCallFeedback(CallSid string, params *UpdateCallFeedbackParams) (*ApiV2010AccountCallCallFeedback, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Issue != nil {
		data.Set("Issue", strings.Join(*params.Issue, ","))
	}
	if params != nil && params.QualityScore != nil {
		data.Set("QualityScore", fmt.Sprint(*params.QualityScore))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallFeedback{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateCallRecordingParams Optional parameters for the method 'UpdateCallRecording'
type UpdateCallRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PauseBehavior  *string `json:"PauseBehavior,omitempty"`
	Status         *string `json:"Status,omitempty"`
}

func (params *UpdateCallRecordingParams) SetPathAccountSid(PathAccountSid string) *UpdateCallRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateCallRecordingParams) SetPauseBehavior(PauseBehavior string) *UpdateCallRecordingParams {
	params.PauseBehavior = &PauseBehavior
	return params
}
func (params *UpdateCallRecordingParams) SetStatus(Status string) *UpdateCallRecordingParams {
	params.Status = &Status
	return params
}

// UpdateCallRecording Method for UpdateCallRecording
//
// Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
//
// param: Sid The Twilio-provided string that uniquely identifies the Recording resource to update.
//
// param: optional nil or *UpdateCallRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
//
// param: "PauseBehavior" (string) - Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
//
// param: "Status" (string) - The new status of the recording. Can be: `stopped`, `paused`, `in-progress`.
//
// return: ApiV2010AccountCallCallRecording
func (c *DefaultApiService) UpdateCallRecording(CallSid string, Sid string, params *UpdateCallRecordingParams) (*ApiV2010AccountCallCallRecording, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PauseBehavior != nil {
		data.Set("PauseBehavior", *params.PauseBehavior)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallCallRecording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateConferenceParams Optional parameters for the method 'UpdateConference'
type UpdateConferenceParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	AnnounceMethod *string `json:"AnnounceMethod,omitempty"`
	AnnounceUrl    *string `json:"AnnounceUrl,omitempty"`
	Status         *string `json:"Status,omitempty"`
}

func (params *UpdateConferenceParams) SetPathAccountSid(PathAccountSid string) *UpdateConferenceParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateConferenceParams) SetAnnounceMethod(AnnounceMethod string) *UpdateConferenceParams {
	params.AnnounceMethod = &AnnounceMethod
	return params
}
func (params *UpdateConferenceParams) SetAnnounceUrl(AnnounceUrl string) *UpdateConferenceParams {
	params.AnnounceUrl = &AnnounceUrl
	return params
}
func (params *UpdateConferenceParams) SetStatus(Status string) *UpdateConferenceParams {
	params.Status = &Status
	return params
}

// UpdateConference Method for UpdateConference
//
// param: Sid The Twilio-provided string that uniquely identifies the Conference resource to update
//
// param: optional nil or *UpdateConferenceParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
//
// param: "AnnounceMethod" (string) - The HTTP method used to call `announce_url`. Can be: `GET` or `POST` and the default is `POST`
//
// param: "AnnounceUrl" (string) - The URL we should call to announce something into the conference. The URL can return an MP3, a WAV, or a TwiML document with `<Play>` or `<Say>`.
//
// param: "Status" (string) - The new status of the resource. Can be:  Can be: `init`, `in-progress`, or `completed`. Specifying `completed` will end the conference and hang up all participants
//
// return: ApiV2010AccountConference
func (c *DefaultApiService) UpdateConference(Sid string, params *UpdateConferenceParams) (*ApiV2010AccountConference, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AnnounceMethod != nil {
		data.Set("AnnounceMethod", *params.AnnounceMethod)
	}
	if params != nil && params.AnnounceUrl != nil {
		data.Set("AnnounceUrl", *params.AnnounceUrl)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConference{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateConferenceRecordingParams Optional parameters for the method 'UpdateConferenceRecording'
type UpdateConferenceRecordingParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	PauseBehavior  *string `json:"PauseBehavior,omitempty"`
	Status         *string `json:"Status,omitempty"`
}

func (params *UpdateConferenceRecordingParams) SetPathAccountSid(PathAccountSid string) *UpdateConferenceRecordingParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateConferenceRecordingParams) SetPauseBehavior(PauseBehavior string) *UpdateConferenceRecordingParams {
	params.PauseBehavior = &PauseBehavior
	return params
}
func (params *UpdateConferenceRecordingParams) SetStatus(Status string) *UpdateConferenceRecordingParams {
	params.Status = &Status
	return params
}

// UpdateConferenceRecording Method for UpdateConferenceRecording
//
// Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
//
// param: ConferenceSid The Conference SID that identifies the conference associated with the recording to update.
//
// param: Sid The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
//
// param: optional nil or *UpdateConferenceRecordingParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
//
// param: "PauseBehavior" (string) - Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
//
// param: "Status" (string) - The new status of the recording. Can be: `stopped`, `paused`, `in-progress`.
//
// return: ApiV2010AccountConferenceConferenceRecording
func (c *DefaultApiService) UpdateConferenceRecording(ConferenceSid string, Sid string, params *UpdateConferenceRecordingParams) (*ApiV2010AccountConferenceConferenceRecording, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PauseBehavior != nil {
		data.Set("PauseBehavior", *params.PauseBehavior)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConferenceConferenceRecording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateConnectAppParams Optional parameters for the method 'UpdateConnectApp'
type UpdateConnectAppParams struct {
	PathAccountSid            *string   `json:"PathAccountSid,omitempty"`
	AuthorizeRedirectUrl      *string   `json:"AuthorizeRedirectUrl,omitempty"`
	CompanyName               *string   `json:"CompanyName,omitempty"`
	DeauthorizeCallbackMethod *string   `json:"DeauthorizeCallbackMethod,omitempty"`
	DeauthorizeCallbackUrl    *string   `json:"DeauthorizeCallbackUrl,omitempty"`
	Description               *string   `json:"Description,omitempty"`
	FriendlyName              *string   `json:"FriendlyName,omitempty"`
	HomepageUrl               *string   `json:"HomepageUrl,omitempty"`
	Permissions               *[]string `json:"Permissions,omitempty"`
}

func (params *UpdateConnectAppParams) SetPathAccountSid(PathAccountSid string) *UpdateConnectAppParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateConnectAppParams) SetAuthorizeRedirectUrl(AuthorizeRedirectUrl string) *UpdateConnectAppParams {
	params.AuthorizeRedirectUrl = &AuthorizeRedirectUrl
	return params
}
func (params *UpdateConnectAppParams) SetCompanyName(CompanyName string) *UpdateConnectAppParams {
	params.CompanyName = &CompanyName
	return params
}
func (params *UpdateConnectAppParams) SetDeauthorizeCallbackMethod(DeauthorizeCallbackMethod string) *UpdateConnectAppParams {
	params.DeauthorizeCallbackMethod = &DeauthorizeCallbackMethod
	return params
}
func (params *UpdateConnectAppParams) SetDeauthorizeCallbackUrl(DeauthorizeCallbackUrl string) *UpdateConnectAppParams {
	params.DeauthorizeCallbackUrl = &DeauthorizeCallbackUrl
	return params
}
func (params *UpdateConnectAppParams) SetDescription(Description string) *UpdateConnectAppParams {
	params.Description = &Description
	return params
}
func (params *UpdateConnectAppParams) SetFriendlyName(FriendlyName string) *UpdateConnectAppParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateConnectAppParams) SetHomepageUrl(HomepageUrl string) *UpdateConnectAppParams {
	params.HomepageUrl = &HomepageUrl
	return params
}
func (params *UpdateConnectAppParams) SetPermissions(Permissions []string) *UpdateConnectAppParams {
	params.Permissions = &Permissions
	return params
}

// UpdateConnectApp Method for UpdateConnectApp
//
// Update a connect-app with the specified parameters
//
// param: Sid The Twilio-provided string that uniquely identifies the ConnectApp resource to update.
//
// param: optional nil or *UpdateConnectAppParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to update.
//
// param: "AuthorizeRedirectUrl" (string) - The URL to redirect the user to after we authenticate the user and obtain authorization to access the Connect App.
//
// param: "CompanyName" (string) - The company name to set for the Connect App.
//
// param: "DeauthorizeCallbackMethod" (string) - The HTTP method to use when calling `deauthorize_callback_url`.
//
// param: "DeauthorizeCallbackUrl" (string) - The URL to call using the `deauthorize_callback_method` to de-authorize the Connect App.
//
// param: "Description" (string) - A description of the Connect App.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// param: "HomepageUrl" (string) - A public URL where users can obtain more information about this Connect App.
//
// param: "Permissions" ([]string) - A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: `get-all` and `post-all`.
//
// return: ApiV2010AccountConnectApp
func (c *DefaultApiService) UpdateConnectApp(Sid string, params *UpdateConnectAppParams) (*ApiV2010AccountConnectApp, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AuthorizeRedirectUrl != nil {
		data.Set("AuthorizeRedirectUrl", *params.AuthorizeRedirectUrl)
	}
	if params != nil && params.CompanyName != nil {
		data.Set("CompanyName", *params.CompanyName)
	}
	if params != nil && params.DeauthorizeCallbackMethod != nil {
		data.Set("DeauthorizeCallbackMethod", *params.DeauthorizeCallbackMethod)
	}
	if params != nil && params.DeauthorizeCallbackUrl != nil {
		data.Set("DeauthorizeCallbackUrl", *params.DeauthorizeCallbackUrl)
	}
	if params != nil && params.Description != nil {
		data.Set("Description", *params.Description)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.HomepageUrl != nil {
		data.Set("HomepageUrl", *params.HomepageUrl)
	}
	if params != nil && params.Permissions != nil {
		data.Set("Permissions", strings.Join(*params.Permissions, ","))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConnectApp{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateIncomingPhoneNumberParams Optional parameters for the method 'UpdateIncomingPhoneNumber'
type UpdateIncomingPhoneNumberParams struct {
	PathAccountSid       *string `json:"PathAccountSid,omitempty"`
	AccountSid           *string `json:"AccountSid,omitempty"`
	AddressSid           *string `json:"AddressSid,omitempty"`
	ApiVersion           *string `json:"ApiVersion,omitempty"`
	BundleSid            *string `json:"BundleSid,omitempty"`
	EmergencyAddressSid  *string `json:"EmergencyAddressSid,omitempty"`
	EmergencyStatus      *string `json:"EmergencyStatus,omitempty"`
	FriendlyName         *string `json:"FriendlyName,omitempty"`
	IdentitySid          *string `json:"IdentitySid,omitempty"`
	SmsApplicationSid    *string `json:"SmsApplicationSid,omitempty"`
	SmsFallbackMethod    *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl       *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod            *string `json:"SmsMethod,omitempty"`
	SmsUrl               *string `json:"SmsUrl,omitempty"`
	StatusCallback       *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	TrunkSid             *string `json:"TrunkSid,omitempty"`
	VoiceApplicationSid  *string `json:"VoiceApplicationSid,omitempty"`
	VoiceCallerIdLookup  *bool   `json:"VoiceCallerIdLookup,omitempty"`
	VoiceFallbackMethod  *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl     *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod          *string `json:"VoiceMethod,omitempty"`
	VoiceReceiveMode     *string `json:"VoiceReceiveMode,omitempty"`
	VoiceUrl             *string `json:"VoiceUrl,omitempty"`
}

func (params *UpdateIncomingPhoneNumberParams) SetPathAccountSid(PathAccountSid string) *UpdateIncomingPhoneNumberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetAccountSid(AccountSid string) *UpdateIncomingPhoneNumberParams {
	params.AccountSid = &AccountSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetAddressSid(AddressSid string) *UpdateIncomingPhoneNumberParams {
	params.AddressSid = &AddressSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetApiVersion(ApiVersion string) *UpdateIncomingPhoneNumberParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetBundleSid(BundleSid string) *UpdateIncomingPhoneNumberParams {
	params.BundleSid = &BundleSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetEmergencyAddressSid(EmergencyAddressSid string) *UpdateIncomingPhoneNumberParams {
	params.EmergencyAddressSid = &EmergencyAddressSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetEmergencyStatus(EmergencyStatus string) *UpdateIncomingPhoneNumberParams {
	params.EmergencyStatus = &EmergencyStatus
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetFriendlyName(FriendlyName string) *UpdateIncomingPhoneNumberParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetIdentitySid(IdentitySid string) *UpdateIncomingPhoneNumberParams {
	params.IdentitySid = &IdentitySid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetSmsApplicationSid(SmsApplicationSid string) *UpdateIncomingPhoneNumberParams {
	params.SmsApplicationSid = &SmsApplicationSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetSmsFallbackMethod(SmsFallbackMethod string) *UpdateIncomingPhoneNumberParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetSmsFallbackUrl(SmsFallbackUrl string) *UpdateIncomingPhoneNumberParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetSmsMethod(SmsMethod string) *UpdateIncomingPhoneNumberParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetSmsUrl(SmsUrl string) *UpdateIncomingPhoneNumberParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetStatusCallback(StatusCallback string) *UpdateIncomingPhoneNumberParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetStatusCallbackMethod(StatusCallbackMethod string) *UpdateIncomingPhoneNumberParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetTrunkSid(TrunkSid string) *UpdateIncomingPhoneNumberParams {
	params.TrunkSid = &TrunkSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetVoiceApplicationSid(VoiceApplicationSid string) *UpdateIncomingPhoneNumberParams {
	params.VoiceApplicationSid = &VoiceApplicationSid
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetVoiceCallerIdLookup(VoiceCallerIdLookup bool) *UpdateIncomingPhoneNumberParams {
	params.VoiceCallerIdLookup = &VoiceCallerIdLookup
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *UpdateIncomingPhoneNumberParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *UpdateIncomingPhoneNumberParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetVoiceMethod(VoiceMethod string) *UpdateIncomingPhoneNumberParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetVoiceReceiveMode(VoiceReceiveMode string) *UpdateIncomingPhoneNumberParams {
	params.VoiceReceiveMode = &VoiceReceiveMode
	return params
}
func (params *UpdateIncomingPhoneNumberParams) SetVoiceUrl(VoiceUrl string) *UpdateIncomingPhoneNumberParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// UpdateIncomingPhoneNumber Method for UpdateIncomingPhoneNumber
//
// Update an incoming-phone-number instance.
//
// param: Sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update.
//
// param: optional nil or *UpdateIncomingPhoneNumberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
//
// param: "AccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers).
//
// param: "AddressSid" (string) - The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations.
//
// param: "ApiVersion" (string) - The API version to use for incoming calls made to the phone number. The default is `2010-04-01`.
//
// param: "BundleSid" (string) - The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
//
// param: "EmergencyAddressSid" (string) - The SID of the emergency address configuration to use for emergency calling from this phone number.
//
// param: "EmergencyStatus" (string) - The configuration status parameter that determines whether the phone number is enabled for emergency calling.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
//
// param: "IdentitySid" (string) - The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations.
//
// param: "SmsApplicationSid" (string) - The SID of the application that should handle SMS messages sent to the number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
//
// param: "SmsFallbackMethod" (string) - The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "SmsUrl" (string) - The URL we should call when the phone number receives an incoming SMS message.
//
// param: "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
//
// param: "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "TrunkSid" (string) - The SID of the Trunk we should use to handle phone calls to the phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
//
// param: "VoiceApplicationSid" (string) - The SID of the application we should use to handle phone calls to the phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
//
// param: "VoiceCallerIdLookup" (bool) - Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
//
// param: "VoiceMethod" (string) - The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "VoiceReceiveMode" (string) - The configuration parameter for the phone number to receive incoming voice calls or faxes. Can be: `fax` or `voice` and defaults to `voice`.
//
// param: "VoiceUrl" (string) - The URL that we should call to answer a call to the phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
//
// return: ApiV2010AccountIncomingPhoneNumber
func (c *DefaultApiService) UpdateIncomingPhoneNumber(Sid string, params *UpdateIncomingPhoneNumberParams) (*ApiV2010AccountIncomingPhoneNumber, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AccountSid != nil {
		data.Set("AccountSid", *params.AccountSid)
	}
	if params != nil && params.AddressSid != nil {
		data.Set("AddressSid", *params.AddressSid)
	}
	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.BundleSid != nil {
		data.Set("BundleSid", *params.BundleSid)
	}
	if params != nil && params.EmergencyAddressSid != nil {
		data.Set("EmergencyAddressSid", *params.EmergencyAddressSid)
	}
	if params != nil && params.EmergencyStatus != nil {
		data.Set("EmergencyStatus", *params.EmergencyStatus)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IdentitySid != nil {
		data.Set("IdentitySid", *params.IdentitySid)
	}
	if params != nil && params.SmsApplicationSid != nil {
		data.Set("SmsApplicationSid", *params.SmsApplicationSid)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.TrunkSid != nil {
		data.Set("TrunkSid", *params.TrunkSid)
	}
	if params != nil && params.VoiceApplicationSid != nil {
		data.Set("VoiceApplicationSid", *params.VoiceApplicationSid)
	}
	if params != nil && params.VoiceCallerIdLookup != nil {
		data.Set("VoiceCallerIdLookup", fmt.Sprint(*params.VoiceCallerIdLookup))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceReceiveMode != nil {
		data.Set("VoiceReceiveMode", *params.VoiceReceiveMode)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountIncomingPhoneNumber{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateKeyParams Optional parameters for the method 'UpdateKey'
type UpdateKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *UpdateKeyParams) SetPathAccountSid(PathAccountSid string) *UpdateKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateKeyParams) SetFriendlyName(FriendlyName string) *UpdateKeyParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateKey Method for UpdateKey
//
// param: Sid The Twilio-provided string that uniquely identifies the Key resource to update.
//
// param: optional nil or *UpdateKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Key resources to update.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// return: ApiV2010AccountKey
func (c *DefaultApiService) UpdateKey(Sid string, params *UpdateKeyParams) (*ApiV2010AccountKey, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountKey{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateMemberParams Optional parameters for the method 'UpdateMember'
type UpdateMemberParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Method         *string `json:"Method,omitempty"`
	Url            *string `json:"Url,omitempty"`
}

func (params *UpdateMemberParams) SetPathAccountSid(PathAccountSid string) *UpdateMemberParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateMemberParams) SetMethod(Method string) *UpdateMemberParams {
	params.Method = &Method
	return params
}
func (params *UpdateMemberParams) SetUrl(Url string) *UpdateMemberParams {
	params.Url = &Url
	return params
}

// UpdateMember Method for UpdateMember
//
// Dequeue a member from a queue and have the member&#39;s call begin executing the TwiML document at that URL
//
// param: QueueSid The SID of the Queue in which to find the members to update.
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
//
// param: optional nil or *UpdateMemberParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
//
// param: "Method" (string) - How to pass the update request data. Can be `GET` or `POST` and the default is `POST`. `POST` sends the data as encoded form data and `GET` sends the data as query parameters.
//
// param: "Url" (string) - The absolute URL of the Queue resource.
//
// return: ApiV2010AccountQueueMember
func (c *DefaultApiService) UpdateMember(QueueSid string, CallSid string, params *UpdateMemberParams) (*ApiV2010AccountQueueMember, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"QueueSid"+"}", QueueSid, -1)
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Method != nil {
		data.Set("Method", *params.Method)
	}
	if params != nil && params.Url != nil {
		data.Set("Url", *params.Url)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountQueueMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateMessageParams Optional parameters for the method 'UpdateMessage'
type UpdateMessageParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Body           *string `json:"Body,omitempty"`
}

func (params *UpdateMessageParams) SetPathAccountSid(PathAccountSid string) *UpdateMessageParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateMessageParams) SetBody(Body string) *UpdateMessageParams {
	params.Body = &Body
	return params
}

// UpdateMessage Method for UpdateMessage
//
// To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
//
// param: Sid The Twilio-provided string that uniquely identifies the Message resource to update.
//
// param: optional nil or *UpdateMessageParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
//
// param: "Body" (string) - The text of the message you want to send. Can be up to 1,600 characters long.
//
// return: ApiV2010AccountMessage
func (c *DefaultApiService) UpdateMessage(Sid string, params *UpdateMessageParams) (*ApiV2010AccountMessage, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateOutgoingCallerIdParams Optional parameters for the method 'UpdateOutgoingCallerId'
type UpdateOutgoingCallerIdParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *UpdateOutgoingCallerIdParams) SetPathAccountSid(PathAccountSid string) *UpdateOutgoingCallerIdParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateOutgoingCallerIdParams) SetFriendlyName(FriendlyName string) *UpdateOutgoingCallerIdParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateOutgoingCallerId Method for UpdateOutgoingCallerId
//
// Updates the caller-id
//
// param: Sid The Twilio-provided string that uniquely identifies the OutgoingCallerId resource to update.
//
// param: optional nil or *UpdateOutgoingCallerIdParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the OutgoingCallerId resources to update.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// return: ApiV2010AccountOutgoingCallerId
func (c *DefaultApiService) UpdateOutgoingCallerId(Sid string, params *UpdateOutgoingCallerIdParams) (*ApiV2010AccountOutgoingCallerId, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountOutgoingCallerId{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateParticipantParams Optional parameters for the method 'UpdateParticipant'
type UpdateParticipantParams struct {
	PathAccountSid      *string `json:"PathAccountSid,omitempty"`
	AnnounceMethod      *string `json:"AnnounceMethod,omitempty"`
	AnnounceUrl         *string `json:"AnnounceUrl,omitempty"`
	BeepOnExit          *bool   `json:"BeepOnExit,omitempty"`
	CallSidToCoach      *string `json:"CallSidToCoach,omitempty"`
	Coaching            *bool   `json:"Coaching,omitempty"`
	EndConferenceOnExit *bool   `json:"EndConferenceOnExit,omitempty"`
	Hold                *bool   `json:"Hold,omitempty"`
	HoldMethod          *string `json:"HoldMethod,omitempty"`
	HoldUrl             *string `json:"HoldUrl,omitempty"`
	Muted               *bool   `json:"Muted,omitempty"`
	WaitMethod          *string `json:"WaitMethod,omitempty"`
	WaitUrl             *string `json:"WaitUrl,omitempty"`
}

func (params *UpdateParticipantParams) SetPathAccountSid(PathAccountSid string) *UpdateParticipantParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateParticipantParams) SetAnnounceMethod(AnnounceMethod string) *UpdateParticipantParams {
	params.AnnounceMethod = &AnnounceMethod
	return params
}
func (params *UpdateParticipantParams) SetAnnounceUrl(AnnounceUrl string) *UpdateParticipantParams {
	params.AnnounceUrl = &AnnounceUrl
	return params
}
func (params *UpdateParticipantParams) SetBeepOnExit(BeepOnExit bool) *UpdateParticipantParams {
	params.BeepOnExit = &BeepOnExit
	return params
}
func (params *UpdateParticipantParams) SetCallSidToCoach(CallSidToCoach string) *UpdateParticipantParams {
	params.CallSidToCoach = &CallSidToCoach
	return params
}
func (params *UpdateParticipantParams) SetCoaching(Coaching bool) *UpdateParticipantParams {
	params.Coaching = &Coaching
	return params
}
func (params *UpdateParticipantParams) SetEndConferenceOnExit(EndConferenceOnExit bool) *UpdateParticipantParams {
	params.EndConferenceOnExit = &EndConferenceOnExit
	return params
}
func (params *UpdateParticipantParams) SetHold(Hold bool) *UpdateParticipantParams {
	params.Hold = &Hold
	return params
}
func (params *UpdateParticipantParams) SetHoldMethod(HoldMethod string) *UpdateParticipantParams {
	params.HoldMethod = &HoldMethod
	return params
}
func (params *UpdateParticipantParams) SetHoldUrl(HoldUrl string) *UpdateParticipantParams {
	params.HoldUrl = &HoldUrl
	return params
}
func (params *UpdateParticipantParams) SetMuted(Muted bool) *UpdateParticipantParams {
	params.Muted = &Muted
	return params
}
func (params *UpdateParticipantParams) SetWaitMethod(WaitMethod string) *UpdateParticipantParams {
	params.WaitMethod = &WaitMethod
	return params
}
func (params *UpdateParticipantParams) SetWaitUrl(WaitUrl string) *UpdateParticipantParams {
	params.WaitUrl = &WaitUrl
	return params
}

// UpdateParticipant Method for UpdateParticipant
//
// Update the properties of the participant
//
// param: ConferenceSid The SID of the conference with the participant to update.
//
// param: CallSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
//
// param: optional nil or *UpdateParticipantParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
//
// param: "AnnounceMethod" (string) - The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
//
// param: "AnnounceUrl" (string) - The URL we call using the `announce_method` for an announcement to the participant. The URL must return an MP3 file, a WAV file, or a TwiML document that contains `<Play>` or `<Say>` commands.
//
// param: "BeepOnExit" (bool) - Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
//
// param: "CallSidToCoach" (string) - The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
//
// param: "Coaching" (bool) - Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
//
// param: "EndConferenceOnExit" (bool) - Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
//
// param: "Hold" (bool) - Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
//
// param: "HoldMethod" (string) - The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
//
// param: "HoldUrl" (string) - The URL we call using the `hold_method` for  music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains the `<Play>`, `<Say>` or `<Redirect>` commands.
//
// param: "Muted" (bool) - Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
//
// param: "WaitMethod" (string) - The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
//
// param: "WaitUrl" (string) - The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
//
// return: ApiV2010AccountConferenceParticipant
func (c *DefaultApiService) UpdateParticipant(ConferenceSid string, CallSid string, params *UpdateParticipantParams) (*ApiV2010AccountConferenceParticipant, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"ConferenceSid"+"}", ConferenceSid, -1)
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AnnounceMethod != nil {
		data.Set("AnnounceMethod", *params.AnnounceMethod)
	}
	if params != nil && params.AnnounceUrl != nil {
		data.Set("AnnounceUrl", *params.AnnounceUrl)
	}
	if params != nil && params.BeepOnExit != nil {
		data.Set("BeepOnExit", fmt.Sprint(*params.BeepOnExit))
	}
	if params != nil && params.CallSidToCoach != nil {
		data.Set("CallSidToCoach", *params.CallSidToCoach)
	}
	if params != nil && params.Coaching != nil {
		data.Set("Coaching", fmt.Sprint(*params.Coaching))
	}
	if params != nil && params.EndConferenceOnExit != nil {
		data.Set("EndConferenceOnExit", fmt.Sprint(*params.EndConferenceOnExit))
	}
	if params != nil && params.Hold != nil {
		data.Set("Hold", fmt.Sprint(*params.Hold))
	}
	if params != nil && params.HoldMethod != nil {
		data.Set("HoldMethod", *params.HoldMethod)
	}
	if params != nil && params.HoldUrl != nil {
		data.Set("HoldUrl", *params.HoldUrl)
	}
	if params != nil && params.Muted != nil {
		data.Set("Muted", fmt.Sprint(*params.Muted))
	}
	if params != nil && params.WaitMethod != nil {
		data.Set("WaitMethod", *params.WaitMethod)
	}
	if params != nil && params.WaitUrl != nil {
		data.Set("WaitUrl", *params.WaitUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountConferenceParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdatePaymentsParams Optional parameters for the method 'UpdatePayments'
type UpdatePaymentsParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Capture        *string `json:"Capture,omitempty"`
	IdempotencyKey *string `json:"IdempotencyKey,omitempty"`
	Status         *string `json:"Status,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
}

func (params *UpdatePaymentsParams) SetPathAccountSid(PathAccountSid string) *UpdatePaymentsParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdatePaymentsParams) SetCapture(Capture string) *UpdatePaymentsParams {
	params.Capture = &Capture
	return params
}
func (params *UpdatePaymentsParams) SetIdempotencyKey(IdempotencyKey string) *UpdatePaymentsParams {
	params.IdempotencyKey = &IdempotencyKey
	return params
}
func (params *UpdatePaymentsParams) SetStatus(Status string) *UpdatePaymentsParams {
	params.Status = &Status
	return params
}
func (params *UpdatePaymentsParams) SetStatusCallback(StatusCallback string) *UpdatePaymentsParams {
	params.StatusCallback = &StatusCallback
	return params
}

// UpdatePayments Method for UpdatePayments
//
// update an instance of payments with different phases of payment flows.
//
// param: CallSid The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
//
// param: Sid The SID of Payments session that needs to be updated.
//
// param: optional nil or *UpdatePaymentsParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
//
// param: "Capture" (string) - The piece of payment information that you wish the caller to enter. Must be one of `payment-card-number`, `expiration-date`, `security-code`, `postal-code`, `bank-routing-number`, or `bank-account-number`.
//
// param: "IdempotencyKey" (string) - A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
//
// param: "Status" (string) - Indicates whether the current payment session should be cancelled or completed. When `cancel` the payment session is cancelled. When `complete`, Twilio sends the payment information to the selected <Pay> connector for processing.
//
// param: "StatusCallback" (string) - Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
//
// return: ApiV2010AccountCallPayments
func (c *DefaultApiService) UpdatePayments(CallSid string, Sid string, params *UpdatePaymentsParams) (*ApiV2010AccountCallPayments, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CallSid"+"}", CallSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Capture != nil {
		data.Set("Capture", *params.Capture)
	}
	if params != nil && params.IdempotencyKey != nil {
		data.Set("IdempotencyKey", *params.IdempotencyKey)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountCallPayments{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateQueueParams Optional parameters for the method 'UpdateQueue'
type UpdateQueueParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	MaxSize        *int32  `json:"MaxSize,omitempty"`
}

func (params *UpdateQueueParams) SetPathAccountSid(PathAccountSid string) *UpdateQueueParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateQueueParams) SetFriendlyName(FriendlyName string) *UpdateQueueParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateQueueParams) SetMaxSize(MaxSize int32) *UpdateQueueParams {
	params.MaxSize = &MaxSize
	return params
}

// UpdateQueue Method for UpdateQueue
//
// Update the queue with the new parameters
//
// param: Sid The Twilio-provided string that uniquely identifies the Queue resource to update
//
// param: optional nil or *UpdateQueueParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Queue resource to update.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe this resource. It can be up to 64 characters long.
//
// param: "MaxSize" (int32) - The maximum number of calls allowed to be in the queue. The default is 100. The maximum is 5000.
//
// return: ApiV2010AccountQueue
func (c *DefaultApiService) UpdateQueue(Sid string, params *UpdateQueueParams) (*ApiV2010AccountQueue, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MaxSize != nil {
		data.Set("MaxSize", fmt.Sprint(*params.MaxSize))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountQueue{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateShortCodeParams Optional parameters for the method 'UpdateShortCode'
type UpdateShortCodeParams struct {
	PathAccountSid    *string `json:"PathAccountSid,omitempty"`
	ApiVersion        *string `json:"ApiVersion,omitempty"`
	FriendlyName      *string `json:"FriendlyName,omitempty"`
	SmsFallbackMethod *string `json:"SmsFallbackMethod,omitempty"`
	SmsFallbackUrl    *string `json:"SmsFallbackUrl,omitempty"`
	SmsMethod         *string `json:"SmsMethod,omitempty"`
	SmsUrl            *string `json:"SmsUrl,omitempty"`
}

func (params *UpdateShortCodeParams) SetPathAccountSid(PathAccountSid string) *UpdateShortCodeParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateShortCodeParams) SetApiVersion(ApiVersion string) *UpdateShortCodeParams {
	params.ApiVersion = &ApiVersion
	return params
}
func (params *UpdateShortCodeParams) SetFriendlyName(FriendlyName string) *UpdateShortCodeParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateShortCodeParams) SetSmsFallbackMethod(SmsFallbackMethod string) *UpdateShortCodeParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *UpdateShortCodeParams) SetSmsFallbackUrl(SmsFallbackUrl string) *UpdateShortCodeParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *UpdateShortCodeParams) SetSmsMethod(SmsMethod string) *UpdateShortCodeParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *UpdateShortCodeParams) SetSmsUrl(SmsUrl string) *UpdateShortCodeParams {
	params.SmsUrl = &SmsUrl
	return params
}

// UpdateShortCode Method for UpdateShortCode
//
// Update a short code with the following parameters
//
// param: Sid The Twilio-provided string that uniquely identifies the ShortCode resource to update
//
// param: optional nil or *UpdateShortCodeParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update.
//
// param: "ApiVersion" (string) - The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe this resource. It can be up to 64 characters long. By default, the `FriendlyName` is the short code.
//
// param: "SmsFallbackMethod" (string) - The HTTP method that we should use to call the `sms_fallback_url`. Can be: `GET` or `POST`.
//
// param: "SmsFallbackUrl" (string) - The URL that we should call if an error occurs while retrieving or executing the TwiML from `sms_url`.
//
// param: "SmsMethod" (string) - The HTTP method we should use when calling the `sms_url`. Can be: `GET` or `POST`.
//
// param: "SmsUrl" (string) - The URL we should call when receiving an incoming SMS message to this short code.
//
// return: ApiV2010AccountShortCode
func (c *DefaultApiService) UpdateShortCode(Sid string, params *UpdateShortCodeParams) (*ApiV2010AccountShortCode, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApiVersion != nil {
		data.Set("ApiVersion", *params.ApiVersion)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("SmsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("SmsUrl", *params.SmsUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountShortCode{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateSigningKeyParams Optional parameters for the method 'UpdateSigningKey'
type UpdateSigningKeyParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *UpdateSigningKeyParams) SetPathAccountSid(PathAccountSid string) *UpdateSigningKeyParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateSigningKeyParams) SetFriendlyName(FriendlyName string) *UpdateSigningKeyParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateSigningKey Method for UpdateSigningKey
//
// param: Sid
//
// param: optional nil or *UpdateSigningKeyParams - Optional Parameters:
//
// param: "PathAccountSid" (string) -
//
// param: "FriendlyName" (string) -
//
// return: ApiV2010AccountSigningKey
func (c *DefaultApiService) UpdateSigningKey(Sid string, params *UpdateSigningKeyParams) (*ApiV2010AccountSigningKey, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSigningKey{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateSipCredentialParams Optional parameters for the method 'UpdateSipCredential'
type UpdateSipCredentialParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	Password       *string `json:"Password,omitempty"`
}

func (params *UpdateSipCredentialParams) SetPathAccountSid(PathAccountSid string) *UpdateSipCredentialParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateSipCredentialParams) SetPassword(Password string) *UpdateSipCredentialParams {
	params.Password = &Password
	return params
}

// UpdateSipCredential Method for UpdateSipCredential
//
// Update a credential resource.
//
// param: CredentialListSid The unique id that identifies the credential list that includes this credential.
//
// param: Sid The unique id that identifies the resource to update.
//
// param: optional nil or *UpdateSipCredentialParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "Password" (string) - The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
//
// return: ApiV2010AccountSipSipCredentialListSipCredential
func (c *DefaultApiService) UpdateSipCredential(CredentialListSid string, Sid string, params *UpdateSipCredentialParams) (*ApiV2010AccountSipSipCredentialListSipCredential, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"CredentialListSid"+"}", CredentialListSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Password != nil {
		data.Set("Password", *params.Password)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipCredentialListSipCredential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateSipCredentialListParams Optional parameters for the method 'UpdateSipCredentialList'
type UpdateSipCredentialListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *UpdateSipCredentialListParams) SetPathAccountSid(PathAccountSid string) *UpdateSipCredentialListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateSipCredentialListParams) SetFriendlyName(FriendlyName string) *UpdateSipCredentialListParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateSipCredentialList Method for UpdateSipCredentialList
//
// Update a Credential List
//
// param: Sid The credential list Sid that uniquely identifies this resource
//
// param: optional nil or *UpdateSipCredentialListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the Account that is responsible for this resource.
//
// param: "FriendlyName" (string) - A human readable descriptive text for a CredentialList, up to 64 characters long.
//
// return: ApiV2010AccountSipSipCredentialList
func (c *DefaultApiService) UpdateSipCredentialList(Sid string, params *UpdateSipCredentialListParams) (*ApiV2010AccountSipSipCredentialList, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipCredentialList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateSipDomainParams Optional parameters for the method 'UpdateSipDomain'
type UpdateSipDomainParams struct {
	PathAccountSid            *string `json:"PathAccountSid,omitempty"`
	ByocTrunkSid              *string `json:"ByocTrunkSid,omitempty"`
	DomainName                *string `json:"DomainName,omitempty"`
	EmergencyCallerSid        *string `json:"EmergencyCallerSid,omitempty"`
	EmergencyCallingEnabled   *bool   `json:"EmergencyCallingEnabled,omitempty"`
	FriendlyName              *string `json:"FriendlyName,omitempty"`
	Secure                    *bool   `json:"Secure,omitempty"`
	SipRegistration           *bool   `json:"SipRegistration,omitempty"`
	VoiceFallbackMethod       *string `json:"VoiceFallbackMethod,omitempty"`
	VoiceFallbackUrl          *string `json:"VoiceFallbackUrl,omitempty"`
	VoiceMethod               *string `json:"VoiceMethod,omitempty"`
	VoiceStatusCallbackMethod *string `json:"VoiceStatusCallbackMethod,omitempty"`
	VoiceStatusCallbackUrl    *string `json:"VoiceStatusCallbackUrl,omitempty"`
	VoiceUrl                  *string `json:"VoiceUrl,omitempty"`
}

func (params *UpdateSipDomainParams) SetPathAccountSid(PathAccountSid string) *UpdateSipDomainParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateSipDomainParams) SetByocTrunkSid(ByocTrunkSid string) *UpdateSipDomainParams {
	params.ByocTrunkSid = &ByocTrunkSid
	return params
}
func (params *UpdateSipDomainParams) SetDomainName(DomainName string) *UpdateSipDomainParams {
	params.DomainName = &DomainName
	return params
}
func (params *UpdateSipDomainParams) SetEmergencyCallerSid(EmergencyCallerSid string) *UpdateSipDomainParams {
	params.EmergencyCallerSid = &EmergencyCallerSid
	return params
}
func (params *UpdateSipDomainParams) SetEmergencyCallingEnabled(EmergencyCallingEnabled bool) *UpdateSipDomainParams {
	params.EmergencyCallingEnabled = &EmergencyCallingEnabled
	return params
}
func (params *UpdateSipDomainParams) SetFriendlyName(FriendlyName string) *UpdateSipDomainParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateSipDomainParams) SetSecure(Secure bool) *UpdateSipDomainParams {
	params.Secure = &Secure
	return params
}
func (params *UpdateSipDomainParams) SetSipRegistration(SipRegistration bool) *UpdateSipDomainParams {
	params.SipRegistration = &SipRegistration
	return params
}
func (params *UpdateSipDomainParams) SetVoiceFallbackMethod(VoiceFallbackMethod string) *UpdateSipDomainParams {
	params.VoiceFallbackMethod = &VoiceFallbackMethod
	return params
}
func (params *UpdateSipDomainParams) SetVoiceFallbackUrl(VoiceFallbackUrl string) *UpdateSipDomainParams {
	params.VoiceFallbackUrl = &VoiceFallbackUrl
	return params
}
func (params *UpdateSipDomainParams) SetVoiceMethod(VoiceMethod string) *UpdateSipDomainParams {
	params.VoiceMethod = &VoiceMethod
	return params
}
func (params *UpdateSipDomainParams) SetVoiceStatusCallbackMethod(VoiceStatusCallbackMethod string) *UpdateSipDomainParams {
	params.VoiceStatusCallbackMethod = &VoiceStatusCallbackMethod
	return params
}
func (params *UpdateSipDomainParams) SetVoiceStatusCallbackUrl(VoiceStatusCallbackUrl string) *UpdateSipDomainParams {
	params.VoiceStatusCallbackUrl = &VoiceStatusCallbackUrl
	return params
}
func (params *UpdateSipDomainParams) SetVoiceUrl(VoiceUrl string) *UpdateSipDomainParams {
	params.VoiceUrl = &VoiceUrl
	return params
}

// UpdateSipDomain Method for UpdateSipDomain
//
// Update the attributes of a domain
//
// param: Sid The Twilio-provided string that uniquely identifies the SipDomain resource to update.
//
// param: optional nil or *UpdateSipDomainParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
//
// param: "ByocTrunkSid" (string) - The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
//
// param: "DomainName" (string) - The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
//
// param: "EmergencyCallerSid" (string) - Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
//
// param: "EmergencyCallingEnabled" (bool) - Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
//
// param: "FriendlyName" (string) - A descriptive string that you created to describe the resource. It can be up to 64 characters long.
//
// param: "Secure" (bool) - Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
//
// param: "SipRegistration" (bool) - Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
//
// param: "VoiceFallbackMethod" (string) - The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
//
// param: "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
//
// param: "VoiceMethod" (string) - The HTTP method we should use to call `voice_url`
//
// param: "VoiceStatusCallbackMethod" (string) - The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
//
// param: "VoiceStatusCallbackUrl" (string) - The URL that we should call to pass status parameters (such as call ended) to your application.
//
// param: "VoiceUrl" (string) - The URL we should call when the domain receives a call.
//
// return: ApiV2010AccountSipSipDomain
func (c *DefaultApiService) UpdateSipDomain(Sid string, params *UpdateSipDomainParams) (*ApiV2010AccountSipSipDomain, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ByocTrunkSid != nil {
		data.Set("ByocTrunkSid", *params.ByocTrunkSid)
	}
	if params != nil && params.DomainName != nil {
		data.Set("DomainName", *params.DomainName)
	}
	if params != nil && params.EmergencyCallerSid != nil {
		data.Set("EmergencyCallerSid", *params.EmergencyCallerSid)
	}
	if params != nil && params.EmergencyCallingEnabled != nil {
		data.Set("EmergencyCallingEnabled", fmt.Sprint(*params.EmergencyCallingEnabled))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Secure != nil {
		data.Set("Secure", fmt.Sprint(*params.Secure))
	}
	if params != nil && params.SipRegistration != nil {
		data.Set("SipRegistration", fmt.Sprint(*params.SipRegistration))
	}
	if params != nil && params.VoiceFallbackMethod != nil {
		data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
	}
	if params != nil && params.VoiceFallbackUrl != nil {
		data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
	}
	if params != nil && params.VoiceMethod != nil {
		data.Set("VoiceMethod", *params.VoiceMethod)
	}
	if params != nil && params.VoiceStatusCallbackMethod != nil {
		data.Set("VoiceStatusCallbackMethod", *params.VoiceStatusCallbackMethod)
	}
	if params != nil && params.VoiceStatusCallbackUrl != nil {
		data.Set("VoiceStatusCallbackUrl", *params.VoiceStatusCallbackUrl)
	}
	if params != nil && params.VoiceUrl != nil {
		data.Set("VoiceUrl", *params.VoiceUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipDomain{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateSipIpAccessControlListParams Optional parameters for the method 'UpdateSipIpAccessControlList'
type UpdateSipIpAccessControlListParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *UpdateSipIpAccessControlListParams) SetPathAccountSid(PathAccountSid string) *UpdateSipIpAccessControlListParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateSipIpAccessControlListParams) SetFriendlyName(FriendlyName string) *UpdateSipIpAccessControlListParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateSipIpAccessControlList Method for UpdateSipIpAccessControlList
//
// Rename an IpAccessControlList
//
// param: Sid A 34 character string that uniquely identifies the resource to udpate.
//
// param: optional nil or *UpdateSipIpAccessControlListParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "FriendlyName" (string) - A human readable descriptive text, up to 64 characters long.
//
// return: ApiV2010AccountSipSipIpAccessControlList
func (c *DefaultApiService) UpdateSipIpAccessControlList(Sid string, params *UpdateSipIpAccessControlListParams) (*ApiV2010AccountSipSipIpAccessControlList, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipIpAccessControlList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateSipIpAddressParams Optional parameters for the method 'UpdateSipIpAddress'
type UpdateSipIpAddressParams struct {
	PathAccountSid   *string `json:"PathAccountSid,omitempty"`
	CidrPrefixLength *int32  `json:"CidrPrefixLength,omitempty"`
	FriendlyName     *string `json:"FriendlyName,omitempty"`
	IpAddress        *string `json:"IpAddress,omitempty"`
}

func (params *UpdateSipIpAddressParams) SetPathAccountSid(PathAccountSid string) *UpdateSipIpAddressParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateSipIpAddressParams) SetCidrPrefixLength(CidrPrefixLength int32) *UpdateSipIpAddressParams {
	params.CidrPrefixLength = &CidrPrefixLength
	return params
}
func (params *UpdateSipIpAddressParams) SetFriendlyName(FriendlyName string) *UpdateSipIpAddressParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateSipIpAddressParams) SetIpAddress(IpAddress string) *UpdateSipIpAddressParams {
	params.IpAddress = &IpAddress
	return params
}

// UpdateSipIpAddress Method for UpdateSipIpAddress
//
// Update an IpAddress resource.
//
// param: IpAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to update.
//
// param: Sid A 34 character string that identifies the IpAddress resource to update.
//
// param: optional nil or *UpdateSipIpAddressParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
//
// param: "CidrPrefixLength" (int32) - An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
//
// param: "FriendlyName" (string) - A human readable descriptive text for this resource, up to 64 characters long.
//
// param: "IpAddress" (string) - An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
//
// return: ApiV2010AccountSipSipIpAccessControlListSipIpAddress
func (c *DefaultApiService) UpdateSipIpAddress(IpAccessControlListSid string, Sid string, params *UpdateSipIpAddressParams) (*ApiV2010AccountSipSipIpAccessControlListSipIpAddress, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"IpAccessControlListSid"+"}", IpAccessControlListSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CidrPrefixLength != nil {
		data.Set("CidrPrefixLength", fmt.Sprint(*params.CidrPrefixLength))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.IpAddress != nil {
		data.Set("IpAddress", *params.IpAddress)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountSipSipIpAccessControlListSipIpAddress{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateUsageTriggerParams Optional parameters for the method 'UpdateUsageTrigger'
type UpdateUsageTriggerParams struct {
	PathAccountSid *string `json:"PathAccountSid,omitempty"`
	CallbackMethod *string `json:"CallbackMethod,omitempty"`
	CallbackUrl    *string `json:"CallbackUrl,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
}

func (params *UpdateUsageTriggerParams) SetPathAccountSid(PathAccountSid string) *UpdateUsageTriggerParams {
	params.PathAccountSid = &PathAccountSid
	return params
}
func (params *UpdateUsageTriggerParams) SetCallbackMethod(CallbackMethod string) *UpdateUsageTriggerParams {
	params.CallbackMethod = &CallbackMethod
	return params
}
func (params *UpdateUsageTriggerParams) SetCallbackUrl(CallbackUrl string) *UpdateUsageTriggerParams {
	params.CallbackUrl = &CallbackUrl
	return params
}
func (params *UpdateUsageTriggerParams) SetFriendlyName(FriendlyName string) *UpdateUsageTriggerParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateUsageTrigger Method for UpdateUsageTrigger
//
// Update an instance of a usage trigger
//
// param: Sid The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
//
// param: optional nil or *UpdateUsageTriggerParams - Optional Parameters:
//
// param: "PathAccountSid" (string) - The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
//
// param: "CallbackMethod" (string) - The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.
//
// param: "CallbackUrl" (string) - The URL we should call using `callback_method` when the trigger fires.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// return: ApiV2010AccountUsageUsageTrigger
func (c *DefaultApiService) UpdateUsageTrigger(Sid string, params *UpdateUsageTriggerParams) (*ApiV2010AccountUsageUsageTrigger, error) {
	path := "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json"
	if params != nil && params.PathAccountSid != nil {
		path = strings.Replace(path, "{"+"AccountSid"+"}", *params.PathAccountSid, -1)
	} else {
		path = strings.Replace(path, "{"+"AccountSid"+"}", c.client.GetAccountSid(), -1)
	}
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CallbackMethod != nil {
		data.Set("CallbackMethod", *params.CallbackMethod)
	}
	if params != nil && params.CallbackUrl != nil {
		data.Set("CallbackUrl", *params.CallbackUrl)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ApiV2010AccountUsageUsageTrigger{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
