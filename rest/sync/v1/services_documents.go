/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateDocument'
type CreateDocumentParams struct {
	// An application-defined string that uniquely identifies the Sync Document
	UniqueName *string `json:"UniqueName,omitempty"`
	// A JSON string that represents an arbitrary, schema-less object that the Sync Document stores. Can be up to 16 KiB in length.
	Data *interface{} `json:"Data,omitempty"`
	// How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Sync Document expires and is deleted (the Sync Document's time-to-live).
	Ttl *int `json:"Ttl,omitempty"`
}

func (params *CreateDocumentParams) SetUniqueName(UniqueName string) *CreateDocumentParams {
	params.UniqueName = &UniqueName
	return params
}
func (params *CreateDocumentParams) SetData(Data interface{}) *CreateDocumentParams {
	params.Data = &Data
	return params
}
func (params *CreateDocumentParams) SetTtl(Ttl int) *CreateDocumentParams {
	params.Ttl = &Ttl
	return params
}

func (c *ApiService) CreateDocument(ServiceSid string, params *CreateDocumentParams) (*SyncV1Document, error) {
	return c.CreateDocumentWithCtx(context.TODO(), ServiceSid, params)
}

func (c *ApiService) CreateDocumentWithCtx(ctx context.Context, ServiceSid string, params *CreateDocumentParams) (*SyncV1Document, error) {
	path := "/v1/Services/{ServiceSid}/Documents"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}
	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", string(v))
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl))
	}

	resp, err := c.requestHandler.Post(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1Document{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

func (c *ApiService) DeleteDocument(ServiceSid string, Sid string) error {
	return c.DeleteDocumentWithCtx(context.TODO(), ServiceSid, Sid)
}

func (c *ApiService) DeleteDocumentWithCtx(ctx context.Context, ServiceSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Delete(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

func (c *ApiService) FetchDocument(ServiceSid string, Sid string) (*SyncV1Document, error) {
	return c.FetchDocumentWithCtx(context.TODO(), ServiceSid, Sid)
}

func (c *ApiService) FetchDocumentWithCtx(ctx context.Context, ServiceSid string, Sid string) (*SyncV1Document, error) {
	path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1Document{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListDocument'
type ListDocumentParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListDocumentParams) SetPageSize(PageSize int) *ListDocumentParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListDocumentParams) SetLimit(Limit int) *ListDocumentParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of Document records from the API. Request is executed immediately.
func (c *ApiService) PageDocument(ServiceSid string, params *ListDocumentParams, pageToken, pageNumber string) (*ListDocumentResponse, error) {
	return c.PageDocumentWithCtx(context.TODO(), ServiceSid, params, pageToken, pageNumber)
}

// Retrieve a single page of Document records from the API. Request is executed immediately.
func (c *ApiService) PageDocumentWithCtx(ctx context.Context, ServiceSid string, params *ListDocumentParams, pageToken, pageNumber string) (*ListDocumentResponse, error) {
	path := "/v1/Services/{ServiceSid}/Documents"

	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListDocumentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists Document records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListDocument(ServiceSid string, params *ListDocumentParams) ([]SyncV1Document, error) {
	return c.ListDocumentWithCtx(context.TODO(), ServiceSid, params)
}

// Lists Document records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListDocumentWithCtx(ctx context.Context, ServiceSid string, params *ListDocumentParams) ([]SyncV1Document, error) {
	response, errors := c.StreamDocumentWithCtx(ctx, ServiceSid, params)

	records := make([]SyncV1Document, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams Document records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamDocument(ServiceSid string, params *ListDocumentParams) (chan SyncV1Document, chan error) {
	return c.StreamDocumentWithCtx(context.TODO(), ServiceSid, params)
}

// Streams Document records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamDocumentWithCtx(ctx context.Context, ServiceSid string, params *ListDocumentParams) (chan SyncV1Document, chan error) {
	if params == nil {
		params = &ListDocumentParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan SyncV1Document, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageDocumentWithCtx(ctx, ServiceSid, params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamDocument(ctx, response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamDocument(ctx context.Context, response *ListDocumentResponse, params *ListDocumentParams, recordChannel chan SyncV1Document, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Documents
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNextWithCtx(ctx, c.baseURL, response, c.getNextListDocumentResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListDocumentResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListDocumentResponse(ctx context.Context, nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(ctx, nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListDocumentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}

// Optional parameters for the method 'UpdateDocument'
type UpdateDocumentParams struct {
	// The If-Match HTTP request header
	IfMatch *string `json:"If-Match,omitempty"`
	// A JSON string that represents an arbitrary, schema-less object that the Sync Document stores. Can be up to 16 KiB in length.
	Data *interface{} `json:"Data,omitempty"`
	// How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Sync Document expires and is deleted (time-to-live).
	Ttl *int `json:"Ttl,omitempty"`
}

func (params *UpdateDocumentParams) SetIfMatch(IfMatch string) *UpdateDocumentParams {
	params.IfMatch = &IfMatch
	return params
}
func (params *UpdateDocumentParams) SetData(Data interface{}) *UpdateDocumentParams {
	params.Data = &Data
	return params
}
func (params *UpdateDocumentParams) SetTtl(Ttl int) *UpdateDocumentParams {
	params.Ttl = &Ttl
	return params
}

func (c *ApiService) UpdateDocument(ServiceSid string, Sid string, params *UpdateDocumentParams) (*SyncV1Document, error) {
	return c.UpdateDocumentWithCtx(context.TODO(), ServiceSid, Sid, params)
}

func (c *ApiService) UpdateDocumentWithCtx(ctx context.Context, ServiceSid string, Sid string, params *UpdateDocumentParams) (*SyncV1Document, error) {
	path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", string(v))
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl))
	}

	if params != nil && params.IfMatch != nil {
		headers["If-Match"] = *params.IfMatch
	}

	resp, err := c.requestHandler.Post(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1Document{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
