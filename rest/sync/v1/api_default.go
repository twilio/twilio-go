/*
 * Twilio - Sync
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateDocumentParams Optional parameters for the method 'CreateDocument'
type CreateDocumentParams struct {
    Data *map[string]interface{} `json:"Data,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateDocument Method for CreateDocument
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Document resource in.
 * @param optional nil or *CreateDocumentOpts - Optional Parameters:
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Sync Document stores. Can be up to 16KB in length.
 * @param "Ttl" (int32) - How long, in seconds, before the Sync Document expires and is deleted (the Sync Document's time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync Document does not expire. The Sync Document will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the Sync Document
@return SyncV1ServiceDocument
*/
func (c *DefaultApiService) CreateDocument(serviceSid string, params *CreateDocumentParams) (*SyncV1ServiceDocument, error) {
    path := "/v1/Services/{ServiceSid}/Documents"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
    AclEnabled *bool `json:"AclEnabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    ReachabilityDebouncingEnabled *bool `json:"ReachabilityDebouncingEnabled,omitempty"`
    ReachabilityDebouncingWindow *int32 `json:"ReachabilityDebouncingWindow,omitempty"`
    ReachabilityWebhooksEnabled *bool `json:"ReachabilityWebhooksEnabled,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
    WebhooksFromRestEnabled *bool `json:"WebhooksFromRestEnabled,omitempty"`
}

/*
CreateService Method for CreateService
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "AclEnabled" (bool) - Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource.
 * @param "FriendlyName" (string) - A string that you assign to describe the resource.
 * @param "ReachabilityDebouncingEnabled" (bool) - Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event.
 * @param "ReachabilityDebouncingWindow" (int32) - The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before the `webhook_url` is called if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the call to `webhook_url`.
 * @param "ReachabilityWebhooksEnabled" (bool) - Whether the service instance should call `webhook_url` when client endpoints connect to Sync. The default is `false`.
 * @param "WebhookUrl" (string) - The URL we should call when Sync objects are manipulated.
 * @param "WebhooksFromRestEnabled" (bool) - Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`.
@return SyncV1Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*SyncV1Service, error) {
    path := "/v1/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.AclEnabled != nil {
        data.Set("AclEnabled", string(*params.AclEnabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.ReachabilityDebouncingEnabled != nil {
        data.Set("ReachabilityDebouncingEnabled", string(*params.ReachabilityDebouncingEnabled))
    }
    if params != nil && params.ReachabilityDebouncingWindow != nil {
        data.Set("ReachabilityDebouncingWindow", string(*params.ReachabilityDebouncingWindow))
    }
    if params != nil && params.ReachabilityWebhooksEnabled != nil {
        data.Set("ReachabilityWebhooksEnabled", string(*params.ReachabilityWebhooksEnabled))
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }
    if params != nil && params.WebhooksFromRestEnabled != nil {
        data.Set("WebhooksFromRestEnabled", string(*params.WebhooksFromRestEnabled))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateStreamMessageParams Optional parameters for the method 'CreateStreamMessage'
type CreateStreamMessageParams struct {
    Data *map[string]interface{} `json:"Data,omitempty"`
}

/*
CreateStreamMessage Method for CreateStreamMessage
Create a new Stream Message.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Stream Message in.
 * @param streamSid The SID of the Sync Stream to create the new Stream Message resource for.
 * @param optional nil or *CreateStreamMessageOpts - Optional Parameters:
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that makes up the Stream Message body. Can be up to 4KB in length.
@return SyncV1ServiceSyncStreamStreamMessage
*/
func (c *DefaultApiService) CreateStreamMessage(serviceSid string, streamSid string, params *CreateStreamMessageParams) (*SyncV1ServiceSyncStreamStreamMessage, error) {
    path := "/v1/Services/{ServiceSid}/Streams/{StreamSid}/Messages"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"StreamSid"+"}", streamSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncStreamStreamMessage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncListParams Optional parameters for the method 'CreateSyncList'
type CreateSyncListParams struct {
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncList Method for CreateSyncList
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Sync List in.
 * @param optional nil or *CreateSyncListOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync List expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - Alias for collection_ttl. If both are provided, this value is ignored.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be unique within its Service and it can be up to 320 characters long. The `unique_name` value can be used as an alternative to the `sid` in the URL path to address the resource.
@return SyncV1ServiceSyncList
*/
func (c *DefaultApiService) CreateSyncList(serviceSid string, params *CreateSyncListParams) (*SyncV1ServiceSyncList, error) {
    path := "/v1/Services/{ServiceSid}/Lists"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncListItemParams Optional parameters for the method 'CreateSyncListItem'
type CreateSyncListItemParams struct {
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
    ItemTtl *int32 `json:"ItemTtl,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
CreateSyncListItem Method for CreateSyncListItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new List Item in.
 * @param listSid The SID of the Sync List to add the new List Item to. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param optional nil or *CreateSyncListItemOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the List Item's parent Sync List expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the List Item stores. Can be up to 16KB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the List Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the List Item does not expire. The List Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncListSyncListItem
*/
func (c *DefaultApiService) CreateSyncListItem(serviceSid string, listSid string, params *CreateSyncListItemParams) (*SyncV1ServiceSyncListSyncListItem, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.ItemTtl != nil {
        data.Set("ItemTtl", string(*params.ItemTtl))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListSyncListItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncMapParams Optional parameters for the method 'CreateSyncMap'
type CreateSyncMapParams struct {
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncMap Method for CreateSyncMap
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Sync Map in.
 * @param optional nil or *CreateSyncMapOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync Map expires (time-to-live) and is deleted. Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync Map does not expire. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `collection_ttl`. If both parameters are provided, this value is ignored.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used as an alternative to the `sid` in the URL path to address the resource.
@return SyncV1ServiceSyncMap
*/
func (c *DefaultApiService) CreateSyncMap(serviceSid string, params *CreateSyncMapParams) (*SyncV1ServiceSyncMap, error) {
    path := "/v1/Services/{ServiceSid}/Maps"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMap{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncMapItemParams Optional parameters for the method 'CreateSyncMapItem'
type CreateSyncMapItemParams struct {
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
    ItemTtl *int32 `json:"ItemTtl,omitempty"`
    Key *string `json:"Key,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
CreateSyncMapItem Method for CreateSyncMapItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Map Item in.
 * @param mapSid The SID of the Sync Map to add the new Map Item to.
 * @param optional nil or *CreateSyncMapItemOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Map Item's parent Sync Map expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync Map does not expire. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16KB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the Map Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Map Item does not expire.  The Map Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Key" (string) - The unique, user-defined key for the Map Item. Can be up to 320 characters long.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) CreateSyncMapItem(serviceSid string, mapSid string, params *CreateSyncMapItemParams) (*SyncV1ServiceSyncMapSyncMapItem, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.ItemTtl != nil {
        data.Set("ItemTtl", string(*params.ItemTtl))
    }
    if params != nil && params.Key != nil {
        data.Set("Key", *params.Key)
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapSyncMapItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncStreamParams Optional parameters for the method 'CreateSyncStream'
type CreateSyncStreamParams struct {
    Ttl *int32 `json:"Ttl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncStream Method for CreateSyncStream
Create a new Stream.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Stream in.
 * @param optional nil or *CreateSyncStreamOpts - Optional Parameters:
 * @param "Ttl" (int32) - How long, in seconds, before the Stream expires and is deleted (time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Stream does not expire. The Stream will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be unique within its Service and it can be up to 320 characters long. The `unique_name` value can be used as an alternative to the `sid` in the URL path to address the resource.
@return SyncV1ServiceSyncStream
*/
func (c *DefaultApiService) CreateSyncStream(serviceSid string, params *CreateSyncStreamParams) (*SyncV1ServiceSyncStream, error) {
    path := "/v1/Services/{ServiceSid}/Streams"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncStream{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// DeleteDocumentParams Optional parameters for the method 'DeleteDocument'
type DeleteDocumentParams struct {
    If-Match *string `json:"If-Match,omitempty"`
}

/*
DeleteDocument Method for DeleteDocument
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resource to delete.
 * @param sid The SID of the Document resource to delete.
 * @param optional nil or *DeleteDocumentOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteDocument(serviceSid string, sid string, params *DeleteDocumentParams) (error) {
    path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteDocumentPermission Method for DeleteDocumentPermission
Delete a specific Sync Document Permission.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resource to delete.
 * @param documentSid The SID of the Sync Document with the Document Permission resource to delete. Can be the Document resource's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Document Permission resource to delete.
*/
func (c *DefaultApiService) DeleteDocumentPermission(serviceSid string, documentSid string, identity string) (error) {
    path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteService Method for DeleteService
 * @param sid The SID of the Service resource to delete.
*/
func (c *DefaultApiService) DeleteService(sid string) (error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncList Method for DeleteSyncList
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resource to delete.
 * @param sid The SID of the Sync List resource to delete.
*/
func (c *DefaultApiService) DeleteSyncList(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Lists/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteSyncListItemParams Optional parameters for the method 'DeleteSyncListItem'
type DeleteSyncListItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
}

/*
DeleteSyncListItem Method for DeleteSyncListItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Item resource to delete.
 * @param listSid The SID of the Sync List with the Sync List Item resource to delete. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param index The index of the Sync List Item resource to delete.
 * @param optional nil or *DeleteSyncListItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteSyncListItem(serviceSid string, listSid string, index int32, params *DeleteSyncListItemParams) (error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Index"+"}", index, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncListPermission Method for DeleteSyncListPermission
Delete a specific Sync List Permission.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resource to delete.
 * @param listSid The SID of the Sync List with the Sync List Permission resource to delete. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Sync List Permission resource to delete.
*/
func (c *DefaultApiService) DeleteSyncListPermission(serviceSid string, listSid string, identity string) (error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncMap Method for DeleteSyncMap
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resource to delete.
 * @param sid The SID of the Sync Map resource to delete.
*/
func (c *DefaultApiService) DeleteSyncMap(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Maps/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteSyncMapItemParams Optional parameters for the method 'DeleteSyncMapItem'
type DeleteSyncMapItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
}

/*
DeleteSyncMapItem Method for DeleteSyncMapItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to delete.
 * @param mapSid The SID of the Sync Map with the Sync Map Item resource to delete. Can be the Sync Map's `sid` or its `unique_name`.
 * @param key The `key` value of the Sync Map Item resource to delete.
 * @param optional nil or *DeleteSyncMapItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteSyncMapItem(serviceSid string, mapSid string, key string, params *DeleteSyncMapItemParams) (error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Key"+"}", key, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncMapPermission Method for DeleteSyncMapPermission
Delete a specific Sync Map Permission.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to delete. Can be the Service's `sid` value or `default`.
 * @param mapSid The SID of the Sync Map with the Sync Map Permission resource to delete. Can be the Sync Map's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to delete.
*/
func (c *DefaultApiService) DeleteSyncMapPermission(serviceSid string, mapSid string, identity string) (error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncStream Method for DeleteSyncStream
Delete a specific Stream.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Stream resource to delete.
 * @param sid The SID of the Stream resource to delete.
*/
func (c *DefaultApiService) DeleteSyncStream(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Streams/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchDocument Method for FetchDocument
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resource to fetch.
 * @param sid The SID of the Document resource to fetch.
@return SyncV1ServiceDocument
*/
func (c *DefaultApiService) FetchDocument(serviceSid string, sid string) (*SyncV1ServiceDocument, error) {
    path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDocumentPermission Method for FetchDocumentPermission
Fetch a specific Sync Document Permission.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resource to fetch.
 * @param documentSid The SID of the Sync Document with the Document Permission resource to fetch. Can be the Document resource's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Document Permission resource to fetch.
@return SyncV1ServiceDocumentDocumentPermission
*/
func (c *DefaultApiService) FetchDocumentPermission(serviceSid string, documentSid string, identity string) (*SyncV1ServiceDocumentDocumentPermission, error) {
    path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceDocumentDocumentPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchService Method for FetchService
 * @param sid The SID of the Service resource to fetch.
@return SyncV1Service
*/
func (c *DefaultApiService) FetchService(sid string) (*SyncV1Service, error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncList Method for FetchSyncList
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resource to fetch.
 * @param sid The SID of the Sync List resource to fetch.
@return SyncV1ServiceSyncList
*/
func (c *DefaultApiService) FetchSyncList(serviceSid string, sid string) (*SyncV1ServiceSyncList, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncListItem Method for FetchSyncListItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Item resource to fetch.
 * @param listSid The SID of the Sync List with the Sync List Item resource to fetch. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param index The index of the Sync List Item resource to fetch.
@return SyncV1ServiceSyncListSyncListItem
*/
func (c *DefaultApiService) FetchSyncListItem(serviceSid string, listSid string, index int32) (*SyncV1ServiceSyncListSyncListItem, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Index"+"}", index, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListSyncListItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncListPermission Method for FetchSyncListPermission
Fetch a specific Sync List Permission.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resource to fetch.
 * @param listSid The SID of the Sync List with the Sync List Permission resource to fetch. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Sync List Permission resource to fetch.
@return SyncV1ServiceSyncListSyncListPermission
*/
func (c *DefaultApiService) FetchSyncListPermission(serviceSid string, listSid string, identity string) (*SyncV1ServiceSyncListSyncListPermission, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListSyncListPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncMap Method for FetchSyncMap
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resource to fetch.
 * @param sid The SID of the Sync Map resource to fetch.
@return SyncV1ServiceSyncMap
*/
func (c *DefaultApiService) FetchSyncMap(serviceSid string, sid string) (*SyncV1ServiceSyncMap, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMap{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncMapItem Method for FetchSyncMapItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to fetch.
 * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map's `sid` or its `unique_name`.
 * @param key The `key` value of the Sync Map Item resource to fetch.
@return SyncV1ServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) FetchSyncMapItem(serviceSid string, mapSid string, key string) (*SyncV1ServiceSyncMapSyncMapItem, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Key"+"}", key, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapSyncMapItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncMapPermission Method for FetchSyncMapPermission
Fetch a specific Sync Map Permission.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to fetch. Can be the Service's `sid` value or `default`.
 * @param mapSid The SID of the Sync Map with the Sync Map Permission resource to fetch. Can be the Sync Map's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to fetch.
@return SyncV1ServiceSyncMapSyncMapPermission
*/
func (c *DefaultApiService) FetchSyncMapPermission(serviceSid string, mapSid string, identity string) (*SyncV1ServiceSyncMapSyncMapPermission, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapSyncMapPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncStream Method for FetchSyncStream
Fetch a specific Stream.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Stream resource to fetch.
 * @param sid The SID of the Stream resource to fetch.
@return SyncV1ServiceSyncStream
*/
func (c *DefaultApiService) FetchSyncStream(serviceSid string, sid string) (*SyncV1ServiceSyncStream, error) {
    path := "/v1/Services/{ServiceSid}/Streams/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncStream{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDocumentParams Optional parameters for the method 'ListDocument'
type ListDocumentParams struct {
    HideExpired *string `json:"HideExpired,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDocument Method for ListDocument
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resources to read.
 * @param optional nil or *ListDocumentOpts - Optional Parameters:
 * @param "HideExpired" (string) - The default list of Sync Documents will show both active and expired items. It is possible to filter only the active ones by hiding the expired ones.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceDocumentReadResponse
*/
func (c *DefaultApiService) ListDocument(serviceSid string, params *ListDocumentParams) (*SyncV1ServiceDocumentReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Documents"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.HideExpired != nil {
        data.Set("HideExpired", *params.HideExpired)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceDocumentReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDocumentPermissionParams Optional parameters for the method 'ListDocumentPermission'
type ListDocumentPermissionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDocumentPermission Method for ListDocumentPermission
Retrieve a list of all Permissions applying to a Sync Document.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resources to read.
 * @param documentSid The SID of the Sync Document with the Document Permission resources to read. Can be the Document resource's `sid` or its `unique_name`.
 * @param optional nil or *ListDocumentPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceDocumentDocumentPermissionReadResponse
*/
func (c *DefaultApiService) ListDocumentPermission(serviceSid string, documentSid string, params *ListDocumentPermissionParams) (*SyncV1ServiceDocumentDocumentPermissionReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceDocumentDocumentPermissionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceReadResponse
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*SyncV1ServiceReadResponse, error) {
    path := "/v1/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncListParams Optional parameters for the method 'ListSyncList'
type ListSyncListParams struct {
    HideExpired *string `json:"HideExpired,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncList Method for ListSyncList
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resources to read.
 * @param optional nil or *ListSyncListOpts - Optional Parameters:
 * @param "HideExpired" (string) - The default list of Sync Lists will show both active and expired items. It is possible to filter only the active ones by hiding the expired ones.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceSyncListReadResponse
*/
func (c *DefaultApiService) ListSyncList(serviceSid string, params *ListSyncListParams) (*SyncV1ServiceSyncListReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Lists"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.HideExpired != nil {
        data.Set("HideExpired", *params.HideExpired)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncListItemParams Optional parameters for the method 'ListSyncListItem'
type ListSyncListItemParams struct {
    Order *string `json:"Order,omitempty"`
    From *string `json:"From,omitempty"`
    Bounds *string `json:"Bounds,omitempty"`
    HideExpired *string `json:"HideExpired,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncListItem Method for ListSyncListItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the List Item resources to read.
 * @param listSid The SID of the Sync List with the List Items to read. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncListItemOpts - Optional Parameters:
 * @param "Order" (string) - How to order the List Items returned by their `index` value. Can be: `asc` (ascending) or `desc` (descending) and the default is ascending.
 * @param "From" (string) - The `index` of the first Sync List Item resource to read. See also `bounds`.
 * @param "Bounds" (string) - Whether to include the List Item referenced by the `from` parameter. Can be: `inclusive` to include the List Item referenced by the `from` parameter or `exclusive` to start with the next List Item. The default value is `inclusive`.
 * @param "HideExpired" (string) - The default list of Sync List items will show both active and expired items. It is possible to filter only the active ones by hiding the expired ones.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceSyncListSyncListItemReadResponse
*/
func (c *DefaultApiService) ListSyncListItem(serviceSid string, listSid string, params *ListSyncListItemParams) (*SyncV1ServiceSyncListSyncListItemReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Order != nil {
        data.Set("Order", *params.Order)
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.Bounds != nil {
        data.Set("Bounds", *params.Bounds)
    }
    if params != nil && params.HideExpired != nil {
        data.Set("HideExpired", *params.HideExpired)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListSyncListItemReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncListPermissionParams Optional parameters for the method 'ListSyncListPermission'
type ListSyncListPermissionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncListPermission Method for ListSyncListPermission
Retrieve a list of all Permissions applying to a Sync List.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resources to read.
 * @param listSid The SID of the Sync List with the Sync List Permission resources to read. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncListPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceSyncListSyncListPermissionReadResponse
*/
func (c *DefaultApiService) ListSyncListPermission(serviceSid string, listSid string, params *ListSyncListPermissionParams) (*SyncV1ServiceSyncListSyncListPermissionReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListSyncListPermissionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncMapParams Optional parameters for the method 'ListSyncMap'
type ListSyncMapParams struct {
    HideExpired *string `json:"HideExpired,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMap Method for ListSyncMap
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resources to read.
 * @param optional nil or *ListSyncMapOpts - Optional Parameters:
 * @param "HideExpired" (string) - The default list of Sync Maps will show both active and expired items. It is possible to filter only the active ones by hiding the expired ones.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceSyncMapReadResponse
*/
func (c *DefaultApiService) ListSyncMap(serviceSid string, params *ListSyncMapParams) (*SyncV1ServiceSyncMapReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Maps"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.HideExpired != nil {
        data.Set("HideExpired", *params.HideExpired)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncMapItemParams Optional parameters for the method 'ListSyncMapItem'
type ListSyncMapItemParams struct {
    Order *string `json:"Order,omitempty"`
    From *string `json:"From,omitempty"`
    Bounds *string `json:"Bounds,omitempty"`
    HideExpired *string `json:"HideExpired,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMapItem Method for ListSyncMapItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Map Item resources to read.
 * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncMapItemOpts - Optional Parameters:
 * @param "Order" (string) - How to order the Map Items returned by their `key` value. Can be: `asc` (ascending) or `desc` (descending) and the default is ascending. Map Items are [ordered lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) by Item key.
 * @param "From" (string) - The `key` of the first Sync Map Item resource to read. See also `bounds`.
 * @param "Bounds" (string) - Whether to include the Map Item referenced by the `from` parameter. Can be: `inclusive` to include the Map Item referenced by the `from` parameter or `exclusive` to start with the next Map Item. The default value is `inclusive`.
 * @param "HideExpired" (string) - The default list of Sync Map items will show both active and expired items. It is possible to filter only the active ones by hiding the expired ones.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceSyncMapSyncMapItemReadResponse
*/
func (c *DefaultApiService) ListSyncMapItem(serviceSid string, mapSid string, params *ListSyncMapItemParams) (*SyncV1ServiceSyncMapSyncMapItemReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Order != nil {
        data.Set("Order", *params.Order)
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.Bounds != nil {
        data.Set("Bounds", *params.Bounds)
    }
    if params != nil && params.HideExpired != nil {
        data.Set("HideExpired", *params.HideExpired)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapSyncMapItemReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncMapPermissionParams Optional parameters for the method 'ListSyncMapPermission'
type ListSyncMapPermissionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMapPermission Method for ListSyncMapPermission
Retrieve a list of all Permissions applying to a Sync Map.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resources to read. Can be the Service's `sid` value or `default`.
 * @param mapSid The SID of the Sync Map with the Permission resources to read. Can be the Sync Map's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncMapPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceSyncMapSyncMapPermissionReadResponse
*/
func (c *DefaultApiService) ListSyncMapPermission(serviceSid string, mapSid string, params *ListSyncMapPermissionParams) (*SyncV1ServiceSyncMapSyncMapPermissionReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapSyncMapPermissionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncStreamParams Optional parameters for the method 'ListSyncStream'
type ListSyncStreamParams struct {
    HideExpired *string `json:"HideExpired,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncStream Method for ListSyncStream
Retrieve a list of all Streams in a Service Instance.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Stream resources to read.
 * @param optional nil or *ListSyncStreamOpts - Optional Parameters:
 * @param "HideExpired" (string) - The default list of Sync Streams will show both active and expired items. It is possible to filter only the active ones by hiding the expired ones.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return SyncV1ServiceSyncStreamReadResponse
*/
func (c *DefaultApiService) ListSyncStream(serviceSid string, params *ListSyncStreamParams) (*SyncV1ServiceSyncStreamReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Streams"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.HideExpired != nil {
        data.Set("HideExpired", *params.HideExpired)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncStreamReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDocumentParams Optional parameters for the method 'UpdateDocument'
type UpdateDocumentParams struct {
    If-Match *string `json:"If-Match,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateDocument Method for UpdateDocument
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resource to update.
 * @param sid The SID of the Document resource to update.
 * @param optional nil or *UpdateDocumentOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Sync Document stores. Can be up to 16KB in length.
 * @param "Ttl" (int32) - How long, in seconds, before the Sync Document expires and is deleted (time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Document resource does not expire. The Document resource will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
@return SyncV1ServiceDocument
*/
func (c *DefaultApiService) UpdateDocument(serviceSid string, sid string, params *UpdateDocumentParams) (*SyncV1ServiceDocument, error) {
    path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }

    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDocumentPermissionParams Optional parameters for the method 'UpdateDocumentPermission'
type UpdateDocumentPermissionParams struct {
    Manage *bool `json:"Manage,omitempty"`
    Read *bool `json:"Read,omitempty"`
    Write *bool `json:"Write,omitempty"`
}

/*
UpdateDocumentPermission Method for UpdateDocumentPermission
Update an identity&#39;s access to a specific Sync Document.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resource to update.
 * @param documentSid The SID of the Sync Document with the Document Permission resource to update. Can be the Document resource's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Document Permission resource to update.
 * @param optional nil or *UpdateDocumentPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Whether the identity can delete the Sync Document. Default value is `false`.
 * @param "Read" (bool) - Whether the identity can read the Sync Document. Default value is `false`.
 * @param "Write" (bool) - Whether the identity can update the Sync Document. Default value is `false`.
@return SyncV1ServiceDocumentDocumentPermission
*/
func (c *DefaultApiService) UpdateDocumentPermission(serviceSid string, documentSid string, identity string, params *UpdateDocumentPermissionParams) (*SyncV1ServiceDocumentDocumentPermission, error) {
    path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Manage != nil {
        data.Set("Manage", string(*params.Manage))
    }
    if params != nil && params.Read != nil {
        data.Set("Read", string(*params.Read))
    }
    if params != nil && params.Write != nil {
        data.Set("Write", string(*params.Write))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceDocumentDocumentPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
    AclEnabled *bool `json:"AclEnabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    ReachabilityDebouncingEnabled *bool `json:"ReachabilityDebouncingEnabled,omitempty"`
    ReachabilityDebouncingWindow *int32 `json:"ReachabilityDebouncingWindow,omitempty"`
    ReachabilityWebhooksEnabled *bool `json:"ReachabilityWebhooksEnabled,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
    WebhooksFromRestEnabled *bool `json:"WebhooksFromRestEnabled,omitempty"`
}

/*
UpdateService Method for UpdateService
 * @param sid The SID of the Service resource to update.
 * @param optional nil or *UpdateServiceOpts - Optional Parameters:
 * @param "AclEnabled" (bool) - Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource.
 * @param "FriendlyName" (string) - A string that you assign to describe the resource.
 * @param "ReachabilityDebouncingEnabled" (bool) - Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event.
 * @param "ReachabilityDebouncingWindow" (int32) - The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before the webhook is called if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the webhook from being called.
 * @param "ReachabilityWebhooksEnabled" (bool) - Whether the service instance should call `webhook_url` when client endpoints connect to Sync. The default is `false`.
 * @param "WebhookUrl" (string) - The URL we should call when Sync objects are manipulated.
 * @param "WebhooksFromRestEnabled" (bool) - Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`.
@return SyncV1Service
*/
func (c *DefaultApiService) UpdateService(sid string, params *UpdateServiceParams) (*SyncV1Service, error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AclEnabled != nil {
        data.Set("AclEnabled", string(*params.AclEnabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.ReachabilityDebouncingEnabled != nil {
        data.Set("ReachabilityDebouncingEnabled", string(*params.ReachabilityDebouncingEnabled))
    }
    if params != nil && params.ReachabilityDebouncingWindow != nil {
        data.Set("ReachabilityDebouncingWindow", string(*params.ReachabilityDebouncingWindow))
    }
    if params != nil && params.ReachabilityWebhooksEnabled != nil {
        data.Set("ReachabilityWebhooksEnabled", string(*params.ReachabilityWebhooksEnabled))
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }
    if params != nil && params.WebhooksFromRestEnabled != nil {
        data.Set("WebhooksFromRestEnabled", string(*params.WebhooksFromRestEnabled))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncListParams Optional parameters for the method 'UpdateSyncList'
type UpdateSyncListParams struct {
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncList Method for UpdateSyncList
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resource to update.
 * @param sid The SID of the Sync List resource to update.
 * @param optional nil or *UpdateSyncListOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync List expires (time-to-live) and is deleted. Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `collection_ttl`. If both are provided, this value is ignored.
@return SyncV1ServiceSyncList
*/
func (c *DefaultApiService) UpdateSyncList(serviceSid string, sid string, params *UpdateSyncListParams) (*SyncV1ServiceSyncList, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncListItemParams Optional parameters for the method 'UpdateSyncListItem'
type UpdateSyncListItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
    ItemTtl *int32 `json:"ItemTtl,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncListItem Method for UpdateSyncListItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Item resource to update.
 * @param listSid The SID of the Sync List with the Sync List Item resource to update. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param index The index of the Sync List Item resource to update.
 * @param optional nil or *UpdateSyncListItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
 * @param "CollectionTtl" (int32) - How long, in seconds, before the List Item's parent Sync List expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the List Item stores. Can be up to 16KB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the List Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the List Item does not expire. The List Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncListSyncListItem
*/
func (c *DefaultApiService) UpdateSyncListItem(serviceSid string, listSid string, index int32, params *UpdateSyncListItemParams) (*SyncV1ServiceSyncListSyncListItem, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Index"+"}", index, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.ItemTtl != nil {
        data.Set("ItemTtl", string(*params.ItemTtl))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }

    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListSyncListItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncListPermissionParams Optional parameters for the method 'UpdateSyncListPermission'
type UpdateSyncListPermissionParams struct {
    Manage *bool `json:"Manage,omitempty"`
    Read *bool `json:"Read,omitempty"`
    Write *bool `json:"Write,omitempty"`
}

/*
UpdateSyncListPermission Method for UpdateSyncListPermission
Update an identity&#39;s access to a specific Sync List.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resource to update.
 * @param listSid The SID of the Sync List with the Sync List Permission resource to update. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Sync List Permission resource to update.
 * @param optional nil or *UpdateSyncListPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Whether the identity can delete the Sync List. Default value is `false`.
 * @param "Read" (bool) - Whether the identity can read the Sync List and its Items. Default value is `false`.
 * @param "Write" (bool) - Whether the identity can create, update, and delete Items in the Sync List. Default value is `false`.
@return SyncV1ServiceSyncListSyncListPermission
*/
func (c *DefaultApiService) UpdateSyncListPermission(serviceSid string, listSid string, identity string, params *UpdateSyncListPermissionParams) (*SyncV1ServiceSyncListSyncListPermission, error) {
    path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Manage != nil {
        data.Set("Manage", string(*params.Manage))
    }
    if params != nil && params.Read != nil {
        data.Set("Read", string(*params.Read))
    }
    if params != nil && params.Write != nil {
        data.Set("Write", string(*params.Write))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncListSyncListPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncMapParams Optional parameters for the method 'UpdateSyncMap'
type UpdateSyncMapParams struct {
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncMap Method for UpdateSyncMap
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resource to update.
 * @param sid The SID of the Sync Map resource to update.
 * @param optional nil or *UpdateSyncMapOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync Map expires (time-to-live) and is deleted. Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync Map does not expire. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `collection_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncMap
*/
func (c *DefaultApiService) UpdateSyncMap(serviceSid string, sid string, params *UpdateSyncMapParams) (*SyncV1ServiceSyncMap, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMap{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncMapItemParams Optional parameters for the method 'UpdateSyncMapItem'
type UpdateSyncMapItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
    CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
    ItemTtl *int32 `json:"ItemTtl,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncMapItem Method for UpdateSyncMapItem
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to update.
 * @param mapSid The SID of the Sync Map with the Sync Map Item resource to update. Can be the Sync Map's `sid` or its `unique_name`.
 * @param key The `key` value of the Sync Map Item resource to update. 
 * @param optional nil or *UpdateSyncMapItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Map Item's parent Sync Map expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync Map does not expire. This parameter can only be used when the Map Item's `data` or `ttl` is updated in the same request. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16KB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the Map Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Map Item does not expire. The Map Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) UpdateSyncMapItem(serviceSid string, mapSid string, key string, params *UpdateSyncMapItemParams) (*SyncV1ServiceSyncMapSyncMapItem, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Key"+"}", key, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.CollectionTtl != nil {
        data.Set("CollectionTtl", string(*params.CollectionTtl))
    }
    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.ItemTtl != nil {
        data.Set("ItemTtl", string(*params.ItemTtl))
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }

    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapSyncMapItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncMapPermissionParams Optional parameters for the method 'UpdateSyncMapPermission'
type UpdateSyncMapPermissionParams struct {
    Manage *bool `json:"Manage,omitempty"`
    Read *bool `json:"Read,omitempty"`
    Write *bool `json:"Write,omitempty"`
}

/*
UpdateSyncMapPermission Method for UpdateSyncMapPermission
Update an identity&#39;s access to a specific Sync Map.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to update. Can be the Service's `sid` value or `default`.
 * @param mapSid The SID of the Sync Map with the Sync Map Permission resource to update. Can be the Sync Map's `sid` or its `unique_name`.
 * @param identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to update.
 * @param optional nil or *UpdateSyncMapPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Whether the identity can delete the Sync Map. Default value is `false`.
 * @param "Read" (bool) - Whether the identity can read the Sync Map and its Items. Default value is `false`.
 * @param "Write" (bool) - Whether the identity can create, update, and delete Items in the Sync Map. Default value is `false`.
@return SyncV1ServiceSyncMapSyncMapPermission
*/
func (c *DefaultApiService) UpdateSyncMapPermission(serviceSid string, mapSid string, identity string, params *UpdateSyncMapPermissionParams) (*SyncV1ServiceSyncMapSyncMapPermission, error) {
    path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Manage != nil {
        data.Set("Manage", string(*params.Manage))
    }
    if params != nil && params.Read != nil {
        data.Set("Read", string(*params.Read))
    }
    if params != nil && params.Write != nil {
        data.Set("Write", string(*params.Write))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncMapSyncMapPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncStreamParams Optional parameters for the method 'UpdateSyncStream'
type UpdateSyncStreamParams struct {
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncStream Method for UpdateSyncStream
Update a specific Stream.
 * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Stream resource to update.
 * @param sid The SID of the Stream resource to update.
 * @param optional nil or *UpdateSyncStreamOpts - Optional Parameters:
 * @param "Ttl" (int32) - How long, in seconds, before the Stream expires and is deleted (time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Stream does not expire. The Stream will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
@return SyncV1ServiceSyncStream
*/
func (c *DefaultApiService) UpdateSyncStream(serviceSid string, sid string, params *UpdateSyncStreamParams) (*SyncV1ServiceSyncStream, error) {
    path := "/v1/Services/{ServiceSid}/Streams/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &SyncV1ServiceSyncStream{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
