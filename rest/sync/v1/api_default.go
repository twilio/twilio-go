/*
 * Twilio - Sync
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.8.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService {
		client: client,
		baseURL: fmt.Sprintf("https://sync.twilio.com"),
	}
}
// CreateDocumentParams Optional parameters for the method 'CreateDocument'
type CreateDocumentParams struct {
	Data *map[string]interface{} `json:"Data,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateDocument Method for CreateDocument
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Document resource in.
 * @param optional nil or *CreateDocumentOpts - Optional Parameters:
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Sync Document stores. Can be up to 16 KiB in length.
 * @param "Ttl" (int32) - How long, in seconds, before the Sync Document expires and is deleted (the Sync Document's time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync Document does not expire. The Sync Document will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the Sync Document
@return SyncV1ServiceDocument
*/
func (c *DefaultApiService) CreateDocument(ServiceSid string, params *CreateDocumentParams) (*SyncV1ServiceDocument, error) {
	path := "/v1/Services/{ServiceSid}/Documents"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", fmt.Sprint(v))
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceDocument{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
	AclEnabled *bool `json:"AclEnabled,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	ReachabilityDebouncingEnabled *bool `json:"ReachabilityDebouncingEnabled,omitempty"`
	ReachabilityDebouncingWindow *int32 `json:"ReachabilityDebouncingWindow,omitempty"`
	ReachabilityWebhooksEnabled *bool `json:"ReachabilityWebhooksEnabled,omitempty"`
	WebhookUrl *string `json:"WebhookUrl,omitempty"`
	WebhooksFromRestEnabled *bool `json:"WebhooksFromRestEnabled,omitempty"`
}

/*
CreateService Method for CreateService
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "AclEnabled" (bool) - Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource.
 * @param "FriendlyName" (string) - A string that you assign to describe the resource.
 * @param "ReachabilityDebouncingEnabled" (bool) - Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event.
 * @param "ReachabilityDebouncingWindow" (int32) - The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before the `webhook_url` is called if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the call to `webhook_url`.
 * @param "ReachabilityWebhooksEnabled" (bool) - Whether the service instance should call `webhook_url` when client endpoints connect to Sync. The default is `false`.
 * @param "WebhookUrl" (string) - The URL we should call when Sync objects are manipulated.
 * @param "WebhooksFromRestEnabled" (bool) - Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`.
@return SyncV1Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*SyncV1Service, error) {
	path := "/v1/Services"


	data := url.Values{}
	headers := 0

	if params != nil && params.AclEnabled != nil {
		data.Set("AclEnabled", fmt.Sprint(*params.AclEnabled)) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.ReachabilityDebouncingEnabled != nil {
		data.Set("ReachabilityDebouncingEnabled", fmt.Sprint(*params.ReachabilityDebouncingEnabled)) 
	}
	if params != nil && params.ReachabilityDebouncingWindow != nil {
		data.Set("ReachabilityDebouncingWindow", fmt.Sprint(*params.ReachabilityDebouncingWindow)) 
	}
	if params != nil && params.ReachabilityWebhooksEnabled != nil {
		data.Set("ReachabilityWebhooksEnabled", fmt.Sprint(*params.ReachabilityWebhooksEnabled)) 
	}
	if params != nil && params.WebhookUrl != nil {
		data.Set("WebhookUrl", *params.WebhookUrl) 
	}
	if params != nil && params.WebhooksFromRestEnabled != nil {
		data.Set("WebhooksFromRestEnabled", fmt.Sprint(*params.WebhooksFromRestEnabled)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateStreamMessageParams Optional parameters for the method 'CreateStreamMessage'
type CreateStreamMessageParams struct {
	Data *map[string]interface{} `json:"Data,omitempty"`
}

/*
CreateStreamMessage Method for CreateStreamMessage
Create a new Stream Message.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Stream Message in.
 * @param StreamSid The SID of the Sync Stream to create the new Stream Message resource for.
 * @param optional nil or *CreateStreamMessageOpts - Optional Parameters:
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that makes up the Stream Message body. Can be up to 4 KiB in length.
@return SyncV1ServiceSyncStreamStreamMessage
*/
func (c *DefaultApiService) CreateStreamMessage(ServiceSid string, StreamSid string, params *CreateStreamMessageParams) (*SyncV1ServiceSyncStreamStreamMessage, error) {
	path := "/v1/Services/{ServiceSid}/Streams/{StreamSid}/Messages"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"StreamSid"+"}", StreamSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", fmt.Sprint(v))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncStreamStreamMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateSyncListParams Optional parameters for the method 'CreateSyncList'
type CreateSyncListParams struct {
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncList Method for CreateSyncList
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Sync List in.
 * @param optional nil or *CreateSyncListOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync List expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - Alias for collection_ttl. If both are provided, this value is ignored.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be unique within its Service and it can be up to 320 characters long. The `unique_name` value can be used as an alternative to the `sid` in the URL path to address the resource.
@return SyncV1ServiceSyncList
*/
func (c *DefaultApiService) CreateSyncList(ServiceSid string, params *CreateSyncListParams) (*SyncV1ServiceSyncList, error) {
	path := "/v1/Services/{ServiceSid}/Lists"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateSyncListItemParams Optional parameters for the method 'CreateSyncListItem'
type CreateSyncListItemParams struct {
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Data *map[string]interface{} `json:"Data,omitempty"`
	ItemTtl *int32 `json:"ItemTtl,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
CreateSyncListItem Method for CreateSyncListItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new List Item in.
 * @param ListSid The SID of the Sync List to add the new List Item to. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param optional nil or *CreateSyncListItemOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the List Item's parent Sync List expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the List Item stores. Can be up to 16 KiB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the List Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the List Item does not expire. The List Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncListSyncListItem
*/
func (c *DefaultApiService) CreateSyncListItem(ServiceSid string, ListSid string, params *CreateSyncListItemParams) (*SyncV1ServiceSyncListSyncListItem, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", fmt.Sprint(v))
	}
	if params != nil && params.ItemTtl != nil {
		data.Set("ItemTtl", fmt.Sprint(*params.ItemTtl)) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncListSyncListItem{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateSyncMapParams Optional parameters for the method 'CreateSyncMap'
type CreateSyncMapParams struct {
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncMap Method for CreateSyncMap
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Sync Map in.
 * @param optional nil or *CreateSyncMapOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync Map expires (time-to-live) and is deleted. Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync Map does not expire. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `collection_ttl`. If both parameters are provided, this value is ignored.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used as an alternative to the `sid` in the URL path to address the resource.
@return SyncV1ServiceSyncMap
*/
func (c *DefaultApiService) CreateSyncMap(ServiceSid string, params *CreateSyncMapParams) (*SyncV1ServiceSyncMap, error) {
	path := "/v1/Services/{ServiceSid}/Maps"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMap{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateSyncMapItemParams Optional parameters for the method 'CreateSyncMapItem'
type CreateSyncMapItemParams struct {
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Data *map[string]interface{} `json:"Data,omitempty"`
	ItemTtl *int32 `json:"ItemTtl,omitempty"`
	Key *string `json:"Key,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
CreateSyncMapItem Method for CreateSyncMapItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Map Item in.
 * @param MapSid The SID of the Sync Map to add the new Map Item to. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param optional nil or *CreateSyncMapItemOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Map Item's parent Sync Map expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync Map does not expire. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the Map Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Map Item does not expire.  The Map Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Key" (string) - The unique, user-defined key for the Map Item. Can be up to 320 characters long.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) CreateSyncMapItem(ServiceSid string, MapSid string, params *CreateSyncMapItemParams) (*SyncV1ServiceSyncMapSyncMapItem, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", fmt.Sprint(v))
	}
	if params != nil && params.ItemTtl != nil {
		data.Set("ItemTtl", fmt.Sprint(*params.ItemTtl)) 
	}
	if params != nil && params.Key != nil {
		data.Set("Key", *params.Key) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMapSyncMapItem{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateSyncStreamParams Optional parameters for the method 'CreateSyncStream'
type CreateSyncStreamParams struct {
	Ttl *int32 `json:"Ttl,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncStream Method for CreateSyncStream
Create a new Stream.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Stream in.
 * @param optional nil or *CreateSyncStreamOpts - Optional Parameters:
 * @param "Ttl" (int32) - How long, in seconds, before the Stream expires and is deleted (time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Stream does not expire. The Stream will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be unique within its Service and it can be up to 320 characters long. The `unique_name` value can be used as an alternative to the `sid` in the URL path to address the resource.
@return SyncV1ServiceSyncStream
*/
func (c *DefaultApiService) CreateSyncStream(ServiceSid string, params *CreateSyncStreamParams) (*SyncV1ServiceSyncStream, error) {
	path := "/v1/Services/{ServiceSid}/Streams"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncStream{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// DeleteDocumentParams Optional parameters for the method 'DeleteDocument'
type DeleteDocumentParams struct {
	IfMatch *string `json:"If-Match,omitempty"`
}

/*
DeleteDocument Method for DeleteDocument
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resource to delete.
 * @param Sid The SID of the Document resource to delete. Can be the Document resource's `sid` or its `unique_name`.
 * @param optional nil or *DeleteDocumentOpts - Optional Parameters:
 * @param "IfMatch" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteDocument(ServiceSid string, Sid string, params *DeleteDocumentParams) (error) {
	path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.IfMatch != nil {
		headers["IfMatch"] = *params.IfMatch
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteDocumentPermission Method for DeleteDocumentPermission
Delete a specific Sync Document Permission.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resource to delete.
 * @param DocumentSid The SID of the Sync Document with the Document Permission resource to delete. Can be the Document resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Document Permission resource to delete.
*/
func (c *DefaultApiService) DeleteDocumentPermission(ServiceSid string, DocumentSid string, Identity string) (error) {
	path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"DocumentSid"+"}", DocumentSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteService Method for DeleteService
 * @param Sid The SID of the Service resource to delete.
*/
func (c *DefaultApiService) DeleteService(Sid string) (error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteSyncList Method for DeleteSyncList
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resource to delete.
 * @param Sid The SID of the Sync List resource to delete. Can be the Sync List resource's `sid` or its `unique_name`.
*/
func (c *DefaultApiService) DeleteSyncList(ServiceSid string, Sid string) (error) {
	path := "/v1/Services/{ServiceSid}/Lists/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteSyncListItemParams Optional parameters for the method 'DeleteSyncListItem'
type DeleteSyncListItemParams struct {
	IfMatch *string `json:"If-Match,omitempty"`
}

/*
DeleteSyncListItem Method for DeleteSyncListItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Item resource to delete.
 * @param ListSid The SID of the Sync List with the Sync List Item resource to delete. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param Index The index of the Sync List Item resource to delete.
 * @param optional nil or *DeleteSyncListItemOpts - Optional Parameters:
 * @param "IfMatch" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteSyncListItem(ServiceSid string, ListSid string, Index int32, params *DeleteSyncListItemParams) (error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)
	path = strings.Replace(path, "{"+"Index"+"}", fmt.Sprint(Index), -1)


	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.IfMatch != nil {
		headers["IfMatch"] = *params.IfMatch
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteSyncListPermission Method for DeleteSyncListPermission
Delete a specific Sync List Permission.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resource to delete.
 * @param ListSid The SID of the Sync List with the Sync List Permission resource to delete. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Sync List Permission resource to delete.
*/
func (c *DefaultApiService) DeleteSyncListPermission(ServiceSid string, ListSid string, Identity string) (error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteSyncMap Method for DeleteSyncMap
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resource to delete.
 * @param Sid The SID of the Sync Map resource to delete. Can be the Sync Map's `sid` or its `unique_name`.
*/
func (c *DefaultApiService) DeleteSyncMap(ServiceSid string, Sid string) (error) {
	path := "/v1/Services/{ServiceSid}/Maps/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteSyncMapItemParams Optional parameters for the method 'DeleteSyncMapItem'
type DeleteSyncMapItemParams struct {
	IfMatch *string `json:"If-Match,omitempty"`
}

/*
DeleteSyncMapItem Method for DeleteSyncMapItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to delete.
 * @param MapSid The SID of the Sync Map with the Sync Map Item resource to delete. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param Key The `key` value of the Sync Map Item resource to delete.
 * @param optional nil or *DeleteSyncMapItemOpts - Optional Parameters:
 * @param "IfMatch" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteSyncMapItem(ServiceSid string, MapSid string, Key string, params *DeleteSyncMapItemParams) (error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)
	path = strings.Replace(path, "{"+"Key"+"}", Key, -1)


	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.IfMatch != nil {
		headers["IfMatch"] = *params.IfMatch
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteSyncMapPermission Method for DeleteSyncMapPermission
Delete a specific Sync Map Permission.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to delete. Can be the Service's `sid` value or `default`.
 * @param MapSid The SID of the Sync Map with the Sync Map Permission resource to delete. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to delete.
*/
func (c *DefaultApiService) DeleteSyncMapPermission(ServiceSid string, MapSid string, Identity string) (error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteSyncStream Method for DeleteSyncStream
Delete a specific Stream.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Stream resource to delete.
 * @param Sid The SID of the Stream resource to delete.
*/
func (c *DefaultApiService) DeleteSyncStream(ServiceSid string, Sid string) (error) {
	path := "/v1/Services/{ServiceSid}/Streams/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
FetchDocument Method for FetchDocument
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resource to fetch.
 * @param Sid The SID of the Document resource to fetch. Can be the Document resource's `sid` or its `unique_name`.
@return SyncV1ServiceDocument
*/
func (c *DefaultApiService) FetchDocument(ServiceSid string, Sid string) (*SyncV1ServiceDocument, error) {
	path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceDocument{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchDocumentPermission Method for FetchDocumentPermission
Fetch a specific Sync Document Permission.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resource to fetch.
 * @param DocumentSid The SID of the Sync Document with the Document Permission resource to fetch. Can be the Document resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Document Permission resource to fetch.
@return SyncV1ServiceDocumentDocumentPermission
*/
func (c *DefaultApiService) FetchDocumentPermission(ServiceSid string, DocumentSid string, Identity string) (*SyncV1ServiceDocumentDocumentPermission, error) {
	path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"DocumentSid"+"}", DocumentSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceDocumentDocumentPermission{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchService Method for FetchService
 * @param Sid The SID of the Service resource to fetch.
@return SyncV1Service
*/
func (c *DefaultApiService) FetchService(Sid string) (*SyncV1Service, error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchSyncList Method for FetchSyncList
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resource to fetch.
 * @param Sid The SID of the Sync List resource to fetch. Can be the Sync List resource's `sid` or its `unique_name`.
@return SyncV1ServiceSyncList
*/
func (c *DefaultApiService) FetchSyncList(ServiceSid string, Sid string) (*SyncV1ServiceSyncList, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchSyncListItem Method for FetchSyncListItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Item resource to fetch.
 * @param ListSid The SID of the Sync List with the Sync List Item resource to fetch. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param Index The index of the Sync List Item resource to fetch.
@return SyncV1ServiceSyncListSyncListItem
*/
func (c *DefaultApiService) FetchSyncListItem(ServiceSid string, ListSid string, Index int32) (*SyncV1ServiceSyncListSyncListItem, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)
	path = strings.Replace(path, "{"+"Index"+"}", fmt.Sprint(Index), -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncListSyncListItem{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchSyncListPermission Method for FetchSyncListPermission
Fetch a specific Sync List Permission.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resource to fetch.
 * @param ListSid The SID of the Sync List with the Sync List Permission resource to fetch. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Sync List Permission resource to fetch.
@return SyncV1ServiceSyncListSyncListPermission
*/
func (c *DefaultApiService) FetchSyncListPermission(ServiceSid string, ListSid string, Identity string) (*SyncV1ServiceSyncListSyncListPermission, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncListSyncListPermission{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchSyncMap Method for FetchSyncMap
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resource to fetch.
 * @param Sid The SID of the Sync Map resource to fetch. Can be the Sync Map's `sid` or its `unique_name`.
@return SyncV1ServiceSyncMap
*/
func (c *DefaultApiService) FetchSyncMap(ServiceSid string, Sid string) (*SyncV1ServiceSyncMap, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMap{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchSyncMapItem Method for FetchSyncMapItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to fetch.
 * @param MapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param Key The `key` value of the Sync Map Item resource to fetch.
@return SyncV1ServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) FetchSyncMapItem(ServiceSid string, MapSid string, Key string) (*SyncV1ServiceSyncMapSyncMapItem, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)
	path = strings.Replace(path, "{"+"Key"+"}", Key, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMapSyncMapItem{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchSyncMapPermission Method for FetchSyncMapPermission
Fetch a specific Sync Map Permission.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to fetch. Can be the Service's `sid` value or `default`.
 * @param MapSid The SID of the Sync Map with the Sync Map Permission resource to fetch. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to fetch.
@return SyncV1ServiceSyncMapSyncMapPermission
*/
func (c *DefaultApiService) FetchSyncMapPermission(ServiceSid string, MapSid string, Identity string) (*SyncV1ServiceSyncMapSyncMapPermission, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMapSyncMapPermission{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchSyncStream Method for FetchSyncStream
Fetch a specific Stream.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Stream resource to fetch.
 * @param Sid The SID of the Stream resource to fetch.
@return SyncV1ServiceSyncStream
*/
func (c *DefaultApiService) FetchSyncStream(ServiceSid string, Sid string) (*SyncV1ServiceSyncStream, error) {
	path := "/v1/Services/{ServiceSid}/Streams/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncStream{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListDocumentParams Optional parameters for the method 'ListDocument'
type ListDocumentParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDocument Method for ListDocument
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resources to read.
 * @param optional nil or *ListDocumentOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListDocumentResponse
*/
func (c *DefaultApiService) ListDocument(ServiceSid string, params *ListDocumentParams) (*ListDocumentResponse, error) {
	path := "/v1/Services/{ServiceSid}/Documents"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListDocumentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListDocumentPermissionParams Optional parameters for the method 'ListDocumentPermission'
type ListDocumentPermissionParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDocumentPermission Method for ListDocumentPermission
Retrieve a list of all Permissions applying to a Sync Document.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resources to read.
 * @param DocumentSid The SID of the Sync Document with the Document Permission resources to read. Can be the Document resource's `sid` or its `unique_name`.
 * @param optional nil or *ListDocumentPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListDocumentPermissionResponse
*/
func (c *DefaultApiService) ListDocumentPermission(ServiceSid string, DocumentSid string, params *ListDocumentPermissionParams) (*ListDocumentPermissionResponse, error) {
	path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"DocumentSid"+"}", DocumentSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListDocumentPermissionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListServiceResponse
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*ListServiceResponse, error) {
	path := "/v1/Services"


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListServiceResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListSyncListParams Optional parameters for the method 'ListSyncList'
type ListSyncListParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncList Method for ListSyncList
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resources to read.
 * @param optional nil or *ListSyncListOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListSyncListResponse
*/
func (c *DefaultApiService) ListSyncList(ServiceSid string, params *ListSyncListParams) (*ListSyncListResponse, error) {
	path := "/v1/Services/{ServiceSid}/Lists"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSyncListResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListSyncListItemParams Optional parameters for the method 'ListSyncListItem'
type ListSyncListItemParams struct {
	Order *string `json:"Order,omitempty"`
	From *string `json:"From,omitempty"`
	Bounds *string `json:"Bounds,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncListItem Method for ListSyncListItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the List Item resources to read.
 * @param ListSid The SID of the Sync List with the List Items to read. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncListItemOpts - Optional Parameters:
 * @param "Order" (string) - How to order the List Items returned by their `index` value. Can be: `asc` (ascending) or `desc` (descending) and the default is ascending.
 * @param "From" (string) - The `index` of the first Sync List Item resource to read. See also `bounds`.
 * @param "Bounds" (string) - Whether to include the List Item referenced by the `from` parameter. Can be: `inclusive` to include the List Item referenced by the `from` parameter or `exclusive` to start with the next List Item. The default value is `inclusive`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListSyncListItemResponse
*/
func (c *DefaultApiService) ListSyncListItem(ServiceSid string, ListSid string, params *ListSyncListItemParams) (*ListSyncListItemResponse, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Order != nil {
		data.Set("Order", *params.Order) 
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From) 
	}
	if params != nil && params.Bounds != nil {
		data.Set("Bounds", *params.Bounds) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSyncListItemResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListSyncListPermissionParams Optional parameters for the method 'ListSyncListPermission'
type ListSyncListPermissionParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncListPermission Method for ListSyncListPermission
Retrieve a list of all Permissions applying to a Sync List.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resources to read.
 * @param ListSid The SID of the Sync List with the Sync List Permission resources to read. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncListPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListSyncListPermissionResponse
*/
func (c *DefaultApiService) ListSyncListPermission(ServiceSid string, ListSid string, params *ListSyncListPermissionParams) (*ListSyncListPermissionResponse, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSyncListPermissionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListSyncMapParams Optional parameters for the method 'ListSyncMap'
type ListSyncMapParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMap Method for ListSyncMap
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resources to read.
 * @param optional nil or *ListSyncMapOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListSyncMapResponse
*/
func (c *DefaultApiService) ListSyncMap(ServiceSid string, params *ListSyncMapParams) (*ListSyncMapResponse, error) {
	path := "/v1/Services/{ServiceSid}/Maps"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSyncMapResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListSyncMapItemParams Optional parameters for the method 'ListSyncMapItem'
type ListSyncMapItemParams struct {
	Order *string `json:"Order,omitempty"`
	From *string `json:"From,omitempty"`
	Bounds *string `json:"Bounds,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMapItem Method for ListSyncMapItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Map Item resources to read.
 * @param MapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncMapItemOpts - Optional Parameters:
 * @param "Order" (string) - How to order the Map Items returned by their `key` value. Can be: `asc` (ascending) or `desc` (descending) and the default is ascending. Map Items are [ordered lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) by Item key.
 * @param "From" (string) - The `key` of the first Sync Map Item resource to read. See also `bounds`.
 * @param "Bounds" (string) - Whether to include the Map Item referenced by the `from` parameter. Can be: `inclusive` to include the Map Item referenced by the `from` parameter or `exclusive` to start with the next Map Item. The default value is `inclusive`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListSyncMapItemResponse
*/
func (c *DefaultApiService) ListSyncMapItem(ServiceSid string, MapSid string, params *ListSyncMapItemParams) (*ListSyncMapItemResponse, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Order != nil {
		data.Set("Order", *params.Order) 
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From) 
	}
	if params != nil && params.Bounds != nil {
		data.Set("Bounds", *params.Bounds) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSyncMapItemResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListSyncMapPermissionParams Optional parameters for the method 'ListSyncMapPermission'
type ListSyncMapPermissionParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMapPermission Method for ListSyncMapPermission
Retrieve a list of all Permissions applying to a Sync Map.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resources to read. Can be the Service's `sid` value or `default`.
 * @param MapSid The SID of the Sync Map with the Permission resources to read. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param optional nil or *ListSyncMapPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListSyncMapPermissionResponse
*/
func (c *DefaultApiService) ListSyncMapPermission(ServiceSid string, MapSid string, params *ListSyncMapPermissionParams) (*ListSyncMapPermissionResponse, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSyncMapPermissionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListSyncStreamParams Optional parameters for the method 'ListSyncStream'
type ListSyncStreamParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncStream Method for ListSyncStream
Retrieve a list of all Streams in a Service Instance.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Stream resources to read.
 * @param optional nil or *ListSyncStreamOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListSyncStreamResponse
*/
func (c *DefaultApiService) ListSyncStream(ServiceSid string, params *ListSyncStreamParams) (*ListSyncStreamResponse, error) {
	path := "/v1/Services/{ServiceSid}/Streams"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSyncStreamResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateDocumentParams Optional parameters for the method 'UpdateDocument'
type UpdateDocumentParams struct {
	IfMatch *string `json:"If-Match,omitempty"`
	Data *map[string]interface{} `json:"Data,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateDocument Method for UpdateDocument
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resource to update.
 * @param Sid The SID of the Document resource to update. Can be the Document resource's `sid` or its `unique_name`.
 * @param optional nil or *UpdateDocumentOpts - Optional Parameters:
 * @param "IfMatch" (string) - The If-Match HTTP request header
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Sync Document stores. Can be up to 16 KiB in length.
 * @param "Ttl" (int32) - How long, in seconds, before the Sync Document expires and is deleted (time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Document resource does not expire. The Document resource will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
@return SyncV1ServiceDocument
*/
func (c *DefaultApiService) UpdateDocument(ServiceSid string, Sid string, params *UpdateDocumentParams) (*SyncV1ServiceDocument, error) {
	path := "/v1/Services/{ServiceSid}/Documents/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", fmt.Sprint(v))
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}

	if params != nil && params.IfMatch != nil {
		headers["IfMatch"] = *params.IfMatch
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceDocument{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateDocumentPermissionParams Optional parameters for the method 'UpdateDocumentPermission'
type UpdateDocumentPermissionParams struct {
	Manage *bool `json:"Manage,omitempty"`
	Read *bool `json:"Read,omitempty"`
	Write *bool `json:"Write,omitempty"`
}

/*
UpdateDocumentPermission Method for UpdateDocumentPermission
Update an identity&#39;s access to a specific Sync Document.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document Permission resource to update.
 * @param DocumentSid The SID of the Sync Document with the Document Permission resource to update. Can be the Document resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Document Permission resource to update.
 * @param optional nil or *UpdateDocumentPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Whether the identity can delete the Sync Document. Default value is `false`.
 * @param "Read" (bool) - Whether the identity can read the Sync Document. Default value is `false`.
 * @param "Write" (bool) - Whether the identity can update the Sync Document. Default value is `false`.
@return SyncV1ServiceDocumentDocumentPermission
*/
func (c *DefaultApiService) UpdateDocumentPermission(ServiceSid string, DocumentSid string, Identity string, params *UpdateDocumentPermissionParams) (*SyncV1ServiceDocumentDocumentPermission, error) {
	path := "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"DocumentSid"+"}", DocumentSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Manage != nil {
		data.Set("Manage", fmt.Sprint(*params.Manage)) 
	}
	if params != nil && params.Read != nil {
		data.Set("Read", fmt.Sprint(*params.Read)) 
	}
	if params != nil && params.Write != nil {
		data.Set("Write", fmt.Sprint(*params.Write)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceDocumentDocumentPermission{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
	AclEnabled *bool `json:"AclEnabled,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	ReachabilityDebouncingEnabled *bool `json:"ReachabilityDebouncingEnabled,omitempty"`
	ReachabilityDebouncingWindow *int32 `json:"ReachabilityDebouncingWindow,omitempty"`
	ReachabilityWebhooksEnabled *bool `json:"ReachabilityWebhooksEnabled,omitempty"`
	WebhookUrl *string `json:"WebhookUrl,omitempty"`
	WebhooksFromRestEnabled *bool `json:"WebhooksFromRestEnabled,omitempty"`
}

/*
UpdateService Method for UpdateService
 * @param Sid The SID of the Service resource to update.
 * @param optional nil or *UpdateServiceOpts - Optional Parameters:
 * @param "AclEnabled" (bool) - Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource.
 * @param "FriendlyName" (string) - A string that you assign to describe the resource.
 * @param "ReachabilityDebouncingEnabled" (bool) - Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event.
 * @param "ReachabilityDebouncingWindow" (int32) - The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before the webhook is called if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the webhook from being called.
 * @param "ReachabilityWebhooksEnabled" (bool) - Whether the service instance should call `webhook_url` when client endpoints connect to Sync. The default is `false`.
 * @param "WebhookUrl" (string) - The URL we should call when Sync objects are manipulated.
 * @param "WebhooksFromRestEnabled" (bool) - Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`.
@return SyncV1Service
*/
func (c *DefaultApiService) UpdateService(Sid string, params *UpdateServiceParams) (*SyncV1Service, error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.AclEnabled != nil {
		data.Set("AclEnabled", fmt.Sprint(*params.AclEnabled)) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.ReachabilityDebouncingEnabled != nil {
		data.Set("ReachabilityDebouncingEnabled", fmt.Sprint(*params.ReachabilityDebouncingEnabled)) 
	}
	if params != nil && params.ReachabilityDebouncingWindow != nil {
		data.Set("ReachabilityDebouncingWindow", fmt.Sprint(*params.ReachabilityDebouncingWindow)) 
	}
	if params != nil && params.ReachabilityWebhooksEnabled != nil {
		data.Set("ReachabilityWebhooksEnabled", fmt.Sprint(*params.ReachabilityWebhooksEnabled)) 
	}
	if params != nil && params.WebhookUrl != nil {
		data.Set("WebhookUrl", *params.WebhookUrl) 
	}
	if params != nil && params.WebhooksFromRestEnabled != nil {
		data.Set("WebhooksFromRestEnabled", fmt.Sprint(*params.WebhooksFromRestEnabled)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateSyncListParams Optional parameters for the method 'UpdateSyncList'
type UpdateSyncListParams struct {
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncList Method for UpdateSyncList
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List resource to update.
 * @param Sid The SID of the Sync List resource to update. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param optional nil or *UpdateSyncListOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync List expires (time-to-live) and is deleted. Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `collection_ttl`. If both are provided, this value is ignored.
@return SyncV1ServiceSyncList
*/
func (c *DefaultApiService) UpdateSyncList(ServiceSid string, Sid string, params *UpdateSyncListParams) (*SyncV1ServiceSyncList, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncList{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateSyncListItemParams Optional parameters for the method 'UpdateSyncListItem'
type UpdateSyncListItemParams struct {
	IfMatch *string `json:"If-Match,omitempty"`
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Data *map[string]interface{} `json:"Data,omitempty"`
	ItemTtl *int32 `json:"ItemTtl,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncListItem Method for UpdateSyncListItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Item resource to update.
 * @param ListSid The SID of the Sync List with the Sync List Item resource to update. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param Index The index of the Sync List Item resource to update.
 * @param optional nil or *UpdateSyncListItemOpts - Optional Parameters:
 * @param "IfMatch" (string) - The If-Match HTTP request header
 * @param "CollectionTtl" (int32) - How long, in seconds, before the List Item's parent Sync List expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync List does not expire. The Sync List will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the List Item stores. Can be up to 16 KiB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the List Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the List Item does not expire. The List Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncListSyncListItem
*/
func (c *DefaultApiService) UpdateSyncListItem(ServiceSid string, ListSid string, Index int32, params *UpdateSyncListItemParams) (*SyncV1ServiceSyncListSyncListItem, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)
	path = strings.Replace(path, "{"+"Index"+"}", fmt.Sprint(Index), -1)


	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", fmt.Sprint(v))
	}
	if params != nil && params.ItemTtl != nil {
		data.Set("ItemTtl", fmt.Sprint(*params.ItemTtl)) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}

	if params != nil && params.IfMatch != nil {
		headers["IfMatch"] = *params.IfMatch
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncListSyncListItem{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateSyncListPermissionParams Optional parameters for the method 'UpdateSyncListPermission'
type UpdateSyncListPermissionParams struct {
	Manage *bool `json:"Manage,omitempty"`
	Read *bool `json:"Read,omitempty"`
	Write *bool `json:"Write,omitempty"`
}

/*
UpdateSyncListPermission Method for UpdateSyncListPermission
Update an identity&#39;s access to a specific Sync List.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync List Permission resource to update.
 * @param ListSid The SID of the Sync List with the Sync List Permission resource to update. Can be the Sync List resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Sync List Permission resource to update.
 * @param optional nil or *UpdateSyncListPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Whether the identity can delete the Sync List. Default value is `false`.
 * @param "Read" (bool) - Whether the identity can read the Sync List and its Items. Default value is `false`.
 * @param "Write" (bool) - Whether the identity can create, update, and delete Items in the Sync List. Default value is `false`.
@return SyncV1ServiceSyncListSyncListPermission
*/
func (c *DefaultApiService) UpdateSyncListPermission(ServiceSid string, ListSid string, Identity string, params *UpdateSyncListPermissionParams) (*SyncV1ServiceSyncListSyncListPermission, error) {
	path := "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ListSid"+"}", ListSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Manage != nil {
		data.Set("Manage", fmt.Sprint(*params.Manage)) 
	}
	if params != nil && params.Read != nil {
		data.Set("Read", fmt.Sprint(*params.Read)) 
	}
	if params != nil && params.Write != nil {
		data.Set("Write", fmt.Sprint(*params.Write)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncListSyncListPermission{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateSyncMapParams Optional parameters for the method 'UpdateSyncMap'
type UpdateSyncMapParams struct {
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncMap Method for UpdateSyncMap
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map resource to update.
 * @param Sid The SID of the Sync Map resource to update. Can be the Sync Map's `sid` or its `unique_name`.
 * @param optional nil or *UpdateSyncMapOpts - Optional Parameters:
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Sync Map expires (time-to-live) and is deleted. Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Sync Map does not expire. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `collection_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncMap
*/
func (c *DefaultApiService) UpdateSyncMap(ServiceSid string, Sid string, params *UpdateSyncMapParams) (*SyncV1ServiceSyncMap, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMap{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateSyncMapItemParams Optional parameters for the method 'UpdateSyncMapItem'
type UpdateSyncMapItemParams struct {
	IfMatch *string `json:"If-Match,omitempty"`
	CollectionTtl *int32 `json:"CollectionTtl,omitempty"`
	Data *map[string]interface{} `json:"Data,omitempty"`
	ItemTtl *int32 `json:"ItemTtl,omitempty"`
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncMapItem Method for UpdateSyncMapItem
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to update.
 * @param MapSid The SID of the Sync Map with the Sync Map Item resource to update. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param Key The `key` value of the Sync Map Item resource to update. 
 * @param optional nil or *UpdateSyncMapItemOpts - Optional Parameters:
 * @param "IfMatch" (string) - The If-Match HTTP request header
 * @param "CollectionTtl" (int32) - How long, in seconds, before the Map Item's parent Sync Map expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the parent Sync Map does not expire. This parameter can only be used when the Map Item's `data` or `ttl` is updated in the same request. The Sync Map will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Data" (map[string]interface{}) - A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length.
 * @param "ItemTtl" (int32) - How long, in seconds, before the Map Item expires (time-to-live) and is deleted.  Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Map Item does not expire. The Map Item will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
 * @param "Ttl" (int32) - An alias for `item_ttl`. If both parameters are provided, this value is ignored.
@return SyncV1ServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) UpdateSyncMapItem(ServiceSid string, MapSid string, Key string, params *UpdateSyncMapItemParams) (*SyncV1ServiceSyncMapSyncMapItem, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)
	path = strings.Replace(path, "{"+"Key"+"}", Key, -1)


	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CollectionTtl != nil {
		data.Set("CollectionTtl", fmt.Sprint(*params.CollectionTtl)) 
	}
	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", fmt.Sprint(v))
	}
	if params != nil && params.ItemTtl != nil {
		data.Set("ItemTtl", fmt.Sprint(*params.ItemTtl)) 
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}

	if params != nil && params.IfMatch != nil {
		headers["IfMatch"] = *params.IfMatch
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMapSyncMapItem{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateSyncMapPermissionParams Optional parameters for the method 'UpdateSyncMapPermission'
type UpdateSyncMapPermissionParams struct {
	Manage *bool `json:"Manage,omitempty"`
	Read *bool `json:"Read,omitempty"`
	Write *bool `json:"Write,omitempty"`
}

/*
UpdateSyncMapPermission Method for UpdateSyncMapPermission
Update an identity&#39;s access to a specific Sync Map.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to update. Can be the Service's `sid` value or `default`.
 * @param MapSid The SID of the Sync Map with the Sync Map Permission resource to update. Can be the Sync Map resource's `sid` or its `unique_name`.
 * @param Identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to update.
 * @param optional nil or *UpdateSyncMapPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Whether the identity can delete the Sync Map. Default value is `false`.
 * @param "Read" (bool) - Whether the identity can read the Sync Map and its Items. Default value is `false`.
 * @param "Write" (bool) - Whether the identity can create, update, and delete Items in the Sync Map. Default value is `false`.
@return SyncV1ServiceSyncMapSyncMapPermission
*/
func (c *DefaultApiService) UpdateSyncMapPermission(ServiceSid string, MapSid string, Identity string, params *UpdateSyncMapPermissionParams) (*SyncV1ServiceSyncMapSyncMapPermission, error) {
	path := "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"MapSid"+"}", MapSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Manage != nil {
		data.Set("Manage", fmt.Sprint(*params.Manage)) 
	}
	if params != nil && params.Read != nil {
		data.Set("Read", fmt.Sprint(*params.Read)) 
	}
	if params != nil && params.Write != nil {
		data.Set("Write", fmt.Sprint(*params.Write)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncMapSyncMapPermission{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateSyncStreamParams Optional parameters for the method 'UpdateSyncStream'
type UpdateSyncStreamParams struct {
	Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSyncStream Method for UpdateSyncStream
Update a specific Stream.
 * @param ServiceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Stream resource to update.
 * @param Sid The SID of the Stream resource to update.
 * @param optional nil or *UpdateSyncStreamOpts - Optional Parameters:
 * @param "Ttl" (int32) - How long, in seconds, before the Stream expires and is deleted (time-to-live). Can be an integer from 0 to 31,536,000 (1 year). The default value is `0`, which means the Stream does not expire. The Stream will be deleted automatically after it expires, but there can be a delay between the expiration time and the resources's deletion.
@return SyncV1ServiceSyncStream
*/
func (c *DefaultApiService) UpdateSyncStream(ServiceSid string, Sid string, params *UpdateSyncStreamParams) (*SyncV1ServiceSyncStream, error) {
	path := "/v1/Services/{ServiceSid}/Streams/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &SyncV1ServiceSyncStream{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
