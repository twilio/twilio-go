/*
 * Twilio - Trusthub
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.15.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	twilio "github.com/twilio/twilio-go/client"
)

type DefaultApiService struct {
	baseURL string
	client  twilio.BaseClient
}

func NewDefaultApiService(client twilio.BaseClient) *DefaultApiService {
	return &DefaultApiService{
		client:  client,
		baseURL: "https://trusthub.twilio.com",
	}
}

// CreateCustomerProfileParams Optional parameters for the method 'CreateCustomerProfile'
type CreateCustomerProfileParams struct {
	Email          *string `json:"Email,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PolicySid      *string `json:"PolicySid,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
}

func (params *CreateCustomerProfileParams) SetEmail(Email string) *CreateCustomerProfileParams {
	params.Email = &Email
	return params
}
func (params *CreateCustomerProfileParams) SetFriendlyName(FriendlyName string) *CreateCustomerProfileParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateCustomerProfileParams) SetPolicySid(PolicySid string) *CreateCustomerProfileParams {
	params.PolicySid = &PolicySid
	return params
}
func (params *CreateCustomerProfileParams) SetStatusCallback(StatusCallback string) *CreateCustomerProfileParams {
	params.StatusCallback = &StatusCallback
	return params
}

// CreateCustomerProfile Method for CreateCustomerProfile
//
// Create a new Customer-Profile.
//
// param: optional nil or *CreateCustomerProfileParams - Optional Parameters:
//
// param: "Email" (string) - The email address that will receive updates when the Customer-Profile resource changes status.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "PolicySid" (string) - The unique string of a policy that is associated to the Customer-Profile resource.
//
// param: "StatusCallback" (string) - The URL we call to inform your application of status changes.
//
// return: TrusthubV1CustomerProfile
func (c *DefaultApiService) CreateCustomerProfile(params *CreateCustomerProfileParams) (*TrusthubV1CustomerProfile, error) {
	path := "/v1/CustomerProfiles"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Email != nil {
		data.Set("Email", *params.Email)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PolicySid != nil {
		data.Set("PolicySid", *params.PolicySid)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfile{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCustomerProfileChannelEndpointAssignmentParams Optional parameters for the method 'CreateCustomerProfileChannelEndpointAssignment'
type CreateCustomerProfileChannelEndpointAssignmentParams struct {
	ChannelEndpointSid  *string `json:"ChannelEndpointSid,omitempty"`
	ChannelEndpointType *string `json:"ChannelEndpointType,omitempty"`
}

func (params *CreateCustomerProfileChannelEndpointAssignmentParams) SetChannelEndpointSid(ChannelEndpointSid string) *CreateCustomerProfileChannelEndpointAssignmentParams {
	params.ChannelEndpointSid = &ChannelEndpointSid
	return params
}
func (params *CreateCustomerProfileChannelEndpointAssignmentParams) SetChannelEndpointType(ChannelEndpointType string) *CreateCustomerProfileChannelEndpointAssignmentParams {
	params.ChannelEndpointType = &ChannelEndpointType
	return params
}

// CreateCustomerProfileChannelEndpointAssignment Method for CreateCustomerProfileChannelEndpointAssignment
//
// Create a new Assigned Item.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *CreateCustomerProfileChannelEndpointAssignmentParams - Optional Parameters:
//
// param: "ChannelEndpointSid" (string) - The SID of an channel endpoint
//
// param: "ChannelEndpointType" (string) - The type of channel endpoint. eg: phone-number
//
// return: TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment
func (c *DefaultApiService) CreateCustomerProfileChannelEndpointAssignment(CustomerProfileSid string, params *CreateCustomerProfileChannelEndpointAssignmentParams) (*TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ChannelEndpointSid != nil {
		data.Set("ChannelEndpointSid", *params.ChannelEndpointSid)
	}
	if params != nil && params.ChannelEndpointType != nil {
		data.Set("ChannelEndpointType", *params.ChannelEndpointType)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCustomerProfileEntityAssignmentParams Optional parameters for the method 'CreateCustomerProfileEntityAssignment'
type CreateCustomerProfileEntityAssignmentParams struct {
	ObjectSid *string `json:"ObjectSid,omitempty"`
}

func (params *CreateCustomerProfileEntityAssignmentParams) SetObjectSid(ObjectSid string) *CreateCustomerProfileEntityAssignmentParams {
	params.ObjectSid = &ObjectSid
	return params
}

// CreateCustomerProfileEntityAssignment Method for CreateCustomerProfileEntityAssignment
//
// Create a new Assigned Item.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *CreateCustomerProfileEntityAssignmentParams - Optional Parameters:
//
// param: "ObjectSid" (string) - The SID of an object bag that holds information of the different items.
//
// return: TrusthubV1CustomerProfileCustomerProfileEntityAssignment
func (c *DefaultApiService) CreateCustomerProfileEntityAssignment(CustomerProfileSid string, params *CreateCustomerProfileEntityAssignmentParams) (*TrusthubV1CustomerProfileCustomerProfileEntityAssignment, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ObjectSid != nil {
		data.Set("ObjectSid", *params.ObjectSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfileCustomerProfileEntityAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCustomerProfileEvaluationParams Optional parameters for the method 'CreateCustomerProfileEvaluation'
type CreateCustomerProfileEvaluationParams struct {
	PolicySid *string `json:"PolicySid,omitempty"`
}

func (params *CreateCustomerProfileEvaluationParams) SetPolicySid(PolicySid string) *CreateCustomerProfileEvaluationParams {
	params.PolicySid = &PolicySid
	return params
}

// CreateCustomerProfileEvaluation Method for CreateCustomerProfileEvaluation
//
// Create a new Evaluation
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *CreateCustomerProfileEvaluationParams - Optional Parameters:
//
// param: "PolicySid" (string) - The unique string of a policy that is associated to the customer_profile resource.
//
// return: TrusthubV1CustomerProfileCustomerProfileEvaluation
func (c *DefaultApiService) CreateCustomerProfileEvaluation(CustomerProfileSid string, params *CreateCustomerProfileEvaluationParams) (*TrusthubV1CustomerProfileCustomerProfileEvaluation, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PolicySid != nil {
		data.Set("PolicySid", *params.PolicySid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfileCustomerProfileEvaluation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateEndUserParams Optional parameters for the method 'CreateEndUser'
type CreateEndUserParams struct {
	Attributes   *map[string]interface{} `json:"Attributes,omitempty"`
	FriendlyName *string                 `json:"FriendlyName,omitempty"`
	Type         *string                 `json:"Type,omitempty"`
}

func (params *CreateEndUserParams) SetAttributes(Attributes map[string]interface{}) *CreateEndUserParams {
	params.Attributes = &Attributes
	return params
}
func (params *CreateEndUserParams) SetFriendlyName(FriendlyName string) *CreateEndUserParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateEndUserParams) SetType(Type string) *CreateEndUserParams {
	params.Type = &Type
	return params
}

// CreateEndUser Method for CreateEndUser
//
// Create a new End User.
//
// param: optional nil or *CreateEndUserParams - Optional Parameters:
//
// param: "Attributes" (map[string]interface{}) - The set of parameters that are the attributes of the End User resource which are derived End User Types.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "Type" (string) - The type of end user of the Bundle resource - can be `individual` or `business`.
//
// return: TrusthubV1EndUser
func (c *DefaultApiService) CreateEndUser(params *CreateEndUserParams) (*TrusthubV1EndUser, error) {
	path := "/v1/EndUsers"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		v, err := json.Marshal(params.Attributes)

		if err != nil {
			return nil, err
		}

		data.Set("Attributes", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1EndUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateSupportingDocumentParams Optional parameters for the method 'CreateSupportingDocument'
type CreateSupportingDocumentParams struct {
	Attributes   *map[string]interface{} `json:"Attributes,omitempty"`
	FriendlyName *string                 `json:"FriendlyName,omitempty"`
	Type         *string                 `json:"Type,omitempty"`
}

func (params *CreateSupportingDocumentParams) SetAttributes(Attributes map[string]interface{}) *CreateSupportingDocumentParams {
	params.Attributes = &Attributes
	return params
}
func (params *CreateSupportingDocumentParams) SetFriendlyName(FriendlyName string) *CreateSupportingDocumentParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateSupportingDocumentParams) SetType(Type string) *CreateSupportingDocumentParams {
	params.Type = &Type
	return params
}

// CreateSupportingDocument Method for CreateSupportingDocument
//
// Create a new Supporting Document.
//
// param: optional nil or *CreateSupportingDocumentParams - Optional Parameters:
//
// param: "Attributes" (map[string]interface{}) - The set of parameters that are the attributes of the Supporting Documents resource which are derived Supporting Document Types.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "Type" (string) - The type of the Supporting Document.
//
// return: TrusthubV1SupportingDocument
func (c *DefaultApiService) CreateSupportingDocument(params *CreateSupportingDocumentParams) (*TrusthubV1SupportingDocument, error) {
	path := "/v1/SupportingDocuments"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		v, err := json.Marshal(params.Attributes)

		if err != nil {
			return nil, err
		}

		data.Set("Attributes", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1SupportingDocument{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateTrustProductParams Optional parameters for the method 'CreateTrustProduct'
type CreateTrustProductParams struct {
	Email          *string `json:"Email,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	PolicySid      *string `json:"PolicySid,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
}

func (params *CreateTrustProductParams) SetEmail(Email string) *CreateTrustProductParams {
	params.Email = &Email
	return params
}
func (params *CreateTrustProductParams) SetFriendlyName(FriendlyName string) *CreateTrustProductParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateTrustProductParams) SetPolicySid(PolicySid string) *CreateTrustProductParams {
	params.PolicySid = &PolicySid
	return params
}
func (params *CreateTrustProductParams) SetStatusCallback(StatusCallback string) *CreateTrustProductParams {
	params.StatusCallback = &StatusCallback
	return params
}

// CreateTrustProduct Method for CreateTrustProduct
//
// Create a new Customer-Profile.
//
// param: optional nil or *CreateTrustProductParams - Optional Parameters:
//
// param: "Email" (string) - The email address that will receive updates when the Customer-Profile resource changes status.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "PolicySid" (string) - The unique string of a policy that is associated to the Customer-Profile resource.
//
// param: "StatusCallback" (string) - The URL we call to inform your application of status changes.
//
// return: TrusthubV1TrustProduct
func (c *DefaultApiService) CreateTrustProduct(params *CreateTrustProductParams) (*TrusthubV1TrustProduct, error) {
	path := "/v1/TrustProducts"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Email != nil {
		data.Set("Email", *params.Email)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PolicySid != nil {
		data.Set("PolicySid", *params.PolicySid)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProduct{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateTrustProductChannelEndpointAssignmentParams Optional parameters for the method 'CreateTrustProductChannelEndpointAssignment'
type CreateTrustProductChannelEndpointAssignmentParams struct {
	ChannelEndpointSid  *string `json:"ChannelEndpointSid,omitempty"`
	ChannelEndpointType *string `json:"ChannelEndpointType,omitempty"`
}

func (params *CreateTrustProductChannelEndpointAssignmentParams) SetChannelEndpointSid(ChannelEndpointSid string) *CreateTrustProductChannelEndpointAssignmentParams {
	params.ChannelEndpointSid = &ChannelEndpointSid
	return params
}
func (params *CreateTrustProductChannelEndpointAssignmentParams) SetChannelEndpointType(ChannelEndpointType string) *CreateTrustProductChannelEndpointAssignmentParams {
	params.ChannelEndpointType = &ChannelEndpointType
	return params
}

// CreateTrustProductChannelEndpointAssignment Method for CreateTrustProductChannelEndpointAssignment
//
// Create a new Assigned Item.
//
// param: TrustProductSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *CreateTrustProductChannelEndpointAssignmentParams - Optional Parameters:
//
// param: "ChannelEndpointSid" (string) - The SID of an channel endpoint
//
// param: "ChannelEndpointType" (string) - The type of channel endpoint. eg: phone-number
//
// return: TrusthubV1TrustProductTrustProductChannelEndpointAssignment
func (c *DefaultApiService) CreateTrustProductChannelEndpointAssignment(TrustProductSid string, params *CreateTrustProductChannelEndpointAssignmentParams) (*TrusthubV1TrustProductTrustProductChannelEndpointAssignment, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ChannelEndpointSid != nil {
		data.Set("ChannelEndpointSid", *params.ChannelEndpointSid)
	}
	if params != nil && params.ChannelEndpointType != nil {
		data.Set("ChannelEndpointType", *params.ChannelEndpointType)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProductTrustProductChannelEndpointAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateTrustProductEntityAssignmentParams Optional parameters for the method 'CreateTrustProductEntityAssignment'
type CreateTrustProductEntityAssignmentParams struct {
	ObjectSid *string `json:"ObjectSid,omitempty"`
}

func (params *CreateTrustProductEntityAssignmentParams) SetObjectSid(ObjectSid string) *CreateTrustProductEntityAssignmentParams {
	params.ObjectSid = &ObjectSid
	return params
}

// CreateTrustProductEntityAssignment Method for CreateTrustProductEntityAssignment
//
// Create a new Assigned Item.
//
// param: TrustProductSid The unique string that we created to identify the TrustProduct resource.
//
// param: optional nil or *CreateTrustProductEntityAssignmentParams - Optional Parameters:
//
// param: "ObjectSid" (string) - The SID of an object bag that holds information of the different items.
//
// return: TrusthubV1TrustProductTrustProductEntityAssignment
func (c *DefaultApiService) CreateTrustProductEntityAssignment(TrustProductSid string, params *CreateTrustProductEntityAssignmentParams) (*TrusthubV1TrustProductTrustProductEntityAssignment, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/EntityAssignments"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ObjectSid != nil {
		data.Set("ObjectSid", *params.ObjectSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProductTrustProductEntityAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateTrustProductEvaluationParams Optional parameters for the method 'CreateTrustProductEvaluation'
type CreateTrustProductEvaluationParams struct {
	PolicySid *string `json:"PolicySid,omitempty"`
}

func (params *CreateTrustProductEvaluationParams) SetPolicySid(PolicySid string) *CreateTrustProductEvaluationParams {
	params.PolicySid = &PolicySid
	return params
}

// CreateTrustProductEvaluation Method for CreateTrustProductEvaluation
//
// Create a new Evaluation
//
// param: TrustProductSid The unique string that we created to identify the trust_product resource.
//
// param: optional nil or *CreateTrustProductEvaluationParams - Optional Parameters:
//
// param: "PolicySid" (string) - The unique string of a policy that is associated to the customer_profile resource.
//
// return: TrusthubV1TrustProductTrustProductEvaluation
func (c *DefaultApiService) CreateTrustProductEvaluation(TrustProductSid string, params *CreateTrustProductEvaluationParams) (*TrusthubV1TrustProductTrustProductEvaluation, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/Evaluations"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PolicySid != nil {
		data.Set("PolicySid", *params.PolicySid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProductTrustProductEvaluation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// DeleteCustomerProfile Method for DeleteCustomerProfile
//
// Delete a specific Customer-Profile.
//
// param: Sid The unique string that we created to identify the Customer-Profile resource.
//
func (c *DefaultApiService) DeleteCustomerProfile(Sid string) error {
	path := "/v1/CustomerProfiles/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteCustomerProfileChannelEndpointAssignment Method for DeleteCustomerProfileChannelEndpointAssignment
//
// Remove an Assignment Item Instance.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: Sid The unique string that we created to identify the resource.
//
func (c *DefaultApiService) DeleteCustomerProfileChannelEndpointAssignment(CustomerProfileSid string, Sid string) error {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteCustomerProfileEntityAssignment Method for DeleteCustomerProfileEntityAssignment
//
// Remove an Assignment Item Instance.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: Sid The unique string that we created to identify the Identity resource.
//
func (c *DefaultApiService) DeleteCustomerProfileEntityAssignment(CustomerProfileSid string, Sid string) error {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteEndUser Method for DeleteEndUser
//
// Delete a specific End User.
//
// param: Sid The unique string created by Twilio to identify the End User resource.
//
func (c *DefaultApiService) DeleteEndUser(Sid string) error {
	path := "/v1/EndUsers/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteSupportingDocument Method for DeleteSupportingDocument
//
// Delete a specific Supporting Document.
//
// param: Sid The unique string created by Twilio to identify the Supporting Document resource.
//
func (c *DefaultApiService) DeleteSupportingDocument(Sid string) error {
	path := "/v1/SupportingDocuments/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteTrustProduct Method for DeleteTrustProduct
//
// Delete a specific Customer-Profile.
//
// param: Sid The unique string that we created to identify the Customer-Profile resource.
//
func (c *DefaultApiService) DeleteTrustProduct(Sid string) error {
	path := "/v1/TrustProducts/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteTrustProductChannelEndpointAssignment Method for DeleteTrustProductChannelEndpointAssignment
//
// Remove an Assignment Item Instance.
//
// param: TrustProductSid The unique string that we created to identify the CustomerProfile resource.
//
// param: Sid The unique string that we created to identify the resource.
//
func (c *DefaultApiService) DeleteTrustProductChannelEndpointAssignment(TrustProductSid string, Sid string) error {
	path := "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteTrustProductEntityAssignment Method for DeleteTrustProductEntityAssignment
//
// Remove an Assignment Item Instance.
//
// param: TrustProductSid The unique string that we created to identify the TrustProduct resource.
//
// param: Sid The unique string that we created to identify the Identity resource.
//
func (c *DefaultApiService) DeleteTrustProductEntityAssignment(TrustProductSid string, Sid string) error {
	path := "/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// FetchCustomerProfile Method for FetchCustomerProfile
//
// Fetch a specific Customer-Profile instance.
//
// param: Sid The unique string that we created to identify the Customer-Profile resource.
//
// return: TrusthubV1CustomerProfile
func (c *DefaultApiService) FetchCustomerProfile(Sid string) (*TrusthubV1CustomerProfile, error) {
	path := "/v1/CustomerProfiles/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfile{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCustomerProfileChannelEndpointAssignment Method for FetchCustomerProfileChannelEndpointAssignment
//
// Fetch specific Assigned Item Instance.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: Sid The unique string that we created to identify the resource.
//
// return: TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment
func (c *DefaultApiService) FetchCustomerProfileChannelEndpointAssignment(CustomerProfileSid string, Sid string) (*TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCustomerProfileEntityAssignment Method for FetchCustomerProfileEntityAssignment
//
// Fetch specific Assigned Item Instance.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: Sid The unique string that we created to identify the Identity resource.
//
// return: TrusthubV1CustomerProfileCustomerProfileEntityAssignment
func (c *DefaultApiService) FetchCustomerProfileEntityAssignment(CustomerProfileSid string, Sid string) (*TrusthubV1CustomerProfileCustomerProfileEntityAssignment, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfileCustomerProfileEntityAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCustomerProfileEvaluation Method for FetchCustomerProfileEvaluation
//
// Fetch specific Evaluation Instance.
//
// param: CustomerProfileSid The unique string that we created to identify the customer_profile resource.
//
// param: Sid The unique string that identifies the Evaluation resource.
//
// return: TrusthubV1CustomerProfileCustomerProfileEvaluation
func (c *DefaultApiService) FetchCustomerProfileEvaluation(CustomerProfileSid string, Sid string) (*TrusthubV1CustomerProfileCustomerProfileEvaluation, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations/{Sid}"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfileCustomerProfileEvaluation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchEndUser Method for FetchEndUser
//
// Fetch specific End User Instance.
//
// param: Sid The unique string created by Twilio to identify the End User resource.
//
// return: TrusthubV1EndUser
func (c *DefaultApiService) FetchEndUser(Sid string) (*TrusthubV1EndUser, error) {
	path := "/v1/EndUsers/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1EndUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchEndUserType Method for FetchEndUserType
//
// Fetch a specific End-User Type Instance.
//
// param: Sid The unique string that identifies the End-User Type resource.
//
// return: TrusthubV1EndUserType
func (c *DefaultApiService) FetchEndUserType(Sid string) (*TrusthubV1EndUserType, error) {
	path := "/v1/EndUserTypes/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1EndUserType{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchPolicies Method for FetchPolicies
//
// Fetch specific Policy Instance.
//
// param: Sid The unique string that identifies the Policy resource.
//
// return: TrusthubV1Policies
func (c *DefaultApiService) FetchPolicies(Sid string) (*TrusthubV1Policies, error) {
	path := "/v1/Policies/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1Policies{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSupportingDocument Method for FetchSupportingDocument
//
// Fetch specific Supporting Document Instance.
//
// param: Sid The unique string created by Twilio to identify the Supporting Document resource.
//
// return: TrusthubV1SupportingDocument
func (c *DefaultApiService) FetchSupportingDocument(Sid string) (*TrusthubV1SupportingDocument, error) {
	path := "/v1/SupportingDocuments/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1SupportingDocument{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchSupportingDocumentType Method for FetchSupportingDocumentType
//
// Fetch a specific Supporting Document Type Instance.
//
// param: Sid The unique string that identifies the Supporting Document Type resource.
//
// return: TrusthubV1SupportingDocumentType
func (c *DefaultApiService) FetchSupportingDocumentType(Sid string) (*TrusthubV1SupportingDocumentType, error) {
	path := "/v1/SupportingDocumentTypes/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1SupportingDocumentType{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchTrustProduct Method for FetchTrustProduct
//
// Fetch a specific Customer-Profile instance.
//
// param: Sid The unique string that we created to identify the Customer-Profile resource.
//
// return: TrusthubV1TrustProduct
func (c *DefaultApiService) FetchTrustProduct(Sid string) (*TrusthubV1TrustProduct, error) {
	path := "/v1/TrustProducts/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProduct{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchTrustProductChannelEndpointAssignment Method for FetchTrustProductChannelEndpointAssignment
//
// Fetch specific Assigned Item Instance.
//
// param: TrustProductSid The unique string that we created to identify the CustomerProfile resource.
//
// param: Sid The unique string that we created to identify the resource.
//
// return: TrusthubV1TrustProductTrustProductChannelEndpointAssignment
func (c *DefaultApiService) FetchTrustProductChannelEndpointAssignment(TrustProductSid string, Sid string) (*TrusthubV1TrustProductTrustProductChannelEndpointAssignment, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProductTrustProductChannelEndpointAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchTrustProductEntityAssignment Method for FetchTrustProductEntityAssignment
//
// Fetch specific Assigned Item Instance.
//
// param: TrustProductSid The unique string that we created to identify the TrustProduct resource.
//
// param: Sid The unique string that we created to identify the Identity resource.
//
// return: TrusthubV1TrustProductTrustProductEntityAssignment
func (c *DefaultApiService) FetchTrustProductEntityAssignment(TrustProductSid string, Sid string) (*TrusthubV1TrustProductTrustProductEntityAssignment, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProductTrustProductEntityAssignment{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchTrustProductEvaluation Method for FetchTrustProductEvaluation
//
// Fetch specific Evaluation Instance.
//
// param: TrustProductSid The unique string that we created to identify the trust_product resource.
//
// param: Sid The unique string that identifies the Evaluation resource.
//
// return: TrusthubV1TrustProductTrustProductEvaluation
func (c *DefaultApiService) FetchTrustProductEvaluation(TrustProductSid string, Sid string) (*TrusthubV1TrustProductTrustProductEvaluation, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/Evaluations/{Sid}"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProductTrustProductEvaluation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCustomerProfileParams Optional parameters for the method 'ListCustomerProfile'
type ListCustomerProfileParams struct {
	Status       *string `json:"Status,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PolicySid    *string `json:"PolicySid,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty"`
}

func (params *ListCustomerProfileParams) SetStatus(Status string) *ListCustomerProfileParams {
	params.Status = &Status
	return params
}
func (params *ListCustomerProfileParams) SetFriendlyName(FriendlyName string) *ListCustomerProfileParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListCustomerProfileParams) SetPolicySid(PolicySid string) *ListCustomerProfileParams {
	params.PolicySid = &PolicySid
	return params
}
func (params *ListCustomerProfileParams) SetPageSize(PageSize int32) *ListCustomerProfileParams {
	params.PageSize = &PageSize
	return params
}

// ListCustomerProfile Method for ListCustomerProfile
//
// Retrieve a list of all Customer-Profiles for an account.
//
// param: optional nil or *ListCustomerProfileParams - Optional Parameters:
//
// param: "Status" (string) - The verification status of the Customer-Profile resource.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "PolicySid" (string) - The unique string of a policy that is associated to the Customer-Profile resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCustomerProfileResponse
func (c *DefaultApiService) ListCustomerProfile(params *ListCustomerProfileParams) (*ListCustomerProfileResponse, error) {
	path := "/v1/CustomerProfiles"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PolicySid != nil {
		data.Set("PolicySid", *params.PolicySid)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCustomerProfileResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCustomerProfileChannelEndpointAssignmentParams Optional parameters for the method 'ListCustomerProfileChannelEndpointAssignment'
type ListCustomerProfileChannelEndpointAssignmentParams struct {
	ChannelEndpointSid  *string `json:"ChannelEndpointSid,omitempty"`
	ChannelEndpointSids *string `json:"ChannelEndpointSids,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty"`
}

func (params *ListCustomerProfileChannelEndpointAssignmentParams) SetChannelEndpointSid(ChannelEndpointSid string) *ListCustomerProfileChannelEndpointAssignmentParams {
	params.ChannelEndpointSid = &ChannelEndpointSid
	return params
}
func (params *ListCustomerProfileChannelEndpointAssignmentParams) SetChannelEndpointSids(ChannelEndpointSids string) *ListCustomerProfileChannelEndpointAssignmentParams {
	params.ChannelEndpointSids = &ChannelEndpointSids
	return params
}
func (params *ListCustomerProfileChannelEndpointAssignmentParams) SetPageSize(PageSize int32) *ListCustomerProfileChannelEndpointAssignmentParams {
	params.PageSize = &PageSize
	return params
}

// ListCustomerProfileChannelEndpointAssignment Method for ListCustomerProfileChannelEndpointAssignment
//
// Retrieve a list of all Assigned Items for an account.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *ListCustomerProfileChannelEndpointAssignmentParams - Optional Parameters:
//
// param: "ChannelEndpointSid" (string) - The SID of an channel endpoint
//
// param: "ChannelEndpointSids" (string) - comma separated list of channel endpoint sids
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCustomerProfileChannelEndpointAssignmentResponse
func (c *DefaultApiService) ListCustomerProfileChannelEndpointAssignment(CustomerProfileSid string, params *ListCustomerProfileChannelEndpointAssignmentParams) (*ListCustomerProfileChannelEndpointAssignmentResponse, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ChannelEndpointSid != nil {
		data.Set("ChannelEndpointSid", *params.ChannelEndpointSid)
	}
	if params != nil && params.ChannelEndpointSids != nil {
		data.Set("ChannelEndpointSids", *params.ChannelEndpointSids)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCustomerProfileChannelEndpointAssignmentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCustomerProfileEntityAssignmentParams Optional parameters for the method 'ListCustomerProfileEntityAssignment'
type ListCustomerProfileEntityAssignmentParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListCustomerProfileEntityAssignmentParams) SetPageSize(PageSize int32) *ListCustomerProfileEntityAssignmentParams {
	params.PageSize = &PageSize
	return params
}

// ListCustomerProfileEntityAssignment Method for ListCustomerProfileEntityAssignment
//
// Retrieve a list of all Assigned Items for an account.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *ListCustomerProfileEntityAssignmentParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCustomerProfileEntityAssignmentResponse
func (c *DefaultApiService) ListCustomerProfileEntityAssignment(CustomerProfileSid string, params *ListCustomerProfileEntityAssignmentParams) (*ListCustomerProfileEntityAssignmentResponse, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCustomerProfileEntityAssignmentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCustomerProfileEvaluationParams Optional parameters for the method 'ListCustomerProfileEvaluation'
type ListCustomerProfileEvaluationParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListCustomerProfileEvaluationParams) SetPageSize(PageSize int32) *ListCustomerProfileEvaluationParams {
	params.PageSize = &PageSize
	return params
}

// ListCustomerProfileEvaluation Method for ListCustomerProfileEvaluation
//
// Retrieve a list of Evaluations associated to the customer_profile resource.
//
// param: CustomerProfileSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *ListCustomerProfileEvaluationParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCustomerProfileEvaluationResponse
func (c *DefaultApiService) ListCustomerProfileEvaluation(CustomerProfileSid string, params *ListCustomerProfileEvaluationParams) (*ListCustomerProfileEvaluationResponse, error) {
	path := "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations"
	path = strings.Replace(path, "{"+"CustomerProfileSid"+"}", CustomerProfileSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCustomerProfileEvaluationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListEndUserParams Optional parameters for the method 'ListEndUser'
type ListEndUserParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListEndUserParams) SetPageSize(PageSize int32) *ListEndUserParams {
	params.PageSize = &PageSize
	return params
}

// ListEndUser Method for ListEndUser
//
// Retrieve a list of all End User for an account.
//
// param: optional nil or *ListEndUserParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListEndUserResponse
func (c *DefaultApiService) ListEndUser(params *ListEndUserParams) (*ListEndUserResponse, error) {
	path := "/v1/EndUsers"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListEndUserResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListEndUserTypeParams Optional parameters for the method 'ListEndUserType'
type ListEndUserTypeParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListEndUserTypeParams) SetPageSize(PageSize int32) *ListEndUserTypeParams {
	params.PageSize = &PageSize
	return params
}

// ListEndUserType Method for ListEndUserType
//
// Retrieve a list of all End-User Types.
//
// param: optional nil or *ListEndUserTypeParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListEndUserTypeResponse
func (c *DefaultApiService) ListEndUserType(params *ListEndUserTypeParams) (*ListEndUserTypeResponse, error) {
	path := "/v1/EndUserTypes"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListEndUserTypeResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListPoliciesParams Optional parameters for the method 'ListPolicies'
type ListPoliciesParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListPoliciesParams) SetPageSize(PageSize int32) *ListPoliciesParams {
	params.PageSize = &PageSize
	return params
}

// ListPolicies Method for ListPolicies
//
// Retrieve a list of all Policys.
//
// param: optional nil or *ListPoliciesParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListPoliciesResponse
func (c *DefaultApiService) ListPolicies(params *ListPoliciesParams) (*ListPoliciesResponse, error) {
	path := "/v1/Policies"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListPoliciesResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSupportingDocumentParams Optional parameters for the method 'ListSupportingDocument'
type ListSupportingDocumentParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListSupportingDocumentParams) SetPageSize(PageSize int32) *ListSupportingDocumentParams {
	params.PageSize = &PageSize
	return params
}

// ListSupportingDocument Method for ListSupportingDocument
//
// Retrieve a list of all Supporting Document for an account.
//
// param: optional nil or *ListSupportingDocumentParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSupportingDocumentResponse
func (c *DefaultApiService) ListSupportingDocument(params *ListSupportingDocumentParams) (*ListSupportingDocumentResponse, error) {
	path := "/v1/SupportingDocuments"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSupportingDocumentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListSupportingDocumentTypeParams Optional parameters for the method 'ListSupportingDocumentType'
type ListSupportingDocumentTypeParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListSupportingDocumentTypeParams) SetPageSize(PageSize int32) *ListSupportingDocumentTypeParams {
	params.PageSize = &PageSize
	return params
}

// ListSupportingDocumentType Method for ListSupportingDocumentType
//
// Retrieve a list of all Supporting Document Types.
//
// param: optional nil or *ListSupportingDocumentTypeParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListSupportingDocumentTypeResponse
func (c *DefaultApiService) ListSupportingDocumentType(params *ListSupportingDocumentTypeParams) (*ListSupportingDocumentTypeResponse, error) {
	path := "/v1/SupportingDocumentTypes"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListSupportingDocumentTypeResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListTrustProductParams Optional parameters for the method 'ListTrustProduct'
type ListTrustProductParams struct {
	Status       *string `json:"Status,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PolicySid    *string `json:"PolicySid,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty"`
}

func (params *ListTrustProductParams) SetStatus(Status string) *ListTrustProductParams {
	params.Status = &Status
	return params
}
func (params *ListTrustProductParams) SetFriendlyName(FriendlyName string) *ListTrustProductParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *ListTrustProductParams) SetPolicySid(PolicySid string) *ListTrustProductParams {
	params.PolicySid = &PolicySid
	return params
}
func (params *ListTrustProductParams) SetPageSize(PageSize int32) *ListTrustProductParams {
	params.PageSize = &PageSize
	return params
}

// ListTrustProduct Method for ListTrustProduct
//
// Retrieve a list of all Customer-Profiles for an account.
//
// param: optional nil or *ListTrustProductParams - Optional Parameters:
//
// param: "Status" (string) - The verification status of the Customer-Profile resource.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "PolicySid" (string) - The unique string of a policy that is associated to the Customer-Profile resource.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListTrustProductResponse
func (c *DefaultApiService) ListTrustProduct(params *ListTrustProductParams) (*ListTrustProductResponse, error) {
	path := "/v1/TrustProducts"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PolicySid != nil {
		data.Set("PolicySid", *params.PolicySid)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTrustProductResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListTrustProductChannelEndpointAssignmentParams Optional parameters for the method 'ListTrustProductChannelEndpointAssignment'
type ListTrustProductChannelEndpointAssignmentParams struct {
	ChannelEndpointSid  *string `json:"ChannelEndpointSid,omitempty"`
	ChannelEndpointSids *string `json:"ChannelEndpointSids,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty"`
}

func (params *ListTrustProductChannelEndpointAssignmentParams) SetChannelEndpointSid(ChannelEndpointSid string) *ListTrustProductChannelEndpointAssignmentParams {
	params.ChannelEndpointSid = &ChannelEndpointSid
	return params
}
func (params *ListTrustProductChannelEndpointAssignmentParams) SetChannelEndpointSids(ChannelEndpointSids string) *ListTrustProductChannelEndpointAssignmentParams {
	params.ChannelEndpointSids = &ChannelEndpointSids
	return params
}
func (params *ListTrustProductChannelEndpointAssignmentParams) SetPageSize(PageSize int32) *ListTrustProductChannelEndpointAssignmentParams {
	params.PageSize = &PageSize
	return params
}

// ListTrustProductChannelEndpointAssignment Method for ListTrustProductChannelEndpointAssignment
//
// Retrieve a list of all Assigned Items for an account.
//
// param: TrustProductSid The unique string that we created to identify the CustomerProfile resource.
//
// param: optional nil or *ListTrustProductChannelEndpointAssignmentParams - Optional Parameters:
//
// param: "ChannelEndpointSid" (string) - The SID of an channel endpoint
//
// param: "ChannelEndpointSids" (string) - comma separated list of channel endpoint sids
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListTrustProductChannelEndpointAssignmentResponse
func (c *DefaultApiService) ListTrustProductChannelEndpointAssignment(TrustProductSid string, params *ListTrustProductChannelEndpointAssignmentParams) (*ListTrustProductChannelEndpointAssignmentResponse, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ChannelEndpointSid != nil {
		data.Set("ChannelEndpointSid", *params.ChannelEndpointSid)
	}
	if params != nil && params.ChannelEndpointSids != nil {
		data.Set("ChannelEndpointSids", *params.ChannelEndpointSids)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTrustProductChannelEndpointAssignmentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListTrustProductEntityAssignmentParams Optional parameters for the method 'ListTrustProductEntityAssignment'
type ListTrustProductEntityAssignmentParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListTrustProductEntityAssignmentParams) SetPageSize(PageSize int32) *ListTrustProductEntityAssignmentParams {
	params.PageSize = &PageSize
	return params
}

// ListTrustProductEntityAssignment Method for ListTrustProductEntityAssignment
//
// Retrieve a list of all Assigned Items for an account.
//
// param: TrustProductSid The unique string that we created to identify the TrustProduct resource.
//
// param: optional nil or *ListTrustProductEntityAssignmentParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListTrustProductEntityAssignmentResponse
func (c *DefaultApiService) ListTrustProductEntityAssignment(TrustProductSid string, params *ListTrustProductEntityAssignmentParams) (*ListTrustProductEntityAssignmentResponse, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/EntityAssignments"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTrustProductEntityAssignmentResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListTrustProductEvaluationParams Optional parameters for the method 'ListTrustProductEvaluation'
type ListTrustProductEvaluationParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListTrustProductEvaluationParams) SetPageSize(PageSize int32) *ListTrustProductEvaluationParams {
	params.PageSize = &PageSize
	return params
}

// ListTrustProductEvaluation Method for ListTrustProductEvaluation
//
// Retrieve a list of Evaluations associated to the trust_product resource.
//
// param: TrustProductSid The unique string that we created to identify the trust_product resource.
//
// param: optional nil or *ListTrustProductEvaluationParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListTrustProductEvaluationResponse
func (c *DefaultApiService) ListTrustProductEvaluation(TrustProductSid string, params *ListTrustProductEvaluationParams) (*ListTrustProductEvaluationResponse, error) {
	path := "/v1/TrustProducts/{TrustProductSid}/Evaluations"
	path = strings.Replace(path, "{"+"TrustProductSid"+"}", TrustProductSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTrustProductEvaluationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateCustomerProfileParams Optional parameters for the method 'UpdateCustomerProfile'
type UpdateCustomerProfileParams struct {
	Email          *string `json:"Email,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	Status         *string `json:"Status,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
}

func (params *UpdateCustomerProfileParams) SetEmail(Email string) *UpdateCustomerProfileParams {
	params.Email = &Email
	return params
}
func (params *UpdateCustomerProfileParams) SetFriendlyName(FriendlyName string) *UpdateCustomerProfileParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateCustomerProfileParams) SetStatus(Status string) *UpdateCustomerProfileParams {
	params.Status = &Status
	return params
}
func (params *UpdateCustomerProfileParams) SetStatusCallback(StatusCallback string) *UpdateCustomerProfileParams {
	params.StatusCallback = &StatusCallback
	return params
}

// UpdateCustomerProfile Method for UpdateCustomerProfile
//
// Updates a Customer-Profile in an account.
//
// param: Sid The unique string that we created to identify the Customer-Profile resource.
//
// param: optional nil or *UpdateCustomerProfileParams - Optional Parameters:
//
// param: "Email" (string) - The email address that will receive updates when the Customer-Profile resource changes status.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "Status" (string) - The verification status of the Customer-Profile resource.
//
// param: "StatusCallback" (string) - The URL we call to inform your application of status changes.
//
// return: TrusthubV1CustomerProfile
func (c *DefaultApiService) UpdateCustomerProfile(Sid string, params *UpdateCustomerProfileParams) (*TrusthubV1CustomerProfile, error) {
	path := "/v1/CustomerProfiles/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Email != nil {
		data.Set("Email", *params.Email)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1CustomerProfile{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateEndUserParams Optional parameters for the method 'UpdateEndUser'
type UpdateEndUserParams struct {
	Attributes   *map[string]interface{} `json:"Attributes,omitempty"`
	FriendlyName *string                 `json:"FriendlyName,omitempty"`
}

func (params *UpdateEndUserParams) SetAttributes(Attributes map[string]interface{}) *UpdateEndUserParams {
	params.Attributes = &Attributes
	return params
}
func (params *UpdateEndUserParams) SetFriendlyName(FriendlyName string) *UpdateEndUserParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateEndUser Method for UpdateEndUser
//
// Update an existing End User.
//
// param: Sid The unique string created by Twilio to identify the End User resource.
//
// param: optional nil or *UpdateEndUserParams - Optional Parameters:
//
// param: "Attributes" (map[string]interface{}) - The set of parameters that are the attributes of the End User resource which are derived End User Types.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// return: TrusthubV1EndUser
func (c *DefaultApiService) UpdateEndUser(Sid string, params *UpdateEndUserParams) (*TrusthubV1EndUser, error) {
	path := "/v1/EndUsers/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		v, err := json.Marshal(params.Attributes)

		if err != nil {
			return nil, err
		}

		data.Set("Attributes", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1EndUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateSupportingDocumentParams Optional parameters for the method 'UpdateSupportingDocument'
type UpdateSupportingDocumentParams struct {
	Attributes   *map[string]interface{} `json:"Attributes,omitempty"`
	FriendlyName *string                 `json:"FriendlyName,omitempty"`
}

func (params *UpdateSupportingDocumentParams) SetAttributes(Attributes map[string]interface{}) *UpdateSupportingDocumentParams {
	params.Attributes = &Attributes
	return params
}
func (params *UpdateSupportingDocumentParams) SetFriendlyName(FriendlyName string) *UpdateSupportingDocumentParams {
	params.FriendlyName = &FriendlyName
	return params
}

// UpdateSupportingDocument Method for UpdateSupportingDocument
//
// Update an existing Supporting Document.
//
// param: Sid The unique string created by Twilio to identify the Supporting Document resource.
//
// param: optional nil or *UpdateSupportingDocumentParams - Optional Parameters:
//
// param: "Attributes" (map[string]interface{}) - The set of parameters that are the attributes of the Supporting Document resource which are derived Supporting Document Types.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// return: TrusthubV1SupportingDocument
func (c *DefaultApiService) UpdateSupportingDocument(Sid string, params *UpdateSupportingDocumentParams) (*TrusthubV1SupportingDocument, error) {
	path := "/v1/SupportingDocuments/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		v, err := json.Marshal(params.Attributes)

		if err != nil {
			return nil, err
		}

		data.Set("Attributes", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1SupportingDocument{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateTrustProductParams Optional parameters for the method 'UpdateTrustProduct'
type UpdateTrustProductParams struct {
	Email          *string `json:"Email,omitempty"`
	FriendlyName   *string `json:"FriendlyName,omitempty"`
	Status         *string `json:"Status,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
}

func (params *UpdateTrustProductParams) SetEmail(Email string) *UpdateTrustProductParams {
	params.Email = &Email
	return params
}
func (params *UpdateTrustProductParams) SetFriendlyName(FriendlyName string) *UpdateTrustProductParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateTrustProductParams) SetStatus(Status string) *UpdateTrustProductParams {
	params.Status = &Status
	return params
}
func (params *UpdateTrustProductParams) SetStatusCallback(StatusCallback string) *UpdateTrustProductParams {
	params.StatusCallback = &StatusCallback
	return params
}

// UpdateTrustProduct Method for UpdateTrustProduct
//
// Updates a Customer-Profile in an account.
//
// param: Sid The unique string that we created to identify the Customer-Profile resource.
//
// param: optional nil or *UpdateTrustProductParams - Optional Parameters:
//
// param: "Email" (string) - The email address that will receive updates when the Customer-Profile resource changes status.
//
// param: "FriendlyName" (string) - The string that you assigned to describe the resource.
//
// param: "Status" (string) - The verification status of the Customer-Profile resource.
//
// param: "StatusCallback" (string) - The URL we call to inform your application of status changes.
//
// return: TrusthubV1TrustProduct
func (c *DefaultApiService) UpdateTrustProduct(Sid string, params *UpdateTrustProductParams) (*TrusthubV1TrustProduct, error) {
	path := "/v1/TrustProducts/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Email != nil {
		data.Set("Email", *params.Email)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1TrustProduct{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
