/*
 * Twilio - Taskrouter
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
    "reflect"
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateActivityParams Optional parameters for the method 'CreateActivity'
type CreateActivityParams struct {
    Available *bool `json:"Available,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateActivity Method for CreateActivity
 * @param workspaceSid The SID of the Workspace that the new Activity belongs to.
 * @param optional nil or *CreateActivityOpts - Optional Parameters:
 * @param "Available" (bool) - Whether the Worker should be eligible to receive a Task when it occupies the Activity. A value of `true`, `1`, or `yes` specifies the Activity is available. All other values specify that it is not. The value cannot be changed after the Activity is created.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Activity resource. It can be up to 64 characters long. These names are used to calculate and expose statistics about Workers, and provide visibility into the state of each Worker. Examples of friendly names include: `on-call`, `break`, and `email`.
@return TaskrouterV1WorkspaceActivity
*/
func (c *DefaultApiService) CreateActivity(workspaceSid string, params *CreateActivityParams) (*TaskrouterV1WorkspaceActivity, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Activities"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Available != nil {
        data.Set("Available", string(*params.Available))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceActivity{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateTaskParams Optional parameters for the method 'CreateTask'
type CreateTaskParams struct {
    Attributes *string `json:"Attributes,omitempty"`
    Priority *int32 `json:"Priority,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    Timeout *int32 `json:"Timeout,omitempty"`
    WorkflowSid *string `json:"WorkflowSid,omitempty"`
}

/*
CreateTask Method for CreateTask
 * @param workspaceSid The SID of the Workspace that the new Task belongs to.
 * @param optional nil or *CreateTaskOpts - Optional Parameters:
 * @param "Attributes" (string) - A URL-encoded JSON string with the attributes of the new task. This value is passed to the Workflow's `assignment_callback_url` when the Task is assigned to a Worker. For example: `{ \\\"task_type\\\": \\\"call\\\", \\\"twilio_call_sid\\\": \\\"CAxxx\\\", \\\"customer_ticket_number\\\": \\\"12345\\\" }`.
 * @param "Priority" (int32) - The priority to assign the new task and override the default. When supplied, the new Task will have this priority unless it matches a Workflow Target with a Priority set. When not supplied, the new Task will have the priority of the matching Workflow Target. Value can be 0 to 2^31^ (2,147,483,647).
 * @param "TaskChannel" (string) - When MultiTasking is enabled, specify the TaskChannel by passing either its `unique_name` or `sid`. Default value is `default`.
 * @param "Timeout" (int32) - The amount of time in seconds the new task is allowed to live. Can be up to a maximum of 2 weeks (1,209,600 seconds). The default value is 24 hours (86,400 seconds). On timeout, the `task.canceled` event will fire with description `Task TTL Exceeded`.
 * @param "WorkflowSid" (string) - The SID of the Workflow that you would like to handle routing for the new Task. If there is only one Workflow defined for the Workspace that you are posting the new task to, this parameter is optional.
@return TaskrouterV1WorkspaceTask
*/
func (c *DefaultApiService) CreateTask(workspaceSid string, params *CreateTaskParams) (*TaskrouterV1WorkspaceTask, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.Priority != nil {
        data.Set("Priority", string(*params.Priority))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.Timeout != nil {
        data.Set("Timeout", string(*params.Timeout))
    }
    if params != nil && params.WorkflowSid != nil {
        data.Set("WorkflowSid", *params.WorkflowSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateTaskChannelParams Optional parameters for the method 'CreateTaskChannel'
type CreateTaskChannelParams struct {
    ChannelOptimizedRouting *bool `json:"ChannelOptimizedRouting,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateTaskChannel Method for CreateTaskChannel
 * @param workspaceSid The SID of the Workspace that the new Task Channel belongs to.
 * @param optional nil or *CreateTaskChannelOpts - Optional Parameters:
 * @param "ChannelOptimizedRouting" (bool) - Whether the Task Channel should prioritize Workers that have been idle. If `true`, Workers that have been idle the longest are prioritized.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Task Channel. It can be up to 64 characters long.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the Task Channel, such as `voice` or `sms`.
@return TaskrouterV1WorkspaceTaskChannel
*/
func (c *DefaultApiService) CreateTaskChannel(workspaceSid string, params *CreateTaskChannelParams) (*TaskrouterV1WorkspaceTaskChannel, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskChannels"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ChannelOptimizedRouting != nil {
        data.Set("ChannelOptimizedRouting", string(*params.ChannelOptimizedRouting))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateTaskQueueParams Optional parameters for the method 'CreateTaskQueue'
type CreateTaskQueueParams struct {
    AssignmentActivitySid *string `json:"AssignmentActivitySid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    MaxReservedWorkers *int32 `json:"MaxReservedWorkers,omitempty"`
    ReservationActivitySid *string `json:"ReservationActivitySid,omitempty"`
    TargetWorkers *string `json:"TargetWorkers,omitempty"`
    TaskOrder *string `json:"TaskOrder,omitempty"`
}

/*
CreateTaskQueue Method for CreateTaskQueue
 * @param workspaceSid The SID of the Workspace that the new TaskQueue belongs to.
 * @param optional nil or *CreateTaskQueueOpts - Optional Parameters:
 * @param "AssignmentActivitySid" (string) - The SID of the Activity to assign Workers when a task is assigned to them.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the TaskQueue. For example `Support-Tier 1`, `Sales`, or `Escalation`.
 * @param "MaxReservedWorkers" (int32) - The maximum number of Workers to reserve for the assignment of a Task in the queue. Can be an integer between 1 and 50, inclusive and defaults to 1.
 * @param "ReservationActivitySid" (string) - The SID of the Activity to assign Workers when a task is reserved for them.
 * @param "TargetWorkers" (string) - A string that describes the Worker selection criteria for any Tasks that enter the TaskQueue. For example, `'\\\"language\\\" == \\\"spanish\\\"'`. The default value is `1==1`. If this value is empty, Tasks will wait in the TaskQueue until they are deleted or moved to another TaskQueue. For more information about Worker selection, see [Describing Worker selection criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues#target-workers).
 * @param "TaskOrder" (string) - How Tasks will be assigned to Workers. Set this parameter to `LIFO` to assign most recently created Task first or FIFO to assign the oldest Task first. Default is `FIFO`. [Click here](https://www.twilio.com/docs/taskrouter/queue-ordering-last-first-out-lifo) to learn more.
@return TaskrouterV1WorkspaceTaskQueue
*/
func (c *DefaultApiService) CreateTaskQueue(workspaceSid string, params *CreateTaskQueueParams) (*TaskrouterV1WorkspaceTaskQueue, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AssignmentActivitySid != nil {
        data.Set("AssignmentActivitySid", *params.AssignmentActivitySid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.MaxReservedWorkers != nil {
        data.Set("MaxReservedWorkers", string(*params.MaxReservedWorkers))
    }
    if params != nil && params.ReservationActivitySid != nil {
        data.Set("ReservationActivitySid", *params.ReservationActivitySid)
    }
    if params != nil && params.TargetWorkers != nil {
        data.Set("TargetWorkers", *params.TargetWorkers)
    }
    if params != nil && params.TaskOrder != nil {
        data.Set("TaskOrder", *params.TaskOrder)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateWorkerParams Optional parameters for the method 'CreateWorker'
type CreateWorkerParams struct {
    ActivitySid *string `json:"ActivitySid,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateWorker Method for CreateWorker
 * @param workspaceSid The SID of the Workspace that the new Worker belongs to.
 * @param optional nil or *CreateWorkerOpts - Optional Parameters:
 * @param "ActivitySid" (string) - The SID of a valid Activity that will describe the new Worker's initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. If not provided, the new Worker's initial state is the `default_activity_sid` configured on the Workspace.
 * @param "Attributes" (string) - A valid JSON string that describes the new Worker. For example: `{ \\\"email\\\": \\\"Bob@example.com\\\", \\\"phone\\\": \\\"+5095551234\\\" }`. This data is passed to the `assignment_callback_url` when TaskRouter assigns a Task to the Worker. Defaults to {}.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new Worker. It can be up to 64 characters long.
@return TaskrouterV1WorkspaceWorker
*/
func (c *DefaultApiService) CreateWorker(workspaceSid string, params *CreateWorkerParams) (*TaskrouterV1WorkspaceWorker, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ActivitySid != nil {
        data.Set("ActivitySid", *params.ActivitySid)
    }
    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorker{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateWorkflowParams Optional parameters for the method 'CreateWorkflow'
type CreateWorkflowParams struct {
    AssignmentCallbackUrl *string `json:"AssignmentCallbackUrl,omitempty"`
    Configuration *string `json:"Configuration,omitempty"`
    FallbackAssignmentCallbackUrl *string `json:"FallbackAssignmentCallbackUrl,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    TaskReservationTimeout *int32 `json:"TaskReservationTimeout,omitempty"`
}

/*
CreateWorkflow Method for CreateWorkflow
 * @param workspaceSid The SID of the Workspace that the new Workflow to create belongs to.
 * @param optional nil or *CreateWorkflowOpts - Optional Parameters:
 * @param "AssignmentCallbackUrl" (string) - The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details.
 * @param "Configuration" (string) - A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information.
 * @param "FallbackAssignmentCallbackUrl" (string) - The URL that we should call when a call to the `assignment_callback_url` fails.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Workflow resource. For example, `Inbound Call Workflow` or `2014 Outbound Campaign`.
 * @param "TaskReservationTimeout" (int32) - How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`.
@return TaskrouterV1WorkspaceWorkflow
*/
func (c *DefaultApiService) CreateWorkflow(workspaceSid string, params *CreateWorkflowParams) (*TaskrouterV1WorkspaceWorkflow, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AssignmentCallbackUrl != nil {
        data.Set("AssignmentCallbackUrl", *params.AssignmentCallbackUrl)
    }
    if params != nil && params.Configuration != nil {
        data.Set("Configuration", *params.Configuration)
    }
    if params != nil && params.FallbackAssignmentCallbackUrl != nil {
        data.Set("FallbackAssignmentCallbackUrl", *params.FallbackAssignmentCallbackUrl)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.TaskReservationTimeout != nil {
        data.Set("TaskReservationTimeout", string(*params.TaskReservationTimeout))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkflow{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateWorkspaceParams Optional parameters for the method 'CreateWorkspace'
type CreateWorkspaceParams struct {
    EventCallbackUrl *string `json:"EventCallbackUrl,omitempty"`
    EventsFilter *string `json:"EventsFilter,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    MultiTaskEnabled *bool `json:"MultiTaskEnabled,omitempty"`
    PrioritizeQueueOrder *string `json:"PrioritizeQueueOrder,omitempty"`
    Template *string `json:"Template,omitempty"`
}

/*
CreateWorkspace Method for CreateWorkspace
 * @param optional nil or *CreateWorkspaceOpts - Optional Parameters:
 * @param "EventCallbackUrl" (string) - The URL we should call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information.
 * @param "EventsFilter" (string) - The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Workspace resource. It can be up to 64 characters long. For example: `Customer Support` or `2014 Election Campaign`.
 * @param "MultiTaskEnabled" (bool) - Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. The default is `false`. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. Otherwise, each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking][https://www.twilio.com/docs/taskrouter/multitasking].
 * @param "PrioritizeQueueOrder" (string) - The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues. Can be: `LIFO` or `FIFO` and the default is `FIFO`. For more information, see [Queue Ordering][https://www.twilio.com/docs/taskrouter/queue-ordering-last-first-out-lifo].
 * @param "Template" (string) - An available template name. Can be: `NONE` or `FIFO` and the default is `NONE`. Pre-configures the Workspace with the Workflow and Activities specified in the template. `NONE` will create a Workspace with only a set of default activities. `FIFO` will configure TaskRouter with a set of default activities and a single TaskQueue for first-in, first-out distribution, which can be useful when you are getting started with TaskRouter.
@return TaskrouterV1Workspace
*/
func (c *DefaultApiService) CreateWorkspace(params *CreateWorkspaceParams) (*TaskrouterV1Workspace, error) {
    path := "/v1/Workspaces"

    data := url.Values{}
    headers := 0

    if params != nil && params.EventCallbackUrl != nil {
        data.Set("EventCallbackUrl", *params.EventCallbackUrl)
    }
    if params != nil && params.EventsFilter != nil {
        data.Set("EventsFilter", *params.EventsFilter)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.MultiTaskEnabled != nil {
        data.Set("MultiTaskEnabled", string(*params.MultiTaskEnabled))
    }
    if params != nil && params.PrioritizeQueueOrder != nil {
        data.Set("PrioritizeQueueOrder", *params.PrioritizeQueueOrder)
    }
    if params != nil && params.Template != nil {
        data.Set("Template", *params.Template)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1Workspace{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
DeleteActivity Method for DeleteActivity
 * @param workspaceSid The SID of the Workspace with the Activity resources to delete.
 * @param sid The SID of the Activity resource to delete.
*/
func (c *DefaultApiService) DeleteActivity(workspaceSid string, sid string) (error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteTask Method for DeleteTask
 * @param workspaceSid The SID of the Workspace with the Task to delete.
 * @param sid The SID of the Task resource to delete.
*/
func (c *DefaultApiService) DeleteTask(workspaceSid string, sid string) (error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteTaskChannel Method for DeleteTaskChannel
 * @param workspaceSid The SID of the Workspace with the Task Channel to delete.
 * @param sid The SID of the Task Channel resource to delete.
*/
func (c *DefaultApiService) DeleteTaskChannel(workspaceSid string, sid string) (error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteTaskQueue Method for DeleteTaskQueue
 * @param workspaceSid The SID of the Workspace with the TaskQueue to delete.
 * @param sid The SID of the TaskQueue resource to delete.
*/
func (c *DefaultApiService) DeleteTaskQueue(workspaceSid string, sid string) (error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteWorker Method for DeleteWorker
 * @param workspaceSid The SID of the Workspace with the Worker to delete.
 * @param sid The SID of the Worker resource to delete.
*/
func (c *DefaultApiService) DeleteWorker(workspaceSid string, sid string) (error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteWorkflow Method for DeleteWorkflow
 * @param workspaceSid The SID of the Workspace with the Workflow to delete.
 * @param sid The SID of the Workflow resource to delete.
*/
func (c *DefaultApiService) DeleteWorkflow(workspaceSid string, sid string) (error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteWorkspace Method for DeleteWorkspace
 * @param sid The SID of the Workspace resource to delete.
*/
func (c *DefaultApiService) DeleteWorkspace(sid string) (error) {
    path := "/v1/Workspaces/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchActivity Method for FetchActivity
 * @param workspaceSid The SID of the Workspace with the Activity resources to fetch.
 * @param sid The SID of the Activity resource to fetch.
@return TaskrouterV1WorkspaceActivity
*/
func (c *DefaultApiService) FetchActivity(workspaceSid string, sid string) (*TaskrouterV1WorkspaceActivity, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceActivity{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchEvent Method for FetchEvent
 * @param workspaceSid The SID of the Workspace with the Event to fetch.
 * @param sid The SID of the Event resource to fetch.
@return TaskrouterV1WorkspaceEvent
*/
func (c *DefaultApiService) FetchEvent(workspaceSid string, sid string) (*TaskrouterV1WorkspaceEvent, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Events/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceEvent{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTask Method for FetchTask
 * @param workspaceSid The SID of the Workspace with the Task to fetch.
 * @param sid The SID of the Task resource to fetch.
@return TaskrouterV1WorkspaceTask
*/
func (c *DefaultApiService) FetchTask(workspaceSid string, sid string) (*TaskrouterV1WorkspaceTask, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTaskChannel Method for FetchTaskChannel
 * @param workspaceSid The SID of the Workspace with the Task Channel to fetch.
 * @param sid The SID of the Task Channel resource to fetch.
@return TaskrouterV1WorkspaceTaskChannel
*/
func (c *DefaultApiService) FetchTaskChannel(workspaceSid string, sid string) (*TaskrouterV1WorkspaceTaskChannel, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTaskQueue Method for FetchTaskQueue
 * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch.
 * @param sid The SID of the TaskQueue resource to fetch.
@return TaskrouterV1WorkspaceTaskQueue
*/
func (c *DefaultApiService) FetchTaskQueue(workspaceSid string, sid string) (*TaskrouterV1WorkspaceTaskQueue, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchTaskQueueCumulativeStatisticsParams Optional parameters for the method 'FetchTaskQueueCumulativeStatistics'
type FetchTaskQueueCumulativeStatisticsParams struct {
    EndDate *time.Time `json:"EndDate,omitempty"`
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

/*
FetchTaskQueueCumulativeStatistics Method for FetchTaskQueueCumulativeStatistics
 * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch.
 * @param taskQueueSid The SID of the TaskQueue for which to fetch statistics.
 * @param optional nil or *FetchTaskQueueCumulativeStatisticsOpts - Optional Parameters:
 * @param "EndDate" (time.Time) - Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default is 15 minutes.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "TaskChannel" (string) - Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
 * @param "SplitByWaitTime" (string) - A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.
@return TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics
*/
func (c *DefaultApiService) FetchTaskQueueCumulativeStatistics(workspaceSid string, taskQueueSid string, params *FetchTaskQueueCumulativeStatisticsParams) (*TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"TaskQueueSid"+"}", taskQueueSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.SplitByWaitTime != nil {
        data.Set("SplitByWaitTime", *params.SplitByWaitTime)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchTaskQueueRealTimeStatisticsParams Optional parameters for the method 'FetchTaskQueueRealTimeStatistics'
type FetchTaskQueueRealTimeStatisticsParams struct {
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
FetchTaskQueueRealTimeStatistics Method for FetchTaskQueueRealTimeStatistics
 * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch.
 * @param taskQueueSid The SID of the TaskQueue for which to fetch statistics.
 * @param optional nil or *FetchTaskQueueRealTimeStatisticsOpts - Optional Parameters:
 * @param "TaskChannel" (string) - The TaskChannel for which to fetch statistics. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics
*/
func (c *DefaultApiService) FetchTaskQueueRealTimeStatistics(workspaceSid string, taskQueueSid string, params *FetchTaskQueueRealTimeStatisticsParams) (*TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"TaskQueueSid"+"}", taskQueueSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchTaskQueueStatisticsParams Optional parameters for the method 'FetchTaskQueueStatistics'
type FetchTaskQueueStatisticsParams struct {
    EndDate *time.Time `json:"EndDate,omitempty"`
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

/*
FetchTaskQueueStatistics Method for FetchTaskQueueStatistics
 * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch.
 * @param taskQueueSid The SID of the TaskQueue for which to fetch statistics.
 * @param optional nil or *FetchTaskQueueStatisticsOpts - Optional Parameters:
 * @param "EndDate" (time.Time) - Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default is 15 minutes.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "TaskChannel" (string) - Only calculate real-time and cumulative statistics for the specified TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
 * @param "SplitByWaitTime" (string) - A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.
@return TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics
*/
func (c *DefaultApiService) FetchTaskQueueStatistics(workspaceSid string, taskQueueSid string, params *FetchTaskQueueStatisticsParams) (*TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"TaskQueueSid"+"}", taskQueueSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.SplitByWaitTime != nil {
        data.Set("SplitByWaitTime", *params.SplitByWaitTime)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTaskReservation Method for FetchTaskReservation
 * @param workspaceSid The SID of the Workspace with the TaskReservation resource to fetch.
 * @param taskSid The SID of the reserved Task resource with the TaskReservation resource to fetch.
 * @param sid The SID of the TaskReservation resource to fetch.
@return TaskrouterV1WorkspaceTaskTaskReservation
*/
func (c *DefaultApiService) FetchTaskReservation(workspaceSid string, taskSid string, sid string) (*TaskrouterV1WorkspaceTaskTaskReservation, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskTaskReservation{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchWorker Method for FetchWorker
 * @param workspaceSid The SID of the Workspace with the Worker to fetch.
 * @param sid The SID of the Worker resource to fetch.
@return TaskrouterV1WorkspaceWorker
*/
func (c *DefaultApiService) FetchWorker(workspaceSid string, sid string) (*TaskrouterV1WorkspaceWorker, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorker{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchWorkerChannel Method for FetchWorkerChannel
 * @param workspaceSid The SID of the Workspace with the WorkerChannel to fetch.
 * @param workerSid The SID of the Worker with the WorkerChannel to fetch.
 * @param sid The SID of the WorkerChannel to fetch.
@return TaskrouterV1WorkspaceWorkerWorkerChannel
*/
func (c *DefaultApiService) FetchWorkerChannel(workspaceSid string, workerSid string, sid string) (*TaskrouterV1WorkspaceWorkerWorkerChannel, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkerSid"+"}", workerSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkerInstanceStatisticsParams Optional parameters for the method 'FetchWorkerInstanceStatistics'
type FetchWorkerInstanceStatisticsParams struct {
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    EndDate *time.Time `json:"EndDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
FetchWorkerInstanceStatistics Method for FetchWorkerInstanceStatistics
 * @param workspaceSid The SID of the Workspace with the WorkerChannel to fetch.
 * @param workerSid The SID of the Worker with the WorkerChannel to fetch.
 * @param optional nil or *FetchWorkerInstanceStatisticsOpts - Optional Parameters:
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "EndDate" (time.Time) - Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "TaskChannel" (string) - Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics
*/
func (c *DefaultApiService) FetchWorkerInstanceStatistics(workspaceSid string, workerSid string, params *FetchWorkerInstanceStatisticsParams) (*TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Statistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkerSid"+"}", workerSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchWorkerReservation Method for FetchWorkerReservation
 * @param workspaceSid The SID of the Workspace with the WorkerReservation resource to fetch.
 * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resource to fetch.
 * @param sid The SID of the WorkerReservation resource to fetch.
@return TaskrouterV1WorkspaceWorkerWorkerReservation
*/
func (c *DefaultApiService) FetchWorkerReservation(workspaceSid string, workerSid string, sid string) (*TaskrouterV1WorkspaceWorkerWorkerReservation, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkerSid"+"}", workerSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerReservation{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkerStatisticsParams Optional parameters for the method 'FetchWorkerStatistics'
type FetchWorkerStatisticsParams struct {
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    EndDate *time.Time `json:"EndDate,omitempty"`
    TaskQueueSid *string `json:"TaskQueueSid,omitempty"`
    TaskQueueName *string `json:"TaskQueueName,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
FetchWorkerStatistics Method for FetchWorkerStatistics
 * @param workspaceSid The SID of the Workspace with the Worker to fetch.
 * @param optional nil or *FetchWorkerStatisticsOpts - Optional Parameters:
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "EndDate" (time.Time) - Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "TaskQueueSid" (string) - The SID of the TaskQueue for which to fetch Worker statistics.
 * @param "TaskQueueName" (string) - The `friendly_name` of the TaskQueue for which to fetch Worker statistics.
 * @param "FriendlyName" (string) - Only include Workers with `friendly_name` values that match this parameter.
 * @param "TaskChannel" (string) - Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceWorkerWorkerStatistics
*/
func (c *DefaultApiService) FetchWorkerStatistics(workspaceSid string, params *FetchWorkerStatisticsParams) (*TaskrouterV1WorkspaceWorkerWorkerStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/Statistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.TaskQueueSid != nil {
        data.Set("TaskQueueSid", *params.TaskQueueSid)
    }
    if params != nil && params.TaskQueueName != nil {
        data.Set("TaskQueueName", *params.TaskQueueName)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkersCumulativeStatisticsParams Optional parameters for the method 'FetchWorkersCumulativeStatistics'
type FetchWorkersCumulativeStatisticsParams struct {
    EndDate *time.Time `json:"EndDate,omitempty"`
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
FetchWorkersCumulativeStatistics Method for FetchWorkersCumulativeStatistics
 * @param workspaceSid The SID of the Workspace with the resource to fetch.
 * @param optional nil or *FetchWorkersCumulativeStatisticsOpts - Optional Parameters:
 * @param "EndDate" (time.Time) - Only calculate statistics from this date and time and earlier, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "TaskChannel" (string) - Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics
*/
func (c *DefaultApiService) FetchWorkersCumulativeStatistics(workspaceSid string, params *FetchWorkersCumulativeStatisticsParams) (*TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkersRealTimeStatisticsParams Optional parameters for the method 'FetchWorkersRealTimeStatistics'
type FetchWorkersRealTimeStatisticsParams struct {
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
FetchWorkersRealTimeStatistics Method for FetchWorkersRealTimeStatistics
 * @param workspaceSid The SID of the Workspace with the resource to fetch.
 * @param optional nil or *FetchWorkersRealTimeStatisticsOpts - Optional Parameters:
 * @param "TaskChannel" (string) - Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics
*/
func (c *DefaultApiService) FetchWorkersRealTimeStatistics(workspaceSid string, params *FetchWorkersRealTimeStatisticsParams) (*TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchWorkflow Method for FetchWorkflow
 * @param workspaceSid The SID of the Workspace with the Workflow to fetch.
 * @param sid The SID of the Workflow resource to fetch.
@return TaskrouterV1WorkspaceWorkflow
*/
func (c *DefaultApiService) FetchWorkflow(workspaceSid string, sid string) (*TaskrouterV1WorkspaceWorkflow, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkflow{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkflowCumulativeStatisticsParams Optional parameters for the method 'FetchWorkflowCumulativeStatistics'
type FetchWorkflowCumulativeStatisticsParams struct {
    EndDate *time.Time `json:"EndDate,omitempty"`
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

/*
FetchWorkflowCumulativeStatistics Method for FetchWorkflowCumulativeStatistics
 * @param workspaceSid The SID of the Workspace with the resource to fetch.
 * @param workflowSid Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
 * @param optional nil or *FetchWorkflowCumulativeStatisticsOpts - Optional Parameters:
 * @param "EndDate" (time.Time) - Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "TaskChannel" (string) - Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
 * @param "SplitByWaitTime" (string) - A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
@return TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics
*/
func (c *DefaultApiService) FetchWorkflowCumulativeStatistics(workspaceSid string, workflowSid string, params *FetchWorkflowCumulativeStatisticsParams) (*TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkflowSid"+"}", workflowSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.SplitByWaitTime != nil {
        data.Set("SplitByWaitTime", *params.SplitByWaitTime)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkflowRealTimeStatisticsParams Optional parameters for the method 'FetchWorkflowRealTimeStatistics'
type FetchWorkflowRealTimeStatisticsParams struct {
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
FetchWorkflowRealTimeStatistics Method for FetchWorkflowRealTimeStatistics
 * @param workspaceSid The SID of the Workspace with the Workflow to fetch.
 * @param workflowSid Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.
 * @param optional nil or *FetchWorkflowRealTimeStatisticsOpts - Optional Parameters:
 * @param "TaskChannel" (string) - Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics
*/
func (c *DefaultApiService) FetchWorkflowRealTimeStatistics(workspaceSid string, workflowSid string, params *FetchWorkflowRealTimeStatisticsParams) (*TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkflowSid"+"}", workflowSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkflowStatisticsParams Optional parameters for the method 'FetchWorkflowStatistics'
type FetchWorkflowStatisticsParams struct {
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    EndDate *time.Time `json:"EndDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

/*
FetchWorkflowStatistics Method for FetchWorkflowStatistics
 * @param workspaceSid The SID of the Workspace with the Workflow to fetch.
 * @param workflowSid Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.
 * @param optional nil or *FetchWorkflowStatisticsOpts - Optional Parameters:
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "EndDate" (time.Time) - Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "TaskChannel" (string) - Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
 * @param "SplitByWaitTime" (string) - A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
@return TaskrouterV1WorkspaceWorkflowWorkflowStatistics
*/
func (c *DefaultApiService) FetchWorkflowStatistics(workspaceSid string, workflowSid string, params *FetchWorkflowStatisticsParams) (*TaskrouterV1WorkspaceWorkflowWorkflowStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkflowSid"+"}", workflowSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.SplitByWaitTime != nil {
        data.Set("SplitByWaitTime", *params.SplitByWaitTime)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkflowWorkflowStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchWorkspace Method for FetchWorkspace
 * @param sid The SID of the Workspace resource to fetch.
@return TaskrouterV1Workspace
*/
func (c *DefaultApiService) FetchWorkspace(sid string) (*TaskrouterV1Workspace, error) {
    path := "/v1/Workspaces/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1Workspace{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkspaceCumulativeStatisticsParams Optional parameters for the method 'FetchWorkspaceCumulativeStatistics'
type FetchWorkspaceCumulativeStatisticsParams struct {
    EndDate *time.Time `json:"EndDate,omitempty"`
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

/*
FetchWorkspaceCumulativeStatistics Method for FetchWorkspaceCumulativeStatistics
 * @param workspaceSid The SID of the Workspace to fetch.
 * @param optional nil or *FetchWorkspaceCumulativeStatisticsOpts - Optional Parameters:
 * @param "EndDate" (time.Time) - Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "TaskChannel" (string) - Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
 * @param "SplitByWaitTime" (string) - A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
@return TaskrouterV1WorkspaceWorkspaceCumulativeStatistics
*/
func (c *DefaultApiService) FetchWorkspaceCumulativeStatistics(workspaceSid string, params *FetchWorkspaceCumulativeStatisticsParams) (*TaskrouterV1WorkspaceWorkspaceCumulativeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/CumulativeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.SplitByWaitTime != nil {
        data.Set("SplitByWaitTime", *params.SplitByWaitTime)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkspaceCumulativeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkspaceRealTimeStatisticsParams Optional parameters for the method 'FetchWorkspaceRealTimeStatistics'
type FetchWorkspaceRealTimeStatisticsParams struct {
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
FetchWorkspaceRealTimeStatistics Method for FetchWorkspaceRealTimeStatistics
 * @param workspaceSid The SID of the Workspace to fetch.
 * @param optional nil or *FetchWorkspaceRealTimeStatisticsOpts - Optional Parameters:
 * @param "TaskChannel" (string) - Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceWorkspaceRealTimeStatistics
*/
func (c *DefaultApiService) FetchWorkspaceRealTimeStatistics(workspaceSid string, params *FetchWorkspaceRealTimeStatisticsParams) (*TaskrouterV1WorkspaceWorkspaceRealTimeStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/RealTimeStatistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkspaceRealTimeStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchWorkspaceStatisticsParams Optional parameters for the method 'FetchWorkspaceStatistics'
type FetchWorkspaceStatisticsParams struct {
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    EndDate *time.Time `json:"EndDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
}

/*
FetchWorkspaceStatistics Method for FetchWorkspaceStatistics
 * @param workspaceSid The SID of the Workspace to fetch.
 * @param optional nil or *FetchWorkspaceStatisticsOpts - Optional Parameters:
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "EndDate" (time.Time) - Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "TaskChannel" (string) - Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
 * @param "SplitByWaitTime" (string) - A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.
@return TaskrouterV1WorkspaceWorkspaceStatistics
*/
func (c *DefaultApiService) FetchWorkspaceStatistics(workspaceSid string, params *FetchWorkspaceStatisticsParams) (*TaskrouterV1WorkspaceWorkspaceStatistics, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Statistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.SplitByWaitTime != nil {
        data.Set("SplitByWaitTime", *params.SplitByWaitTime)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkspaceStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListActivityParams Optional parameters for the method 'ListActivity'
type ListActivityParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Available *string `json:"Available,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListActivity Method for ListActivity
 * @param workspaceSid The SID of the Workspace with the Activity resources to read.
 * @param optional nil or *ListActivityOpts - Optional Parameters:
 * @param "FriendlyName" (string) - The `friendly_name` of the Activity resources to read.
 * @param "Available" (string) - Whether return only Activity resources that are available or unavailable. A value of `true` returns only available activities. Values of '1' or `yes` also indicate `true`. All other values represent `false` and return activities that are unavailable.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceActivityReadResponse
*/
func (c *DefaultApiService) ListActivity(workspaceSid string, params *ListActivityParams) (*TaskrouterV1WorkspaceActivityReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Activities"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Available != nil {
        data.Set("Available", *params.Available)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceActivityReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListEventParams Optional parameters for the method 'ListEvent'
type ListEventParams struct {
    EndDate *time.Time `json:"EndDate,omitempty"`
    EventType *string `json:"EventType,omitempty"`
    Minutes *int32 `json:"Minutes,omitempty"`
    ReservationSid *string `json:"ReservationSid,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    TaskQueueSid *string `json:"TaskQueueSid,omitempty"`
    TaskSid *string `json:"TaskSid,omitempty"`
    WorkerSid *string `json:"WorkerSid,omitempty"`
    WorkflowSid *string `json:"WorkflowSid,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    Sid *string `json:"Sid,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListEvent Method for ListEvent
 * @param workspaceSid The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace.
 * @param optional nil or *ListEventOpts - Optional Parameters:
 * @param "EndDate" (time.Time) - Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "EventType" (string) - The type of Events to read. Returns only Events of the type specified.
 * @param "Minutes" (int32) - The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is `15` minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted.
 * @param "ReservationSid" (string) - The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation.
 * @param "StartDate" (time.Time) - Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted.
 * @param "TaskQueueSid" (string) - The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue.
 * @param "TaskSid" (string) - The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task.
 * @param "WorkerSid" (string) - The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker.
 * @param "WorkflowSid" (string) - The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow.
 * @param "TaskChannel" (string) - The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel.
 * @param "Sid" (string) - The SID of the Event resource to read.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceEventReadResponse
*/
func (c *DefaultApiService) ListEvent(workspaceSid string, params *ListEventParams) (*TaskrouterV1WorkspaceEventReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Events"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.EventType != nil {
        data.Set("EventType", *params.EventType)
    }
    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.ReservationSid != nil {
        data.Set("ReservationSid", *params.ReservationSid)
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.TaskQueueSid != nil {
        data.Set("TaskQueueSid", *params.TaskQueueSid)
    }
    if params != nil && params.TaskSid != nil {
        data.Set("TaskSid", *params.TaskSid)
    }
    if params != nil && params.WorkerSid != nil {
        data.Set("WorkerSid", *params.WorkerSid)
    }
    if params != nil && params.WorkflowSid != nil {
        data.Set("WorkflowSid", *params.WorkflowSid)
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.Sid != nil {
        data.Set("Sid", *params.Sid)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceEventReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListTaskParams Optional parameters for the method 'ListTask'
type ListTaskParams struct {
    Priority *int32 `json:"Priority,omitempty"`
    AssignmentStatus *[]string `json:"AssignmentStatus,omitempty"`
    WorkflowSid *string `json:"WorkflowSid,omitempty"`
    WorkflowName *string `json:"WorkflowName,omitempty"`
    TaskQueueSid *string `json:"TaskQueueSid,omitempty"`
    TaskQueueName *string `json:"TaskQueueName,omitempty"`
    EvaluateTaskAttributes *string `json:"EvaluateTaskAttributes,omitempty"`
    Ordering *string `json:"Ordering,omitempty"`
    HasAddons *bool `json:"HasAddons,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListTask Method for ListTask
 * @param workspaceSid The SID of the Workspace with the Tasks to read.
 * @param optional nil or *ListTaskOpts - Optional Parameters:
 * @param "Priority" (int32) - The priority value of the Tasks to read. Returns the list of all Tasks in the Workspace with the specified priority.
 * @param "AssignmentStatus" ([]string) - The `assignment_status` of the Tasks you want to read. Can be: `pending`, `reserved`, `assigned`, `canceled`, `wrapping`, or `completed`. Returns all Tasks in the Workspace with the specified `assignment_status`.
 * @param "WorkflowSid" (string) - The SID of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this SID.
 * @param "WorkflowName" (string) - The friendly name of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this friendly name.
 * @param "TaskQueueSid" (string) - The SID of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this SID.
 * @param "TaskQueueName" (string) - The `friendly_name` of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this friendly name.
 * @param "EvaluateTaskAttributes" (string) - The attributes of the Tasks to read. Returns the Tasks that match the attributes specified in this parameter.
 * @param "Ordering" (string) - How to order the returned Task resources. y default, Tasks are sorted by ascending DateCreated. This value is specified as: `Attribute:Order`, where `Attribute` can be either `Priority` or `DateCreated` and `Order` can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered in descending order of their Priority. Multiple sort orders can be specified in a comma-separated list such as `Priority:desc,DateCreated:asc`, which returns the Tasks in descending Priority order and ascending DateCreated Order.
 * @param "HasAddons" (bool) - Whether to read Tasks with addons. If `true`, returns only Tasks with addons. If `false`, returns only Tasks without addons.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceTaskReadResponse
*/
func (c *DefaultApiService) ListTask(workspaceSid string, params *ListTaskParams) (*TaskrouterV1WorkspaceTaskReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Priority != nil {
        data.Set("Priority", string(*params.Priority))
    }
    if params != nil && params.AssignmentStatus != nil {
        data.Set("AssignmentStatus", string(*params.AssignmentStatus))
    }
    if params != nil && params.WorkflowSid != nil {
        data.Set("WorkflowSid", *params.WorkflowSid)
    }
    if params != nil && params.WorkflowName != nil {
        data.Set("WorkflowName", *params.WorkflowName)
    }
    if params != nil && params.TaskQueueSid != nil {
        data.Set("TaskQueueSid", *params.TaskQueueSid)
    }
    if params != nil && params.TaskQueueName != nil {
        data.Set("TaskQueueName", *params.TaskQueueName)
    }
    if params != nil && params.EvaluateTaskAttributes != nil {
        data.Set("EvaluateTaskAttributes", *params.EvaluateTaskAttributes)
    }
    if params != nil && params.Ordering != nil {
        data.Set("Ordering", *params.Ordering)
    }
    if params != nil && params.HasAddons != nil {
        data.Set("HasAddons", string(*params.HasAddons))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListTaskChannelParams Optional parameters for the method 'ListTaskChannel'
type ListTaskChannelParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListTaskChannel Method for ListTaskChannel
 * @param workspaceSid The SID of the Workspace with the Task Channel to read.
 * @param optional nil or *ListTaskChannelOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceTaskChannelReadResponse
*/
func (c *DefaultApiService) ListTaskChannel(workspaceSid string, params *ListTaskChannelParams) (*TaskrouterV1WorkspaceTaskChannelReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskChannels"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskChannelReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListTaskQueueParams Optional parameters for the method 'ListTaskQueue'
type ListTaskQueueParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    EvaluateWorkerAttributes *string `json:"EvaluateWorkerAttributes,omitempty"`
    WorkerSid *string `json:"WorkerSid,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListTaskQueue Method for ListTaskQueue
 * @param workspaceSid The SID of the Workspace with the TaskQueue to read.
 * @param optional nil or *ListTaskQueueOpts - Optional Parameters:
 * @param "FriendlyName" (string) - The `friendly_name` of the TaskQueue resources to read.
 * @param "EvaluateWorkerAttributes" (string) - The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter.
 * @param "WorkerSid" (string) - The SID of the Worker with the TaskQueue resources to read.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceTaskQueueReadResponse
*/
func (c *DefaultApiService) ListTaskQueue(workspaceSid string, params *ListTaskQueueParams) (*TaskrouterV1WorkspaceTaskQueueReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.EvaluateWorkerAttributes != nil {
        data.Set("EvaluateWorkerAttributes", *params.EvaluateWorkerAttributes)
    }
    if params != nil && params.WorkerSid != nil {
        data.Set("WorkerSid", *params.WorkerSid)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueueReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListTaskQueuesStatisticsParams Optional parameters for the method 'ListTaskQueuesStatistics'
type ListTaskQueuesStatisticsParams struct {
    EndDate *time.Time `json:"EndDate,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Minutes *int32 `json:"Minutes,omitempty"`
    StartDate *time.Time `json:"StartDate,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
    SplitByWaitTime *string `json:"SplitByWaitTime,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListTaskQueuesStatistics Method for ListTaskQueuesStatistics
 * @param workspaceSid The SID of the Workspace with the TaskQueues to read.
 * @param optional nil or *ListTaskQueuesStatisticsOpts - Optional Parameters:
 * @param "EndDate" (time.Time) - Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
 * @param "FriendlyName" (string) - The `friendly_name` of the TaskQueue statistics to read.
 * @param "Minutes" (int32) - Only calculate statistics since this many minutes in the past. The default is 15 minutes.
 * @param "StartDate" (time.Time) - Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "TaskChannel" (string) - Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
 * @param "SplitByWaitTime" (string) - A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceTaskQueueTaskQueuesStatisticsReadResponse
*/
func (c *DefaultApiService) ListTaskQueuesStatistics(workspaceSid string, params *ListTaskQueuesStatisticsParams) (*TaskrouterV1WorkspaceTaskQueueTaskQueuesStatisticsReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EndDate != nil {
        data.Set("EndDate", string(*params.EndDate))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Minutes != nil {
        data.Set("Minutes", string(*params.Minutes))
    }
    if params != nil && params.StartDate != nil {
        data.Set("StartDate", string(*params.StartDate))
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }
    if params != nil && params.SplitByWaitTime != nil {
        data.Set("SplitByWaitTime", *params.SplitByWaitTime)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueueTaskQueuesStatisticsReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListTaskReservationParams Optional parameters for the method 'ListTaskReservation'
type ListTaskReservationParams struct {
    ReservationStatus *string `json:"ReservationStatus,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListTaskReservation Method for ListTaskReservation
 * @param workspaceSid The SID of the Workspace with the TaskReservation resources to read.
 * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to read.
 * @param optional nil or *ListTaskReservationOpts - Optional Parameters:
 * @param "ReservationStatus" (string) - Returns the list of reservations for a task with a specified ReservationStatus.  Can be: `pending`, `accepted`, `rejected`, or `timeout`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceTaskTaskReservationReadResponse
*/
func (c *DefaultApiService) ListTaskReservation(workspaceSid string, taskSid string, params *ListTaskReservationParams) (*TaskrouterV1WorkspaceTaskTaskReservationReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ReservationStatus != nil {
        data.Set("ReservationStatus", *params.ReservationStatus)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskTaskReservationReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListWorkerParams Optional parameters for the method 'ListWorker'
type ListWorkerParams struct {
    ActivityName *string `json:"ActivityName,omitempty"`
    ActivitySid *string `json:"ActivitySid,omitempty"`
    Available *string `json:"Available,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    TargetWorkersExpression *string `json:"TargetWorkersExpression,omitempty"`
    TaskQueueName *string `json:"TaskQueueName,omitempty"`
    TaskQueueSid *string `json:"TaskQueueSid,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListWorker Method for ListWorker
 * @param workspaceSid The SID of the Workspace with the Workers to read.
 * @param optional nil or *ListWorkerOpts - Optional Parameters:
 * @param "ActivityName" (string) - The `activity_name` of the Worker resources to read.
 * @param "ActivitySid" (string) - The `activity_sid` of the Worker resources to read.
 * @param "Available" (string) - Whether to return only Worker resources that are available or unavailable. Can be `true`, `1`, or `yes` to return Worker resources that are available, and `false`, or any value returns the Worker resources that are not available.
 * @param "FriendlyName" (string) - The `friendly_name` of the Worker resources to read.
 * @param "TargetWorkersExpression" (string) - Filter by Workers that would match an expression on a TaskQueue. This is helpful for debugging which Workers would match a potential queue.
 * @param "TaskQueueName" (string) - The `friendly_name` of the TaskQueue that the Workers to read are eligible for.
 * @param "TaskQueueSid" (string) - The SID of the TaskQueue that the Workers to read are eligible for.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceWorkerReadResponse
*/
func (c *DefaultApiService) ListWorker(workspaceSid string, params *ListWorkerParams) (*TaskrouterV1WorkspaceWorkerReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ActivityName != nil {
        data.Set("ActivityName", *params.ActivityName)
    }
    if params != nil && params.ActivitySid != nil {
        data.Set("ActivitySid", *params.ActivitySid)
    }
    if params != nil && params.Available != nil {
        data.Set("Available", *params.Available)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.TargetWorkersExpression != nil {
        data.Set("TargetWorkersExpression", *params.TargetWorkersExpression)
    }
    if params != nil && params.TaskQueueName != nil {
        data.Set("TaskQueueName", *params.TaskQueueName)
    }
    if params != nil && params.TaskQueueSid != nil {
        data.Set("TaskQueueSid", *params.TaskQueueSid)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListWorkerChannelParams Optional parameters for the method 'ListWorkerChannel'
type ListWorkerChannelParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListWorkerChannel Method for ListWorkerChannel
 * @param workspaceSid The SID of the Workspace with the WorkerChannels to read.
 * @param workerSid The SID of the Worker with the WorkerChannels to read.
 * @param optional nil or *ListWorkerChannelOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceWorkerWorkerChannelReadResponse
*/
func (c *DefaultApiService) ListWorkerChannel(workspaceSid string, workerSid string, params *ListWorkerChannelParams) (*TaskrouterV1WorkspaceWorkerWorkerChannelReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkerSid"+"}", workerSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerChannelReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListWorkerReservationParams Optional parameters for the method 'ListWorkerReservation'
type ListWorkerReservationParams struct {
    ReservationStatus *string `json:"ReservationStatus,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListWorkerReservation Method for ListWorkerReservation
 * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to read.
 * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to read.
 * @param optional nil or *ListWorkerReservationOpts - Optional Parameters:
 * @param "ReservationStatus" (string) - Returns the list of reservations for a worker with a specified ReservationStatus. Can be: `pending`, `accepted`, `rejected`, `timeout`, `canceled`, or `rescinded`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceWorkerWorkerReservationReadResponse
*/
func (c *DefaultApiService) ListWorkerReservation(workspaceSid string, workerSid string, params *ListWorkerReservationParams) (*TaskrouterV1WorkspaceWorkerWorkerReservationReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkerSid"+"}", workerSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ReservationStatus != nil {
        data.Set("ReservationStatus", *params.ReservationStatus)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerReservationReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListWorkflowParams Optional parameters for the method 'ListWorkflow'
type ListWorkflowParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListWorkflow Method for ListWorkflow
 * @param workspaceSid The SID of the Workspace with the Workflow to read.
 * @param optional nil or *ListWorkflowOpts - Optional Parameters:
 * @param "FriendlyName" (string) - The `friendly_name` of the Workflow resources to read.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceWorkflowReadResponse
*/
func (c *DefaultApiService) ListWorkflow(workspaceSid string, params *ListWorkflowParams) (*TaskrouterV1WorkspaceWorkflowReadResponse, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkflowReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListWorkspaceParams Optional parameters for the method 'ListWorkspace'
type ListWorkspaceParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListWorkspace Method for ListWorkspace
 * @param optional nil or *ListWorkspaceOpts - Optional Parameters:
 * @param "FriendlyName" (string) - The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return TaskrouterV1WorkspaceReadResponse
*/
func (c *DefaultApiService) ListWorkspace(params *ListWorkspaceParams) (*TaskrouterV1WorkspaceReadResponse, error) {
    path := "/v1/Workspaces"

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateActivityParams Optional parameters for the method 'UpdateActivity'
type UpdateActivityParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
UpdateActivity Method for UpdateActivity
 * @param workspaceSid The SID of the Workspace with the Activity resources to update.
 * @param sid The SID of the Activity resource to update.
 * @param optional nil or *UpdateActivityOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Activity resource. It can be up to 64 characters long. These names are used to calculate and expose statistics about Workers, and provide visibility into the state of each Worker. Examples of friendly names include: `on-call`, `break`, and `email`.
@return TaskrouterV1WorkspaceActivity
*/
func (c *DefaultApiService) UpdateActivity(workspaceSid string, sid string, params *UpdateActivityParams) (*TaskrouterV1WorkspaceActivity, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceActivity{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskParams Optional parameters for the method 'UpdateTask'
type UpdateTaskParams struct {
    AssignmentStatus *string `json:"AssignmentStatus,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    Priority *int32 `json:"Priority,omitempty"`
    Reason *string `json:"Reason,omitempty"`
    TaskChannel *string `json:"TaskChannel,omitempty"`
}

/*
UpdateTask Method for UpdateTask
 * @param workspaceSid The SID of the Workspace with the Task to update.
 * @param sid The SID of the Task resource to update.
 * @param optional nil or *UpdateTaskOpts - Optional Parameters:
 * @param "AssignmentStatus" (string) - The new status of the task. Can be: `canceled`, to cancel a Task that is currently `pending` or `reserved`; `wrapping`, to move the Task to wrapup state; or `completed`, to move a Task to the completed state.
 * @param "Attributes" (string) - The JSON string that describes the custom attributes of the task.
 * @param "Priority" (int32) - The Task's new priority value. When supplied, the Task takes on the specified priority unless it matches a Workflow Target with a Priority set. Value can be 0 to 2^31^ (2,147,483,647).
 * @param "Reason" (string) - The reason that the Task was canceled or completed. This parameter is required only if the Task is canceled or completed. Setting this value queues the task for deletion and logs the reason.
 * @param "TaskChannel" (string) - When MultiTasking is enabled, specify the TaskChannel with the task to update. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
@return TaskrouterV1WorkspaceTask
*/
func (c *DefaultApiService) UpdateTask(workspaceSid string, sid string, params *UpdateTaskParams) (*TaskrouterV1WorkspaceTask, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AssignmentStatus != nil {
        data.Set("AssignmentStatus", *params.AssignmentStatus)
    }
    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.Priority != nil {
        data.Set("Priority", string(*params.Priority))
    }
    if params != nil && params.Reason != nil {
        data.Set("Reason", *params.Reason)
    }
    if params != nil && params.TaskChannel != nil {
        data.Set("TaskChannel", *params.TaskChannel)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskChannelParams Optional parameters for the method 'UpdateTaskChannel'
type UpdateTaskChannelParams struct {
    ChannelOptimizedRouting *bool `json:"ChannelOptimizedRouting,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
UpdateTaskChannel Method for UpdateTaskChannel
 * @param workspaceSid The SID of the Workspace with the Task Channel to update.
 * @param sid The SID of the Task Channel resource to update.
 * @param optional nil or *UpdateTaskChannelOpts - Optional Parameters:
 * @param "ChannelOptimizedRouting" (bool) - Whether the TaskChannel should prioritize Workers that have been idle. If `true`, Workers that have been idle the longest are prioritized.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Task Channel. It can be up to 64 characters long.
@return TaskrouterV1WorkspaceTaskChannel
*/
func (c *DefaultApiService) UpdateTaskChannel(workspaceSid string, sid string, params *UpdateTaskChannelParams) (*TaskrouterV1WorkspaceTaskChannel, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ChannelOptimizedRouting != nil {
        data.Set("ChannelOptimizedRouting", string(*params.ChannelOptimizedRouting))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskQueueParams Optional parameters for the method 'UpdateTaskQueue'
type UpdateTaskQueueParams struct {
    AssignmentActivitySid *string `json:"AssignmentActivitySid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    MaxReservedWorkers *int32 `json:"MaxReservedWorkers,omitempty"`
    ReservationActivitySid *string `json:"ReservationActivitySid,omitempty"`
    TargetWorkers *string `json:"TargetWorkers,omitempty"`
    TaskOrder *string `json:"TaskOrder,omitempty"`
}

/*
UpdateTaskQueue Method for UpdateTaskQueue
 * @param workspaceSid The SID of the Workspace with the TaskQueue to update.
 * @param sid The SID of the TaskQueue resource to update.
 * @param optional nil or *UpdateTaskQueueOpts - Optional Parameters:
 * @param "AssignmentActivitySid" (string) - The SID of the Activity to assign Workers when a task is assigned for them.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the TaskQueue. For example `Support-Tier 1`, `Sales`, or `Escalation`.
 * @param "MaxReservedWorkers" (int32) - The maximum number of Workers to create reservations for the assignment of a task while in the queue. Maximum of 50.
 * @param "ReservationActivitySid" (string) - The SID of the Activity to assign Workers when a task is reserved for them.
 * @param "TargetWorkers" (string) - A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example '\\\"language\\\" == \\\"spanish\\\"' If no TargetWorkers parameter is provided, Tasks will wait in the queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below.
 * @param "TaskOrder" (string) - How Tasks will be assigned to Workers. Can be: `FIFO` or `LIFO` and the default is `FIFO`. Use `FIFO` to assign the oldest task first and `LIFO` to assign the most recent task first. For more information, see [Queue Ordering](https://www.twilio.com/docs/taskrouter/queue-ordering-last-first-out-lifo).
@return TaskrouterV1WorkspaceTaskQueue
*/
func (c *DefaultApiService) UpdateTaskQueue(workspaceSid string, sid string, params *UpdateTaskQueueParams) (*TaskrouterV1WorkspaceTaskQueue, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AssignmentActivitySid != nil {
        data.Set("AssignmentActivitySid", *params.AssignmentActivitySid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.MaxReservedWorkers != nil {
        data.Set("MaxReservedWorkers", string(*params.MaxReservedWorkers))
    }
    if params != nil && params.ReservationActivitySid != nil {
        data.Set("ReservationActivitySid", *params.ReservationActivitySid)
    }
    if params != nil && params.TargetWorkers != nil {
        data.Set("TargetWorkers", *params.TargetWorkers)
    }
    if params != nil && params.TaskOrder != nil {
        data.Set("TaskOrder", *params.TaskOrder)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskQueue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskReservationParams Optional parameters for the method 'UpdateTaskReservation'
type UpdateTaskReservationParams struct {
    Beep *string `json:"Beep,omitempty"`
    BeepOnCustomerEntrance *bool `json:"BeepOnCustomerEntrance,omitempty"`
    CallAccept *bool `json:"CallAccept,omitempty"`
    CallFrom *string `json:"CallFrom,omitempty"`
    CallRecord *string `json:"CallRecord,omitempty"`
    CallStatusCallbackUrl *string `json:"CallStatusCallbackUrl,omitempty"`
    CallTimeout *int32 `json:"CallTimeout,omitempty"`
    CallTo *string `json:"CallTo,omitempty"`
    CallUrl *string `json:"CallUrl,omitempty"`
    ConferenceRecord *string `json:"ConferenceRecord,omitempty"`
    ConferenceRecordingStatusCallback *string `json:"ConferenceRecordingStatusCallback,omitempty"`
    ConferenceRecordingStatusCallbackMethod *string `json:"ConferenceRecordingStatusCallbackMethod,omitempty"`
    ConferenceStatusCallback *string `json:"ConferenceStatusCallback,omitempty"`
    ConferenceStatusCallbackEvent *[]string `json:"ConferenceStatusCallbackEvent,omitempty"`
    ConferenceStatusCallbackMethod *string `json:"ConferenceStatusCallbackMethod,omitempty"`
    ConferenceTrim *string `json:"ConferenceTrim,omitempty"`
    DequeueFrom *string `json:"DequeueFrom,omitempty"`
    DequeuePostWorkActivitySid *string `json:"DequeuePostWorkActivitySid,omitempty"`
    DequeueRecord *string `json:"DequeueRecord,omitempty"`
    DequeueStatusCallbackEvent *[]string `json:"DequeueStatusCallbackEvent,omitempty"`
    DequeueStatusCallbackUrl *string `json:"DequeueStatusCallbackUrl,omitempty"`
    DequeueTimeout *int32 `json:"DequeueTimeout,omitempty"`
    DequeueTo *string `json:"DequeueTo,omitempty"`
    EarlyMedia *bool `json:"EarlyMedia,omitempty"`
    EndConferenceOnCustomerExit *bool `json:"EndConferenceOnCustomerExit,omitempty"`
    EndConferenceOnExit *bool `json:"EndConferenceOnExit,omitempty"`
    From *string `json:"From,omitempty"`
    Instruction *string `json:"Instruction,omitempty"`
    MaxParticipants *int32 `json:"MaxParticipants,omitempty"`
    Muted *bool `json:"Muted,omitempty"`
    PostWorkActivitySid *string `json:"PostWorkActivitySid,omitempty"`
    Record *bool `json:"Record,omitempty"`
    RecordingChannels *string `json:"RecordingChannels,omitempty"`
    RecordingStatusCallback *string `json:"RecordingStatusCallback,omitempty"`
    RecordingStatusCallbackMethod *string `json:"RecordingStatusCallbackMethod,omitempty"`
    RedirectAccept *bool `json:"RedirectAccept,omitempty"`
    RedirectCallSid *string `json:"RedirectCallSid,omitempty"`
    RedirectUrl *string `json:"RedirectUrl,omitempty"`
    Region *string `json:"Region,omitempty"`
    ReservationStatus *string `json:"ReservationStatus,omitempty"`
    SipAuthPassword *string `json:"SipAuthPassword,omitempty"`
    SipAuthUsername *string `json:"SipAuthUsername,omitempty"`
    StartConferenceOnEnter *bool `json:"StartConferenceOnEnter,omitempty"`
    StatusCallback *string `json:"StatusCallback,omitempty"`
    StatusCallbackEvent *[]string `json:"StatusCallbackEvent,omitempty"`
    StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
    Supervisor *string `json:"Supervisor,omitempty"`
    SupervisorMode *string `json:"SupervisorMode,omitempty"`
    Timeout *int32 `json:"Timeout,omitempty"`
    To *string `json:"To,omitempty"`
    WaitMethod *string `json:"WaitMethod,omitempty"`
    WaitUrl *string `json:"WaitUrl,omitempty"`
    WorkerActivitySid *string `json:"WorkerActivitySid,omitempty"`
}

/*
UpdateTaskReservation Method for UpdateTaskReservation
 * @param workspaceSid The SID of the Workspace with the TaskReservation resources to update.
 * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to update.
 * @param sid The SID of the TaskReservation resource to update.
 * @param optional nil or *UpdateTaskReservationOpts - Optional Parameters:
 * @param "Beep" (string) - Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
 * @param "BeepOnCustomerEntrance" (bool) - Whether to play a notification beep when the customer joins.
 * @param "CallAccept" (bool) - Whether to accept a reservation when executing a Call instruction.
 * @param "CallFrom" (string) - The Caller ID of the outbound call when executing a Call instruction.
 * @param "CallRecord" (string) - Whether to record both legs of a call when executing a Call instruction or which leg to record.
 * @param "CallStatusCallbackUrl" (string) - The URL to call  for the completed call event when executing a Call instruction.
 * @param "CallTimeout" (int32) - Timeout for call when executing a Call instruction.
 * @param "CallTo" (string) - The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
 * @param "CallUrl" (string) - TwiML URI executed on answering the worker's leg as a result of the Call instruction.
 * @param "ConferenceRecord" (string) - Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
 * @param "ConferenceRecordingStatusCallback" (string) - The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
 * @param "ConferenceRecordingStatusCallbackMethod" (string) - The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 * @param "ConferenceStatusCallback" (string) - The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
 * @param "ConferenceStatusCallbackEvent" ([]string) - The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
 * @param "ConferenceStatusCallbackMethod" (string) - The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 * @param "ConferenceTrim" (string) - How to trim the leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
 * @param "DequeueFrom" (string) - The Caller ID of the call to the worker when executing a Dequeue instruction.
 * @param "DequeuePostWorkActivitySid" (string) - The SID of the Activity resource to start after executing a Dequeue instruction.
 * @param "DequeueRecord" (string) - Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
 * @param "DequeueStatusCallbackEvent" ([]string) - The Call progress events sent via webhooks as a result of a Dequeue instruction.
 * @param "DequeueStatusCallbackUrl" (string) - The Callback URL for completed call event when executing a Dequeue instruction.
 * @param "DequeueTimeout" (int32) - Timeout for call when executing a Dequeue instruction.
 * @param "DequeueTo" (string) - The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
 * @param "EarlyMedia" (bool) - Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
 * @param "EndConferenceOnCustomerExit" (bool) - Whether to end the conference when the customer leaves.
 * @param "EndConferenceOnExit" (bool) - Whether to end the conference when the agent leaves.
 * @param "From" (string) - The Caller ID of the call to the worker when executing a Conference instruction.
 * @param "Instruction" (string) - The assignment instruction for reservation.
 * @param "MaxParticipants" (int32) - The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
 * @param "Muted" (bool) - Whether the agent is muted in the conference. The default is `false`.
 * @param "PostWorkActivitySid" (string) - The new worker activity SID after executing a Conference instruction.
 * @param "Record" (bool) - Whether to record the participant and their conferences, including the time between conferences. The default is `false`.
 * @param "RecordingChannels" (string) - The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
 * @param "RecordingStatusCallback" (string) - The URL that we should call using the `recording_status_callback_method` when the recording status changes.
 * @param "RecordingStatusCallbackMethod" (string) - The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 * @param "RedirectAccept" (bool) - Whether the reservation should be accepted when executing a Redirect instruction.
 * @param "RedirectCallSid" (string) - The Call SID of the call parked in the queue when executing a Redirect instruction.
 * @param "RedirectUrl" (string) - TwiML URI to redirect the call to when executing the Redirect instruction.
 * @param "Region" (string) - The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
 * @param "ReservationStatus" (string) - The new status of the reservation. Can be: `pending`, `accepted`, `rejected`, or `timeout`.
 * @param "SipAuthPassword" (string) - The SIP password for authentication.
 * @param "SipAuthUsername" (string) - The SIP username used for authentication.
 * @param "StartConferenceOnEnter" (bool) - Whether to start the conference when the participant joins, if it has not already started. The default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
 * @param "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
 * @param "StatusCallbackEvent" ([]string) - The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
 * @param "Supervisor" (string) - The Supervisor SID/URI when executing the Supervise instruction.
 * @param "SupervisorMode" (string) - The Supervisor mode when executing the Supervise instruction.
 * @param "Timeout" (int32) - Timeout for call when executing a Conference instruction.
 * @param "To" (string) - The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
 * @param "WaitMethod" (string) - The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
 * @param "WaitUrl" (string) - The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
 * @param "WorkerActivitySid" (string) - The new worker activity SID if rejecting a reservation.
@return TaskrouterV1WorkspaceTaskTaskReservation
*/
func (c *DefaultApiService) UpdateTaskReservation(workspaceSid string, taskSid string, sid string, params *UpdateTaskReservationParams) (*TaskrouterV1WorkspaceTaskTaskReservation, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Beep != nil {
        data.Set("Beep", *params.Beep)
    }
    if params != nil && params.BeepOnCustomerEntrance != nil {
        data.Set("BeepOnCustomerEntrance", string(*params.BeepOnCustomerEntrance))
    }
    if params != nil && params.CallAccept != nil {
        data.Set("CallAccept", string(*params.CallAccept))
    }
    if params != nil && params.CallFrom != nil {
        data.Set("CallFrom", *params.CallFrom)
    }
    if params != nil && params.CallRecord != nil {
        data.Set("CallRecord", *params.CallRecord)
    }
    if params != nil && params.CallStatusCallbackUrl != nil {
        data.Set("CallStatusCallbackUrl", *params.CallStatusCallbackUrl)
    }
    if params != nil && params.CallTimeout != nil {
        data.Set("CallTimeout", string(*params.CallTimeout))
    }
    if params != nil && params.CallTo != nil {
        data.Set("CallTo", *params.CallTo)
    }
    if params != nil && params.CallUrl != nil {
        data.Set("CallUrl", *params.CallUrl)
    }
    if params != nil && params.ConferenceRecord != nil {
        data.Set("ConferenceRecord", *params.ConferenceRecord)
    }
    if params != nil && params.ConferenceRecordingStatusCallback != nil {
        data.Set("ConferenceRecordingStatusCallback", *params.ConferenceRecordingStatusCallback)
    }
    if params != nil && params.ConferenceRecordingStatusCallbackMethod != nil {
        data.Set("ConferenceRecordingStatusCallbackMethod", *params.ConferenceRecordingStatusCallbackMethod)
    }
    if params != nil && params.ConferenceStatusCallback != nil {
        data.Set("ConferenceStatusCallback", *params.ConferenceStatusCallback)
    }
    if params != nil && params.ConferenceStatusCallbackEvent != nil {
        data.Set("ConferenceStatusCallbackEvent", *params.ConferenceStatusCallbackEvent)
    }
    if params != nil && params.ConferenceStatusCallbackMethod != nil {
        data.Set("ConferenceStatusCallbackMethod", *params.ConferenceStatusCallbackMethod)
    }
    if params != nil && params.ConferenceTrim != nil {
        data.Set("ConferenceTrim", *params.ConferenceTrim)
    }
    if params != nil && params.DequeueFrom != nil {
        data.Set("DequeueFrom", *params.DequeueFrom)
    }
    if params != nil && params.DequeuePostWorkActivitySid != nil {
        data.Set("DequeuePostWorkActivitySid", *params.DequeuePostWorkActivitySid)
    }
    if params != nil && params.DequeueRecord != nil {
        data.Set("DequeueRecord", *params.DequeueRecord)
    }
    if params != nil && params.DequeueStatusCallbackEvent != nil {
        data.Set("DequeueStatusCallbackEvent", *params.DequeueStatusCallbackEvent)
    }
    if params != nil && params.DequeueStatusCallbackUrl != nil {
        data.Set("DequeueStatusCallbackUrl", *params.DequeueStatusCallbackUrl)
    }
    if params != nil && params.DequeueTimeout != nil {
        data.Set("DequeueTimeout", string(*params.DequeueTimeout))
    }
    if params != nil && params.DequeueTo != nil {
        data.Set("DequeueTo", *params.DequeueTo)
    }
    if params != nil && params.EarlyMedia != nil {
        data.Set("EarlyMedia", string(*params.EarlyMedia))
    }
    if params != nil && params.EndConferenceOnCustomerExit != nil {
        data.Set("EndConferenceOnCustomerExit", string(*params.EndConferenceOnCustomerExit))
    }
    if params != nil && params.EndConferenceOnExit != nil {
        data.Set("EndConferenceOnExit", string(*params.EndConferenceOnExit))
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.Instruction != nil {
        data.Set("Instruction", *params.Instruction)
    }
    if params != nil && params.MaxParticipants != nil {
        data.Set("MaxParticipants", string(*params.MaxParticipants))
    }
    if params != nil && params.Muted != nil {
        data.Set("Muted", string(*params.Muted))
    }
    if params != nil && params.PostWorkActivitySid != nil {
        data.Set("PostWorkActivitySid", *params.PostWorkActivitySid)
    }
    if params != nil && params.Record != nil {
        data.Set("Record", string(*params.Record))
    }
    if params != nil && params.RecordingChannels != nil {
        data.Set("RecordingChannels", *params.RecordingChannels)
    }
    if params != nil && params.RecordingStatusCallback != nil {
        data.Set("RecordingStatusCallback", *params.RecordingStatusCallback)
    }
    if params != nil && params.RecordingStatusCallbackMethod != nil {
        data.Set("RecordingStatusCallbackMethod", *params.RecordingStatusCallbackMethod)
    }
    if params != nil && params.RedirectAccept != nil {
        data.Set("RedirectAccept", string(*params.RedirectAccept))
    }
    if params != nil && params.RedirectCallSid != nil {
        data.Set("RedirectCallSid", *params.RedirectCallSid)
    }
    if params != nil && params.RedirectUrl != nil {
        data.Set("RedirectUrl", *params.RedirectUrl)
    }
    if params != nil && params.Region != nil {
        data.Set("Region", *params.Region)
    }
    if params != nil && params.ReservationStatus != nil {
        data.Set("ReservationStatus", *params.ReservationStatus)
    }
    if params != nil && params.SipAuthPassword != nil {
        data.Set("SipAuthPassword", *params.SipAuthPassword)
    }
    if params != nil && params.SipAuthUsername != nil {
        data.Set("SipAuthUsername", *params.SipAuthUsername)
    }
    if params != nil && params.StartConferenceOnEnter != nil {
        data.Set("StartConferenceOnEnter", string(*params.StartConferenceOnEnter))
    }
    if params != nil && params.StatusCallback != nil {
        data.Set("StatusCallback", *params.StatusCallback)
    }
    if params != nil && params.StatusCallbackEvent != nil {
        data.Set("StatusCallbackEvent", *params.StatusCallbackEvent)
    }
    if params != nil && params.StatusCallbackMethod != nil {
        data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
    }
    if params != nil && params.Supervisor != nil {
        data.Set("Supervisor", *params.Supervisor)
    }
    if params != nil && params.SupervisorMode != nil {
        data.Set("SupervisorMode", *params.SupervisorMode)
    }
    if params != nil && params.Timeout != nil {
        data.Set("Timeout", string(*params.Timeout))
    }
    if params != nil && params.To != nil {
        data.Set("To", *params.To)
    }
    if params != nil && params.WaitMethod != nil {
        data.Set("WaitMethod", *params.WaitMethod)
    }
    if params != nil && params.WaitUrl != nil {
        data.Set("WaitUrl", *params.WaitUrl)
    }
    if params != nil && params.WorkerActivitySid != nil {
        data.Set("WorkerActivitySid", *params.WorkerActivitySid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceTaskTaskReservation{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateWorkerParams Optional parameters for the method 'UpdateWorker'
type UpdateWorkerParams struct {
    ActivitySid *string `json:"ActivitySid,omitempty"`
    Attributes *string `json:"Attributes,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    RejectPendingReservations *bool `json:"RejectPendingReservations,omitempty"`
}

/*
UpdateWorker Method for UpdateWorker
 * @param workspaceSid The SID of the Workspace with the Worker to update.
 * @param sid The SID of the Worker resource to update.
 * @param optional nil or *UpdateWorkerOpts - Optional Parameters:
 * @param "ActivitySid" (string) - The SID of a valid Activity that will describe the Worker's initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information.
 * @param "Attributes" (string) - The JSON string that describes the Worker. For example: `{ \\\"email\\\": \\\"Bob@example.com\\\", \\\"phone\\\": \\\"+5095551234\\\" }`. This data is passed to the `assignment_callback_url` when TaskRouter assigns a Task to the Worker. Defaults to {}.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Worker. It can be up to 64 characters long.
 * @param "RejectPendingReservations" (bool) - Whether to reject pending reservations.
@return TaskrouterV1WorkspaceWorker
*/
func (c *DefaultApiService) UpdateWorker(workspaceSid string, sid string, params *UpdateWorkerParams) (*TaskrouterV1WorkspaceWorker, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.ActivitySid != nil {
        data.Set("ActivitySid", *params.ActivitySid)
    }
    if params != nil && params.Attributes != nil {
        data.Set("Attributes", *params.Attributes)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.RejectPendingReservations != nil {
        data.Set("RejectPendingReservations", string(*params.RejectPendingReservations))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorker{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateWorkerChannelParams Optional parameters for the method 'UpdateWorkerChannel'
type UpdateWorkerChannelParams struct {
    Available *bool `json:"Available,omitempty"`
    Capacity *int32 `json:"Capacity,omitempty"`
}

/*
UpdateWorkerChannel Method for UpdateWorkerChannel
 * @param workspaceSid The SID of the Workspace with the WorkerChannel to update.
 * @param workerSid The SID of the Worker with the WorkerChannel to update.
 * @param sid The SID of the WorkerChannel to update.
 * @param optional nil or *UpdateWorkerChannelOpts - Optional Parameters:
 * @param "Available" (bool) - Whether the WorkerChannel is available. Set to `false` to prevent the Worker from receiving any new Tasks of this TaskChannel type.
 * @param "Capacity" (int32) - The total number of Tasks that the Worker should handle for the TaskChannel type. TaskRouter creates reservations for Tasks of this TaskChannel type up to the specified capacity. If the capacity is 0, no new reservations will be created.
@return TaskrouterV1WorkspaceWorkerWorkerChannel
*/
func (c *DefaultApiService) UpdateWorkerChannel(workspaceSid string, workerSid string, sid string, params *UpdateWorkerChannelParams) (*TaskrouterV1WorkspaceWorkerWorkerChannel, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkerSid"+"}", workerSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Available != nil {
        data.Set("Available", string(*params.Available))
    }
    if params != nil && params.Capacity != nil {
        data.Set("Capacity", string(*params.Capacity))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateWorkerReservationParams Optional parameters for the method 'UpdateWorkerReservation'
type UpdateWorkerReservationParams struct {
    Beep *string `json:"Beep,omitempty"`
    BeepOnCustomerEntrance *bool `json:"BeepOnCustomerEntrance,omitempty"`
    CallAccept *bool `json:"CallAccept,omitempty"`
    CallFrom *string `json:"CallFrom,omitempty"`
    CallRecord *string `json:"CallRecord,omitempty"`
    CallStatusCallbackUrl *string `json:"CallStatusCallbackUrl,omitempty"`
    CallTimeout *int32 `json:"CallTimeout,omitempty"`
    CallTo *string `json:"CallTo,omitempty"`
    CallUrl *string `json:"CallUrl,omitempty"`
    ConferenceRecord *string `json:"ConferenceRecord,omitempty"`
    ConferenceRecordingStatusCallback *string `json:"ConferenceRecordingStatusCallback,omitempty"`
    ConferenceRecordingStatusCallbackMethod *string `json:"ConferenceRecordingStatusCallbackMethod,omitempty"`
    ConferenceStatusCallback *string `json:"ConferenceStatusCallback,omitempty"`
    ConferenceStatusCallbackEvent *[]string `json:"ConferenceStatusCallbackEvent,omitempty"`
    ConferenceStatusCallbackMethod *string `json:"ConferenceStatusCallbackMethod,omitempty"`
    ConferenceTrim *string `json:"ConferenceTrim,omitempty"`
    DequeueFrom *string `json:"DequeueFrom,omitempty"`
    DequeuePostWorkActivitySid *string `json:"DequeuePostWorkActivitySid,omitempty"`
    DequeueRecord *string `json:"DequeueRecord,omitempty"`
    DequeueStatusCallbackEvent *[]string `json:"DequeueStatusCallbackEvent,omitempty"`
    DequeueStatusCallbackUrl *string `json:"DequeueStatusCallbackUrl,omitempty"`
    DequeueTimeout *int32 `json:"DequeueTimeout,omitempty"`
    DequeueTo *string `json:"DequeueTo,omitempty"`
    EarlyMedia *bool `json:"EarlyMedia,omitempty"`
    EndConferenceOnCustomerExit *bool `json:"EndConferenceOnCustomerExit,omitempty"`
    EndConferenceOnExit *bool `json:"EndConferenceOnExit,omitempty"`
    From *string `json:"From,omitempty"`
    Instruction *string `json:"Instruction,omitempty"`
    MaxParticipants *int32 `json:"MaxParticipants,omitempty"`
    Muted *bool `json:"Muted,omitempty"`
    PostWorkActivitySid *string `json:"PostWorkActivitySid,omitempty"`
    Record *bool `json:"Record,omitempty"`
    RecordingChannels *string `json:"RecordingChannels,omitempty"`
    RecordingStatusCallback *string `json:"RecordingStatusCallback,omitempty"`
    RecordingStatusCallbackMethod *string `json:"RecordingStatusCallbackMethod,omitempty"`
    RedirectAccept *bool `json:"RedirectAccept,omitempty"`
    RedirectCallSid *string `json:"RedirectCallSid,omitempty"`
    RedirectUrl *string `json:"RedirectUrl,omitempty"`
    Region *string `json:"Region,omitempty"`
    ReservationStatus *string `json:"ReservationStatus,omitempty"`
    SipAuthPassword *string `json:"SipAuthPassword,omitempty"`
    SipAuthUsername *string `json:"SipAuthUsername,omitempty"`
    StartConferenceOnEnter *bool `json:"StartConferenceOnEnter,omitempty"`
    StatusCallback *string `json:"StatusCallback,omitempty"`
    StatusCallbackEvent *[]string `json:"StatusCallbackEvent,omitempty"`
    StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
    Timeout *int32 `json:"Timeout,omitempty"`
    To *string `json:"To,omitempty"`
    WaitMethod *string `json:"WaitMethod,omitempty"`
    WaitUrl *string `json:"WaitUrl,omitempty"`
    WorkerActivitySid *string `json:"WorkerActivitySid,omitempty"`
}

/*
UpdateWorkerReservation Method for UpdateWorkerReservation
 * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to update.
 * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to update.
 * @param sid The SID of the WorkerReservation resource to update.
 * @param optional nil or *UpdateWorkerReservationOpts - Optional Parameters:
 * @param "Beep" (string) - Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
 * @param "BeepOnCustomerEntrance" (bool) - Whether to play a notification beep when the customer joins.
 * @param "CallAccept" (bool) - Whether to accept a reservation when executing a Call instruction.
 * @param "CallFrom" (string) - The Caller ID of the outbound call when executing a Call instruction.
 * @param "CallRecord" (string) - Whether to record both legs of a call when executing a Call instruction.
 * @param "CallStatusCallbackUrl" (string) - The URL to call for the completed call event when executing a Call instruction.
 * @param "CallTimeout" (int32) - The timeout for a call when executing a Call instruction.
 * @param "CallTo" (string) - The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
 * @param "CallUrl" (string) - TwiML URI executed on answering the worker's leg as a result of the Call instruction.
 * @param "ConferenceRecord" (string) - Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
 * @param "ConferenceRecordingStatusCallback" (string) - The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
 * @param "ConferenceRecordingStatusCallbackMethod" (string) - The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 * @param "ConferenceStatusCallback" (string) - The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
 * @param "ConferenceStatusCallbackEvent" ([]string) - The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
 * @param "ConferenceStatusCallbackMethod" (string) - The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 * @param "ConferenceTrim" (string) - Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
 * @param "DequeueFrom" (string) - The caller ID of the call to the worker when executing a Dequeue instruction.
 * @param "DequeuePostWorkActivitySid" (string) - The SID of the Activity resource to start after executing a Dequeue instruction.
 * @param "DequeueRecord" (string) - Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
 * @param "DequeueStatusCallbackEvent" ([]string) - The call progress events sent via webhooks as a result of a Dequeue instruction.
 * @param "DequeueStatusCallbackUrl" (string) - The callback URL for completed call event when executing a Dequeue instruction.
 * @param "DequeueTimeout" (int32) - The timeout for call when executing a Dequeue instruction.
 * @param "DequeueTo" (string) - The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
 * @param "EarlyMedia" (bool) - Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
 * @param "EndConferenceOnCustomerExit" (bool) - Whether to end the conference when the customer leaves.
 * @param "EndConferenceOnExit" (bool) - Whether to end the conference when the agent leaves.
 * @param "From" (string) - The caller ID of the call to the worker when executing a Conference instruction.
 * @param "Instruction" (string) - The assignment instruction for the reservation.
 * @param "MaxParticipants" (int32) - The maximum number of participants allowed in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
 * @param "Muted" (bool) - Whether the agent is muted in the conference. Defaults to `false`.
 * @param "PostWorkActivitySid" (string) - The new worker activity SID after executing a Conference instruction.
 * @param "Record" (bool) - Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
 * @param "RecordingChannels" (string) - The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
 * @param "RecordingStatusCallback" (string) - The URL that we should call using the `recording_status_callback_method` when the recording status changes.
 * @param "RecordingStatusCallbackMethod" (string) - The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 * @param "RedirectAccept" (bool) - Whether the reservation should be accepted when executing a Redirect instruction.
 * @param "RedirectCallSid" (string) - The Call SID of the call parked in the queue when executing a Redirect instruction.
 * @param "RedirectUrl" (string) - TwiML URI to redirect the call to when executing the Redirect instruction.
 * @param "Region" (string) - The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
 * @param "ReservationStatus" (string) - The new status of the reservation. Can be: `pending`, `accepted`, `rejected`, `timeout`, `canceled`, or `rescinded`.
 * @param "SipAuthPassword" (string) - The SIP password for authentication.
 * @param "SipAuthUsername" (string) - The SIP username used for authentication.
 * @param "StartConferenceOnEnter" (bool) - Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
 * @param "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application.
 * @param "StatusCallbackEvent" ([]string) - The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
 * @param "Timeout" (int32) - The timeout for a call when executing a Conference instruction.
 * @param "To" (string) - The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
 * @param "WaitMethod" (string) - The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
 * @param "WaitUrl" (string) - The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
 * @param "WorkerActivitySid" (string) - The new worker activity SID if rejecting a reservation.
@return TaskrouterV1WorkspaceWorkerWorkerReservation
*/
func (c *DefaultApiService) UpdateWorkerReservation(workspaceSid string, workerSid string, sid string, params *UpdateWorkerReservationParams) (*TaskrouterV1WorkspaceWorkerWorkerReservation, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"WorkerSid"+"}", workerSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Beep != nil {
        data.Set("Beep", *params.Beep)
    }
    if params != nil && params.BeepOnCustomerEntrance != nil {
        data.Set("BeepOnCustomerEntrance", string(*params.BeepOnCustomerEntrance))
    }
    if params != nil && params.CallAccept != nil {
        data.Set("CallAccept", string(*params.CallAccept))
    }
    if params != nil && params.CallFrom != nil {
        data.Set("CallFrom", *params.CallFrom)
    }
    if params != nil && params.CallRecord != nil {
        data.Set("CallRecord", *params.CallRecord)
    }
    if params != nil && params.CallStatusCallbackUrl != nil {
        data.Set("CallStatusCallbackUrl", *params.CallStatusCallbackUrl)
    }
    if params != nil && params.CallTimeout != nil {
        data.Set("CallTimeout", string(*params.CallTimeout))
    }
    if params != nil && params.CallTo != nil {
        data.Set("CallTo", *params.CallTo)
    }
    if params != nil && params.CallUrl != nil {
        data.Set("CallUrl", *params.CallUrl)
    }
    if params != nil && params.ConferenceRecord != nil {
        data.Set("ConferenceRecord", *params.ConferenceRecord)
    }
    if params != nil && params.ConferenceRecordingStatusCallback != nil {
        data.Set("ConferenceRecordingStatusCallback", *params.ConferenceRecordingStatusCallback)
    }
    if params != nil && params.ConferenceRecordingStatusCallbackMethod != nil {
        data.Set("ConferenceRecordingStatusCallbackMethod", *params.ConferenceRecordingStatusCallbackMethod)
    }
    if params != nil && params.ConferenceStatusCallback != nil {
        data.Set("ConferenceStatusCallback", *params.ConferenceStatusCallback)
    }
    if params != nil && params.ConferenceStatusCallbackEvent != nil {
        data.Set("ConferenceStatusCallbackEvent", *params.ConferenceStatusCallbackEvent)
    }
    if params != nil && params.ConferenceStatusCallbackMethod != nil {
        data.Set("ConferenceStatusCallbackMethod", *params.ConferenceStatusCallbackMethod)
    }
    if params != nil && params.ConferenceTrim != nil {
        data.Set("ConferenceTrim", *params.ConferenceTrim)
    }
    if params != nil && params.DequeueFrom != nil {
        data.Set("DequeueFrom", *params.DequeueFrom)
    }
    if params != nil && params.DequeuePostWorkActivitySid != nil {
        data.Set("DequeuePostWorkActivitySid", *params.DequeuePostWorkActivitySid)
    }
    if params != nil && params.DequeueRecord != nil {
        data.Set("DequeueRecord", *params.DequeueRecord)
    }
    if params != nil && params.DequeueStatusCallbackEvent != nil {
        data.Set("DequeueStatusCallbackEvent", *params.DequeueStatusCallbackEvent)
    }
    if params != nil && params.DequeueStatusCallbackUrl != nil {
        data.Set("DequeueStatusCallbackUrl", *params.DequeueStatusCallbackUrl)
    }
    if params != nil && params.DequeueTimeout != nil {
        data.Set("DequeueTimeout", string(*params.DequeueTimeout))
    }
    if params != nil && params.DequeueTo != nil {
        data.Set("DequeueTo", *params.DequeueTo)
    }
    if params != nil && params.EarlyMedia != nil {
        data.Set("EarlyMedia", string(*params.EarlyMedia))
    }
    if params != nil && params.EndConferenceOnCustomerExit != nil {
        data.Set("EndConferenceOnCustomerExit", string(*params.EndConferenceOnCustomerExit))
    }
    if params != nil && params.EndConferenceOnExit != nil {
        data.Set("EndConferenceOnExit", string(*params.EndConferenceOnExit))
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.Instruction != nil {
        data.Set("Instruction", *params.Instruction)
    }
    if params != nil && params.MaxParticipants != nil {
        data.Set("MaxParticipants", string(*params.MaxParticipants))
    }
    if params != nil && params.Muted != nil {
        data.Set("Muted", string(*params.Muted))
    }
    if params != nil && params.PostWorkActivitySid != nil {
        data.Set("PostWorkActivitySid", *params.PostWorkActivitySid)
    }
    if params != nil && params.Record != nil {
        data.Set("Record", string(*params.Record))
    }
    if params != nil && params.RecordingChannels != nil {
        data.Set("RecordingChannels", *params.RecordingChannels)
    }
    if params != nil && params.RecordingStatusCallback != nil {
        data.Set("RecordingStatusCallback", *params.RecordingStatusCallback)
    }
    if params != nil && params.RecordingStatusCallbackMethod != nil {
        data.Set("RecordingStatusCallbackMethod", *params.RecordingStatusCallbackMethod)
    }
    if params != nil && params.RedirectAccept != nil {
        data.Set("RedirectAccept", string(*params.RedirectAccept))
    }
    if params != nil && params.RedirectCallSid != nil {
        data.Set("RedirectCallSid", *params.RedirectCallSid)
    }
    if params != nil && params.RedirectUrl != nil {
        data.Set("RedirectUrl", *params.RedirectUrl)
    }
    if params != nil && params.Region != nil {
        data.Set("Region", *params.Region)
    }
    if params != nil && params.ReservationStatus != nil {
        data.Set("ReservationStatus", *params.ReservationStatus)
    }
    if params != nil && params.SipAuthPassword != nil {
        data.Set("SipAuthPassword", *params.SipAuthPassword)
    }
    if params != nil && params.SipAuthUsername != nil {
        data.Set("SipAuthUsername", *params.SipAuthUsername)
    }
    if params != nil && params.StartConferenceOnEnter != nil {
        data.Set("StartConferenceOnEnter", string(*params.StartConferenceOnEnter))
    }
    if params != nil && params.StatusCallback != nil {
        data.Set("StatusCallback", *params.StatusCallback)
    }
    if params != nil && params.StatusCallbackEvent != nil {
        data.Set("StatusCallbackEvent", *params.StatusCallbackEvent)
    }
    if params != nil && params.StatusCallbackMethod != nil {
        data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
    }
    if params != nil && params.Timeout != nil {
        data.Set("Timeout", string(*params.Timeout))
    }
    if params != nil && params.To != nil {
        data.Set("To", *params.To)
    }
    if params != nil && params.WaitMethod != nil {
        data.Set("WaitMethod", *params.WaitMethod)
    }
    if params != nil && params.WaitUrl != nil {
        data.Set("WaitUrl", *params.WaitUrl)
    }
    if params != nil && params.WorkerActivitySid != nil {
        data.Set("WorkerActivitySid", *params.WorkerActivitySid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkerWorkerReservation{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateWorkflowParams Optional parameters for the method 'UpdateWorkflow'
type UpdateWorkflowParams struct {
    AssignmentCallbackUrl *string `json:"AssignmentCallbackUrl,omitempty"`
    Configuration *string `json:"Configuration,omitempty"`
    FallbackAssignmentCallbackUrl *string `json:"FallbackAssignmentCallbackUrl,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    ReEvaluateTasks *string `json:"ReEvaluateTasks,omitempty"`
    TaskReservationTimeout *int32 `json:"TaskReservationTimeout,omitempty"`
}

/*
UpdateWorkflow Method for UpdateWorkflow
 * @param workspaceSid The SID of the Workspace with the Workflow to update.
 * @param sid The SID of the Workflow resource to update.
 * @param optional nil or *UpdateWorkflowOpts - Optional Parameters:
 * @param "AssignmentCallbackUrl" (string) - The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details.
 * @param "Configuration" (string) - A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information.
 * @param "FallbackAssignmentCallbackUrl" (string) - The URL that we should call when a call to the `assignment_callback_url` fails.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Workflow resource. For example, `Inbound Call Workflow` or `2014 Outbound Campaign`.
 * @param "ReEvaluateTasks" (string) - Whether or not to re-evaluate Tasks. The default is `false`, which means Tasks in the Workflow will not be processed through the assignment loop again.
 * @param "TaskReservationTimeout" (int32) - How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`.
@return TaskrouterV1WorkspaceWorkflow
*/
func (c *DefaultApiService) UpdateWorkflow(workspaceSid string, sid string, params *UpdateWorkflowParams) (*TaskrouterV1WorkspaceWorkflow, error) {
    path := "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}"
    path = strings.Replace(path, "{"+"WorkspaceSid"+"}", workspaceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AssignmentCallbackUrl != nil {
        data.Set("AssignmentCallbackUrl", *params.AssignmentCallbackUrl)
    }
    if params != nil && params.Configuration != nil {
        data.Set("Configuration", *params.Configuration)
    }
    if params != nil && params.FallbackAssignmentCallbackUrl != nil {
        data.Set("FallbackAssignmentCallbackUrl", *params.FallbackAssignmentCallbackUrl)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.ReEvaluateTasks != nil {
        data.Set("ReEvaluateTasks", *params.ReEvaluateTasks)
    }
    if params != nil && params.TaskReservationTimeout != nil {
        data.Set("TaskReservationTimeout", string(*params.TaskReservationTimeout))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1WorkspaceWorkflow{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateWorkspaceParams Optional parameters for the method 'UpdateWorkspace'
type UpdateWorkspaceParams struct {
    DefaultActivitySid *string `json:"DefaultActivitySid,omitempty"`
    EventCallbackUrl *string `json:"EventCallbackUrl,omitempty"`
    EventsFilter *string `json:"EventsFilter,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    MultiTaskEnabled *bool `json:"MultiTaskEnabled,omitempty"`
    PrioritizeQueueOrder *string `json:"PrioritizeQueueOrder,omitempty"`
    TimeoutActivitySid *string `json:"TimeoutActivitySid,omitempty"`
}

/*
UpdateWorkspace Method for UpdateWorkspace
 * @param sid The SID of the Workspace resource to update.
 * @param optional nil or *UpdateWorkspaceOpts - Optional Parameters:
 * @param "DefaultActivitySid" (string) - The SID of the Activity that will be used when new Workers are created in the Workspace.
 * @param "EventCallbackUrl" (string) - The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information.
 * @param "EventsFilter" (string) - The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
 * @param "MultiTaskEnabled" (bool) - Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. The default is `false`. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. Otherwise, each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking][https://www.twilio.com/docs/taskrouter/multitasking].
 * @param "PrioritizeQueueOrder" (string) - The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues. Can be: `LIFO` or `FIFO` and the default is `FIFO`. For more information, see [Queue Ordering][https://www.twilio.com/docs/taskrouter/queue-ordering-last-first-out-lifo].
 * @param "TimeoutActivitySid" (string) - The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
@return TaskrouterV1Workspace
*/
func (c *DefaultApiService) UpdateWorkspace(sid string, params *UpdateWorkspaceParams) (*TaskrouterV1Workspace, error) {
    path := "/v1/Workspaces/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DefaultActivitySid != nil {
        data.Set("DefaultActivitySid", *params.DefaultActivitySid)
    }
    if params != nil && params.EventCallbackUrl != nil {
        data.Set("EventCallbackUrl", *params.EventCallbackUrl)
    }
    if params != nil && params.EventsFilter != nil {
        data.Set("EventsFilter", *params.EventsFilter)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.MultiTaskEnabled != nil {
        data.Set("MultiTaskEnabled", string(*params.MultiTaskEnabled))
    }
    if params != nil && params.PrioritizeQueueOrder != nil {
        data.Set("PrioritizeQueueOrder", *params.PrioritizeQueueOrder)
    }
    if params != nil && params.TimeoutActivitySid != nil {
        data.Set("TimeoutActivitySid", *params.TimeoutActivitySid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &TaskrouterV1Workspace{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
