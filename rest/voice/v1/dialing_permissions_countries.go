/*
 * Twilio - Voice
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.18.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"

	"strings"

	"github.com/twilio/twilio-go/client"
)

// Retrieve voice dialing country permissions identified by the given ISO country code
func (c *ApiService) FetchDialingPermissionsCountry(IsoCode string) (*VoiceV1DialingPermissionsDialingPermissionsCountryInstance, error) {
	path := "/v1/DialingPermissions/Countries/{IsoCode}"
	path = strings.Replace(path, "{"+"IsoCode"+"}", IsoCode, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VoiceV1DialingPermissionsDialingPermissionsCountryInstance{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListDialingPermissionsCountry'
type ListDialingPermissionsCountryParams struct {
	// Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	IsoCode *string `json:"IsoCode,omitempty"`
	// Filter to retrieve the country permissions by specifying the continent
	Continent *string `json:"Continent,omitempty"`
	// Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
	CountryCode *string `json:"CountryCode,omitempty"`
	// Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
	LowRiskNumbersEnabled *bool `json:"LowRiskNumbersEnabled,omitempty"`
	// Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
	HighRiskSpecialNumbersEnabled *bool `json:"HighRiskSpecialNumbersEnabled,omitempty"`
	// Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/learn/voice-and-video/toll-fraud) numbers enabled. Can be: `true` or `false`.
	HighRiskTollfraudNumbersEnabled *bool `json:"HighRiskTollfraudNumbersEnabled,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

func (params *ListDialingPermissionsCountryParams) SetIsoCode(IsoCode string) *ListDialingPermissionsCountryParams {
	params.IsoCode = &IsoCode
	return params
}
func (params *ListDialingPermissionsCountryParams) SetContinent(Continent string) *ListDialingPermissionsCountryParams {
	params.Continent = &Continent
	return params
}
func (params *ListDialingPermissionsCountryParams) SetCountryCode(CountryCode string) *ListDialingPermissionsCountryParams {
	params.CountryCode = &CountryCode
	return params
}
func (params *ListDialingPermissionsCountryParams) SetLowRiskNumbersEnabled(LowRiskNumbersEnabled bool) *ListDialingPermissionsCountryParams {
	params.LowRiskNumbersEnabled = &LowRiskNumbersEnabled
	return params
}
func (params *ListDialingPermissionsCountryParams) SetHighRiskSpecialNumbersEnabled(HighRiskSpecialNumbersEnabled bool) *ListDialingPermissionsCountryParams {
	params.HighRiskSpecialNumbersEnabled = &HighRiskSpecialNumbersEnabled
	return params
}
func (params *ListDialingPermissionsCountryParams) SetHighRiskTollfraudNumbersEnabled(HighRiskTollfraudNumbersEnabled bool) *ListDialingPermissionsCountryParams {
	params.HighRiskTollfraudNumbersEnabled = &HighRiskTollfraudNumbersEnabled
	return params
}
func (params *ListDialingPermissionsCountryParams) SetPageSize(PageSize int) *ListDialingPermissionsCountryParams {
	params.PageSize = &PageSize
	return params
}

// Retrieve all voice dialing country permissions for this account
func (c *ApiService) ListDialingPermissionsCountry(params *ListDialingPermissionsCountryParams) (*ListDialingPermissionsCountryResponse, error) {
	path := "/v1/DialingPermissions/Countries"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.IsoCode != nil {
		data.Set("IsoCode", *params.IsoCode)
	}
	if params != nil && params.Continent != nil {
		data.Set("Continent", *params.Continent)
	}
	if params != nil && params.CountryCode != nil {
		data.Set("CountryCode", *params.CountryCode)
	}
	if params != nil && params.LowRiskNumbersEnabled != nil {
		data.Set("LowRiskNumbersEnabled", fmt.Sprint(*params.LowRiskNumbersEnabled))
	}
	if params != nil && params.HighRiskSpecialNumbersEnabled != nil {
		data.Set("HighRiskSpecialNumbersEnabled", fmt.Sprint(*params.HighRiskSpecialNumbersEnabled))
	}
	if params != nil && params.HighRiskTollfraudNumbersEnabled != nil {
		data.Set("HighRiskTollfraudNumbersEnabled", fmt.Sprint(*params.HighRiskTollfraudNumbersEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListDialingPermissionsCountryResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

//Retrieve a single page of  records from the API. Request is executed immediately.
func (c *ApiService) DialingPermissionsCountriesPage(params *ListDialingPermissionsCountryParams, pageToken string, pageNumber string) (*ListDialingPermissionsCountryResponse, error) {
	path := "/v1/DialingPermissions/Countries"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.IsoCode != nil {
		data.Set("IsoCode", *params.IsoCode)
	}
	if params != nil && params.Continent != nil {
		data.Set("Continent", *params.Continent)
	}
	if params != nil && params.CountryCode != nil {
		data.Set("CountryCode", *params.CountryCode)
	}
	if params != nil && params.LowRiskNumbersEnabled != nil {
		data.Set("LowRiskNumbersEnabled", fmt.Sprint(*params.LowRiskNumbersEnabled))
	}
	if params != nil && params.HighRiskSpecialNumbersEnabled != nil {
		data.Set("HighRiskSpecialNumbersEnabled", fmt.Sprint(*params.HighRiskSpecialNumbersEnabled))
	}
	if params != nil && params.HighRiskTollfraudNumbersEnabled != nil {
		data.Set("HighRiskTollfraudNumbersEnabled", fmt.Sprint(*params.HighRiskTollfraudNumbersEnabled))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	data.Set("PageToken", pageToken)
	data.Set("PageNumber", pageNumber)

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListDialingPermissionsCountryResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

//Lists DialingPermissionsCountries records from the API as a list. Unlike stream, this operation is eager and will loads 'limit' records into memory before returning.
func (c *ApiService) DialingPermissionsCountriesList(params *ListDialingPermissionsCountryParams, limit int) ([]ListDialingPermissionsCountryResponse, error) {
	params.SetPageSize(c.requestHandler.ReadLimits(params.PageSize, limit))
	response, err := c.ListDialingPermissionsCountry(params)
	if err != nil {
		return nil, err
	}

	page := client.NewPage(c.baseURL, response)

	resp := c.requestHandler.List(page, limit, 0)
	ret := make([]ListDialingPermissionsCountryResponse, len(resp))

	for i := range resp {
		jsonStr, _ := json.Marshal(resp[i])
		ps := ListDialingPermissionsCountryResponse{}
		if err := json.Unmarshal(jsonStr, &ps); err != nil {
			return ret, err
		}

		ret[i] = ps
	}

	return ret, nil
}

//Streams DialingPermissionsCountries records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) DialingPermissionsCountriesStream(params *ListDialingPermissionsCountryParams, limit int) (chan interface{}, error) {
	params.SetPageSize(c.requestHandler.ReadLimits(params.PageSize, limit))
	response, err := c.ListDialingPermissionsCountry(params)
	if err != nil {
		return nil, err
	}

	page := client.NewPage(c.baseURL, response)

	ps := ListDialingPermissionsCountryResponse{}
	return c.requestHandler.Stream(page, limit, 0, ps), nil
}
