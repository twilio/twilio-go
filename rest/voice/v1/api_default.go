/*
 * Twilio - Voice
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateByocTrunkParams Optional parameters for the method 'CreateByocTrunk'
type CreateByocTrunkParams struct {
    CnamLookupEnabled *bool `json:"CnamLookupEnabled,omitempty"`
    ConnectionPolicySid *string `json:"ConnectionPolicySid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    FromDomainSid *string `json:"FromDomainSid,omitempty"`
    StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
    StatusCallbackUrl *string `json:"StatusCallbackUrl,omitempty"`
    VoiceFallbackMethod *string `json:"VoiceFallbackMethod,omitempty"`
    VoiceFallbackUrl *string `json:"VoiceFallbackUrl,omitempty"`
    VoiceMethod *string `json:"VoiceMethod,omitempty"`
    VoiceUrl *string `json:"VoiceUrl,omitempty"`
}

/*
CreateByocTrunk Method for CreateByocTrunk
 * @param optional nil or *CreateByocTrunkOpts - Optional Parameters:
 * @param "CnamLookupEnabled" (bool) - Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
 * @param "ConnectionPolicySid" (string) - The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "FromDomainSid" (string) - The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\"call back\\\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\"sip.twilio.com\\\".
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
 * @param "StatusCallbackUrl" (string) - The URL that we should call to pass status parameters (such as call ended) to your application.
 * @param "VoiceFallbackMethod" (string) - The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 * @param "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
 * @param "VoiceMethod" (string) - The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
 * @param "VoiceUrl" (string) - The URL we should call when the BYOC Trunk receives a call.
@return VoiceV1ByocTrunk
*/
func (c *DefaultApiService) CreateByocTrunk(params *CreateByocTrunkParams) (*VoiceV1ByocTrunk, error) {
    path := "/v1/ByocTrunks"

    data := url.Values{}
    headers := 0

    if params != nil && params.CnamLookupEnabled != nil {
        data.Set("CnamLookupEnabled", string(*params.CnamLookupEnabled))
    }
    if params != nil && params.ConnectionPolicySid != nil {
        data.Set("ConnectionPolicySid", *params.ConnectionPolicySid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.FromDomainSid != nil {
        data.Set("FromDomainSid", *params.FromDomainSid)
    }
    if params != nil && params.StatusCallbackMethod != nil {
        data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
    }
    if params != nil && params.StatusCallbackUrl != nil {
        data.Set("StatusCallbackUrl", *params.StatusCallbackUrl)
    }
    if params != nil && params.VoiceFallbackMethod != nil {
        data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
    }
    if params != nil && params.VoiceFallbackUrl != nil {
        data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
    }
    if params != nil && params.VoiceMethod != nil {
        data.Set("VoiceMethod", *params.VoiceMethod)
    }
    if params != nil && params.VoiceUrl != nil {
        data.Set("VoiceUrl", *params.VoiceUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ByocTrunk{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateConnectionPolicyParams Optional parameters for the method 'CreateConnectionPolicy'
type CreateConnectionPolicyParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateConnectionPolicy Method for CreateConnectionPolicy
 * @param optional nil or *CreateConnectionPolicyOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
@return VoiceV1ConnectionPolicy
*/
func (c *DefaultApiService) CreateConnectionPolicy(params *CreateConnectionPolicyParams) (*VoiceV1ConnectionPolicy, error) {
    path := "/v1/ConnectionPolicies"

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicy{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateConnectionPolicyTargetParams Optional parameters for the method 'CreateConnectionPolicyTarget'
type CreateConnectionPolicyTargetParams struct {
    Enabled *bool `json:"Enabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Priority *int32 `json:"Priority,omitempty"`
    Target *string `json:"Target,omitempty"`
    Weight *int32 `json:"Weight,omitempty"`
}

/*
CreateConnectionPolicyTarget Method for CreateConnectionPolicyTarget
 * @param connectionPolicySid The SID of the Connection Policy that owns the Target.
 * @param optional nil or *CreateConnectionPolicyTargetOpts - Optional Parameters:
 * @param "Enabled" (bool) - Whether the Target is enabled. The default is `true`.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "Priority" (int32) - The relative importance of the target. Can be an integer from 0 to 65535, inclusive, and the default is 10. The lowest number represents the most important target.
 * @param "Target" (string) - The SIP address you want Twilio to route your calls to. This must be a `sip:` schema. `sips` is NOT supported.
 * @param "Weight" (int32) - The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive, and the default is 10. Targets with higher values receive more load than those with lower ones with the same priority.
@return VoiceV1ConnectionPolicyConnectionPolicyTarget
*/
func (c *DefaultApiService) CreateConnectionPolicyTarget(connectionPolicySid string, params *CreateConnectionPolicyTargetParams) (*VoiceV1ConnectionPolicyConnectionPolicyTarget, error) {
    path := "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets"
    path = strings.Replace(path, "{"+"ConnectionPolicySid"+"}", connectionPolicySid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Enabled != nil {
        data.Set("Enabled", string(*params.Enabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Priority != nil {
        data.Set("Priority", string(*params.Priority))
    }
    if params != nil && params.Target != nil {
        data.Set("Target", *params.Target)
    }
    if params != nil && params.Weight != nil {
        data.Set("Weight", string(*params.Weight))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicyConnectionPolicyTarget{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateDialingPermissionsCountryBulkUpdateParams Optional parameters for the method 'CreateDialingPermissionsCountryBulkUpdate'
type CreateDialingPermissionsCountryBulkUpdateParams struct {
    UpdateRequest *string `json:"UpdateRequest,omitempty"`
}

/*
CreateDialingPermissionsCountryBulkUpdate Method for CreateDialingPermissionsCountryBulkUpdate
Create a bulk update request to change voice dialing country permissions of one or more countries identified by the corresponding [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
 * @param optional nil or *CreateDialingPermissionsCountryBulkUpdateOpts - Optional Parameters:
 * @param "UpdateRequest" (string) - URL encoded JSON array of update objects. example : `[ { \\\"iso_code\\\": \\\"GB\\\", \\\"low_risk_numbers_enabled\\\": \\\"true\\\", \\\"high_risk_special_numbers_enabled\\\":\\\"true\\\", \\\"high_risk_tollfraud_numbers_enabled\\\": \\\"false\\\" } ]`
@return VoiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate
*/
func (c *DefaultApiService) CreateDialingPermissionsCountryBulkUpdate(params *CreateDialingPermissionsCountryBulkUpdateParams) (*VoiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate, error) {
    path := "/v1/DialingPermissions/BulkCountryUpdates"

    data := url.Values{}
    headers := 0

    if params != nil && params.UpdateRequest != nil {
        data.Set("UpdateRequest", *params.UpdateRequest)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateIpRecordParams Optional parameters for the method 'CreateIpRecord'
type CreateIpRecordParams struct {
    CidrPrefixLength *int32 `json:"CidrPrefixLength,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    IpAddress *string `json:"IpAddress,omitempty"`
}

/*
CreateIpRecord Method for CreateIpRecord
 * @param optional nil or *CreateIpRecordOpts - Optional Parameters:
 * @param "CidrPrefixLength" (int32) - An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "IpAddress" (string) - An IP address in dotted decimal notation, IPv4 only.
@return VoiceV1IpRecord
*/
func (c *DefaultApiService) CreateIpRecord(params *CreateIpRecordParams) (*VoiceV1IpRecord, error) {
    path := "/v1/IpRecords"

    data := url.Values{}
    headers := 0

    if params != nil && params.CidrPrefixLength != nil {
        data.Set("CidrPrefixLength", string(*params.CidrPrefixLength))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.IpAddress != nil {
        data.Set("IpAddress", *params.IpAddress)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1IpRecord{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSourceIpMappingParams Optional parameters for the method 'CreateSourceIpMapping'
type CreateSourceIpMappingParams struct {
    IpRecordSid *string `json:"IpRecordSid,omitempty"`
    SipDomainSid *string `json:"SipDomainSid,omitempty"`
}

/*
CreateSourceIpMapping Method for CreateSourceIpMapping
 * @param optional nil or *CreateSourceIpMappingOpts - Optional Parameters:
 * @param "IpRecordSid" (string) - The Twilio-provided string that uniquely identifies the IP Record resource to map from.
 * @param "SipDomainSid" (string) - The SID of the SIP Domain that the IP Record should be mapped to.
@return VoiceV1SourceIpMapping
*/
func (c *DefaultApiService) CreateSourceIpMapping(params *CreateSourceIpMappingParams) (*VoiceV1SourceIpMapping, error) {
    path := "/v1/SourceIpMappings"

    data := url.Values{}
    headers := 0

    if params != nil && params.IpRecordSid != nil {
        data.Set("IpRecordSid", *params.IpRecordSid)
    }
    if params != nil && params.SipDomainSid != nil {
        data.Set("SipDomainSid", *params.SipDomainSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1SourceIpMapping{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
DeleteByocTrunk Method for DeleteByocTrunk
 * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to delete.
*/
func (c *DefaultApiService) DeleteByocTrunk(sid string) (error) {
    path := "/v1/ByocTrunks/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteConnectionPolicy Method for DeleteConnectionPolicy
 * @param sid The unique string that we created to identify the Connection Policy resource to delete.
*/
func (c *DefaultApiService) DeleteConnectionPolicy(sid string) (error) {
    path := "/v1/ConnectionPolicies/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteConnectionPolicyTarget Method for DeleteConnectionPolicyTarget
 * @param connectionPolicySid The SID of the Connection Policy that owns the Target.
 * @param sid The unique string that we created to identify the Target resource to delete.
*/
func (c *DefaultApiService) DeleteConnectionPolicyTarget(connectionPolicySid string, sid string) (error) {
    path := "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}"
    path = strings.Replace(path, "{"+"ConnectionPolicySid"+"}", connectionPolicySid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteIpRecord Method for DeleteIpRecord
 * @param sid The Twilio-provided string that uniquely identifies the IP Record resource to delete.
*/
func (c *DefaultApiService) DeleteIpRecord(sid string) (error) {
    path := "/v1/IpRecords/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSourceIpMapping Method for DeleteSourceIpMapping
 * @param sid The Twilio-provided string that uniquely identifies the IP Record resource to delete.
*/
func (c *DefaultApiService) DeleteSourceIpMapping(sid string) (error) {
    path := "/v1/SourceIpMappings/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchByocTrunk Method for FetchByocTrunk
 * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch.
@return VoiceV1ByocTrunk
*/
func (c *DefaultApiService) FetchByocTrunk(sid string) (*VoiceV1ByocTrunk, error) {
    path := "/v1/ByocTrunks/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ByocTrunk{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchConnectionPolicy Method for FetchConnectionPolicy
 * @param sid The unique string that we created to identify the Connection Policy resource to fetch.
@return VoiceV1ConnectionPolicy
*/
func (c *DefaultApiService) FetchConnectionPolicy(sid string) (*VoiceV1ConnectionPolicy, error) {
    path := "/v1/ConnectionPolicies/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicy{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchConnectionPolicyTarget Method for FetchConnectionPolicyTarget
 * @param connectionPolicySid The SID of the Connection Policy that owns the Target.
 * @param sid The unique string that we created to identify the Target resource to fetch.
@return VoiceV1ConnectionPolicyConnectionPolicyTarget
*/
func (c *DefaultApiService) FetchConnectionPolicyTarget(connectionPolicySid string, sid string) (*VoiceV1ConnectionPolicyConnectionPolicyTarget, error) {
    path := "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}"
    path = strings.Replace(path, "{"+"ConnectionPolicySid"+"}", connectionPolicySid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicyConnectionPolicyTarget{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDialingPermissionsCountry Method for FetchDialingPermissionsCountry
Retrieve voice dialing country permissions identified by the given ISO country code
 * @param isoCode The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the DialingPermissions Country resource to fetch
@return VoiceV1DialingPermissionsDialingPermissionsCountryInstance
*/
func (c *DefaultApiService) FetchDialingPermissionsCountry(isoCode string) (*VoiceV1DialingPermissionsDialingPermissionsCountryInstance, error) {
    path := "/v1/DialingPermissions/Countries/{IsoCode}"
    path = strings.Replace(path, "{"+"IsoCode"+"}", isoCode, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1DialingPermissionsDialingPermissionsCountryInstance{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDialingPermissionsSettings Method for FetchDialingPermissionsSettings
Retrieve voice dialing permissions inheritance for the sub-account
@return VoiceV1DialingPermissionsDialingPermissionsSettings
*/
func (c *DefaultApiService) FetchDialingPermissionsSettings() (*VoiceV1DialingPermissionsDialingPermissionsSettings, error) {
    path := "/v1/Settings"

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1DialingPermissionsDialingPermissionsSettings{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchIpRecord Method for FetchIpRecord
 * @param sid The Twilio-provided string that uniquely identifies the IP Record resource to fetch.
@return VoiceV1IpRecord
*/
func (c *DefaultApiService) FetchIpRecord(sid string) (*VoiceV1IpRecord, error) {
    path := "/v1/IpRecords/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1IpRecord{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSourceIpMapping Method for FetchSourceIpMapping
 * @param sid The Twilio-provided string that uniquely identifies the IP Record resource to fetch.
@return VoiceV1SourceIpMapping
*/
func (c *DefaultApiService) FetchSourceIpMapping(sid string) (*VoiceV1SourceIpMapping, error) {
    path := "/v1/SourceIpMappings/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1SourceIpMapping{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListByocTrunkParams Optional parameters for the method 'ListByocTrunk'
type ListByocTrunkParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListByocTrunk Method for ListByocTrunk
 * @param optional nil or *ListByocTrunkOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VoiceV1ByocTrunkReadResponse
*/
func (c *DefaultApiService) ListByocTrunk(params *ListByocTrunkParams) (*VoiceV1ByocTrunkReadResponse, error) {
    path := "/v1/ByocTrunks"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ByocTrunkReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListConnectionPolicyParams Optional parameters for the method 'ListConnectionPolicy'
type ListConnectionPolicyParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListConnectionPolicy Method for ListConnectionPolicy
 * @param optional nil or *ListConnectionPolicyOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VoiceV1ConnectionPolicyReadResponse
*/
func (c *DefaultApiService) ListConnectionPolicy(params *ListConnectionPolicyParams) (*VoiceV1ConnectionPolicyReadResponse, error) {
    path := "/v1/ConnectionPolicies"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicyReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListConnectionPolicyTargetParams Optional parameters for the method 'ListConnectionPolicyTarget'
type ListConnectionPolicyTargetParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListConnectionPolicyTarget Method for ListConnectionPolicyTarget
 * @param connectionPolicySid The SID of the Connection Policy from which to read the Targets.
 * @param optional nil or *ListConnectionPolicyTargetOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VoiceV1ConnectionPolicyConnectionPolicyTargetReadResponse
*/
func (c *DefaultApiService) ListConnectionPolicyTarget(connectionPolicySid string, params *ListConnectionPolicyTargetParams) (*VoiceV1ConnectionPolicyConnectionPolicyTargetReadResponse, error) {
    path := "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets"
    path = strings.Replace(path, "{"+"ConnectionPolicySid"+"}", connectionPolicySid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicyConnectionPolicyTargetReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDialingPermissionsCountryParams Optional parameters for the method 'ListDialingPermissionsCountry'
type ListDialingPermissionsCountryParams struct {
    IsoCode *string `json:"IsoCode,omitempty"`
    Continent *string `json:"Continent,omitempty"`
    CountryCode *string `json:"CountryCode,omitempty"`
    LowRiskNumbersEnabled *bool `json:"LowRiskNumbersEnabled,omitempty"`
    HighRiskSpecialNumbersEnabled *bool `json:"HighRiskSpecialNumbersEnabled,omitempty"`
    HighRiskTollfraudNumbersEnabled *bool `json:"HighRiskTollfraudNumbersEnabled,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDialingPermissionsCountry Method for ListDialingPermissionsCountry
Retrieve all voice dialing country permissions for this account
 * @param optional nil or *ListDialingPermissionsCountryOpts - Optional Parameters:
 * @param "IsoCode" (string) - Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
 * @param "Continent" (string) - Filter to retrieve the country permissions by specifying the continent
 * @param "CountryCode" (string) - Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
 * @param "LowRiskNumbersEnabled" (bool) - Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
 * @param "HighRiskSpecialNumbersEnabled" (bool) - Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
 * @param "HighRiskTollfraudNumbersEnabled" (bool) - Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/learn/voice-and-video/toll-fraud) numbers enabled. Can be: `true` or `false`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VoiceV1DialingPermissionsDialingPermissionsCountryReadResponse
*/
func (c *DefaultApiService) ListDialingPermissionsCountry(params *ListDialingPermissionsCountryParams) (*VoiceV1DialingPermissionsDialingPermissionsCountryReadResponse, error) {
    path := "/v1/DialingPermissions/Countries"

    data := url.Values{}
    headers := 0

    if params != nil && params.IsoCode != nil {
        data.Set("IsoCode", *params.IsoCode)
    }
    if params != nil && params.Continent != nil {
        data.Set("Continent", *params.Continent)
    }
    if params != nil && params.CountryCode != nil {
        data.Set("CountryCode", *params.CountryCode)
    }
    if params != nil && params.LowRiskNumbersEnabled != nil {
        data.Set("LowRiskNumbersEnabled", string(*params.LowRiskNumbersEnabled))
    }
    if params != nil && params.HighRiskSpecialNumbersEnabled != nil {
        data.Set("HighRiskSpecialNumbersEnabled", string(*params.HighRiskSpecialNumbersEnabled))
    }
    if params != nil && params.HighRiskTollfraudNumbersEnabled != nil {
        data.Set("HighRiskTollfraudNumbersEnabled", string(*params.HighRiskTollfraudNumbersEnabled))
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1DialingPermissionsDialingPermissionsCountryReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDialingPermissionsHrsPrefixesParams Optional parameters for the method 'ListDialingPermissionsHrsPrefixes'
type ListDialingPermissionsHrsPrefixesParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDialingPermissionsHrsPrefixes Method for ListDialingPermissionsHrsPrefixes
Fetch the high-risk special services prefixes from the country resource corresponding to the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
 * @param isoCode The [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to identify the country permissions from which high-risk special service number prefixes are fetched
 * @param optional nil or *ListDialingPermissionsHrsPrefixesOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixesReadResponse
*/
func (c *DefaultApiService) ListDialingPermissionsHrsPrefixes(isoCode string, params *ListDialingPermissionsHrsPrefixesParams) (*VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixesReadResponse, error) {
    path := "/v1/DialingPermissions/Countries/{IsoCode}/HighRiskSpecialPrefixes"
    path = strings.Replace(path, "{"+"IsoCode"+"}", isoCode, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1DialingPermissionsDialingPermissionsCountryDialingPermissionsHrsPrefixesReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListIpRecordParams Optional parameters for the method 'ListIpRecord'
type ListIpRecordParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListIpRecord Method for ListIpRecord
 * @param optional nil or *ListIpRecordOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VoiceV1IpRecordReadResponse
*/
func (c *DefaultApiService) ListIpRecord(params *ListIpRecordParams) (*VoiceV1IpRecordReadResponse, error) {
    path := "/v1/IpRecords"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1IpRecordReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSourceIpMappingParams Optional parameters for the method 'ListSourceIpMapping'
type ListSourceIpMappingParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSourceIpMapping Method for ListSourceIpMapping
 * @param optional nil or *ListSourceIpMappingOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VoiceV1SourceIpMappingReadResponse
*/
func (c *DefaultApiService) ListSourceIpMapping(params *ListSourceIpMappingParams) (*VoiceV1SourceIpMappingReadResponse, error) {
    path := "/v1/SourceIpMappings"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1SourceIpMappingReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateByocTrunkParams Optional parameters for the method 'UpdateByocTrunk'
type UpdateByocTrunkParams struct {
    CnamLookupEnabled *bool `json:"CnamLookupEnabled,omitempty"`
    ConnectionPolicySid *string `json:"ConnectionPolicySid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    FromDomainSid *string `json:"FromDomainSid,omitempty"`
    StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
    StatusCallbackUrl *string `json:"StatusCallbackUrl,omitempty"`
    VoiceFallbackMethod *string `json:"VoiceFallbackMethod,omitempty"`
    VoiceFallbackUrl *string `json:"VoiceFallbackUrl,omitempty"`
    VoiceMethod *string `json:"VoiceMethod,omitempty"`
    VoiceUrl *string `json:"VoiceUrl,omitempty"`
}

/*
UpdateByocTrunk Method for UpdateByocTrunk
 * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update.
 * @param optional nil or *UpdateByocTrunkOpts - Optional Parameters:
 * @param "CnamLookupEnabled" (bool) - Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
 * @param "ConnectionPolicySid" (string) - The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "FromDomainSid" (string) - The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\"call back\\\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\"sip.twilio.com\\\".
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
 * @param "StatusCallbackUrl" (string) - The URL that we should call to pass status parameters (such as call ended) to your application.
 * @param "VoiceFallbackMethod" (string) - The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
 * @param "VoiceFallbackUrl" (string) - The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
 * @param "VoiceMethod" (string) - The HTTP method we should use to call `voice_url`
 * @param "VoiceUrl" (string) - The URL we should call when the BYOC Trunk receives a call.
@return VoiceV1ByocTrunk
*/
func (c *DefaultApiService) UpdateByocTrunk(sid string, params *UpdateByocTrunkParams) (*VoiceV1ByocTrunk, error) {
    path := "/v1/ByocTrunks/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CnamLookupEnabled != nil {
        data.Set("CnamLookupEnabled", string(*params.CnamLookupEnabled))
    }
    if params != nil && params.ConnectionPolicySid != nil {
        data.Set("ConnectionPolicySid", *params.ConnectionPolicySid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.FromDomainSid != nil {
        data.Set("FromDomainSid", *params.FromDomainSid)
    }
    if params != nil && params.StatusCallbackMethod != nil {
        data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
    }
    if params != nil && params.StatusCallbackUrl != nil {
        data.Set("StatusCallbackUrl", *params.StatusCallbackUrl)
    }
    if params != nil && params.VoiceFallbackMethod != nil {
        data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
    }
    if params != nil && params.VoiceFallbackUrl != nil {
        data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
    }
    if params != nil && params.VoiceMethod != nil {
        data.Set("VoiceMethod", *params.VoiceMethod)
    }
    if params != nil && params.VoiceUrl != nil {
        data.Set("VoiceUrl", *params.VoiceUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ByocTrunk{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateConnectionPolicyParams Optional parameters for the method 'UpdateConnectionPolicy'
type UpdateConnectionPolicyParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
UpdateConnectionPolicy Method for UpdateConnectionPolicy
 * @param sid The unique string that we created to identify the Connection Policy resource to update.
 * @param optional nil or *UpdateConnectionPolicyOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
@return VoiceV1ConnectionPolicy
*/
func (c *DefaultApiService) UpdateConnectionPolicy(sid string, params *UpdateConnectionPolicyParams) (*VoiceV1ConnectionPolicy, error) {
    path := "/v1/ConnectionPolicies/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicy{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateConnectionPolicyTargetParams Optional parameters for the method 'UpdateConnectionPolicyTarget'
type UpdateConnectionPolicyTargetParams struct {
    Enabled *bool `json:"Enabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Priority *int32 `json:"Priority,omitempty"`
    Target *string `json:"Target,omitempty"`
    Weight *int32 `json:"Weight,omitempty"`
}

/*
UpdateConnectionPolicyTarget Method for UpdateConnectionPolicyTarget
 * @param connectionPolicySid The SID of the Connection Policy that owns the Target.
 * @param sid The unique string that we created to identify the Target resource to update.
 * @param optional nil or *UpdateConnectionPolicyTargetOpts - Optional Parameters:
 * @param "Enabled" (bool) - Whether the Target is enabled.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
 * @param "Priority" (int32) - The relative importance of the target. Can be an integer from 0 to 65535, inclusive. The lowest number represents the most important target.
 * @param "Target" (string) - The SIP address you want Twilio to route your calls to. This must be a `sip:` schema. `sips` is NOT supported.
 * @param "Weight" (int32) - The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive. Targets with higher values receive more load than those with lower ones with the same priority.
@return VoiceV1ConnectionPolicyConnectionPolicyTarget
*/
func (c *DefaultApiService) UpdateConnectionPolicyTarget(connectionPolicySid string, sid string, params *UpdateConnectionPolicyTargetParams) (*VoiceV1ConnectionPolicyConnectionPolicyTarget, error) {
    path := "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}"
    path = strings.Replace(path, "{"+"ConnectionPolicySid"+"}", connectionPolicySid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Enabled != nil {
        data.Set("Enabled", string(*params.Enabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Priority != nil {
        data.Set("Priority", string(*params.Priority))
    }
    if params != nil && params.Target != nil {
        data.Set("Target", *params.Target)
    }
    if params != nil && params.Weight != nil {
        data.Set("Weight", string(*params.Weight))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1ConnectionPolicyConnectionPolicyTarget{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDialingPermissionsSettingsParams Optional parameters for the method 'UpdateDialingPermissionsSettings'
type UpdateDialingPermissionsSettingsParams struct {
    DialingPermissionsInheritance *bool `json:"DialingPermissionsInheritance,omitempty"`
}

/*
UpdateDialingPermissionsSettings Method for UpdateDialingPermissionsSettings
Update voice dialing permissions inheritance for the sub-account
 * @param optional nil or *UpdateDialingPermissionsSettingsOpts - Optional Parameters:
 * @param "DialingPermissionsInheritance" (bool) - `true` for the sub-account to inherit voice dialing permissions from the Master Project; otherwise `false`.
@return VoiceV1DialingPermissionsDialingPermissionsSettings
*/
func (c *DefaultApiService) UpdateDialingPermissionsSettings(params *UpdateDialingPermissionsSettingsParams) (*VoiceV1DialingPermissionsDialingPermissionsSettings, error) {
    path := "/v1/Settings"

    data := url.Values{}
    headers := 0

    if params != nil && params.DialingPermissionsInheritance != nil {
        data.Set("DialingPermissionsInheritance", string(*params.DialingPermissionsInheritance))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1DialingPermissionsDialingPermissionsSettings{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateIpRecordParams Optional parameters for the method 'UpdateIpRecord'
type UpdateIpRecordParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
UpdateIpRecord Method for UpdateIpRecord
 * @param sid The Twilio-provided string that uniquely identifies the IP Record resource to update.
 * @param optional nil or *UpdateIpRecordOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
@return VoiceV1IpRecord
*/
func (c *DefaultApiService) UpdateIpRecord(sid string, params *UpdateIpRecordParams) (*VoiceV1IpRecord, error) {
    path := "/v1/IpRecords/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1IpRecord{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSourceIpMappingParams Optional parameters for the method 'UpdateSourceIpMapping'
type UpdateSourceIpMappingParams struct {
    SipDomainSid *string `json:"SipDomainSid,omitempty"`
}

/*
UpdateSourceIpMapping Method for UpdateSourceIpMapping
 * @param sid The Twilio-provided string that uniquely identifies the IP Record resource to update.
 * @param optional nil or *UpdateSourceIpMappingOpts - Optional Parameters:
 * @param "SipDomainSid" (string) - The SID of the SIP Domain that the IP Record should be mapped to.
@return VoiceV1SourceIpMapping
*/
func (c *DefaultApiService) UpdateSourceIpMapping(sid string, params *UpdateSourceIpMappingParams) (*VoiceV1SourceIpMapping, error) {
    path := "/v1/SourceIpMappings/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.SipDomainSid != nil {
        data.Set("SipDomainSid", *params.SipDomainSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VoiceV1SourceIpMapping{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
