/*
 * Twilio - Insights
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.24.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
)

// Optional parameters for the method 'FetchAccountSettings'
type FetchAccountSettingsParams struct {
	//
	SubaccountSid *string `json:"SubaccountSid,omitempty"`
}

func (params *FetchAccountSettingsParams) SetSubaccountSid(SubaccountSid string) *FetchAccountSettingsParams {
	params.SubaccountSid = &SubaccountSid
	return params
}

func (c *ApiService) FetchAccountSettings(params *FetchAccountSettingsParams) (*InsightsV1AccountSettings, error) {
	path := "/v1/Voice/Settings"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.SubaccountSid != nil {
		data.Set("SubaccountSid", *params.SubaccountSid)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &InsightsV1AccountSettings{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'UpdateAccountSettings'
type UpdateAccountSettingsParams struct {
	//
	AdvancedFeatures *bool `json:"AdvancedFeatures,omitempty"`
	//
	SubaccountSid *string `json:"SubaccountSid,omitempty"`
	//
	VoiceTrace *bool `json:"VoiceTrace,omitempty"`
}

func (params *UpdateAccountSettingsParams) SetAdvancedFeatures(AdvancedFeatures bool) *UpdateAccountSettingsParams {
	params.AdvancedFeatures = &AdvancedFeatures
	return params
}
func (params *UpdateAccountSettingsParams) SetSubaccountSid(SubaccountSid string) *UpdateAccountSettingsParams {
	params.SubaccountSid = &SubaccountSid
	return params
}
func (params *UpdateAccountSettingsParams) SetVoiceTrace(VoiceTrace bool) *UpdateAccountSettingsParams {
	params.VoiceTrace = &VoiceTrace
	return params
}

func (c *ApiService) UpdateAccountSettings(params *UpdateAccountSettingsParams) (*InsightsV1AccountSettings, error) {
	path := "/v1/Voice/Settings"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AdvancedFeatures != nil {
		data.Set("AdvancedFeatures", fmt.Sprint(*params.AdvancedFeatures))
	}
	if params != nil && params.SubaccountSid != nil {
		data.Set("SubaccountSid", *params.SubaccountSid)
	}
	if params != nil && params.VoiceTrace != nil {
		data.Set("VoiceTrace", fmt.Sprint(*params.VoiceTrace))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &InsightsV1AccountSettings{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
