/*
 * Twilio - Flex
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
	"strings"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService {
		client: client,
		baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
	}
}
// CreateChannelParams Optional parameters for the method 'CreateChannel'
type CreateChannelParams struct {
	ChatFriendlyName *string `json:"ChatFriendlyName,omitempty"`
	ChatUniqueName *string `json:"ChatUniqueName,omitempty"`
	ChatUserFriendlyName *string `json:"ChatUserFriendlyName,omitempty"`
	FlexFlowSid *string `json:"FlexFlowSid,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	LongLived *bool `json:"LongLived,omitempty"`
	PreEngagementData *string `json:"PreEngagementData,omitempty"`
	Target *string `json:"Target,omitempty"`
	TaskAttributes *string `json:"TaskAttributes,omitempty"`
	TaskSid *string `json:"TaskSid,omitempty"`
}

/*
CreateChannel Method for CreateChannel
 * @param optional nil or *CreateChannelOpts - Optional Parameters:
 * @param "ChatFriendlyName" (string) - The chat channel's friendly name.
 * @param "ChatUniqueName" (string) - The chat channel's unique name.
 * @param "ChatUserFriendlyName" (string) - The chat participant's friendly name.
 * @param "FlexFlowSid" (string) - The SID of the Flex Flow.
 * @param "Identity" (string) - The `identity` value that uniquely identifies the new resource's chat User.
 * @param "LongLived" (bool) - Whether to create the channel as long-lived.
 * @param "PreEngagementData" (string) - The pre-engagement data.
 * @param "Target" (string) - The Target Contact Identity, for example the phone number of an SMS.
 * @param "TaskAttributes" (string) - The Task attributes to be added for the TaskRouter Task.
 * @param "TaskSid" (string) - The SID of the TaskRouter Task. Only valid when integration type is `task`. `null` for integration types `studio` & `external`
@return FlexV1Channel
*/
func (c *DefaultApiService) CreateChannel(params *CreateChannelParams) (*FlexV1Channel, error) {
	path := "/v1/Channels"


	data := url.Values{}
	headers := 0

	if params != nil && params.ChatFriendlyName != nil {
		data.Set("ChatFriendlyName", *params.ChatFriendlyName) 
	}
	if params != nil && params.ChatUniqueName != nil {
		data.Set("ChatUniqueName", *params.ChatUniqueName) 
	}
	if params != nil && params.ChatUserFriendlyName != nil {
		data.Set("ChatUserFriendlyName", *params.ChatUserFriendlyName) 
	}
	if params != nil && params.FlexFlowSid != nil {
		data.Set("FlexFlowSid", *params.FlexFlowSid) 
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity) 
	}
	if params != nil && params.LongLived != nil {
		data.Set("LongLived", fmt.Sprint(*params.LongLived)) 
	}
	if params != nil && params.PreEngagementData != nil {
		data.Set("PreEngagementData", *params.PreEngagementData) 
	}
	if params != nil && params.Target != nil {
		data.Set("Target", *params.Target) 
	}
	if params != nil && params.TaskAttributes != nil {
		data.Set("TaskAttributes", *params.TaskAttributes) 
	}
	if params != nil && params.TaskSid != nil {
		data.Set("TaskSid", *params.TaskSid) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1Channel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateFlexFlowParams Optional parameters for the method 'CreateFlexFlow'
type CreateFlexFlowParams struct {
	ChannelType *string `json:"ChannelType,omitempty"`
	ChatServiceSid *string `json:"ChatServiceSid,omitempty"`
	ContactIdentity *string `json:"ContactIdentity,omitempty"`
	Enabled *bool `json:"Enabled,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	IntegrationChannel *string `json:"Integration.Channel,omitempty"`
	IntegrationCreationOnMessage *bool `json:"Integration.CreationOnMessage,omitempty"`
	IntegrationFlowSid *string `json:"Integration.FlowSid,omitempty"`
	IntegrationPriority *int32 `json:"Integration.Priority,omitempty"`
	IntegrationRetryCount *int32 `json:"Integration.RetryCount,omitempty"`
	IntegrationTimeout *int32 `json:"Integration.Timeout,omitempty"`
	IntegrationUrl *string `json:"Integration.Url,omitempty"`
	IntegrationWorkflowSid *string `json:"Integration.WorkflowSid,omitempty"`
	IntegrationWorkspaceSid *string `json:"Integration.WorkspaceSid,omitempty"`
	IntegrationType *string `json:"IntegrationType,omitempty"`
	JanitorEnabled *bool `json:"JanitorEnabled,omitempty"`
	LongLived *bool `json:"LongLived,omitempty"`
}

/*
CreateFlexFlow Method for CreateFlexFlow
 * @param optional nil or *CreateFlexFlowOpts - Optional Parameters:
 * @param "ChannelType" (string) - The channel type. Can be: `web`, `facebook`, `sms`, `whatsapp`, `line` or `custom`.
 * @param "ChatServiceSid" (string) - The SID of the chat service.
 * @param "ContactIdentity" (string) - The channel contact's Identity.
 * @param "Enabled" (bool) - Whether the new Flex Flow is enabled.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Flex Flow resource.
 * @param "IntegrationChannel" (string) - The Task Channel for the TaskRouter Task that will be created. Applicable and required when integrationType is `task`. Set to `sms` for SMS, and to `chat` otherwise. The default value is `default`
 * @param "IntegrationCreationOnMessage" (bool) - In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging.
 * @param "IntegrationFlowSid" (string) - The SID of the Studio Flow. Required when `integrationType` is `studio`.
 * @param "IntegrationPriority" (int32) - The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise.
 * @param "IntegrationRetryCount" (int32) - The number of times to retry the webhook if the first attempt fails. Can be an integer between 0 and 3 (included), default is 0. Optional when integrationType is `external`, not applicable otherwise.
 * @param "IntegrationTimeout" (int32) - The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise.
 * @param "IntegrationUrl" (string) - The URL of the external webhook. Required when `integrationType` is `external`.
 * @param "IntegrationWorkflowSid" (string) - The Workflow SID for a new Task. Required when `integrationType` is `task`.
 * @param "IntegrationWorkspaceSid" (string) - The Workspace SID for a new Task. Required when `integrationType` is `task`.
 * @param "IntegrationType" (string) - The integration type. Can be: `studio`, `external`, or `task`.
 * @param "JanitorEnabled" (bool) - When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`.
 * @param "LongLived" (bool) - When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`.
@return FlexV1FlexFlow
*/
func (c *DefaultApiService) CreateFlexFlow(params *CreateFlexFlowParams) (*FlexV1FlexFlow, error) {
	path := "/v1/FlexFlows"


	data := url.Values{}
	headers := 0

	if params != nil && params.ChannelType != nil {
		data.Set("ChannelType", *params.ChannelType) 
	}
	if params != nil && params.ChatServiceSid != nil {
		data.Set("ChatServiceSid", *params.ChatServiceSid) 
	}
	if params != nil && params.ContactIdentity != nil {
		data.Set("ContactIdentity", *params.ContactIdentity) 
	}
	if params != nil && params.Enabled != nil {
		data.Set("Enabled", fmt.Sprint(*params.Enabled)) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.IntegrationChannel != nil {
		data.Set("IntegrationChannel", *params.IntegrationChannel) 
	}
	if params != nil && params.IntegrationCreationOnMessage != nil {
		data.Set("IntegrationCreationOnMessage", fmt.Sprint(*params.IntegrationCreationOnMessage)) 
	}
	if params != nil && params.IntegrationFlowSid != nil {
		data.Set("IntegrationFlowSid", *params.IntegrationFlowSid) 
	}
	if params != nil && params.IntegrationPriority != nil {
		data.Set("IntegrationPriority", fmt.Sprint(*params.IntegrationPriority)) 
	}
	if params != nil && params.IntegrationRetryCount != nil {
		data.Set("IntegrationRetryCount", fmt.Sprint(*params.IntegrationRetryCount)) 
	}
	if params != nil && params.IntegrationTimeout != nil {
		data.Set("IntegrationTimeout", fmt.Sprint(*params.IntegrationTimeout)) 
	}
	if params != nil && params.IntegrationUrl != nil {
		data.Set("IntegrationUrl", *params.IntegrationUrl) 
	}
	if params != nil && params.IntegrationWorkflowSid != nil {
		data.Set("IntegrationWorkflowSid", *params.IntegrationWorkflowSid) 
	}
	if params != nil && params.IntegrationWorkspaceSid != nil {
		data.Set("IntegrationWorkspaceSid", *params.IntegrationWorkspaceSid) 
	}
	if params != nil && params.IntegrationType != nil {
		data.Set("IntegrationType", *params.IntegrationType) 
	}
	if params != nil && params.JanitorEnabled != nil {
		data.Set("JanitorEnabled", fmt.Sprint(*params.JanitorEnabled)) 
	}
	if params != nil && params.LongLived != nil {
		data.Set("LongLived", fmt.Sprint(*params.LongLived)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1FlexFlow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateWebChannelParams Optional parameters for the method 'CreateWebChannel'
type CreateWebChannelParams struct {
	ChatFriendlyName *string `json:"ChatFriendlyName,omitempty"`
	ChatUniqueName *string `json:"ChatUniqueName,omitempty"`
	CustomerFriendlyName *string `json:"CustomerFriendlyName,omitempty"`
	FlexFlowSid *string `json:"FlexFlowSid,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	PreEngagementData *string `json:"PreEngagementData,omitempty"`
}

/*
CreateWebChannel Method for CreateWebChannel
 * @param optional nil or *CreateWebChannelOpts - Optional Parameters:
 * @param "ChatFriendlyName" (string) - The chat channel's friendly name.
 * @param "ChatUniqueName" (string) - The chat channel's unique name.
 * @param "CustomerFriendlyName" (string) - The chat participant's friendly name.
 * @param "FlexFlowSid" (string) - The SID of the Flex Flow.
 * @param "Identity" (string) - The chat identity.
 * @param "PreEngagementData" (string) - The pre-engagement data.
@return FlexV1WebChannel
*/
func (c *DefaultApiService) CreateWebChannel(params *CreateWebChannelParams) (*FlexV1WebChannel, error) {
	path := "/v1/WebChannels"


	data := url.Values{}
	headers := 0

	if params != nil && params.ChatFriendlyName != nil {
		data.Set("ChatFriendlyName", *params.ChatFriendlyName) 
	}
	if params != nil && params.ChatUniqueName != nil {
		data.Set("ChatUniqueName", *params.ChatUniqueName) 
	}
	if params != nil && params.CustomerFriendlyName != nil {
		data.Set("CustomerFriendlyName", *params.CustomerFriendlyName) 
	}
	if params != nil && params.FlexFlowSid != nil {
		data.Set("FlexFlowSid", *params.FlexFlowSid) 
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity) 
	}
	if params != nil && params.PreEngagementData != nil {
		data.Set("PreEngagementData", *params.PreEngagementData) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1WebChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
DeleteChannel Method for DeleteChannel
 * @param Sid The SID of the Flex chat channel resource to delete.
*/
func (c *DefaultApiService) DeleteChannel(Sid string) (error) {
	path := "/v1/Channels/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteFlexFlow Method for DeleteFlexFlow
 * @param Sid The SID of the Flex Flow resource to delete.
*/
func (c *DefaultApiService) DeleteFlexFlow(Sid string) (error) {
	path := "/v1/FlexFlows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteWebChannel Method for DeleteWebChannel
 * @param Sid The SID of the WebChannel resource to delete.
*/
func (c *DefaultApiService) DeleteWebChannel(Sid string) (error) {
	path := "/v1/WebChannels/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
FetchChannel Method for FetchChannel
 * @param Sid The SID of the Flex chat channel resource to fetch.
@return FlexV1Channel
*/
func (c *DefaultApiService) FetchChannel(Sid string) (*FlexV1Channel, error) {
	path := "/v1/Channels/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1Channel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// FetchConfigurationParams Optional parameters for the method 'FetchConfiguration'
type FetchConfigurationParams struct {
	UiVersion *string `json:"UiVersion,omitempty"`
}

/*
FetchConfiguration Method for FetchConfiguration
 * @param optional nil or *FetchConfigurationOpts - Optional Parameters:
 * @param "UiVersion" (string) - The Pinned UI version of the Configuration resource to fetch.
@return FlexV1Configuration
*/
func (c *DefaultApiService) FetchConfiguration(params *FetchConfigurationParams) (*FlexV1Configuration, error) {
	path := "/v1/Configuration"


	data := url.Values{}
	headers := 0

	if params != nil && params.UiVersion != nil {
		data.Set("UiVersion", *params.UiVersion) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1Configuration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchFlexFlow Method for FetchFlexFlow
 * @param Sid The SID of the Flex Flow resource to fetch.
@return FlexV1FlexFlow
*/
func (c *DefaultApiService) FetchFlexFlow(Sid string) (*FlexV1FlexFlow, error) {
	path := "/v1/FlexFlows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1FlexFlow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchWebChannel Method for FetchWebChannel
 * @param Sid The SID of the WebChannel resource to fetch.
@return FlexV1WebChannel
*/
func (c *DefaultApiService) FetchWebChannel(Sid string) (*FlexV1WebChannel, error) {
	path := "/v1/WebChannels/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1WebChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListChannelParams Optional parameters for the method 'ListChannel'
type ListChannelParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListChannel Method for ListChannel
 * @param optional nil or *ListChannelOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return FlexV1ChannelReadResponse
*/
func (c *DefaultApiService) ListChannel(params *ListChannelParams) (*FlexV1ChannelReadResponse, error) {
	path := "/v1/Channels"


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1ChannelReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListFlexFlowParams Optional parameters for the method 'ListFlexFlow'
type ListFlexFlowParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFlexFlow Method for ListFlexFlow
 * @param optional nil or *ListFlexFlowOpts - Optional Parameters:
 * @param "FriendlyName" (string) - The `friendly_name` of the Flex Flow resources to read.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return FlexV1FlexFlowReadResponse
*/
func (c *DefaultApiService) ListFlexFlow(params *ListFlexFlowParams) (*FlexV1FlexFlowReadResponse, error) {
	path := "/v1/FlexFlows"


	data := url.Values{}
	headers := 0

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1FlexFlowReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListWebChannelParams Optional parameters for the method 'ListWebChannel'
type ListWebChannelParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListWebChannel Method for ListWebChannel
 * @param optional nil or *ListWebChannelOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return FlexV1WebChannelReadResponse
*/
func (c *DefaultApiService) ListWebChannel(params *ListWebChannelParams) (*FlexV1WebChannelReadResponse, error) {
	path := "/v1/WebChannels"


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1WebChannelReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
UpdateConfiguration Method for UpdateConfiguration
@return FlexV1Configuration
*/
func (c *DefaultApiService) UpdateConfiguration() (*FlexV1Configuration, error) {
	path := "/v1/Configuration"


	data := url.Values{}
	headers := 0



	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1Configuration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateFlexFlowParams Optional parameters for the method 'UpdateFlexFlow'
type UpdateFlexFlowParams struct {
	ChannelType *string `json:"ChannelType,omitempty"`
	ChatServiceSid *string `json:"ChatServiceSid,omitempty"`
	ContactIdentity *string `json:"ContactIdentity,omitempty"`
	Enabled *bool `json:"Enabled,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	IntegrationChannel *string `json:"Integration.Channel,omitempty"`
	IntegrationCreationOnMessage *bool `json:"Integration.CreationOnMessage,omitempty"`
	IntegrationFlowSid *string `json:"Integration.FlowSid,omitempty"`
	IntegrationPriority *int32 `json:"Integration.Priority,omitempty"`
	IntegrationRetryCount *int32 `json:"Integration.RetryCount,omitempty"`
	IntegrationTimeout *int32 `json:"Integration.Timeout,omitempty"`
	IntegrationUrl *string `json:"Integration.Url,omitempty"`
	IntegrationWorkflowSid *string `json:"Integration.WorkflowSid,omitempty"`
	IntegrationWorkspaceSid *string `json:"Integration.WorkspaceSid,omitempty"`
	IntegrationType *string `json:"IntegrationType,omitempty"`
	JanitorEnabled *bool `json:"JanitorEnabled,omitempty"`
	LongLived *bool `json:"LongLived,omitempty"`
}

/*
UpdateFlexFlow Method for UpdateFlexFlow
 * @param Sid The SID of the Flex Flow resource to update.
 * @param optional nil or *UpdateFlexFlowOpts - Optional Parameters:
 * @param "ChannelType" (string) - The channel type. Can be: `web`, `facebook`, `sms`, `whatsapp`, `line` or `custom`.
 * @param "ChatServiceSid" (string) - The SID of the chat service.
 * @param "ContactIdentity" (string) - The channel contact's Identity.
 * @param "Enabled" (bool) - Whether the new Flex Flow is enabled.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the Flex Flow resource.
 * @param "IntegrationChannel" (string) - The Task Channel for the TaskRouter Task that will be created. Applicable and required when integrationType is `task`. Set to `sms` for SMS, and to `chat` otherwise. The default value is `default`
 * @param "IntegrationCreationOnMessage" (bool) - In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging.
 * @param "IntegrationFlowSid" (string) - The SID of the Studio Flow. Required when `integrationType` is `studio`.
 * @param "IntegrationPriority" (int32) - The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise.
 * @param "IntegrationRetryCount" (int32) - The number of times to retry the webhook if the first attempt fails. Can be an integer between 0 and 3 (included), default is 0. Optional when integrationType is `external`, not applicable otherwise.
 * @param "IntegrationTimeout" (int32) - The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise.
 * @param "IntegrationUrl" (string) - The URL of the external webhook. Required when `integrationType` is `external`.
 * @param "IntegrationWorkflowSid" (string) - The Workflow SID for a new Task. Required when `integrationType` is `task`.
 * @param "IntegrationWorkspaceSid" (string) - The Workspace SID for a new Task. Required when `integrationType` is `task`.
 * @param "IntegrationType" (string) - The integration type. Can be: `studio`, `external`, or `task`.
 * @param "JanitorEnabled" (bool) - When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`.
 * @param "LongLived" (bool) - When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`.
@return FlexV1FlexFlow
*/
func (c *DefaultApiService) UpdateFlexFlow(Sid string, params *UpdateFlexFlowParams) (*FlexV1FlexFlow, error) {
	path := "/v1/FlexFlows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.ChannelType != nil {
		data.Set("ChannelType", *params.ChannelType) 
	}
	if params != nil && params.ChatServiceSid != nil {
		data.Set("ChatServiceSid", *params.ChatServiceSid) 
	}
	if params != nil && params.ContactIdentity != nil {
		data.Set("ContactIdentity", *params.ContactIdentity) 
	}
	if params != nil && params.Enabled != nil {
		data.Set("Enabled", fmt.Sprint(*params.Enabled)) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.IntegrationChannel != nil {
		data.Set("IntegrationChannel", *params.IntegrationChannel) 
	}
	if params != nil && params.IntegrationCreationOnMessage != nil {
		data.Set("IntegrationCreationOnMessage", fmt.Sprint(*params.IntegrationCreationOnMessage)) 
	}
	if params != nil && params.IntegrationFlowSid != nil {
		data.Set("IntegrationFlowSid", *params.IntegrationFlowSid) 
	}
	if params != nil && params.IntegrationPriority != nil {
		data.Set("IntegrationPriority", fmt.Sprint(*params.IntegrationPriority)) 
	}
	if params != nil && params.IntegrationRetryCount != nil {
		data.Set("IntegrationRetryCount", fmt.Sprint(*params.IntegrationRetryCount)) 
	}
	if params != nil && params.IntegrationTimeout != nil {
		data.Set("IntegrationTimeout", fmt.Sprint(*params.IntegrationTimeout)) 
	}
	if params != nil && params.IntegrationUrl != nil {
		data.Set("IntegrationUrl", *params.IntegrationUrl) 
	}
	if params != nil && params.IntegrationWorkflowSid != nil {
		data.Set("IntegrationWorkflowSid", *params.IntegrationWorkflowSid) 
	}
	if params != nil && params.IntegrationWorkspaceSid != nil {
		data.Set("IntegrationWorkspaceSid", *params.IntegrationWorkspaceSid) 
	}
	if params != nil && params.IntegrationType != nil {
		data.Set("IntegrationType", *params.IntegrationType) 
	}
	if params != nil && params.JanitorEnabled != nil {
		data.Set("JanitorEnabled", fmt.Sprint(*params.JanitorEnabled)) 
	}
	if params != nil && params.LongLived != nil {
		data.Set("LongLived", fmt.Sprint(*params.LongLived)) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1FlexFlow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateWebChannelParams Optional parameters for the method 'UpdateWebChannel'
type UpdateWebChannelParams struct {
	ChatStatus *string `json:"ChatStatus,omitempty"`
	PostEngagementData *string `json:"PostEngagementData,omitempty"`
}

/*
UpdateWebChannel Method for UpdateWebChannel
 * @param Sid The SID of the WebChannel resource to update.
 * @param optional nil or *UpdateWebChannelOpts - Optional Parameters:
 * @param "ChatStatus" (string) - The chat status. Can only be `inactive`.
 * @param "PostEngagementData" (string) - The post-engagement data.
@return FlexV1WebChannel
*/
func (c *DefaultApiService) UpdateWebChannel(Sid string, params *UpdateWebChannelParams) (*FlexV1WebChannel, error) {
	path := "/v1/WebChannels/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.ChatStatus != nil {
		data.Set("ChatStatus", *params.ChatStatus) 
	}
	if params != nil && params.PostEngagementData != nil {
		data.Set("PostEngagementData", *params.PostEngagementData) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1WebChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
