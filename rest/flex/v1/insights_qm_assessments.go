/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
)

// Optional parameters for the method 'CreateInsightsAssessments'
type CreateInsightsAssessmentsParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
	// The id of the category
	CategoryId *string `json:"CategoryId,omitempty"`
	// The name of the category
	CategoryName *string `json:"CategoryName,omitempty"`
	// Segment Id of the conversation
	SegmentId *string `json:"SegmentId,omitempty"`
	// Name of the user assessing conversation
	UserName *string `json:"UserName,omitempty"`
	// Email of the user assessing conversation
	UserEmail *string `json:"UserEmail,omitempty"`
	// The id of the Agent
	AgentId *string `json:"AgentId,omitempty"`
	// The offset of the conversation.
	Offset *float32 `json:"Offset,omitempty"`
	// The question Id selected for assessment
	MetricId *string `json:"MetricId,omitempty"`
	// The question name of the assessment
	MetricName *string `json:"MetricName,omitempty"`
	// The answer text selected by user
	AnswerText *string `json:"AnswerText,omitempty"`
	// The id of the answer selected by user
	AnswerId *string `json:"AnswerId,omitempty"`
	// Questionnaire Id of the associated question
	QuestionnaireId *string `json:"QuestionnaireId,omitempty"`
}

func (params *CreateInsightsAssessmentsParams) SetToken(Token string) *CreateInsightsAssessmentsParams {
	params.Token = &Token
	return params
}
func (params *CreateInsightsAssessmentsParams) SetCategoryId(CategoryId string) *CreateInsightsAssessmentsParams {
	params.CategoryId = &CategoryId
	return params
}
func (params *CreateInsightsAssessmentsParams) SetCategoryName(CategoryName string) *CreateInsightsAssessmentsParams {
	params.CategoryName = &CategoryName
	return params
}
func (params *CreateInsightsAssessmentsParams) SetSegmentId(SegmentId string) *CreateInsightsAssessmentsParams {
	params.SegmentId = &SegmentId
	return params
}
func (params *CreateInsightsAssessmentsParams) SetUserName(UserName string) *CreateInsightsAssessmentsParams {
	params.UserName = &UserName
	return params
}
func (params *CreateInsightsAssessmentsParams) SetUserEmail(UserEmail string) *CreateInsightsAssessmentsParams {
	params.UserEmail = &UserEmail
	return params
}
func (params *CreateInsightsAssessmentsParams) SetAgentId(AgentId string) *CreateInsightsAssessmentsParams {
	params.AgentId = &AgentId
	return params
}
func (params *CreateInsightsAssessmentsParams) SetOffset(Offset float32) *CreateInsightsAssessmentsParams {
	params.Offset = &Offset
	return params
}
func (params *CreateInsightsAssessmentsParams) SetMetricId(MetricId string) *CreateInsightsAssessmentsParams {
	params.MetricId = &MetricId
	return params
}
func (params *CreateInsightsAssessmentsParams) SetMetricName(MetricName string) *CreateInsightsAssessmentsParams {
	params.MetricName = &MetricName
	return params
}
func (params *CreateInsightsAssessmentsParams) SetAnswerText(AnswerText string) *CreateInsightsAssessmentsParams {
	params.AnswerText = &AnswerText
	return params
}
func (params *CreateInsightsAssessmentsParams) SetAnswerId(AnswerId string) *CreateInsightsAssessmentsParams {
	params.AnswerId = &AnswerId
	return params
}
func (params *CreateInsightsAssessmentsParams) SetQuestionnaireId(QuestionnaireId string) *CreateInsightsAssessmentsParams {
	params.QuestionnaireId = &QuestionnaireId
	return params
}

// Add assessments against conversation to dynamo db. Used in assessments screen by user. Users can select the questionnaire and pick up answers for each and every question.
func (c *ApiService) CreateInsightsAssessments(params *CreateInsightsAssessmentsParams) (*FlexV1InsightsAssessments, error) {
	path := "/v1/Insights/QM/Assessments"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CategoryId != nil {
		data.Set("CategoryId", *params.CategoryId)
	}
	if params != nil && params.CategoryName != nil {
		data.Set("CategoryName", *params.CategoryName)
	}
	if params != nil && params.SegmentId != nil {
		data.Set("SegmentId", *params.SegmentId)
	}
	if params != nil && params.UserName != nil {
		data.Set("UserName", *params.UserName)
	}
	if params != nil && params.UserEmail != nil {
		data.Set("UserEmail", *params.UserEmail)
	}
	if params != nil && params.AgentId != nil {
		data.Set("AgentId", *params.AgentId)
	}
	if params != nil && params.Offset != nil {
		data.Set("Offset", fmt.Sprint(*params.Offset))
	}
	if params != nil && params.MetricId != nil {
		data.Set("MetricId", *params.MetricId)
	}
	if params != nil && params.MetricName != nil {
		data.Set("MetricName", *params.MetricName)
	}
	if params != nil && params.AnswerText != nil {
		data.Set("AnswerText", *params.AnswerText)
	}
	if params != nil && params.AnswerId != nil {
		data.Set("AnswerId", *params.AnswerId)
	}
	if params != nil && params.QuestionnaireId != nil {
		data.Set("QuestionnaireId", *params.QuestionnaireId)
	}

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1InsightsAssessments{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'UpdateInsightsAssessments'
type UpdateInsightsAssessmentsParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
	// The offset of the conversation
	Offset *float32 `json:"Offset,omitempty"`
	// The answer text selected by user
	AnswerText *string `json:"AnswerText,omitempty"`
	// The id of the answer selected by user
	AnswerId *string `json:"AnswerId,omitempty"`
}

func (params *UpdateInsightsAssessmentsParams) SetToken(Token string) *UpdateInsightsAssessmentsParams {
	params.Token = &Token
	return params
}
func (params *UpdateInsightsAssessmentsParams) SetOffset(Offset float32) *UpdateInsightsAssessmentsParams {
	params.Offset = &Offset
	return params
}
func (params *UpdateInsightsAssessmentsParams) SetAnswerText(AnswerText string) *UpdateInsightsAssessmentsParams {
	params.AnswerText = &AnswerText
	return params
}
func (params *UpdateInsightsAssessmentsParams) SetAnswerId(AnswerId string) *UpdateInsightsAssessmentsParams {
	params.AnswerId = &AnswerId
	return params
}

// Update a specific Assessment assessed earlier
func (c *ApiService) UpdateInsightsAssessments(AssessmentId string, params *UpdateInsightsAssessmentsParams) (*FlexV1InsightsAssessments, error) {
	path := "/v1/Insights/QM/Assessments/{AssessmentId}"
	path = strings.Replace(path, "{"+"AssessmentId"+"}", AssessmentId, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Offset != nil {
		data.Set("Offset", fmt.Sprint(*params.Offset))
	}
	if params != nil && params.AnswerText != nil {
		data.Set("AnswerText", *params.AnswerText)
	}
	if params != nil && params.AnswerId != nil {
		data.Set("AnswerId", *params.AnswerId)
	}

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1InsightsAssessments{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
