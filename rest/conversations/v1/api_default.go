/*
 * Twilio - Conversations
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService {
		client: client,
		baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
	}
}
// CreateConversationParams Optional parameters for the method 'CreateConversation'
type CreateConversationParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	MessagingServiceSid *string `json:"MessagingServiceSid,omitempty"`
	State *string `json:"State,omitempty"`
	Timers.Closed *string `json:"Timers.Closed,omitempty"`
	Timers.Inactive *string `json:"Timers.Inactive,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateConversation Method for CreateConversation
Create a new conversation in your account&#39;s default service
 * @param optional nil or *CreateConversationOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "FriendlyName" (string) - The human-readable name of this conversation, limited to 256 characters. Optional.
 * @param "MessagingServiceSid" (string) - The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this conversation belongs to.
 * @param "State" (string) - Current state of this conversation. Can be either `active`, `inactive` or `closed` and defaults to `active`
 * @param "Timers.Closed" (string) - ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
 * @param "Timers.Inactive" (string) - ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
@return ConversationsV1Conversation
*/
func (c *DefaultApiService) CreateConversation(params *CreateConversationParams) (*ConversationsV1Conversation, error) {
	path := "/v1/Conversations"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MessagingServiceSid != nil {
		data.Set("MessagingServiceSid", *params.MessagingServiceSid)
	}
	if params != nil && params.State != nil {
		data.Set("State", *params.State)
	}
	if params != nil && params.Timers.Closed != nil {
		data.Set("Timers.Closed", *params.Timers.Closed)
	}
	if params != nil && params.Timers.Inactive != nil {
		data.Set("Timers.Inactive", *params.Timers.Inactive)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Conversation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateConversationMessageParams Optional parameters for the method 'CreateConversationMessage'
type CreateConversationMessageParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	Author *string `json:"Author,omitempty"`
	Body *string `json:"Body,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	MediaSid *string `json:"MediaSid,omitempty"`
}

/*
CreateConversationMessage Method for CreateConversationMessage
Add a new message to the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param optional nil or *CreateConversationMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "Author" (string) - The channel specific identifier of the message's author. Defaults to `system`.
 * @param "Body" (string) - The content of the message, can be up to 1,600 characters long.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated. `null` if the message has not been edited.
 * @param "MediaSid" (string) - The Media SID to be attached to the new Message.
@return ConversationsV1ConversationConversationMessage
*/
func (c *DefaultApiService) CreateConversationMessage(conversationSid string, params *CreateConversationMessageParams) (*ConversationsV1ConversationConversationMessage, error) {
	path := "/v1/Conversations/{ConversationSid}/Messages"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Author != nil {
		data.Set("Author", *params.Author)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.MediaSid != nil {
		data.Set("MediaSid", *params.MediaSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateConversationParticipantParams Optional parameters for the method 'CreateConversationParticipant'
type CreateConversationParticipantParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	MessagingBinding.Address *string `json:"MessagingBinding.Address,omitempty"`
	MessagingBinding.ProjectedAddress *string `json:"MessagingBinding.ProjectedAddress,omitempty"`
	MessagingBinding.ProxyAddress *string `json:"MessagingBinding.ProxyAddress,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateConversationParticipant Method for CreateConversationParticipant
Add a new participant to the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param optional nil or *CreateConversationParticipantOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "Identity" (string) - A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
 * @param "MessagingBinding.Address" (string) - The address of the participant's device, e.g. a phone or WhatsApp number. Together with the Proxy address, this determines a participant uniquely. This field (with proxy_address) is only null when the participant is interacting from an SDK endpoint (see the 'identity' field).
 * @param "MessagingBinding.ProjectedAddress" (string) - The address of the Twilio phone number that is used in Group MMS. Communication mask for the Conversation participant with Identity.
 * @param "MessagingBinding.ProxyAddress" (string) - The address of the Twilio phone number (or WhatsApp number) that the participant is in contact with. This field, together with participant address, is only null when the participant is interacting from an SDK endpoint (see the 'identity' field).
 * @param "RoleSid" (string) - The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
@return ConversationsV1ConversationConversationParticipant
*/
func (c *DefaultApiService) CreateConversationParticipant(conversationSid string, params *CreateConversationParticipantParams) (*ConversationsV1ConversationConversationParticipant, error) {
	path := "/v1/Conversations/{ConversationSid}/Participants"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.MessagingBinding.Address != nil {
		data.Set("MessagingBinding.Address", *params.MessagingBinding.Address)
	}
	if params != nil && params.MessagingBinding.ProjectedAddress != nil {
		data.Set("MessagingBinding.ProjectedAddress", *params.MessagingBinding.ProjectedAddress)
	}
	if params != nil && params.MessagingBinding.ProxyAddress != nil {
		data.Set("MessagingBinding.ProxyAddress", *params.MessagingBinding.ProxyAddress)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateConversationScopedWebhookParams Optional parameters for the method 'CreateConversationScopedWebhook'
type CreateConversationScopedWebhookParams struct {
	Configuration.Filters *[]string `json:"Configuration.Filters,omitempty"`
	Configuration.FlowSid *string `json:"Configuration.FlowSid,omitempty"`
	Configuration.Method *string `json:"Configuration.Method,omitempty"`
	Configuration.ReplayAfter *int32 `json:"Configuration.ReplayAfter,omitempty"`
	Configuration.Triggers *[]string `json:"Configuration.Triggers,omitempty"`
	Configuration.Url *string `json:"Configuration.Url,omitempty"`
	Target *string `json:"Target,omitempty"`
}

/*
CreateConversationScopedWebhook Method for CreateConversationScopedWebhook
Create a new webhook scoped to the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param optional nil or *CreateConversationScopedWebhookOpts - Optional Parameters:
 * @param "Configuration.Filters" ([]string) - The list of events, firing webhook event for this Conversation.
 * @param "Configuration.FlowSid" (string) - The studio flow SID, where the webhook should be sent to.
 * @param "Configuration.Method" (string) - The HTTP method to be used when sending a webhook request.
 * @param "Configuration.ReplayAfter" (int32) - The message index for which and it's successors the webhook will be replayed. Not set by default
 * @param "Configuration.Triggers" ([]string) - The list of keywords, firing webhook event for this Conversation.
 * @param "Configuration.Url" (string) - The absolute url the webhook request should be sent to.
 * @param "Target" (string) - The target of this webhook: `webhook`, `studio`, `trigger`
@return ConversationsV1ConversationConversationScopedWebhook
*/
func (c *DefaultApiService) CreateConversationScopedWebhook(conversationSid string, params *CreateConversationScopedWebhookParams) (*ConversationsV1ConversationConversationScopedWebhook, error) {
	path := "/v1/Conversations/{ConversationSid}/Webhooks"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Configuration.Filters != nil {
		data.Set("Configuration.Filters", *params.Configuration.Filters)
	}
	if params != nil && params.Configuration.FlowSid != nil {
		data.Set("Configuration.FlowSid", *params.Configuration.FlowSid)
	}
	if params != nil && params.Configuration.Method != nil {
		data.Set("Configuration.Method", *params.Configuration.Method)
	}
	if params != nil && params.Configuration.ReplayAfter != nil {
		data.Set("Configuration.ReplayAfter", string(*params.Configuration.ReplayAfter))
	}
	if params != nil && params.Configuration.Triggers != nil {
		data.Set("Configuration.Triggers", *params.Configuration.Triggers)
	}
	if params != nil && params.Configuration.Url != nil {
		data.Set("Configuration.Url", *params.Configuration.Url)
	}
	if params != nil && params.Target != nil {
		data.Set("Target", *params.Target)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationScopedWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateCredentialParams Optional parameters for the method 'CreateCredential'
type CreateCredentialParams struct {
	ApiKey *string `json:"ApiKey,omitempty"`
	Certificate *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey *string `json:"PrivateKey,omitempty"`
	Sandbox *bool `json:"Sandbox,omitempty"`
	Secret *string `json:"Secret,omitempty"`
	Type *string `json:"Type,omitempty"`
}

/*
CreateCredential Method for CreateCredential
Add a new push notification credential to your account
 * @param optional nil or *CreateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
 * @param "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A== -----END CERTIFICATE-----`.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE KEY-----`.
 * @param "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
 * @param "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
 * @param "Type" (string) - The type of push-notification service the credential is for. Can be: `fcm`, `gcm`, or `apn`.
@return ConversationsV1Credential
*/
func (c *DefaultApiService) CreateCredential(params *CreateCredentialParams) (*ConversationsV1Credential, error) {
	path := "/v1/Credentials"

	data := url.Values{}
	headers := 0

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", string(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateRoleParams Optional parameters for the method 'CreateRole'
type CreateRoleParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Permission *[]string `json:"Permission,omitempty"`
	Type *string `json:"Type,omitempty"`
}

/*
CreateRole Method for CreateRole
Create a new user role in your account&#39;s default service
 * @param optional nil or *CreateRoleOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "Permission" ([]string) - A permission that you grant to the new role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. The values for this parameter depend on the role's `type`.
 * @param "Type" (string) - The type of role. Can be: `conversation` for [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) roles or `service` for [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) roles.
@return ConversationsV1Role
*/
func (c *DefaultApiService) CreateRole(params *CreateRoleParams) (*ConversationsV1Role, error) {
	path := "/v1/Roles"

	data := url.Values{}
	headers := 0

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Permission != nil {
		data.Set("Permission", *params.Permission)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Role{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateService Method for CreateService
Create a new conversation service on your account
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "FriendlyName" (string) - The human-readable name of this service, limited to 256 characters. Optional.
@return ConversationsV1Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*ConversationsV1Service, error) {
	path := "/v1/Services"

	data := url.Values{}
	headers := 0

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceConversationParams Optional parameters for the method 'CreateServiceConversation'
type CreateServiceConversationParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	MessagingServiceSid *string `json:"MessagingServiceSid,omitempty"`
	State *string `json:"State,omitempty"`
	Timers.Closed *string `json:"Timers.Closed,omitempty"`
	Timers.Inactive *string `json:"Timers.Inactive,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateServiceConversation Method for CreateServiceConversation
Create a new conversation in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
 * @param optional nil or *CreateServiceConversationOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "FriendlyName" (string) - The human-readable name of this conversation, limited to 256 characters. Optional.
 * @param "MessagingServiceSid" (string) - The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this conversation belongs to.
 * @param "State" (string) - Current state of this conversation. Can be either `active`, `inactive` or `closed` and defaults to `active`
 * @param "Timers.Closed" (string) - ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
 * @param "Timers.Inactive" (string) - ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
@return ConversationsV1ServiceServiceConversation
*/
func (c *DefaultApiService) CreateServiceConversation(chatServiceSid string, params *CreateServiceConversationParams) (*ConversationsV1ServiceServiceConversation, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MessagingServiceSid != nil {
		data.Set("MessagingServiceSid", *params.MessagingServiceSid)
	}
	if params != nil && params.State != nil {
		data.Set("State", *params.State)
	}
	if params != nil && params.Timers.Closed != nil {
		data.Set("Timers.Closed", *params.Timers.Closed)
	}
	if params != nil && params.Timers.Inactive != nil {
		data.Set("Timers.Inactive", *params.Timers.Inactive)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceConversationMessageParams Optional parameters for the method 'CreateServiceConversationMessage'
type CreateServiceConversationMessageParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	Author *string `json:"Author,omitempty"`
	Body *string `json:"Body,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	MediaSid *string `json:"MediaSid,omitempty"`
}

/*
CreateServiceConversationMessage Method for CreateServiceConversationMessage
Add a new message to the conversation in a specific service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param optional nil or *CreateServiceConversationMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "Author" (string) - The channel specific identifier of the message's author. Defaults to `system`.
 * @param "Body" (string) - The content of the message, can be up to 1,600 characters long.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated. `null` if the message has not been edited.
 * @param "MediaSid" (string) - The Media SID to be attached to the new Message.
@return ConversationsV1ServiceServiceConversationServiceConversationMessage
*/
func (c *DefaultApiService) CreateServiceConversationMessage(chatServiceSid string, conversationSid string, params *CreateServiceConversationMessageParams) (*ConversationsV1ServiceServiceConversationServiceConversationMessage, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Author != nil {
		data.Set("Author", *params.Author)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.MediaSid != nil {
		data.Set("MediaSid", *params.MediaSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceConversationParticipantParams Optional parameters for the method 'CreateServiceConversationParticipant'
type CreateServiceConversationParticipantParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	MessagingBinding.Address *string `json:"MessagingBinding.Address,omitempty"`
	MessagingBinding.ProjectedAddress *string `json:"MessagingBinding.ProjectedAddress,omitempty"`
	MessagingBinding.ProxyAddress *string `json:"MessagingBinding.ProxyAddress,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateServiceConversationParticipant Method for CreateServiceConversationParticipant
Add a new participant to the conversation in a specific service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param optional nil or *CreateServiceConversationParticipantOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "Identity" (string) - A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversation SDK to communicate. Limited to 256 characters.
 * @param "MessagingBinding.Address" (string) - The address of the participant's device, e.g. a phone or WhatsApp number. Together with the Proxy address, this determines a participant uniquely. This field (with proxy_address) is only null when the participant is interacting from an SDK endpoint (see the 'identity' field).
 * @param "MessagingBinding.ProjectedAddress" (string) - The address of the Twilio phone number that is used in Group MMS. Communication mask for the Conversation participant with Identity.
 * @param "MessagingBinding.ProxyAddress" (string) - The address of the Twilio phone number (or WhatsApp number) that the participant is in contact with. This field, together with participant address, is only null when the participant is interacting from an SDK endpoint (see the 'identity' field).
 * @param "RoleSid" (string) - The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
@return ConversationsV1ServiceServiceConversationServiceConversationParticipant
*/
func (c *DefaultApiService) CreateServiceConversationParticipant(chatServiceSid string, conversationSid string, params *CreateServiceConversationParticipantParams) (*ConversationsV1ServiceServiceConversationServiceConversationParticipant, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.MessagingBinding.Address != nil {
		data.Set("MessagingBinding.Address", *params.MessagingBinding.Address)
	}
	if params != nil && params.MessagingBinding.ProjectedAddress != nil {
		data.Set("MessagingBinding.ProjectedAddress", *params.MessagingBinding.ProjectedAddress)
	}
	if params != nil && params.MessagingBinding.ProxyAddress != nil {
		data.Set("MessagingBinding.ProxyAddress", *params.MessagingBinding.ProxyAddress)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceConversationScopedWebhookParams Optional parameters for the method 'CreateServiceConversationScopedWebhook'
type CreateServiceConversationScopedWebhookParams struct {
	Configuration.Filters *[]string `json:"Configuration.Filters,omitempty"`
	Configuration.FlowSid *string `json:"Configuration.FlowSid,omitempty"`
	Configuration.Method *string `json:"Configuration.Method,omitempty"`
	Configuration.ReplayAfter *int32 `json:"Configuration.ReplayAfter,omitempty"`
	Configuration.Triggers *[]string `json:"Configuration.Triggers,omitempty"`
	Configuration.Url *string `json:"Configuration.Url,omitempty"`
	Target *string `json:"Target,omitempty"`
}

/*
CreateServiceConversationScopedWebhook Method for CreateServiceConversationScopedWebhook
Create a new webhook scoped to the conversation in a specific service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param optional nil or *CreateServiceConversationScopedWebhookOpts - Optional Parameters:
 * @param "Configuration.Filters" ([]string) - The list of events, firing webhook event for this Conversation.
 * @param "Configuration.FlowSid" (string) - The studio flow SID, where the webhook should be sent to.
 * @param "Configuration.Method" (string) - The HTTP method to be used when sending a webhook request.
 * @param "Configuration.ReplayAfter" (int32) - The message index for which and it's successors the webhook will be replayed. Not set by default
 * @param "Configuration.Triggers" ([]string) - The list of keywords, firing webhook event for this Conversation.
 * @param "Configuration.Url" (string) - The absolute url the webhook request should be sent to.
 * @param "Target" (string) - The target of this webhook: `webhook`, `studio`, `trigger`
@return ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook
*/
func (c *DefaultApiService) CreateServiceConversationScopedWebhook(chatServiceSid string, conversationSid string, params *CreateServiceConversationScopedWebhookParams) (*ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Configuration.Filters != nil {
		data.Set("Configuration.Filters", *params.Configuration.Filters)
	}
	if params != nil && params.Configuration.FlowSid != nil {
		data.Set("Configuration.FlowSid", *params.Configuration.FlowSid)
	}
	if params != nil && params.Configuration.Method != nil {
		data.Set("Configuration.Method", *params.Configuration.Method)
	}
	if params != nil && params.Configuration.ReplayAfter != nil {
		data.Set("Configuration.ReplayAfter", string(*params.Configuration.ReplayAfter))
	}
	if params != nil && params.Configuration.Triggers != nil {
		data.Set("Configuration.Triggers", *params.Configuration.Triggers)
	}
	if params != nil && params.Configuration.Url != nil {
		data.Set("Configuration.Url", *params.Configuration.Url)
	}
	if params != nil && params.Target != nil {
		data.Set("Target", *params.Target)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceRoleParams Optional parameters for the method 'CreateServiceRole'
type CreateServiceRoleParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Permission *[]string `json:"Permission,omitempty"`
	Type *string `json:"Type,omitempty"`
}

/*
CreateServiceRole Method for CreateServiceRole
Create a new user role in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to create the Role resource under.
 * @param optional nil or *CreateServiceRoleOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "Permission" ([]string) - A permission that you grant to the new role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. The values for this parameter depend on the role's `type`.
 * @param "Type" (string) - The type of role. Can be: `conversation` for [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) roles or `service` for [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) roles.
@return ConversationsV1ServiceServiceRole
*/
func (c *DefaultApiService) CreateServiceRole(chatServiceSid string, params *CreateServiceRoleParams) (*ConversationsV1ServiceServiceRole, error) {
	path := "/v1/Services/{ChatServiceSid}/Roles"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Permission != nil {
		data.Set("Permission", *params.Permission)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateServiceUserParams Optional parameters for the method 'CreateServiceUser'
type CreateServiceUserParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateServiceUser Method for CreateServiceUser
Add a new conversation user to your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the User resource is associated with.
 * @param optional nil or *CreateServiceUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - The JSON Object string that stores application-specific data. If attributes have not been set, `{}` is returned.
 * @param "FriendlyName" (string) - The string that you assigned to describe the resource.
 * @param "Identity" (string) - The application-defined string that uniquely identifies the resource's User within the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource). This value is often a username or an email address, and is case-sensitive.
 * @param "RoleSid" (string) - The SID of a service-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the user.
@return ConversationsV1ServiceServiceUser
*/
func (c *DefaultApiService) CreateServiceUser(chatServiceSid string, params *CreateServiceUserParams) (*ConversationsV1ServiceServiceUser, error) {
	path := "/v1/Services/{ChatServiceSid}/Users"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateUserParams Optional parameters for the method 'CreateUser'
type CreateUserParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
CreateUser Method for CreateUser
Add a new conversation user to your account&#39;s default service
 * @param optional nil or *CreateUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - The JSON Object string that stores application-specific data. If attributes have not been set, `{}` is returned.
 * @param "FriendlyName" (string) - The string that you assigned to describe the resource.
 * @param "Identity" (string) - The application-defined string that uniquely identifies the resource's User within the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource). This value is often a username or an email address, and is case-sensitive.
 * @param "RoleSid" (string) - The SID of a service-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the user.
@return ConversationsV1User
*/
func (c *DefaultApiService) CreateUser(params *CreateUserParams) (*ConversationsV1User, error) {
	path := "/v1/Users"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1User{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// DeleteConversationParams Optional parameters for the method 'DeleteConversation'
type DeleteConversationParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteConversation Method for DeleteConversation
Remove a conversation from your account&#39;s default service
 * @param sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
 * @param optional nil or *DeleteConversationOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteConversation(sid string, params *DeleteConversationParams) (error) {
	path := "/v1/Conversations/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteConversationMessageParams Optional parameters for the method 'DeleteConversationMessage'
type DeleteConversationMessageParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteConversationMessage Method for DeleteConversationMessage
Remove a message from the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *DeleteConversationMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteConversationMessage(conversationSid string, sid string, params *DeleteConversationMessageParams) (error) {
	path := "/v1/Conversations/{ConversationSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteConversationParticipantParams Optional parameters for the method 'DeleteConversationParticipant'
type DeleteConversationParticipantParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteConversationParticipant Method for DeleteConversationParticipant
Remove a participant from the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *DeleteConversationParticipantOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteConversationParticipant(conversationSid string, sid string, params *DeleteConversationParticipantParams) (error) {
	path := "/v1/Conversations/{ConversationSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteConversationScopedWebhook Method for DeleteConversationScopedWebhook
Remove an existing webhook scoped to the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteConversationScopedWebhook(conversationSid string, sid string) (error) {
	path := "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteCredential Method for DeleteCredential
Remove a push notification credential from your account
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteCredential(sid string) (error) {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteRole Method for DeleteRole
Remove a user role from your account&#39;s default service
 * @param sid The SID of the Role resource to delete.
*/
func (c *DefaultApiService) DeleteRole(sid string) (error) {
	path := "/v1/Roles/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteService Method for DeleteService
Remove a conversation service with all its nested resources from your account
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteService(sid string) (error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteServiceBinding Method for DeleteServiceBinding
Remove a push notification binding from the conversation service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to delete the Binding resource from.
 * @param sid The SID of the Binding resource to delete.
*/
func (c *DefaultApiService) DeleteServiceBinding(chatServiceSid string, sid string) (error) {
	path := "/v1/Services/{ChatServiceSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteServiceConversationParams Optional parameters for the method 'DeleteServiceConversation'
type DeleteServiceConversationParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteServiceConversation Method for DeleteServiceConversation
Remove a conversation from your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
 * @param sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
 * @param optional nil or *DeleteServiceConversationOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteServiceConversation(chatServiceSid string, sid string, params *DeleteServiceConversationParams) (error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteServiceConversationMessageParams Optional parameters for the method 'DeleteServiceConversationMessage'
type DeleteServiceConversationMessageParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteServiceConversationMessage Method for DeleteServiceConversationMessage
Remove a message from the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *DeleteServiceConversationMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteServiceConversationMessage(chatServiceSid string, conversationSid string, sid string, params *DeleteServiceConversationMessageParams) (error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteServiceConversationParticipantParams Optional parameters for the method 'DeleteServiceConversationParticipant'
type DeleteServiceConversationParticipantParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteServiceConversationParticipant Method for DeleteServiceConversationParticipant
Remove a participant from the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *DeleteServiceConversationParticipantOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteServiceConversationParticipant(chatServiceSid string, conversationSid string, sid string, params *DeleteServiceConversationParticipantParams) (error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteServiceConversationScopedWebhook Method for DeleteServiceConversationScopedWebhook
Remove an existing webhook scoped to the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteServiceConversationScopedWebhook(chatServiceSid string, conversationSid string, sid string) (error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteServiceRole Method for DeleteServiceRole
Remove a user role from your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to delete the Role resource from.
 * @param sid The SID of the Role resource to delete.
*/
func (c *DefaultApiService) DeleteServiceRole(chatServiceSid string, sid string) (error) {
	path := "/v1/Services/{ChatServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteServiceUserParams Optional parameters for the method 'DeleteServiceUser'
type DeleteServiceUserParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteServiceUser Method for DeleteServiceUser
Remove a conversation user from your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to delete the User resource from.
 * @param sid The SID of the User resource to delete. This value can be either the `sid` or the `identity` of the User resource to delete.
 * @param optional nil or *DeleteServiceUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteServiceUser(chatServiceSid string, sid string, params *DeleteServiceUserParams) (error) {
	path := "/v1/Services/{ChatServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
// DeleteUserParams Optional parameters for the method 'DeleteUser'
type DeleteUserParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

/*
DeleteUser Method for DeleteUser
Remove a conversation user from your account&#39;s default service
 * @param sid The SID of the User resource to delete. This value can be either the `sid` or the `identity` of the User resource to delete.
 * @param optional nil or *DeleteUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
*/
func (c *DefaultApiService) DeleteUser(sid string, params *DeleteUserParams) (error) {
	path := "/v1/Users/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})


	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
FetchConfiguration Method for FetchConfiguration
Fetch the global configuration of conversations on your account
@return ConversationsV1Configuration
*/
func (c *DefaultApiService) FetchConfiguration() (*ConversationsV1Configuration, error) {
	path := "/v1/Configuration"

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Configuration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchConfigurationWebhook Method for FetchConfigurationWebhook
@return ConversationsV1ConfigurationConfigurationWebhook
*/
func (c *DefaultApiService) FetchConfigurationWebhook() (*ConversationsV1ConfigurationConfigurationWebhook, error) {
	path := "/v1/Configuration/Webhooks"

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConfigurationConfigurationWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchConversation Method for FetchConversation
Fetch a conversation from your account&#39;s default service
 * @param sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
@return ConversationsV1Conversation
*/
func (c *DefaultApiService) FetchConversation(sid string) (*ConversationsV1Conversation, error) {
	path := "/v1/Conversations/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Conversation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchConversationMessage Method for FetchConversationMessage
Fetch a message from the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ConversationConversationMessage
*/
func (c *DefaultApiService) FetchConversationMessage(conversationSid string, sid string) (*ConversationsV1ConversationConversationMessage, error) {
	path := "/v1/Conversations/{ConversationSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchConversationMessageReceipt Method for FetchConversationMessageReceipt
Fetch the delivery and read receipts of the conversation message
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ConversationConversationMessageConversationMessageReceipt
*/
func (c *DefaultApiService) FetchConversationMessageReceipt(conversationSid string, messageSid string, sid string) (*ConversationsV1ConversationConversationMessageConversationMessageReceipt, error) {
	path := "/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"MessageSid"+"}", messageSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationMessageConversationMessageReceipt{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchConversationParticipant Method for FetchConversationParticipant
Fetch a participant of the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ConversationConversationParticipant
*/
func (c *DefaultApiService) FetchConversationParticipant(conversationSid string, sid string) (*ConversationsV1ConversationConversationParticipant, error) {
	path := "/v1/Conversations/{ConversationSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchConversationScopedWebhook Method for FetchConversationScopedWebhook
Fetch the configuration of a conversation-scoped webhook
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ConversationConversationScopedWebhook
*/
func (c *DefaultApiService) FetchConversationScopedWebhook(conversationSid string, sid string) (*ConversationsV1ConversationConversationScopedWebhook, error) {
	path := "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationScopedWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchCredential Method for FetchCredential
Fetch a push notification credential from your account
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1Credential
*/
func (c *DefaultApiService) FetchCredential(sid string) (*ConversationsV1Credential, error) {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRole Method for FetchRole
Fetch a user role from your account&#39;s default service
 * @param sid The SID of the Role resource to fetch.
@return ConversationsV1Role
*/
func (c *DefaultApiService) FetchRole(sid string) (*ConversationsV1Role, error) {
	path := "/v1/Roles/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Role{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchService Method for FetchService
Fetch a conversation service from your account
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1Service
*/
func (c *DefaultApiService) FetchService(sid string) (*ConversationsV1Service, error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceBinding Method for FetchServiceBinding
Fetch a push notification binding from the conversation service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Binding resource is associated with.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ServiceServiceBinding
*/
func (c *DefaultApiService) FetchServiceBinding(chatServiceSid string, sid string) (*ConversationsV1ServiceServiceBinding, error) {
	path := "/v1/Services/{ChatServiceSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceBinding{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceConfiguration Method for FetchServiceConfiguration
Fetch the configuration of a conversation service
 * @param chatServiceSid The SID of the Service configuration resource to fetch.
@return ConversationsV1ServiceServiceConfiguration
*/
func (c *DefaultApiService) FetchServiceConfiguration(chatServiceSid string) (*ConversationsV1ServiceServiceConfiguration, error) {
	path := "/v1/Services/{ChatServiceSid}/Configuration"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConfiguration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceConversation Method for FetchServiceConversation
Fetch a conversation from your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
 * @param sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
@return ConversationsV1ServiceServiceConversation
*/
func (c *DefaultApiService) FetchServiceConversation(chatServiceSid string, sid string) (*ConversationsV1ServiceServiceConversation, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceConversationMessage Method for FetchServiceConversationMessage
Fetch a message from the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ServiceServiceConversationServiceConversationMessage
*/
func (c *DefaultApiService) FetchServiceConversationMessage(chatServiceSid string, conversationSid string, sid string) (*ConversationsV1ServiceServiceConversationServiceConversationMessage, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceConversationMessageReceipt Method for FetchServiceConversationMessageReceipt
Fetch the delivery and read receipts of the conversation message
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Message resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt
*/
func (c *DefaultApiService) FetchServiceConversationMessageReceipt(chatServiceSid string, conversationSid string, messageSid string, sid string) (*ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"MessageSid"+"}", messageSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceConversationParticipant Method for FetchServiceConversationParticipant
Fetch a participant of the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ServiceServiceConversationServiceConversationParticipant
*/
func (c *DefaultApiService) FetchServiceConversationParticipant(chatServiceSid string, conversationSid string, sid string) (*ConversationsV1ServiceServiceConversationServiceConversationParticipant, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceConversationScopedWebhook Method for FetchServiceConversationScopedWebhook
Fetch the configuration of a conversation-scoped webhook
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param sid A 34 character string that uniquely identifies this resource.
@return ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook
*/
func (c *DefaultApiService) FetchServiceConversationScopedWebhook(chatServiceSid string, conversationSid string, sid string) (*ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceNotification Method for FetchServiceNotification
Fetch push notification service settings
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to.
@return ConversationsV1ServiceServiceConfigurationServiceNotification
*/
func (c *DefaultApiService) FetchServiceNotification(chatServiceSid string) (*ConversationsV1ServiceServiceConfigurationServiceNotification, error) {
	path := "/v1/Services/{ChatServiceSid}/Configuration/Notifications"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConfigurationServiceNotification{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceRole Method for FetchServiceRole
Fetch a user role from your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to fetch the Role resource from.
 * @param sid The SID of the Role resource to fetch.
@return ConversationsV1ServiceServiceRole
*/
func (c *DefaultApiService) FetchServiceRole(chatServiceSid string, sid string) (*ConversationsV1ServiceServiceRole, error) {
	path := "/v1/Services/{ChatServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchServiceUser Method for FetchServiceUser
Fetch a conversation user from your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to fetch the User resource from.
 * @param sid The SID of the User resource to fetch. This value can be either the `sid` or the `identity` of the User resource to fetch.
@return ConversationsV1ServiceServiceUser
*/
func (c *DefaultApiService) FetchServiceUser(chatServiceSid string, sid string) (*ConversationsV1ServiceServiceUser, error) {
	path := "/v1/Services/{ChatServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchUser Method for FetchUser
Fetch a conversation user from your account&#39;s default service
 * @param sid The SID of the User resource to fetch. This value can be either the `sid` or the `identity` of the User resource to fetch.
@return ConversationsV1User
*/
func (c *DefaultApiService) FetchUser(sid string) (*ConversationsV1User, error) {
	path := "/v1/Users/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1User{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListConversationParams Optional parameters for the method 'ListConversation'
type ListConversationParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListConversation Method for ListConversation
Retrieve a list of conversations in your account&#39;s default service
 * @param optional nil or *ListConversationOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ConversationReadResponse
*/
func (c *DefaultApiService) ListConversation(params *ListConversationParams) (*ConversationsV1ConversationReadResponse, error) {
	path := "/v1/Conversations"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListConversationMessageParams Optional parameters for the method 'ListConversationMessage'
type ListConversationMessageParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListConversationMessage Method for ListConversationMessage
Retrieve a list of all messages in the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages.
 * @param optional nil or *ListConversationMessageOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ConversationConversationMessageReadResponse
*/
func (c *DefaultApiService) ListConversationMessage(conversationSid string, params *ListConversationMessageParams) (*ConversationsV1ConversationConversationMessageReadResponse, error) {
	path := "/v1/Conversations/{ConversationSid}/Messages"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationMessageReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListConversationMessageReceiptParams Optional parameters for the method 'ListConversationMessageReceipt'
type ListConversationMessageReceiptParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListConversationMessageReceipt Method for ListConversationMessageReceipt
Retrieve a list of all delivery and read receipts of the conversation message
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
 * @param optional nil or *ListConversationMessageReceiptOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ConversationConversationMessageConversationMessageReceiptReadResponse
*/
func (c *DefaultApiService) ListConversationMessageReceipt(conversationSid string, messageSid string, params *ListConversationMessageReceiptParams) (*ConversationsV1ConversationConversationMessageConversationMessageReceiptReadResponse, error) {
	path := "/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"MessageSid"+"}", messageSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationMessageConversationMessageReceiptReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListConversationParticipantParams Optional parameters for the method 'ListConversationParticipant'
type ListConversationParticipantParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListConversationParticipant Method for ListConversationParticipant
Retrieve a list of all participants of the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for participants.
 * @param optional nil or *ListConversationParticipantOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ConversationConversationParticipantReadResponse
*/
func (c *DefaultApiService) ListConversationParticipant(conversationSid string, params *ListConversationParticipantParams) (*ConversationsV1ConversationConversationParticipantReadResponse, error) {
	path := "/v1/Conversations/{ConversationSid}/Participants"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationParticipantReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListConversationScopedWebhookParams Optional parameters for the method 'ListConversationScopedWebhook'
type ListConversationScopedWebhookParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListConversationScopedWebhook Method for ListConversationScopedWebhook
Retrieve a list of all webhooks scoped to the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param optional nil or *ListConversationScopedWebhookOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ConversationConversationScopedWebhookReadResponse
*/
func (c *DefaultApiService) ListConversationScopedWebhook(conversationSid string, params *ListConversationScopedWebhookParams) (*ConversationsV1ConversationConversationScopedWebhookReadResponse, error) {
	path := "/v1/Conversations/{ConversationSid}/Webhooks"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationScopedWebhookReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListCredentialParams Optional parameters for the method 'ListCredential'
type ListCredentialParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListCredential Method for ListCredential
Retrieve a list of all push notification credentials on your account
 * @param optional nil or *ListCredentialOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1CredentialReadResponse
*/
func (c *DefaultApiService) ListCredential(params *ListCredentialParams) (*ConversationsV1CredentialReadResponse, error) {
	path := "/v1/Credentials"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1CredentialReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListRoleParams Optional parameters for the method 'ListRole'
type ListRoleParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRole Method for ListRole
Retrieve a list of all user roles in your account&#39;s default service
 * @param optional nil or *ListRoleOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1RoleReadResponse
*/
func (c *DefaultApiService) ListRole(params *ListRoleParams) (*ConversationsV1RoleReadResponse, error) {
	path := "/v1/Roles"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1RoleReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
Retrieve a list of all conversation services on your account
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceReadResponse
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*ConversationsV1ServiceReadResponse, error) {
	path := "/v1/Services"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceBindingParams Optional parameters for the method 'ListServiceBinding'
type ListServiceBindingParams struct {
	BindingType *[]string `json:"BindingType,omitempty"`
	Identity *[]string `json:"Identity,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceBinding Method for ListServiceBinding
Retrieve a list of all push notification bindings in the conversation service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Binding resource is associated with.
 * @param optional nil or *ListServiceBindingOpts - Optional Parameters:
 * @param "BindingType" ([]string) - The push technology used by the Binding resources to read.  Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
 * @param "Identity" ([]string) - The identity of a [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource) this binding belongs to. See [access tokens](https://www.twilio.com/docs/conversations/create-tokens) for more details.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceBindingReadResponse
*/
func (c *DefaultApiService) ListServiceBinding(chatServiceSid string, params *ListServiceBindingParams) (*ConversationsV1ServiceServiceBindingReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Bindings"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.BindingType != nil {
		data.Set("BindingType", string(*params.BindingType))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", string(*params.Identity))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceBindingReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceConversationParams Optional parameters for the method 'ListServiceConversation'
type ListServiceConversationParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceConversation Method for ListServiceConversation
Retrieve a list of conversations in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
 * @param optional nil or *ListServiceConversationOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceConversationReadResponse
*/
func (c *DefaultApiService) ListServiceConversation(chatServiceSid string, params *ListServiceConversationParams) (*ConversationsV1ServiceServiceConversationReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceConversationMessageParams Optional parameters for the method 'ListServiceConversationMessage'
type ListServiceConversationMessageParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceConversationMessage Method for ListServiceConversationMessage
Retrieve a list of all messages in the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages.
 * @param optional nil or *ListServiceConversationMessageOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceConversationServiceConversationMessageReadResponse
*/
func (c *DefaultApiService) ListServiceConversationMessage(chatServiceSid string, conversationSid string, params *ListServiceConversationMessageParams) (*ConversationsV1ServiceServiceConversationServiceConversationMessageReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationMessageReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceConversationMessageReceiptParams Optional parameters for the method 'ListServiceConversationMessageReceipt'
type ListServiceConversationMessageReceiptParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceConversationMessageReceipt Method for ListServiceConversationMessageReceipt
Retrieve a list of all delivery and read receipts of the conversation message
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Message resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
 * @param optional nil or *ListServiceConversationMessageReceiptOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceiptReadResponse
*/
func (c *DefaultApiService) ListServiceConversationMessageReceipt(chatServiceSid string, conversationSid string, messageSid string, params *ListServiceConversationMessageReceiptParams) (*ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceiptReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"MessageSid"+"}", messageSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceiptReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceConversationParticipantParams Optional parameters for the method 'ListServiceConversationParticipant'
type ListServiceConversationParticipantParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceConversationParticipant Method for ListServiceConversationParticipant
Retrieve a list of all participants of the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for participants.
 * @param optional nil or *ListServiceConversationParticipantOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceConversationServiceConversationParticipantReadResponse
*/
func (c *DefaultApiService) ListServiceConversationParticipant(chatServiceSid string, conversationSid string, params *ListServiceConversationParticipantParams) (*ConversationsV1ServiceServiceConversationServiceConversationParticipantReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationParticipantReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceConversationScopedWebhookParams Optional parameters for the method 'ListServiceConversationScopedWebhook'
type ListServiceConversationScopedWebhookParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceConversationScopedWebhook Method for ListServiceConversationScopedWebhook
Retrieve a list of all webhooks scoped to the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param optional nil or *ListServiceConversationScopedWebhookOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceConversationServiceConversationScopedWebhookReadResponse
*/
func (c *DefaultApiService) ListServiceConversationScopedWebhook(chatServiceSid string, conversationSid string, params *ListServiceConversationScopedWebhookParams) (*ConversationsV1ServiceServiceConversationServiceConversationScopedWebhookReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationScopedWebhookReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceRoleParams Optional parameters for the method 'ListServiceRole'
type ListServiceRoleParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceRole Method for ListServiceRole
Retrieve a list of all user roles in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to read the Role resources from.
 * @param optional nil or *ListServiceRoleOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceRoleReadResponse
*/
func (c *DefaultApiService) ListServiceRole(chatServiceSid string, params *ListServiceRoleParams) (*ConversationsV1ServiceServiceRoleReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Roles"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceRoleReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListServiceUserParams Optional parameters for the method 'ListServiceUser'
type ListServiceUserParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListServiceUser Method for ListServiceUser
Retrieve a list of all conversation users in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to read the User resources from.
 * @param optional nil or *ListServiceUserOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1ServiceServiceUserReadResponse
*/
func (c *DefaultApiService) ListServiceUser(chatServiceSid string, params *ListServiceUserParams) (*ConversationsV1ServiceServiceUserReadResponse, error) {
	path := "/v1/Services/{ChatServiceSid}/Users"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceUserReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListUserParams Optional parameters for the method 'ListUser'
type ListUserParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUser Method for ListUser
Retrieve a list of all conversation users in your account&#39;s default service
 * @param optional nil or *ListUserOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ConversationsV1UserReadResponse
*/
func (c *DefaultApiService) ListUser(params *ListUserParams) (*ConversationsV1UserReadResponse, error) {
	path := "/v1/Users"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1UserReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateConfigurationParams Optional parameters for the method 'UpdateConfiguration'
type UpdateConfigurationParams struct {
	DefaultChatServiceSid *string `json:"DefaultChatServiceSid,omitempty"`
	DefaultClosedTimer *string `json:"DefaultClosedTimer,omitempty"`
	DefaultInactiveTimer *string `json:"DefaultInactiveTimer,omitempty"`
	DefaultMessagingServiceSid *string `json:"DefaultMessagingServiceSid,omitempty"`
}

/*
UpdateConfiguration Method for UpdateConfiguration
Update the global configuration of conversations on your account
 * @param optional nil or *UpdateConfigurationOpts - Optional Parameters:
 * @param "DefaultChatServiceSid" (string) - The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to use when creating a conversation.
 * @param "DefaultClosedTimer" (string) - Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
 * @param "DefaultInactiveTimer" (string) - Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
 * @param "DefaultMessagingServiceSid" (string) - The SID of the default [Messaging Service](https://www.twilio.com/docs/sms/services/api) to use when creating a conversation.
@return ConversationsV1Configuration
*/
func (c *DefaultApiService) UpdateConfiguration(params *UpdateConfigurationParams) (*ConversationsV1Configuration, error) {
	path := "/v1/Configuration"

	data := url.Values{}
	headers := 0

	if params != nil && params.DefaultChatServiceSid != nil {
		data.Set("DefaultChatServiceSid", *params.DefaultChatServiceSid)
	}
	if params != nil && params.DefaultClosedTimer != nil {
		data.Set("DefaultClosedTimer", *params.DefaultClosedTimer)
	}
	if params != nil && params.DefaultInactiveTimer != nil {
		data.Set("DefaultInactiveTimer", *params.DefaultInactiveTimer)
	}
	if params != nil && params.DefaultMessagingServiceSid != nil {
		data.Set("DefaultMessagingServiceSid", *params.DefaultMessagingServiceSid)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Configuration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateConfigurationWebhookParams Optional parameters for the method 'UpdateConfigurationWebhook'
type UpdateConfigurationWebhookParams struct {
	Filters *[]string `json:"Filters,omitempty"`
	Method *string `json:"Method,omitempty"`
	PostWebhookUrl *string `json:"PostWebhookUrl,omitempty"`
	PreWebhookUrl *string `json:"PreWebhookUrl,omitempty"`
	Target *string `json:"Target,omitempty"`
}

/*
UpdateConfigurationWebhook Method for UpdateConfigurationWebhook
 * @param optional nil or *UpdateConfigurationWebhookOpts - Optional Parameters:
 * @param "Filters" ([]string) - The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
 * @param "Method" (string) - The HTTP method to be used when sending a webhook request.
 * @param "PostWebhookUrl" (string) - The absolute url the post-event webhook request should be sent to.
 * @param "PreWebhookUrl" (string) - The absolute url the pre-event webhook request should be sent to.
 * @param "Target" (string) - The routing target of the webhook.
@return ConversationsV1ConfigurationConfigurationWebhook
*/
func (c *DefaultApiService) UpdateConfigurationWebhook(params *UpdateConfigurationWebhookParams) (*ConversationsV1ConfigurationConfigurationWebhook, error) {
	path := "/v1/Configuration/Webhooks"

	data := url.Values{}
	headers := 0

	if params != nil && params.Filters != nil {
		data.Set("Filters", *params.Filters)
	}
	if params != nil && params.Method != nil {
		data.Set("Method", *params.Method)
	}
	if params != nil && params.PostWebhookUrl != nil {
		data.Set("PostWebhookUrl", *params.PostWebhookUrl)
	}
	if params != nil && params.PreWebhookUrl != nil {
		data.Set("PreWebhookUrl", *params.PreWebhookUrl)
	}
	if params != nil && params.Target != nil {
		data.Set("Target", *params.Target)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConfigurationConfigurationWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateConversationParams Optional parameters for the method 'UpdateConversation'
type UpdateConversationParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	MessagingServiceSid *string `json:"MessagingServiceSid,omitempty"`
	State *string `json:"State,omitempty"`
	Timers.Closed *string `json:"Timers.Closed,omitempty"`
	Timers.Inactive *string `json:"Timers.Inactive,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateConversation Method for UpdateConversation
Update an existing conversation in your account&#39;s default service
 * @param sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
 * @param optional nil or *UpdateConversationOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "FriendlyName" (string) - The human-readable name of this conversation, limited to 256 characters. Optional.
 * @param "MessagingServiceSid" (string) - The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this conversation belongs to.
 * @param "State" (string) - Current state of this conversation. Can be either `active`, `inactive` or `closed` and defaults to `active`
 * @param "Timers.Closed" (string) - ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
 * @param "Timers.Inactive" (string) - ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
@return ConversationsV1Conversation
*/
func (c *DefaultApiService) UpdateConversation(sid string, params *UpdateConversationParams) (*ConversationsV1Conversation, error) {
	path := "/v1/Conversations/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MessagingServiceSid != nil {
		data.Set("MessagingServiceSid", *params.MessagingServiceSid)
	}
	if params != nil && params.State != nil {
		data.Set("State", *params.State)
	}
	if params != nil && params.Timers.Closed != nil {
		data.Set("Timers.Closed", *params.Timers.Closed)
	}
	if params != nil && params.Timers.Inactive != nil {
		data.Set("Timers.Inactive", *params.Timers.Inactive)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Conversation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateConversationMessageParams Optional parameters for the method 'UpdateConversationMessage'
type UpdateConversationMessageParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	Author *string `json:"Author,omitempty"`
	Body *string `json:"Body,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
}

/*
UpdateConversationMessage Method for UpdateConversationMessage
Update an existing message in the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateConversationMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "Author" (string) - The channel specific identifier of the message's author. Defaults to `system`.
 * @param "Body" (string) - The content of the message, can be up to 1,600 characters long.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated. `null` if the message has not been edited.
@return ConversationsV1ConversationConversationMessage
*/
func (c *DefaultApiService) UpdateConversationMessage(conversationSid string, sid string, params *UpdateConversationMessageParams) (*ConversationsV1ConversationConversationMessage, error) {
	path := "/v1/Conversations/{ConversationSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Author != nil {
		data.Set("Author", *params.Author)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateConversationParticipantParams Optional parameters for the method 'UpdateConversationParticipant'
type UpdateConversationParticipantParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	LastReadMessageIndex *int32 `json:"LastReadMessageIndex,omitempty"`
	LastReadTimestamp *string `json:"LastReadTimestamp,omitempty"`
	MessagingBinding.ProjectedAddress *string `json:"MessagingBinding.ProjectedAddress,omitempty"`
	MessagingBinding.ProxyAddress *string `json:"MessagingBinding.ProxyAddress,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateConversationParticipant Method for UpdateConversationParticipant
Update an existing participant in the conversation
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateConversationParticipantOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "Identity" (string) - A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
 * @param "LastReadMessageIndex" (*int32) - Index of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
 * @param "LastReadTimestamp" (string) - Timestamp of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
 * @param "MessagingBinding.ProjectedAddress" (string) - The address of the Twilio phone number that is used in Group MMS. 'null' value will remove it.
 * @param "MessagingBinding.ProxyAddress" (string) - The address of the Twilio phone number that the participant is in contact with. 'null' value will remove it.
 * @param "RoleSid" (string) - The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
@return ConversationsV1ConversationConversationParticipant
*/
func (c *DefaultApiService) UpdateConversationParticipant(conversationSid string, sid string, params *UpdateConversationParticipantParams) (*ConversationsV1ConversationConversationParticipant, error) {
	path := "/v1/Conversations/{ConversationSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.LastReadMessageIndex != nil {
		data.Set("LastReadMessageIndex", string(*params.LastReadMessageIndex))
	}
	if params != nil && params.LastReadTimestamp != nil {
		data.Set("LastReadTimestamp", *params.LastReadTimestamp)
	}
	if params != nil && params.MessagingBinding.ProjectedAddress != nil {
		data.Set("MessagingBinding.ProjectedAddress", *params.MessagingBinding.ProjectedAddress)
	}
	if params != nil && params.MessagingBinding.ProxyAddress != nil {
		data.Set("MessagingBinding.ProxyAddress", *params.MessagingBinding.ProxyAddress)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateConversationScopedWebhookParams Optional parameters for the method 'UpdateConversationScopedWebhook'
type UpdateConversationScopedWebhookParams struct {
	Configuration.Filters *[]string `json:"Configuration.Filters,omitempty"`
	Configuration.FlowSid *string `json:"Configuration.FlowSid,omitempty"`
	Configuration.Method *string `json:"Configuration.Method,omitempty"`
	Configuration.Triggers *[]string `json:"Configuration.Triggers,omitempty"`
	Configuration.Url *string `json:"Configuration.Url,omitempty"`
}

/*
UpdateConversationScopedWebhook Method for UpdateConversationScopedWebhook
Update an existing conversation-scoped webhook
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateConversationScopedWebhookOpts - Optional Parameters:
 * @param "Configuration.Filters" ([]string) - The list of events, firing webhook event for this Conversation.
 * @param "Configuration.FlowSid" (string) - The studio flow SID, where the webhook should be sent to.
 * @param "Configuration.Method" (string) - The HTTP method to be used when sending a webhook request.
 * @param "Configuration.Triggers" ([]string) - The list of keywords, firing webhook event for this Conversation.
 * @param "Configuration.Url" (string) - The absolute url the webhook request should be sent to.
@return ConversationsV1ConversationConversationScopedWebhook
*/
func (c *DefaultApiService) UpdateConversationScopedWebhook(conversationSid string, sid string, params *UpdateConversationScopedWebhookParams) (*ConversationsV1ConversationConversationScopedWebhook, error) {
	path := "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Configuration.Filters != nil {
		data.Set("Configuration.Filters", *params.Configuration.Filters)
	}
	if params != nil && params.Configuration.FlowSid != nil {
		data.Set("Configuration.FlowSid", *params.Configuration.FlowSid)
	}
	if params != nil && params.Configuration.Method != nil {
		data.Set("Configuration.Method", *params.Configuration.Method)
	}
	if params != nil && params.Configuration.Triggers != nil {
		data.Set("Configuration.Triggers", *params.Configuration.Triggers)
	}
	if params != nil && params.Configuration.Url != nil {
		data.Set("Configuration.Url", *params.Configuration.Url)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ConversationConversationScopedWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateCredentialParams Optional parameters for the method 'UpdateCredential'
type UpdateCredentialParams struct {
	ApiKey *string `json:"ApiKey,omitempty"`
	Certificate *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey *string `json:"PrivateKey,omitempty"`
	Sandbox *bool `json:"Sandbox,omitempty"`
	Secret *string `json:"Secret,omitempty"`
	Type *string `json:"Type,omitempty"`
}

/*
UpdateCredential Method for UpdateCredential
Update an existing push notification credential on your account
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
 * @param "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A== -----END CERTIFICATE-----`.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE KEY-----`.
 * @param "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
 * @param "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
 * @param "Type" (string) - The type of push-notification service the credential is for. Can be: `fcm`, `gcm`, or `apn`.
@return ConversationsV1Credential
*/
func (c *DefaultApiService) UpdateCredential(sid string, params *UpdateCredentialParams) (*ConversationsV1Credential, error) {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", string(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateRoleParams Optional parameters for the method 'UpdateRole'
type UpdateRoleParams struct {
	Permission *[]string `json:"Permission,omitempty"`
}

/*
UpdateRole Method for UpdateRole
Update an existing user role in your account&#39;s default service
 * @param sid The SID of the Role resource to update.
 * @param optional nil or *UpdateRoleOpts - Optional Parameters:
 * @param "Permission" ([]string) - A permission that you grant to the role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. Note that the update action replaces all previously assigned permissions with those defined in the update action. To remove a permission, do not include it in the subsequent update action. The values for this parameter depend on the role's `type`.
@return ConversationsV1Role
*/
func (c *DefaultApiService) UpdateRole(sid string, params *UpdateRoleParams) (*ConversationsV1Role, error) {
	path := "/v1/Roles/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Permission != nil {
		data.Set("Permission", *params.Permission)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1Role{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceConfigurationParams Optional parameters for the method 'UpdateServiceConfiguration'
type UpdateServiceConfigurationParams struct {
	DefaultChatServiceRoleSid *string `json:"DefaultChatServiceRoleSid,omitempty"`
	DefaultConversationCreatorRoleSid *string `json:"DefaultConversationCreatorRoleSid,omitempty"`
	DefaultConversationRoleSid *string `json:"DefaultConversationRoleSid,omitempty"`
	ReachabilityEnabled *bool `json:"ReachabilityEnabled,omitempty"`
}

/*
UpdateServiceConfiguration Method for UpdateServiceConfiguration
Update configuration settings of a conversation service
 * @param chatServiceSid The SID of the Service configuration resource to update.
 * @param optional nil or *UpdateServiceConfigurationOpts - Optional Parameters:
 * @param "DefaultChatServiceRoleSid" (string) - The service-level role assigned to users when they are added to the service. See the [Conversation Role](https://www.twilio.com/docs/conversations/api/role-resource) for more info about roles.
 * @param "DefaultConversationCreatorRoleSid" (string) - The conversation-level role assigned to a conversation creator when they join a new conversation. See the [Conversation Role](https://www.twilio.com/docs/conversations/api/role-resource) for more info about roles.
 * @param "DefaultConversationRoleSid" (string) - The conversation-level role assigned to users when they are added to a conversation. See the [Conversation Role](https://www.twilio.com/docs/conversations/api/role-resource) for more info about roles.
 * @param "ReachabilityEnabled" (bool) - Whether the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) is enabled for this Conversations Service. The default is `false`.
@return ConversationsV1ServiceServiceConfiguration
*/
func (c *DefaultApiService) UpdateServiceConfiguration(chatServiceSid string, params *UpdateServiceConfigurationParams) (*ConversationsV1ServiceServiceConfiguration, error) {
	path := "/v1/Services/{ChatServiceSid}/Configuration"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.DefaultChatServiceRoleSid != nil {
		data.Set("DefaultChatServiceRoleSid", *params.DefaultChatServiceRoleSid)
	}
	if params != nil && params.DefaultConversationCreatorRoleSid != nil {
		data.Set("DefaultConversationCreatorRoleSid", *params.DefaultConversationCreatorRoleSid)
	}
	if params != nil && params.DefaultConversationRoleSid != nil {
		data.Set("DefaultConversationRoleSid", *params.DefaultConversationRoleSid)
	}
	if params != nil && params.ReachabilityEnabled != nil {
		data.Set("ReachabilityEnabled", string(*params.ReachabilityEnabled))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConfiguration{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceConversationParams Optional parameters for the method 'UpdateServiceConversation'
type UpdateServiceConversationParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	MessagingServiceSid *string `json:"MessagingServiceSid,omitempty"`
	State *string `json:"State,omitempty"`
	Timers.Closed *string `json:"Timers.Closed,omitempty"`
	Timers.Inactive *string `json:"Timers.Inactive,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateServiceConversation Method for UpdateServiceConversation
Update an existing conversation in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
 * @param sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
 * @param optional nil or *UpdateServiceConversationOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "FriendlyName" (string) - The human-readable name of this conversation, limited to 256 characters. Optional.
 * @param "MessagingServiceSid" (string) - The unique ID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) this conversation belongs to.
 * @param "State" (string) - Current state of this conversation. Can be either `active`, `inactive` or `closed` and defaults to `active`
 * @param "Timers.Closed" (string) - ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
 * @param "Timers.Inactive" (string) - ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
@return ConversationsV1ServiceServiceConversation
*/
func (c *DefaultApiService) UpdateServiceConversation(chatServiceSid string, sid string, params *UpdateServiceConversationParams) (*ConversationsV1ServiceServiceConversation, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.MessagingServiceSid != nil {
		data.Set("MessagingServiceSid", *params.MessagingServiceSid)
	}
	if params != nil && params.State != nil {
		data.Set("State", *params.State)
	}
	if params != nil && params.Timers.Closed != nil {
		data.Set("Timers.Closed", *params.Timers.Closed)
	}
	if params != nil && params.Timers.Inactive != nil {
		data.Set("Timers.Inactive", *params.Timers.Inactive)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversation{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceConversationMessageParams Optional parameters for the method 'UpdateServiceConversationMessage'
type UpdateServiceConversationMessageParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	Author *string `json:"Author,omitempty"`
	Body *string `json:"Body,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
}

/*
UpdateServiceConversationMessage Method for UpdateServiceConversationMessage
Update an existing message in the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateServiceConversationMessageOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "Author" (string) - The channel specific identifier of the message's author. Defaults to `system`.
 * @param "Body" (string) - The content of the message, can be up to 1,600 characters long.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated. `null` if the message has not been edited.
@return ConversationsV1ServiceServiceConversationServiceConversationMessage
*/
func (c *DefaultApiService) UpdateServiceConversationMessage(chatServiceSid string, conversationSid string, sid string, params *UpdateServiceConversationMessageParams) (*ConversationsV1ServiceServiceConversationServiceConversationMessage, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Author != nil {
		data.Set("Author", *params.Author)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceConversationParticipantParams Optional parameters for the method 'UpdateServiceConversationParticipant'
type UpdateServiceConversationParticipantParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	DateUpdated *time.Time `json:"DateUpdated,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	LastReadMessageIndex *int32 `json:"LastReadMessageIndex,omitempty"`
	LastReadTimestamp *string `json:"LastReadTimestamp,omitempty"`
	MessagingBinding.ProjectedAddress *string `json:"MessagingBinding.ProjectedAddress,omitempty"`
	MessagingBinding.ProxyAddress *string `json:"MessagingBinding.ProxyAddress,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateServiceConversationParticipant Method for UpdateServiceConversationParticipant
Update an existing participant in the conversation
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateServiceConversationParticipantOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
 * @param "DateCreated" (time.Time) - The date that this resource was created.
 * @param "DateUpdated" (time.Time) - The date that this resource was last updated.
 * @param "Identity" (string) - A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversation SDK to communicate. Limited to 256 characters.
 * @param "LastReadMessageIndex" (*int32) - Index of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
 * @param "LastReadTimestamp" (string) - Timestamp of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
 * @param "MessagingBinding.ProjectedAddress" (string) - The address of the Twilio phone number that is used in Group MMS. 'null' value will remove it.
 * @param "MessagingBinding.ProxyAddress" (string) - The address of the Twilio phone number that the participant is in contact with. 'null' value will remove it.
 * @param "RoleSid" (string) - The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
@return ConversationsV1ServiceServiceConversationServiceConversationParticipant
*/
func (c *DefaultApiService) UpdateServiceConversationParticipant(chatServiceSid string, conversationSid string, sid string, params *UpdateServiceConversationParticipantParams) (*ConversationsV1ServiceServiceConversationServiceConversationParticipant, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", string(*params.DateCreated))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", string(*params.DateUpdated))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.LastReadMessageIndex != nil {
		data.Set("LastReadMessageIndex", string(*params.LastReadMessageIndex))
	}
	if params != nil && params.LastReadTimestamp != nil {
		data.Set("LastReadTimestamp", *params.LastReadTimestamp)
	}
	if params != nil && params.MessagingBinding.ProjectedAddress != nil {
		data.Set("MessagingBinding.ProjectedAddress", *params.MessagingBinding.ProjectedAddress)
	}
	if params != nil && params.MessagingBinding.ProxyAddress != nil {
		data.Set("MessagingBinding.ProxyAddress", *params.MessagingBinding.ProxyAddress)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceConversationScopedWebhookParams Optional parameters for the method 'UpdateServiceConversationScopedWebhook'
type UpdateServiceConversationScopedWebhookParams struct {
	Configuration.Filters *[]string `json:"Configuration.Filters,omitempty"`
	Configuration.FlowSid *string `json:"Configuration.FlowSid,omitempty"`
	Configuration.Method *string `json:"Configuration.Method,omitempty"`
	Configuration.Triggers *[]string `json:"Configuration.Triggers,omitempty"`
	Configuration.Url *string `json:"Configuration.Url,omitempty"`
}

/*
UpdateServiceConversationScopedWebhook Method for UpdateServiceConversationScopedWebhook
Update an existing conversation-scoped webhook
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
 * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateServiceConversationScopedWebhookOpts - Optional Parameters:
 * @param "Configuration.Filters" ([]string) - The list of events, firing webhook event for this Conversation.
 * @param "Configuration.FlowSid" (string) - The studio flow SID, where the webhook should be sent to.
 * @param "Configuration.Method" (string) - The HTTP method to be used when sending a webhook request.
 * @param "Configuration.Triggers" ([]string) - The list of keywords, firing webhook event for this Conversation.
 * @param "Configuration.Url" (string) - The absolute url the webhook request should be sent to.
@return ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook
*/
func (c *DefaultApiService) UpdateServiceConversationScopedWebhook(chatServiceSid string, conversationSid string, sid string, params *UpdateServiceConversationScopedWebhookParams) (*ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook, error) {
	path := "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"ConversationSid"+"}", conversationSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Configuration.Filters != nil {
		data.Set("Configuration.Filters", *params.Configuration.Filters)
	}
	if params != nil && params.Configuration.FlowSid != nil {
		data.Set("Configuration.FlowSid", *params.Configuration.FlowSid)
	}
	if params != nil && params.Configuration.Method != nil {
		data.Set("Configuration.Method", *params.Configuration.Method)
	}
	if params != nil && params.Configuration.Triggers != nil {
		data.Set("Configuration.Triggers", *params.Configuration.Triggers)
	}
	if params != nil && params.Configuration.Url != nil {
		data.Set("Configuration.Url", *params.Configuration.Url)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceNotificationParams Optional parameters for the method 'UpdateServiceNotification'
type UpdateServiceNotificationParams struct {
	AddedToConversation.Enabled *bool `json:"AddedToConversation.Enabled,omitempty"`
	AddedToConversation.Sound *string `json:"AddedToConversation.Sound,omitempty"`
	AddedToConversation.Template *string `json:"AddedToConversation.Template,omitempty"`
	LogEnabled *bool `json:"LogEnabled,omitempty"`
	NewMessage.BadgeCountEnabled *bool `json:"NewMessage.BadgeCountEnabled,omitempty"`
	NewMessage.Enabled *bool `json:"NewMessage.Enabled,omitempty"`
	NewMessage.Sound *string `json:"NewMessage.Sound,omitempty"`
	NewMessage.Template *string `json:"NewMessage.Template,omitempty"`
	RemovedFromConversation.Enabled *bool `json:"RemovedFromConversation.Enabled,omitempty"`
	RemovedFromConversation.Sound *string `json:"RemovedFromConversation.Sound,omitempty"`
	RemovedFromConversation.Template *string `json:"RemovedFromConversation.Template,omitempty"`
}

/*
UpdateServiceNotification Method for UpdateServiceNotification
Update push notification service settings
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to.
 * @param optional nil or *UpdateServiceNotificationOpts - Optional Parameters:
 * @param "AddedToConversation.Enabled" (bool) - Whether to send a notification when a participant is added to a conversation. The default is `false`.
 * @param "AddedToConversation.Sound" (string) - The name of the sound to play when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
 * @param "AddedToConversation.Template" (string) - The template to use to create the notification text displayed when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
 * @param "LogEnabled" (bool) - Weather the notification logging is enabled.
 * @param "NewMessage.BadgeCountEnabled" (bool) - Whether the new message badge is enabled. The default is `false`.
 * @param "NewMessage.Enabled" (bool) - Whether to send a notification when a new message is added to a conversation. The default is `false`.
 * @param "NewMessage.Sound" (string) - The name of the sound to play when a new message is added to a conversation and `new_message.enabled` is `true`.
 * @param "NewMessage.Template" (string) - The template to use to create the notification text displayed when a new message is added to a conversation and `new_message.enabled` is `true`.
 * @param "RemovedFromConversation.Enabled" (bool) - Whether to send a notification to a user when they are removed from a conversation. The default is `false`.
 * @param "RemovedFromConversation.Sound" (string) - The name of the sound to play to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
 * @param "RemovedFromConversation.Template" (string) - The template to use to create the notification text displayed to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
@return ConversationsV1ServiceServiceConfigurationServiceNotification
*/
func (c *DefaultApiService) UpdateServiceNotification(chatServiceSid string, params *UpdateServiceNotificationParams) (*ConversationsV1ServiceServiceConfigurationServiceNotification, error) {
	path := "/v1/Services/{ChatServiceSid}/Configuration/Notifications"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.AddedToConversation.Enabled != nil {
		data.Set("AddedToConversation.Enabled", string(*params.AddedToConversation.Enabled))
	}
	if params != nil && params.AddedToConversation.Sound != nil {
		data.Set("AddedToConversation.Sound", *params.AddedToConversation.Sound)
	}
	if params != nil && params.AddedToConversation.Template != nil {
		data.Set("AddedToConversation.Template", *params.AddedToConversation.Template)
	}
	if params != nil && params.LogEnabled != nil {
		data.Set("LogEnabled", string(*params.LogEnabled))
	}
	if params != nil && params.NewMessage.BadgeCountEnabled != nil {
		data.Set("NewMessage.BadgeCountEnabled", string(*params.NewMessage.BadgeCountEnabled))
	}
	if params != nil && params.NewMessage.Enabled != nil {
		data.Set("NewMessage.Enabled", string(*params.NewMessage.Enabled))
	}
	if params != nil && params.NewMessage.Sound != nil {
		data.Set("NewMessage.Sound", *params.NewMessage.Sound)
	}
	if params != nil && params.NewMessage.Template != nil {
		data.Set("NewMessage.Template", *params.NewMessage.Template)
	}
	if params != nil && params.RemovedFromConversation.Enabled != nil {
		data.Set("RemovedFromConversation.Enabled", string(*params.RemovedFromConversation.Enabled))
	}
	if params != nil && params.RemovedFromConversation.Sound != nil {
		data.Set("RemovedFromConversation.Sound", *params.RemovedFromConversation.Sound)
	}
	if params != nil && params.RemovedFromConversation.Template != nil {
		data.Set("RemovedFromConversation.Template", *params.RemovedFromConversation.Template)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceConfigurationServiceNotification{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceRoleParams Optional parameters for the method 'UpdateServiceRole'
type UpdateServiceRoleParams struct {
	Permission *[]string `json:"Permission,omitempty"`
}

/*
UpdateServiceRole Method for UpdateServiceRole
Update an existing user role in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to update the Role resource in.
 * @param sid The SID of the Role resource to update.
 * @param optional nil or *UpdateServiceRoleOpts - Optional Parameters:
 * @param "Permission" ([]string) - A permission that you grant to the role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. Note that the update action replaces all previously assigned permissions with those defined in the update action. To remove a permission, do not include it in the subsequent update action. The values for this parameter depend on the role's `type`.
@return ConversationsV1ServiceServiceRole
*/
func (c *DefaultApiService) UpdateServiceRole(chatServiceSid string, sid string, params *UpdateServiceRoleParams) (*ConversationsV1ServiceServiceRole, error) {
	path := "/v1/Services/{ChatServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Permission != nil {
		data.Set("Permission", *params.Permission)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateServiceUserParams Optional parameters for the method 'UpdateServiceUser'
type UpdateServiceUserParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateServiceUser Method for UpdateServiceUser
Update an existing conversation user in your service
 * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the User resource is associated with.
 * @param sid The SID of the User resource to update. This value can be either the `sid` or the `identity` of the User resource to update.
 * @param optional nil or *UpdateServiceUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - The JSON Object string that stores application-specific data. If attributes have not been set, `{}` is returned.
 * @param "FriendlyName" (string) - The string that you assigned to describe the resource.
 * @param "RoleSid" (string) - The SID of a service-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the user.
@return ConversationsV1ServiceServiceUser
*/
func (c *DefaultApiService) UpdateServiceUser(chatServiceSid string, sid string, params *UpdateServiceUserParams) (*ConversationsV1ServiceServiceUser, error) {
	path := "/v1/Services/{ChatServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ChatServiceSid"+"}", chatServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1ServiceServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateUserParams Optional parameters for the method 'UpdateUser'
type UpdateUserParams struct {
	X-Twilio-Webhook-Enabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	RoleSid *string `json:"RoleSid,omitempty"`
}

/*
UpdateUser Method for UpdateUser
Update an existing conversation user in your account&#39;s default service
 * @param sid The SID of the User resource to update. This value can be either the `sid` or the `identity` of the User resource to update.
 * @param optional nil or *UpdateUserOpts - Optional Parameters:
 * @param "X-Twilio-Webhook-Enabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
 * @param "Attributes" (string) - The JSON Object string that stores application-specific data. If attributes have not been set, `{}` is returned.
 * @param "FriendlyName" (string) - The string that you assigned to describe the resource.
 * @param "RoleSid" (string) - The SID of a service-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the user.
@return ConversationsV1User
*/
func (c *DefaultApiService) UpdateUser(sid string, params *UpdateUserParams) (*ConversationsV1User, error) {
	path := "/v1/Users/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.X-Twilio-Webhook-Enabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.X-Twilio-Webhook-Enabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ConversationsV1User{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
