/*
 * Twilio - Chat
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.15.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"

	twilio "github.com/twilio/twilio-go/client"
)

type DefaultApiService struct {
	baseURL string
	client  twilio.BaseClient
}

func NewDefaultApiService(client twilio.BaseClient) *DefaultApiService {
	return &DefaultApiService{
		client:  client,
		baseURL: "https://chat.twilio.com",
	}
}

// CreateChannelParams Optional parameters for the method 'CreateChannel'
type CreateChannelParams struct {
	XTwilioWebhookEnabled *string    `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes            *string    `json:"Attributes,omitempty"`
	CreatedBy             *string    `json:"CreatedBy,omitempty"`
	DateCreated           *time.Time `json:"DateCreated,omitempty"`
	DateUpdated           *time.Time `json:"DateUpdated,omitempty"`
	FriendlyName          *string    `json:"FriendlyName,omitempty"`
	Type                  *string    `json:"Type,omitempty"`
	UniqueName            *string    `json:"UniqueName,omitempty"`
}

func (params *CreateChannelParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *CreateChannelParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *CreateChannelParams) SetAttributes(Attributes string) *CreateChannelParams {
	params.Attributes = &Attributes
	return params
}
func (params *CreateChannelParams) SetCreatedBy(CreatedBy string) *CreateChannelParams {
	params.CreatedBy = &CreatedBy
	return params
}
func (params *CreateChannelParams) SetDateCreated(DateCreated time.Time) *CreateChannelParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *CreateChannelParams) SetDateUpdated(DateUpdated time.Time) *CreateChannelParams {
	params.DateUpdated = &DateUpdated
	return params
}
func (params *CreateChannelParams) SetFriendlyName(FriendlyName string) *CreateChannelParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateChannelParams) SetType(Type string) *CreateChannelParams {
	params.Type = &Type
	return params
}
func (params *CreateChannelParams) SetUniqueName(UniqueName string) *CreateChannelParams {
	params.UniqueName = &UniqueName
	return params
}

// CreateChannel Method for CreateChannel
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Channel resource under.
//
// param: optional nil or *CreateChannelParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "CreatedBy" (string) - The `identity` of the User that created the channel. Default is: `system`.
//
// param: "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this should only be used in cases where a Channel is being recreated from a backup/separate source.
//
// param: "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated. The default value is `null`. Note that this parameter should only be used in cases where a Channel is being recreated from a backup/separate source  and where a Message was previously updated.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
//
// param: "Type" (string) - The visibility of the channel. Can be: `public` or `private` and defaults to `public`.
//
// param: "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the Channel resource's `sid` in the URL. This value must be 64 characters or less in length and be unique within the Service.
//
// return: ChatV2ServiceChannel
func (c *DefaultApiService) CreateChannel(ServiceSid string, params *CreateChannelParams) (*ChatV2ServiceChannel, error) {
	path := "/v2/Services/{ServiceSid}/Channels"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.CreatedBy != nil {
		data.Set("CreatedBy", *params.CreatedBy)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", fmt.Sprint((*params.DateUpdated).Format(time.RFC3339)))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateChannelWebhookParams Optional parameters for the method 'CreateChannelWebhook'
type CreateChannelWebhookParams struct {
	ConfigurationFilters    *[]string `json:"Configuration.Filters,omitempty"`
	ConfigurationFlowSid    *string   `json:"Configuration.FlowSid,omitempty"`
	ConfigurationMethod     *string   `json:"Configuration.Method,omitempty"`
	ConfigurationRetryCount *int32    `json:"Configuration.RetryCount,omitempty"`
	ConfigurationTriggers   *[]string `json:"Configuration.Triggers,omitempty"`
	ConfigurationUrl        *string   `json:"Configuration.Url,omitempty"`
	Type                    *string   `json:"Type,omitempty"`
}

func (params *CreateChannelWebhookParams) SetConfigurationFilters(ConfigurationFilters []string) *CreateChannelWebhookParams {
	params.ConfigurationFilters = &ConfigurationFilters
	return params
}
func (params *CreateChannelWebhookParams) SetConfigurationFlowSid(ConfigurationFlowSid string) *CreateChannelWebhookParams {
	params.ConfigurationFlowSid = &ConfigurationFlowSid
	return params
}
func (params *CreateChannelWebhookParams) SetConfigurationMethod(ConfigurationMethod string) *CreateChannelWebhookParams {
	params.ConfigurationMethod = &ConfigurationMethod
	return params
}
func (params *CreateChannelWebhookParams) SetConfigurationRetryCount(ConfigurationRetryCount int32) *CreateChannelWebhookParams {
	params.ConfigurationRetryCount = &ConfigurationRetryCount
	return params
}
func (params *CreateChannelWebhookParams) SetConfigurationTriggers(ConfigurationTriggers []string) *CreateChannelWebhookParams {
	params.ConfigurationTriggers = &ConfigurationTriggers
	return params
}
func (params *CreateChannelWebhookParams) SetConfigurationUrl(ConfigurationUrl string) *CreateChannelWebhookParams {
	params.ConfigurationUrl = &ConfigurationUrl
	return params
}
func (params *CreateChannelWebhookParams) SetType(Type string) *CreateChannelWebhookParams {
	params.Type = &Type
	return params
}

// CreateChannelWebhook Method for CreateChannelWebhook
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to create the Webhook resource under.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Channel Webhook resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *CreateChannelWebhookParams - Optional Parameters:
//
// param: "ConfigurationFilters" ([]string) - The events that cause us to call the Channel Webhook. Used when `type` is `webhook`. This parameter takes only one event. To specify more than one event, repeat this parameter for each event. For the list of possible events, see [Webhook Event Triggers](https://www.twilio.com/docs/chat/webhook-events#webhook-event-trigger).
//
// param: "ConfigurationFlowSid" (string) - The SID of the Studio [Flow](https://www.twilio.com/docs/studio/rest-api/flow) to call when an event in `configuration.filters` occurs. Used only when `type` is `studio`.
//
// param: "ConfigurationMethod" (string) - The HTTP method used to call `configuration.url`. Can be: `GET` or `POST` and the default is `POST`.
//
// param: "ConfigurationRetryCount" (int32) - The number of times to retry the webhook if the first attempt fails. Can be an integer between 0 and 3, inclusive, and the default is 0.
//
// param: "ConfigurationTriggers" ([]string) - A string that will cause us to call the webhook when it is present in a message body. This parameter takes only one trigger string. To specify more than one, repeat this parameter for each trigger string up to a total of 5 trigger strings. Used only when `type` = `trigger`.
//
// param: "ConfigurationUrl" (string) - The URL of the webhook to call using the `configuration.method`.
//
// param: "Type" (string) - The type of webhook. Can be: `webhook`, `studio`, or `trigger`.
//
// return: ChatV2ServiceChannelChannelWebhook
func (c *DefaultApiService) CreateChannelWebhook(ServiceSid string, ChannelSid string, params *CreateChannelWebhookParams) (*ChatV2ServiceChannelChannelWebhook, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ConfigurationFilters != nil {
		data.Set("Configuration.Filters", strings.Join(*params.ConfigurationFilters, ","))
	}
	if params != nil && params.ConfigurationFlowSid != nil {
		data.Set("Configuration.FlowSid", *params.ConfigurationFlowSid)
	}
	if params != nil && params.ConfigurationMethod != nil {
		data.Set("Configuration.Method", *params.ConfigurationMethod)
	}
	if params != nil && params.ConfigurationRetryCount != nil {
		data.Set("Configuration.RetryCount", fmt.Sprint(*params.ConfigurationRetryCount))
	}
	if params != nil && params.ConfigurationTriggers != nil {
		data.Set("Configuration.Triggers", strings.Join(*params.ConfigurationTriggers, ","))
	}
	if params != nil && params.ConfigurationUrl != nil {
		data.Set("Configuration.Url", *params.ConfigurationUrl)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelChannelWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCredentialParams Optional parameters for the method 'CreateCredential'
type CreateCredentialParams struct {
	ApiKey       *string `json:"ApiKey,omitempty"`
	Certificate  *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey   *string `json:"PrivateKey,omitempty"`
	Sandbox      *bool   `json:"Sandbox,omitempty"`
	Secret       *string `json:"Secret,omitempty"`
	Type         *string `json:"Type,omitempty"`
}

func (params *CreateCredentialParams) SetApiKey(ApiKey string) *CreateCredentialParams {
	params.ApiKey = &ApiKey
	return params
}
func (params *CreateCredentialParams) SetCertificate(Certificate string) *CreateCredentialParams {
	params.Certificate = &Certificate
	return params
}
func (params *CreateCredentialParams) SetFriendlyName(FriendlyName string) *CreateCredentialParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateCredentialParams) SetPrivateKey(PrivateKey string) *CreateCredentialParams {
	params.PrivateKey = &PrivateKey
	return params
}
func (params *CreateCredentialParams) SetSandbox(Sandbox bool) *CreateCredentialParams {
	params.Sandbox = &Sandbox
	return params
}
func (params *CreateCredentialParams) SetSecret(Secret string) *CreateCredentialParams {
	params.Secret = &Secret
	return params
}
func (params *CreateCredentialParams) SetType(Type string) *CreateCredentialParams {
	params.Type = &Type
	return params
}

// CreateCredential Method for CreateCredential
//
// param: optional nil or *CreateCredentialParams - Optional Parameters:
//
// param: "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
//
// param: "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A== -----END CERTIFICATE-----`
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
//
// param: "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE KEY-----`
//
// param: "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
//
// param: "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
//
// param: "Type" (string) - The type of push-notification service the credential is for. Can be: `gcm`, `fcm`, or `apn`.
//
// return: ChatV2Credential
func (c *DefaultApiService) CreateCredential(params *CreateCredentialParams) (*ChatV2Credential, error) {
	path := "/v2/Credentials"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", fmt.Sprint(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateInviteParams Optional parameters for the method 'CreateInvite'
type CreateInviteParams struct {
	Identity *string `json:"Identity,omitempty"`
	RoleSid  *string `json:"RoleSid,omitempty"`
}

func (params *CreateInviteParams) SetIdentity(Identity string) *CreateInviteParams {
	params.Identity = &Identity
	return params
}
func (params *CreateInviteParams) SetRoleSid(RoleSid string) *CreateInviteParams {
	params.RoleSid = &RoleSid
	return params
}

// CreateInvite Method for CreateInvite
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Invite resource under.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Invite resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *CreateInviteParams - Optional Parameters:
//
// param: "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/chat/rest/service-resource). See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more info.
//
// param: "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) assigned to the new member.
//
// return: ChatV2ServiceChannelInvite
func (c *DefaultApiService) CreateInvite(ServiceSid string, ChannelSid string, params *CreateInviteParams) (*ChatV2ServiceChannelInvite, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelInvite{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateMemberParams Optional parameters for the method 'CreateMember'
type CreateMemberParams struct {
	XTwilioWebhookEnabled    *string    `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes               *string    `json:"Attributes,omitempty"`
	DateCreated              *time.Time `json:"DateCreated,omitempty"`
	DateUpdated              *time.Time `json:"DateUpdated,omitempty"`
	Identity                 *string    `json:"Identity,omitempty"`
	LastConsumedMessageIndex *int32     `json:"LastConsumedMessageIndex,omitempty"`
	LastConsumptionTimestamp *time.Time `json:"LastConsumptionTimestamp,omitempty"`
	RoleSid                  *string    `json:"RoleSid,omitempty"`
}

func (params *CreateMemberParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *CreateMemberParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *CreateMemberParams) SetAttributes(Attributes string) *CreateMemberParams {
	params.Attributes = &Attributes
	return params
}
func (params *CreateMemberParams) SetDateCreated(DateCreated time.Time) *CreateMemberParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *CreateMemberParams) SetDateUpdated(DateUpdated time.Time) *CreateMemberParams {
	params.DateUpdated = &DateUpdated
	return params
}
func (params *CreateMemberParams) SetIdentity(Identity string) *CreateMemberParams {
	params.Identity = &Identity
	return params
}
func (params *CreateMemberParams) SetLastConsumedMessageIndex(LastConsumedMessageIndex int32) *CreateMemberParams {
	params.LastConsumedMessageIndex = &LastConsumedMessageIndex
	return params
}
func (params *CreateMemberParams) SetLastConsumptionTimestamp(LastConsumptionTimestamp time.Time) *CreateMemberParams {
	params.LastConsumptionTimestamp = &LastConsumptionTimestamp
	return params
}
func (params *CreateMemberParams) SetRoleSid(RoleSid string) *CreateMemberParams {
	params.RoleSid = &RoleSid
	return params
}

// CreateMember Method for CreateMember
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Member resource under.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Member resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *CreateMemberParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this parameter should only be used when a Member is being recreated from a backup/separate source.
//
// param: "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated. The default value is `null`. Note that this parameter should only be used when a Member is being recreated from a backup/separate source and where a Member was previously updated.
//
// param: "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/chat/rest/service-resource). See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more info.
//
// param: "LastConsumedMessageIndex" (*int32) - The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) in the [Channel](https://www.twilio.com/docs/chat/channels) that the Member has read. This parameter should only be used when recreating a Member from a backup/separate source.
//
// param: "LastConsumptionTimestamp" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
//
// param: "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/rest/service-resource).
//
// return: ChatV2ServiceChannelMember
func (c *DefaultApiService) CreateMember(ServiceSid string, ChannelSid string, params *CreateMemberParams) (*ChatV2ServiceChannelMember, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", fmt.Sprint((*params.DateUpdated).Format(time.RFC3339)))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.LastConsumedMessageIndex != nil {
		data.Set("LastConsumedMessageIndex", fmt.Sprint(*params.LastConsumedMessageIndex))
	}
	if params != nil && params.LastConsumptionTimestamp != nil {
		data.Set("LastConsumptionTimestamp", fmt.Sprint((*params.LastConsumptionTimestamp).Format(time.RFC3339)))
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateMessageParams Optional parameters for the method 'CreateMessage'
type CreateMessageParams struct {
	XTwilioWebhookEnabled *string    `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes            *string    `json:"Attributes,omitempty"`
	Body                  *string    `json:"Body,omitempty"`
	DateCreated           *time.Time `json:"DateCreated,omitempty"`
	DateUpdated           *time.Time `json:"DateUpdated,omitempty"`
	From                  *string    `json:"From,omitempty"`
	LastUpdatedBy         *string    `json:"LastUpdatedBy,omitempty"`
	MediaSid              *string    `json:"MediaSid,omitempty"`
}

func (params *CreateMessageParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *CreateMessageParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *CreateMessageParams) SetAttributes(Attributes string) *CreateMessageParams {
	params.Attributes = &Attributes
	return params
}
func (params *CreateMessageParams) SetBody(Body string) *CreateMessageParams {
	params.Body = &Body
	return params
}
func (params *CreateMessageParams) SetDateCreated(DateCreated time.Time) *CreateMessageParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *CreateMessageParams) SetDateUpdated(DateUpdated time.Time) *CreateMessageParams {
	params.DateUpdated = &DateUpdated
	return params
}
func (params *CreateMessageParams) SetFrom(From string) *CreateMessageParams {
	params.From = &From
	return params
}
func (params *CreateMessageParams) SetLastUpdatedBy(LastUpdatedBy string) *CreateMessageParams {
	params.LastUpdatedBy = &LastUpdatedBy
	return params
}
func (params *CreateMessageParams) SetMediaSid(MediaSid string) *CreateMessageParams {
	params.MediaSid = &MediaSid
	return params
}

// CreateMessage Method for CreateMessage
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Message resource under.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Message resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *CreateMessageParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "Body" (string) - The message to send to the channel. Can be an empty string or `null`, which sets the value as an empty string. You can send structured data in the body by serializing it as a string.
//
// param: "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service. This parameter should only be used when a Chat's history is being recreated from a backup/separate source.
//
// param: "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
//
// param: "From" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the new message's author. The default value is `system`.
//
// param: "LastUpdatedBy" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the User who last updated the Message, if applicable.
//
// param: "MediaSid" (string) - The SID of the [Media](https://www.twilio.com/docs/chat/rest/media) to attach to the new Message.
//
// return: ChatV2ServiceChannelMessage
func (c *DefaultApiService) CreateMessage(ServiceSid string, ChannelSid string, params *CreateMessageParams) (*ChatV2ServiceChannelMessage, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", fmt.Sprint((*params.DateUpdated).Format(time.RFC3339)))
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.LastUpdatedBy != nil {
		data.Set("LastUpdatedBy", *params.LastUpdatedBy)
	}
	if params != nil && params.MediaSid != nil {
		data.Set("MediaSid", *params.MediaSid)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateRoleParams Optional parameters for the method 'CreateRole'
type CreateRoleParams struct {
	FriendlyName *string   `json:"FriendlyName,omitempty"`
	Permission   *[]string `json:"Permission,omitempty"`
	Type         *string   `json:"Type,omitempty"`
}

func (params *CreateRoleParams) SetFriendlyName(FriendlyName string) *CreateRoleParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateRoleParams) SetPermission(Permission []string) *CreateRoleParams {
	params.Permission = &Permission
	return params
}
func (params *CreateRoleParams) SetType(Type string) *CreateRoleParams {
	params.Type = &Type
	return params
}

// CreateRole Method for CreateRole
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Role resource under.
//
// param: optional nil or *CreateRoleParams - Optional Parameters:
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
//
// param: "Permission" ([]string) - A permission that you grant to the new role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. The values for this parameter depend on the role's `type`.
//
// param: "Type" (string) - The type of role. Can be: `channel` for [Channel](https://www.twilio.com/docs/chat/channels) roles or `deployment` for [Service](https://www.twilio.com/docs/chat/rest/service-resource) roles.
//
// return: ChatV2ServiceRole
func (c *DefaultApiService) CreateRole(ServiceSid string, params *CreateRoleParams) (*ChatV2ServiceRole, error) {
	path := "/v2/Services/{ServiceSid}/Roles"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Permission != nil {
		data.Set("Permission", strings.Join(*params.Permission, ","))
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

func (params *CreateServiceParams) SetFriendlyName(FriendlyName string) *CreateServiceParams {
	params.FriendlyName = &FriendlyName
	return params
}

// CreateService Method for CreateService
//
// param: optional nil or *CreateServiceParams - Optional Parameters:
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new resource.
//
// return: ChatV2Service
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*ChatV2Service, error) {
	path := "/v2/Services"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateUserParams Optional parameters for the method 'CreateUser'
type CreateUserParams struct {
	XTwilioWebhookEnabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes            *string `json:"Attributes,omitempty"`
	FriendlyName          *string `json:"FriendlyName,omitempty"`
	Identity              *string `json:"Identity,omitempty"`
	RoleSid               *string `json:"RoleSid,omitempty"`
}

func (params *CreateUserParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *CreateUserParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *CreateUserParams) SetAttributes(Attributes string) *CreateUserParams {
	params.Attributes = &Attributes
	return params
}
func (params *CreateUserParams) SetFriendlyName(FriendlyName string) *CreateUserParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateUserParams) SetIdentity(Identity string) *CreateUserParams {
	params.Identity = &Identity
	return params
}
func (params *CreateUserParams) SetRoleSid(RoleSid string) *CreateUserParams {
	params.RoleSid = &RoleSid
	return params
}

// CreateUser Method for CreateUser
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the User resource under.
//
// param: optional nil or *CreateUserParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the new resource. This value is often used for display purposes.
//
// param: "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/chat/rest/service-resource). This value is often a username or email address. See the Identity documentation for more info.
//
// param: "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the new User.
//
// return: ChatV2ServiceUser
func (c *DefaultApiService) CreateUser(ServiceSid string, params *CreateUserParams) (*ChatV2ServiceUser, error) {
	path := "/v2/Services/{ServiceSid}/Users"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// DeleteBinding Method for DeleteBinding
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Binding resource from.
//
// param: Sid The SID of the Binding resource to delete.
//
func (c *DefaultApiService) DeleteBinding(ServiceSid string, Sid string) error {
	path := "/v2/Services/{ServiceSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteChannelParams Optional parameters for the method 'DeleteChannel'
type DeleteChannelParams struct {
	XTwilioWebhookEnabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

func (params *DeleteChannelParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *DeleteChannelParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}

// DeleteChannel Method for DeleteChannel
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the resource from.
//
// param: Sid The SID of the Channel resource to delete.  This value can be either the `sid` or the `unique_name` of the Channel resource to delete.
//
// param: optional nil or *DeleteChannelParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
func (c *DefaultApiService) DeleteChannel(ServiceSid string, Sid string, params *DeleteChannelParams) error {
	path := "/v2/Services/{ServiceSid}/Channels/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteChannelWebhook Method for DeleteChannelWebhook
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to delete the Webhook resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Channel Webhook resource to delete.
//
func (c *DefaultApiService) DeleteChannelWebhook(ServiceSid string, ChannelSid string, Sid string) error {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteCredential Method for DeleteCredential
//
// param: Sid The SID of the Credential resource to delete.
//
func (c *DefaultApiService) DeleteCredential(Sid string) error {
	path := "/v2/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteInvite Method for DeleteInvite
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Invite resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Invite resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Invite resource to delete.
//
func (c *DefaultApiService) DeleteInvite(ServiceSid string, ChannelSid string, Sid string) error {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteMemberParams Optional parameters for the method 'DeleteMember'
type DeleteMemberParams struct {
	XTwilioWebhookEnabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

func (params *DeleteMemberParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *DeleteMemberParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}

// DeleteMember Method for DeleteMember
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Member resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Member resource to delete. This value can be either the Member's `sid` or its `identity` value.
//
// param: optional nil or *DeleteMemberParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
func (c *DefaultApiService) DeleteMember(ServiceSid string, ChannelSid string, Sid string, params *DeleteMemberParams) error {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteMessageParams Optional parameters for the method 'DeleteMessage'
type DeleteMessageParams struct {
	XTwilioWebhookEnabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
}

func (params *DeleteMessageParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *DeleteMessageParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}

// DeleteMessage Method for DeleteMessage
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Message resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Message resource to delete.
//
// param: optional nil or *DeleteMessageParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
func (c *DefaultApiService) DeleteMessage(ServiceSid string, ChannelSid string, Sid string, params *DeleteMessageParams) error {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteRole Method for DeleteRole
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Role resource from.
//
// param: Sid The SID of the Role resource to delete.
//
func (c *DefaultApiService) DeleteRole(ServiceSid string, Sid string) error {
	path := "/v2/Services/{ServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteService Method for DeleteService
//
// param: Sid The SID of the Service resource to delete.
//
func (c *DefaultApiService) DeleteService(Sid string) error {
	path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteUser Method for DeleteUser
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the User resource from.
//
// param: Sid The SID of the User resource to delete. This value can be either the `sid` or the `identity` of the User resource to delete.
//
func (c *DefaultApiService) DeleteUser(ServiceSid string, Sid string) error {
	path := "/v2/Services/{ServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteUserBinding Method for DeleteUserBinding
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the User Binding resource from.
//
// param: UserSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) with the User Binding resources to delete.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
//
// param: Sid The SID of the User Binding resource to delete.
//
func (c *DefaultApiService) DeleteUserBinding(ServiceSid string, UserSid string, Sid string) error {
	path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteUserChannel Method for DeleteUserChannel
//
// Removes User from selected Channel.
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
//
// param: UserSid The SID of the [User](https://www.twilio.com/docs/api/chat/rest/users) to read the User Channel resources from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource belongs to.
//
func (c *DefaultApiService) DeleteUserChannel(ServiceSid string, UserSid string, ChannelSid string) error {
	path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// FetchBinding Method for FetchBinding
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Binding resource from.
//
// param: Sid The SID of the Binding resource to fetch.
//
// return: ChatV2ServiceBinding
func (c *DefaultApiService) FetchBinding(ServiceSid string, Sid string) (*ChatV2ServiceBinding, error) {
	path := "/v2/Services/{ServiceSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceBinding{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchChannel Method for FetchChannel
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Channel resource from.
//
// param: Sid The SID of the Channel resource to fetch. This value can be either the `sid` or the `unique_name` of the Channel resource to fetch.
//
// return: ChatV2ServiceChannel
func (c *DefaultApiService) FetchChannel(ServiceSid string, Sid string) (*ChatV2ServiceChannel, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchChannelWebhook Method for FetchChannelWebhook
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to fetch the Webhook resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Channel Webhook resource to fetch.
//
// return: ChatV2ServiceChannelChannelWebhook
func (c *DefaultApiService) FetchChannelWebhook(ServiceSid string, ChannelSid string, Sid string) (*ChatV2ServiceChannelChannelWebhook, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelChannelWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCredential Method for FetchCredential
//
// param: Sid The SID of the Credential resource to fetch.
//
// return: ChatV2Credential
func (c *DefaultApiService) FetchCredential(Sid string) (*ChatV2Credential, error) {
	path := "/v2/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchInvite Method for FetchInvite
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Invite resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Invite resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Invite resource to fetch.
//
// return: ChatV2ServiceChannelInvite
func (c *DefaultApiService) FetchInvite(ServiceSid string, ChannelSid string, Sid string) (*ChatV2ServiceChannelInvite, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelInvite{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchMember Method for FetchMember
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Member resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Member resource to fetch. This value can be either the Member's `sid` or its `identity` value.
//
// return: ChatV2ServiceChannelMember
func (c *DefaultApiService) FetchMember(ServiceSid string, ChannelSid string, Sid string) (*ChatV2ServiceChannelMember, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchMessage Method for FetchMessage
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Message resource from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Message resource to fetch.
//
// return: ChatV2ServiceChannelMessage
func (c *DefaultApiService) FetchMessage(ServiceSid string, ChannelSid string, Sid string) (*ChatV2ServiceChannelMessage, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchRole Method for FetchRole
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Role resource from.
//
// param: Sid The SID of the Role resource to fetch.
//
// return: ChatV2ServiceRole
func (c *DefaultApiService) FetchRole(ServiceSid string, Sid string) (*ChatV2ServiceRole, error) {
	path := "/v2/Services/{ServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchService Method for FetchService
//
// param: Sid The SID of the Service resource to fetch.
//
// return: ChatV2Service
func (c *DefaultApiService) FetchService(Sid string) (*ChatV2Service, error) {
	path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchUser Method for FetchUser
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the User resource from.
//
// param: Sid The SID of the User resource to fetch. This value can be either the `sid` or the `identity` of the User resource to fetch.
//
// return: ChatV2ServiceUser
func (c *DefaultApiService) FetchUser(ServiceSid string, Sid string) (*ChatV2ServiceUser, error) {
	path := "/v2/Services/{ServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchUserBinding Method for FetchUserBinding
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the User Binding resource from.
//
// param: UserSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) with the User Binding resource to fetch.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
//
// param: Sid The SID of the User Binding resource to fetch.
//
// return: ChatV2ServiceUserUserBinding
func (c *DefaultApiService) FetchUserBinding(ServiceSid string, UserSid string, Sid string) (*ChatV2ServiceUserUserBinding, error) {
	path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceUserUserBinding{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchUserChannel Method for FetchUserChannel
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the User Channel resource from.
//
// param: UserSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) to fetch the User Channel resource from. This value can be either the `sid` or the `identity` of the User resource.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) that has the User Channel to fetch. This value can be either the `sid` or the `unique_name` of the Channel to fetch.
//
// return: ChatV2ServiceUserUserChannel
func (c *DefaultApiService) FetchUserChannel(ServiceSid string, UserSid string, ChannelSid string) (*ChatV2ServiceUserUserChannel, error) {
	path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceUserUserChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListBindingParams Optional parameters for the method 'ListBinding'
type ListBindingParams struct {
	BindingType *[]string `json:"BindingType,omitempty"`
	Identity    *[]string `json:"Identity,omitempty"`
	PageSize    *int32    `json:"PageSize,omitempty"`
}

func (params *ListBindingParams) SetBindingType(BindingType []string) *ListBindingParams {
	params.BindingType = &BindingType
	return params
}
func (params *ListBindingParams) SetIdentity(Identity []string) *ListBindingParams {
	params.Identity = &Identity
	return params
}
func (params *ListBindingParams) SetPageSize(PageSize int32) *ListBindingParams {
	params.PageSize = &PageSize
	return params
}

// ListBinding Method for ListBinding
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Binding resources from.
//
// param: optional nil or *ListBindingParams - Optional Parameters:
//
// param: "BindingType" ([]string) - The push technology used by the Binding resources to read.  Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
//
// param: "Identity" ([]string) - The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListBindingResponse
func (c *DefaultApiService) ListBinding(ServiceSid string, params *ListBindingParams) (*ListBindingResponse, error) {
	path := "/v2/Services/{ServiceSid}/Bindings"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.BindingType != nil {
		data.Set("BindingType", strings.Join(*params.BindingType, ","))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", strings.Join(*params.Identity, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListBindingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListChannelParams Optional parameters for the method 'ListChannel'
type ListChannelParams struct {
	Type     *[]string `json:"Type,omitempty"`
	PageSize *int32    `json:"PageSize,omitempty"`
}

func (params *ListChannelParams) SetType(Type []string) *ListChannelParams {
	params.Type = &Type
	return params
}
func (params *ListChannelParams) SetPageSize(PageSize int32) *ListChannelParams {
	params.PageSize = &PageSize
	return params
}

// ListChannel Method for ListChannel
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Channel resources from.
//
// param: optional nil or *ListChannelParams - Optional Parameters:
//
// param: "Type" ([]string) - The visibility of the Channels to read. Can be: `public` or `private` and defaults to `public`.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListChannelResponse
func (c *DefaultApiService) ListChannel(ServiceSid string, params *ListChannelParams) (*ListChannelResponse, error) {
	path := "/v2/Services/{ServiceSid}/Channels"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Type != nil {
		data.Set("Type", strings.Join(*params.Type, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListChannelResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListChannelWebhookParams Optional parameters for the method 'ListChannelWebhook'
type ListChannelWebhookParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListChannelWebhookParams) SetPageSize(PageSize int32) *ListChannelWebhookParams {
	params.PageSize = &PageSize
	return params
}

// ListChannelWebhook Method for ListChannelWebhook
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel to read the resources from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resources to read belong to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *ListChannelWebhookParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListChannelWebhookResponse
func (c *DefaultApiService) ListChannelWebhook(ServiceSid string, ChannelSid string, params *ListChannelWebhookParams) (*ListChannelWebhookResponse, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListChannelWebhookResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCredentialParams Optional parameters for the method 'ListCredential'
type ListCredentialParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListCredentialParams) SetPageSize(PageSize int32) *ListCredentialParams {
	params.PageSize = &PageSize
	return params
}

// ListCredential Method for ListCredential
//
// param: optional nil or *ListCredentialParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListCredentialResponse
func (c *DefaultApiService) ListCredential(params *ListCredentialParams) (*ListCredentialResponse, error) {
	path := "/v2/Credentials"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCredentialResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListInviteParams Optional parameters for the method 'ListInvite'
type ListInviteParams struct {
	Identity *[]string `json:"Identity,omitempty"`
	PageSize *int32    `json:"PageSize,omitempty"`
}

func (params *ListInviteParams) SetIdentity(Identity []string) *ListInviteParams {
	params.Identity = &Identity
	return params
}
func (params *ListInviteParams) SetPageSize(PageSize int32) *ListInviteParams {
	params.PageSize = &PageSize
	return params
}

// ListInvite Method for ListInvite
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Invite resources from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Invite resources to read belong to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *ListInviteParams - Optional Parameters:
//
// param: "Identity" ([]string) - The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListInviteResponse
func (c *DefaultApiService) ListInvite(ServiceSid string, ChannelSid string, params *ListInviteParams) (*ListInviteResponse, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Identity != nil {
		data.Set("Identity", strings.Join(*params.Identity, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListInviteResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListMemberParams Optional parameters for the method 'ListMember'
type ListMemberParams struct {
	Identity *[]string `json:"Identity,omitempty"`
	PageSize *int32    `json:"PageSize,omitempty"`
}

func (params *ListMemberParams) SetIdentity(Identity []string) *ListMemberParams {
	params.Identity = &Identity
	return params
}
func (params *ListMemberParams) SetPageSize(PageSize int32) *ListMemberParams {
	params.PageSize = &PageSize
	return params
}

// ListMember Method for ListMember
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Member resources from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resources to read belong to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *ListMemberParams - Optional Parameters:
//
// param: "Identity" ([]string) - The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the Member resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListMemberResponse
func (c *DefaultApiService) ListMember(ServiceSid string, ChannelSid string, params *ListMemberParams) (*ListMemberResponse, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Identity != nil {
		data.Set("Identity", strings.Join(*params.Identity, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMemberResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListMessageParams Optional parameters for the method 'ListMessage'
type ListMessageParams struct {
	Order    *string `json:"Order,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty"`
}

func (params *ListMessageParams) SetOrder(Order string) *ListMessageParams {
	params.Order = &Order
	return params
}
func (params *ListMessageParams) SetPageSize(PageSize int32) *ListMessageParams {
	params.PageSize = &PageSize
	return params
}

// ListMessage Method for ListMessage
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Message resources from.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to read belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *ListMessageParams - Optional Parameters:
//
// param: "Order" (string) - The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending) with `asc` as the default.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListMessageResponse
func (c *DefaultApiService) ListMessage(ServiceSid string, ChannelSid string, params *ListMessageParams) (*ListMessageResponse, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Order != nil {
		data.Set("Order", *params.Order)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMessageResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListRoleParams Optional parameters for the method 'ListRole'
type ListRoleParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListRoleParams) SetPageSize(PageSize int32) *ListRoleParams {
	params.PageSize = &PageSize
	return params
}

// ListRole Method for ListRole
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Role resources from.
//
// param: optional nil or *ListRoleParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListRoleResponse
func (c *DefaultApiService) ListRole(ServiceSid string, params *ListRoleParams) (*ListRoleResponse, error) {
	path := "/v2/Services/{ServiceSid}/Roles"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRoleResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListServiceParams) SetPageSize(PageSize int32) *ListServiceParams {
	params.PageSize = &PageSize
	return params
}

// ListService Method for ListService
//
// param: optional nil or *ListServiceParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListServiceResponse
func (c *DefaultApiService) ListService(params *ListServiceParams) (*ListServiceResponse, error) {
	path := "/v2/Services"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListServiceResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUserParams Optional parameters for the method 'ListUser'
type ListUserParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListUserParams) SetPageSize(PageSize int32) *ListUserParams {
	params.PageSize = &PageSize
	return params
}

// ListUser Method for ListUser
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the User resources from.
//
// param: optional nil or *ListUserParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUserResponse
func (c *DefaultApiService) ListUser(ServiceSid string, params *ListUserParams) (*ListUserResponse, error) {
	path := "/v2/Services/{ServiceSid}/Users"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUserResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUserBindingParams Optional parameters for the method 'ListUserBinding'
type ListUserBindingParams struct {
	BindingType *[]string `json:"BindingType,omitempty"`
	PageSize    *int32    `json:"PageSize,omitempty"`
}

func (params *ListUserBindingParams) SetBindingType(BindingType []string) *ListUserBindingParams {
	params.BindingType = &BindingType
	return params
}
func (params *ListUserBindingParams) SetPageSize(PageSize int32) *ListUserBindingParams {
	params.PageSize = &PageSize
	return params
}

// ListUserBinding Method for ListUserBinding
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the User Binding resources from.
//
// param: UserSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) with the User Binding resources to read.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
//
// param: optional nil or *ListUserBindingParams - Optional Parameters:
//
// param: "BindingType" ([]string) - The push technology used by the User Binding resources to read. Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUserBindingResponse
func (c *DefaultApiService) ListUserBinding(ServiceSid string, UserSid string, params *ListUserBindingParams) (*ListUserBindingResponse, error) {
	path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.BindingType != nil {
		data.Set("BindingType", strings.Join(*params.BindingType, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUserBindingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUserChannelParams Optional parameters for the method 'ListUserChannel'
type ListUserChannelParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

func (params *ListUserChannelParams) SetPageSize(PageSize int32) *ListUserChannelParams {
	params.PageSize = &PageSize
	return params
}

// ListUserChannel Method for ListUserChannel
//
// List all Channels for a given User.
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the User Channel resources from.
//
// param: UserSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) to read the User Channel resources from. This value can be either the `sid` or the `identity` of the User resource.
//
// param: optional nil or *ListUserChannelParams - Optional Parameters:
//
// param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// return: ListUserChannelResponse
func (c *DefaultApiService) ListUserChannel(ServiceSid string, UserSid string, params *ListUserChannelParams) (*ListUserChannelResponse, error) {
	path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUserChannelResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateChannelParams Optional parameters for the method 'UpdateChannel'
type UpdateChannelParams struct {
	XTwilioWebhookEnabled *string    `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes            *string    `json:"Attributes,omitempty"`
	CreatedBy             *string    `json:"CreatedBy,omitempty"`
	DateCreated           *time.Time `json:"DateCreated,omitempty"`
	DateUpdated           *time.Time `json:"DateUpdated,omitempty"`
	FriendlyName          *string    `json:"FriendlyName,omitempty"`
	UniqueName            *string    `json:"UniqueName,omitempty"`
}

func (params *UpdateChannelParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *UpdateChannelParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *UpdateChannelParams) SetAttributes(Attributes string) *UpdateChannelParams {
	params.Attributes = &Attributes
	return params
}
func (params *UpdateChannelParams) SetCreatedBy(CreatedBy string) *UpdateChannelParams {
	params.CreatedBy = &CreatedBy
	return params
}
func (params *UpdateChannelParams) SetDateCreated(DateCreated time.Time) *UpdateChannelParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *UpdateChannelParams) SetDateUpdated(DateUpdated time.Time) *UpdateChannelParams {
	params.DateUpdated = &DateUpdated
	return params
}
func (params *UpdateChannelParams) SetFriendlyName(FriendlyName string) *UpdateChannelParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateChannelParams) SetUniqueName(UniqueName string) *UpdateChannelParams {
	params.UniqueName = &UniqueName
	return params
}

// UpdateChannel Method for UpdateChannel
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Channel resource in.
//
// param: Sid The SID of the Channel resource to update. This value can be either the `sid` or the `unique_name` of the Channel resource to update.
//
// param: optional nil or *UpdateChannelParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "CreatedBy" (string) - The `identity` of the User that created the channel. Default is: `system`.
//
// param: "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this should only be used in cases where a Channel is being recreated from a backup/separate source.
//
// param: "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 256 characters long.
//
// param: "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL. This value must be 256 characters or less in length and unique within the Service.
//
// return: ChatV2ServiceChannel
func (c *DefaultApiService) UpdateChannel(ServiceSid string, Sid string, params *UpdateChannelParams) (*ChatV2ServiceChannel, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.CreatedBy != nil {
		data.Set("CreatedBy", *params.CreatedBy)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", fmt.Sprint((*params.DateUpdated).Format(time.RFC3339)))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateChannelWebhookParams Optional parameters for the method 'UpdateChannelWebhook'
type UpdateChannelWebhookParams struct {
	ConfigurationFilters    *[]string `json:"Configuration.Filters,omitempty"`
	ConfigurationFlowSid    *string   `json:"Configuration.FlowSid,omitempty"`
	ConfigurationMethod     *string   `json:"Configuration.Method,omitempty"`
	ConfigurationRetryCount *int32    `json:"Configuration.RetryCount,omitempty"`
	ConfigurationTriggers   *[]string `json:"Configuration.Triggers,omitempty"`
	ConfigurationUrl        *string   `json:"Configuration.Url,omitempty"`
}

func (params *UpdateChannelWebhookParams) SetConfigurationFilters(ConfigurationFilters []string) *UpdateChannelWebhookParams {
	params.ConfigurationFilters = &ConfigurationFilters
	return params
}
func (params *UpdateChannelWebhookParams) SetConfigurationFlowSid(ConfigurationFlowSid string) *UpdateChannelWebhookParams {
	params.ConfigurationFlowSid = &ConfigurationFlowSid
	return params
}
func (params *UpdateChannelWebhookParams) SetConfigurationMethod(ConfigurationMethod string) *UpdateChannelWebhookParams {
	params.ConfigurationMethod = &ConfigurationMethod
	return params
}
func (params *UpdateChannelWebhookParams) SetConfigurationRetryCount(ConfigurationRetryCount int32) *UpdateChannelWebhookParams {
	params.ConfigurationRetryCount = &ConfigurationRetryCount
	return params
}
func (params *UpdateChannelWebhookParams) SetConfigurationTriggers(ConfigurationTriggers []string) *UpdateChannelWebhookParams {
	params.ConfigurationTriggers = &ConfigurationTriggers
	return params
}
func (params *UpdateChannelWebhookParams) SetConfigurationUrl(ConfigurationUrl string) *UpdateChannelWebhookParams {
	params.ConfigurationUrl = &ConfigurationUrl
	return params
}

// UpdateChannelWebhook Method for UpdateChannelWebhook
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) with the Channel that has the Webhook resource to update.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Channel Webhook resource to update belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Channel Webhook resource to update.
//
// param: optional nil or *UpdateChannelWebhookParams - Optional Parameters:
//
// param: "ConfigurationFilters" ([]string) - The events that cause us to call the Channel Webhook. Used when `type` is `webhook`. This parameter takes only one event. To specify more than one event, repeat this parameter for each event. For the list of possible events, see [Webhook Event Triggers](https://www.twilio.com/docs/chat/webhook-events#webhook-event-trigger).
//
// param: "ConfigurationFlowSid" (string) - The SID of the Studio [Flow](https://www.twilio.com/docs/studio/rest-api/flow) to call when an event in `configuration.filters` occurs. Used only when `type` = `studio`.
//
// param: "ConfigurationMethod" (string) - The HTTP method used to call `configuration.url`. Can be: `GET` or `POST` and the default is `POST`.
//
// param: "ConfigurationRetryCount" (int32) - The number of times to retry the webhook if the first attempt fails. Can be an integer between 0 and 3, inclusive, and the default is 0.
//
// param: "ConfigurationTriggers" ([]string) - A string that will cause us to call the webhook when it is present in a message body. This parameter takes only one trigger string. To specify more than one, repeat this parameter for each trigger string up to a total of 5 trigger strings. Used only when `type` = `trigger`.
//
// param: "ConfigurationUrl" (string) - The URL of the webhook to call using the `configuration.method`.
//
// return: ChatV2ServiceChannelChannelWebhook
func (c *DefaultApiService) UpdateChannelWebhook(ServiceSid string, ChannelSid string, Sid string, params *UpdateChannelWebhookParams) (*ChatV2ServiceChannelChannelWebhook, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ConfigurationFilters != nil {
		data.Set("Configuration.Filters", strings.Join(*params.ConfigurationFilters, ","))
	}
	if params != nil && params.ConfigurationFlowSid != nil {
		data.Set("Configuration.FlowSid", *params.ConfigurationFlowSid)
	}
	if params != nil && params.ConfigurationMethod != nil {
		data.Set("Configuration.Method", *params.ConfigurationMethod)
	}
	if params != nil && params.ConfigurationRetryCount != nil {
		data.Set("Configuration.RetryCount", fmt.Sprint(*params.ConfigurationRetryCount))
	}
	if params != nil && params.ConfigurationTriggers != nil {
		data.Set("Configuration.Triggers", strings.Join(*params.ConfigurationTriggers, ","))
	}
	if params != nil && params.ConfigurationUrl != nil {
		data.Set("Configuration.Url", *params.ConfigurationUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelChannelWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateCredentialParams Optional parameters for the method 'UpdateCredential'
type UpdateCredentialParams struct {
	ApiKey       *string `json:"ApiKey,omitempty"`
	Certificate  *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey   *string `json:"PrivateKey,omitempty"`
	Sandbox      *bool   `json:"Sandbox,omitempty"`
	Secret       *string `json:"Secret,omitempty"`
}

func (params *UpdateCredentialParams) SetApiKey(ApiKey string) *UpdateCredentialParams {
	params.ApiKey = &ApiKey
	return params
}
func (params *UpdateCredentialParams) SetCertificate(Certificate string) *UpdateCredentialParams {
	params.Certificate = &Certificate
	return params
}
func (params *UpdateCredentialParams) SetFriendlyName(FriendlyName string) *UpdateCredentialParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateCredentialParams) SetPrivateKey(PrivateKey string) *UpdateCredentialParams {
	params.PrivateKey = &PrivateKey
	return params
}
func (params *UpdateCredentialParams) SetSandbox(Sandbox bool) *UpdateCredentialParams {
	params.Sandbox = &Sandbox
	return params
}
func (params *UpdateCredentialParams) SetSecret(Secret string) *UpdateCredentialParams {
	params.Secret = &Secret
	return params
}

// UpdateCredential Method for UpdateCredential
//
// param: Sid The SID of the Credential resource to update.
//
// param: optional nil or *UpdateCredentialParams - Optional Parameters:
//
// param: "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
//
// param: "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A== -----END CERTIFICATE-----`
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// param: "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE KEY-----`
//
// param: "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
//
// param: "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
//
// return: ChatV2Credential
func (c *DefaultApiService) UpdateCredential(Sid string, params *UpdateCredentialParams) (*ChatV2Credential, error) {
	path := "/v2/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", fmt.Sprint(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateMemberParams Optional parameters for the method 'UpdateMember'
type UpdateMemberParams struct {
	XTwilioWebhookEnabled    *string    `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes               *string    `json:"Attributes,omitempty"`
	DateCreated              *time.Time `json:"DateCreated,omitempty"`
	DateUpdated              *time.Time `json:"DateUpdated,omitempty"`
	LastConsumedMessageIndex *int32     `json:"LastConsumedMessageIndex,omitempty"`
	LastConsumptionTimestamp *time.Time `json:"LastConsumptionTimestamp,omitempty"`
	RoleSid                  *string    `json:"RoleSid,omitempty"`
}

func (params *UpdateMemberParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *UpdateMemberParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *UpdateMemberParams) SetAttributes(Attributes string) *UpdateMemberParams {
	params.Attributes = &Attributes
	return params
}
func (params *UpdateMemberParams) SetDateCreated(DateCreated time.Time) *UpdateMemberParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *UpdateMemberParams) SetDateUpdated(DateUpdated time.Time) *UpdateMemberParams {
	params.DateUpdated = &DateUpdated
	return params
}
func (params *UpdateMemberParams) SetLastConsumedMessageIndex(LastConsumedMessageIndex int32) *UpdateMemberParams {
	params.LastConsumedMessageIndex = &LastConsumedMessageIndex
	return params
}
func (params *UpdateMemberParams) SetLastConsumptionTimestamp(LastConsumptionTimestamp time.Time) *UpdateMemberParams {
	params.LastConsumptionTimestamp = &LastConsumptionTimestamp
	return params
}
func (params *UpdateMemberParams) SetRoleSid(RoleSid string) *UpdateMemberParams {
	params.RoleSid = &RoleSid
	return params
}

// UpdateMember Method for UpdateMember
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Member resource in.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to update belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Member resource to update. This value can be either the Member's `sid` or its `identity` value.
//
// param: optional nil or *UpdateMemberParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this parameter should only be used when a Member is being recreated from a backup/separate source.
//
// param: "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
//
// param: "LastConsumedMessageIndex" (*int32) - The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) that the Member has read within the [Channel](https://www.twilio.com/docs/chat/channels).
//
// param: "LastConsumptionTimestamp" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
//
// param: "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/rest/service-resource).
//
// return: ChatV2ServiceChannelMember
func (c *DefaultApiService) UpdateMember(ServiceSid string, ChannelSid string, Sid string, params *UpdateMemberParams) (*ChatV2ServiceChannelMember, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", fmt.Sprint((*params.DateUpdated).Format(time.RFC3339)))
	}
	if params != nil && params.LastConsumedMessageIndex != nil {
		data.Set("LastConsumedMessageIndex", fmt.Sprint(*params.LastConsumedMessageIndex))
	}
	if params != nil && params.LastConsumptionTimestamp != nil {
		data.Set("LastConsumptionTimestamp", fmt.Sprint((*params.LastConsumptionTimestamp).Format(time.RFC3339)))
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateMessageParams Optional parameters for the method 'UpdateMessage'
type UpdateMessageParams struct {
	XTwilioWebhookEnabled *string    `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes            *string    `json:"Attributes,omitempty"`
	Body                  *string    `json:"Body,omitempty"`
	DateCreated           *time.Time `json:"DateCreated,omitempty"`
	DateUpdated           *time.Time `json:"DateUpdated,omitempty"`
	From                  *string    `json:"From,omitempty"`
	LastUpdatedBy         *string    `json:"LastUpdatedBy,omitempty"`
}

func (params *UpdateMessageParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *UpdateMessageParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *UpdateMessageParams) SetAttributes(Attributes string) *UpdateMessageParams {
	params.Attributes = &Attributes
	return params
}
func (params *UpdateMessageParams) SetBody(Body string) *UpdateMessageParams {
	params.Body = &Body
	return params
}
func (params *UpdateMessageParams) SetDateCreated(DateCreated time.Time) *UpdateMessageParams {
	params.DateCreated = &DateCreated
	return params
}
func (params *UpdateMessageParams) SetDateUpdated(DateUpdated time.Time) *UpdateMessageParams {
	params.DateUpdated = &DateUpdated
	return params
}
func (params *UpdateMessageParams) SetFrom(From string) *UpdateMessageParams {
	params.From = &From
	return params
}
func (params *UpdateMessageParams) SetLastUpdatedBy(LastUpdatedBy string) *UpdateMessageParams {
	params.LastUpdatedBy = &LastUpdatedBy
	return params
}

// UpdateMessage Method for UpdateMessage
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Message resource in.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Message resource to update belongs to. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: Sid The SID of the Message resource to update.
//
// param: optional nil or *UpdateMessageParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "Body" (string) - The message to send to the channel. Can be an empty string or `null`, which sets the value as an empty string. You can send structured data in the body by serializing it as a string.
//
// param: "DateCreated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service. This parameter should only be used when a Chat's history is being recreated from a backup/separate source.
//
// param: "DateUpdated" (time.Time) - The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
//
// param: "From" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the message's author.
//
// param: "LastUpdatedBy" (string) - The [Identity](https://www.twilio.com/docs/chat/identity) of the User who last updated the Message, if applicable.
//
// return: ChatV2ServiceChannelMessage
func (c *DefaultApiService) UpdateMessage(ServiceSid string, ChannelSid string, Sid string, params *UpdateMessageParams) (*ChatV2ServiceChannelMessage, error) {
	path := "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.DateCreated != nil {
		data.Set("DateCreated", fmt.Sprint((*params.DateCreated).Format(time.RFC3339)))
	}
	if params != nil && params.DateUpdated != nil {
		data.Set("DateUpdated", fmt.Sprint((*params.DateUpdated).Format(time.RFC3339)))
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.LastUpdatedBy != nil {
		data.Set("LastUpdatedBy", *params.LastUpdatedBy)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceChannelMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateRoleParams Optional parameters for the method 'UpdateRole'
type UpdateRoleParams struct {
	Permission *[]string `json:"Permission,omitempty"`
}

func (params *UpdateRoleParams) SetPermission(Permission []string) *UpdateRoleParams {
	params.Permission = &Permission
	return params
}

// UpdateRole Method for UpdateRole
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Role resource in.
//
// param: Sid The SID of the Role resource to update.
//
// param: optional nil or *UpdateRoleParams - Optional Parameters:
//
// param: "Permission" ([]string) - A permission that you grant to the role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. Note that the update action replaces all previously assigned permissions with those defined in the update action. To remove a permission, do not include it in the subsequent update action. The values for this parameter depend on the role's `type`.
//
// return: ChatV2ServiceRole
func (c *DefaultApiService) UpdateRole(ServiceSid string, Sid string, params *UpdateRoleParams) (*ChatV2ServiceRole, error) {
	path := "/v2/Services/{ServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Permission != nil {
		data.Set("Permission", strings.Join(*params.Permission, ","))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
	ConsumptionReportInterval                *int32    `json:"ConsumptionReportInterval,omitempty"`
	DefaultChannelCreatorRoleSid             *string   `json:"DefaultChannelCreatorRoleSid,omitempty"`
	DefaultChannelRoleSid                    *string   `json:"DefaultChannelRoleSid,omitempty"`
	DefaultServiceRoleSid                    *string   `json:"DefaultServiceRoleSid,omitempty"`
	FriendlyName                             *string   `json:"FriendlyName,omitempty"`
	LimitsChannelMembers                     *int32    `json:"Limits.ChannelMembers,omitempty"`
	LimitsUserChannels                       *int32    `json:"Limits.UserChannels,omitempty"`
	MediaCompatibilityMessage                *string   `json:"Media.CompatibilityMessage,omitempty"`
	NotificationsAddedToChannelEnabled       *bool     `json:"Notifications.AddedToChannel.Enabled,omitempty"`
	NotificationsAddedToChannelSound         *string   `json:"Notifications.AddedToChannel.Sound,omitempty"`
	NotificationsAddedToChannelTemplate      *string   `json:"Notifications.AddedToChannel.Template,omitempty"`
	NotificationsInvitedToChannelEnabled     *bool     `json:"Notifications.InvitedToChannel.Enabled,omitempty"`
	NotificationsInvitedToChannelSound       *string   `json:"Notifications.InvitedToChannel.Sound,omitempty"`
	NotificationsInvitedToChannelTemplate    *string   `json:"Notifications.InvitedToChannel.Template,omitempty"`
	NotificationsLogEnabled                  *bool     `json:"Notifications.LogEnabled,omitempty"`
	NotificationsNewMessageBadgeCountEnabled *bool     `json:"Notifications.NewMessage.BadgeCountEnabled,omitempty"`
	NotificationsNewMessageEnabled           *bool     `json:"Notifications.NewMessage.Enabled,omitempty"`
	NotificationsNewMessageSound             *string   `json:"Notifications.NewMessage.Sound,omitempty"`
	NotificationsNewMessageTemplate          *string   `json:"Notifications.NewMessage.Template,omitempty"`
	NotificationsRemovedFromChannelEnabled   *bool     `json:"Notifications.RemovedFromChannel.Enabled,omitempty"`
	NotificationsRemovedFromChannelSound     *string   `json:"Notifications.RemovedFromChannel.Sound,omitempty"`
	NotificationsRemovedFromChannelTemplate  *string   `json:"Notifications.RemovedFromChannel.Template,omitempty"`
	PostWebhookRetryCount                    *int32    `json:"PostWebhookRetryCount,omitempty"`
	PostWebhookUrl                           *string   `json:"PostWebhookUrl,omitempty"`
	PreWebhookRetryCount                     *int32    `json:"PreWebhookRetryCount,omitempty"`
	PreWebhookUrl                            *string   `json:"PreWebhookUrl,omitempty"`
	ReachabilityEnabled                      *bool     `json:"ReachabilityEnabled,omitempty"`
	ReadStatusEnabled                        *bool     `json:"ReadStatusEnabled,omitempty"`
	TypingIndicatorTimeout                   *int32    `json:"TypingIndicatorTimeout,omitempty"`
	WebhookFilters                           *[]string `json:"WebhookFilters,omitempty"`
	WebhookMethod                            *string   `json:"WebhookMethod,omitempty"`
}

func (params *UpdateServiceParams) SetConsumptionReportInterval(ConsumptionReportInterval int32) *UpdateServiceParams {
	params.ConsumptionReportInterval = &ConsumptionReportInterval
	return params
}
func (params *UpdateServiceParams) SetDefaultChannelCreatorRoleSid(DefaultChannelCreatorRoleSid string) *UpdateServiceParams {
	params.DefaultChannelCreatorRoleSid = &DefaultChannelCreatorRoleSid
	return params
}
func (params *UpdateServiceParams) SetDefaultChannelRoleSid(DefaultChannelRoleSid string) *UpdateServiceParams {
	params.DefaultChannelRoleSid = &DefaultChannelRoleSid
	return params
}
func (params *UpdateServiceParams) SetDefaultServiceRoleSid(DefaultServiceRoleSid string) *UpdateServiceParams {
	params.DefaultServiceRoleSid = &DefaultServiceRoleSid
	return params
}
func (params *UpdateServiceParams) SetFriendlyName(FriendlyName string) *UpdateServiceParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateServiceParams) SetLimitsChannelMembers(LimitsChannelMembers int32) *UpdateServiceParams {
	params.LimitsChannelMembers = &LimitsChannelMembers
	return params
}
func (params *UpdateServiceParams) SetLimitsUserChannels(LimitsUserChannels int32) *UpdateServiceParams {
	params.LimitsUserChannels = &LimitsUserChannels
	return params
}
func (params *UpdateServiceParams) SetMediaCompatibilityMessage(MediaCompatibilityMessage string) *UpdateServiceParams {
	params.MediaCompatibilityMessage = &MediaCompatibilityMessage
	return params
}
func (params *UpdateServiceParams) SetNotificationsAddedToChannelEnabled(NotificationsAddedToChannelEnabled bool) *UpdateServiceParams {
	params.NotificationsAddedToChannelEnabled = &NotificationsAddedToChannelEnabled
	return params
}
func (params *UpdateServiceParams) SetNotificationsAddedToChannelSound(NotificationsAddedToChannelSound string) *UpdateServiceParams {
	params.NotificationsAddedToChannelSound = &NotificationsAddedToChannelSound
	return params
}
func (params *UpdateServiceParams) SetNotificationsAddedToChannelTemplate(NotificationsAddedToChannelTemplate string) *UpdateServiceParams {
	params.NotificationsAddedToChannelTemplate = &NotificationsAddedToChannelTemplate
	return params
}
func (params *UpdateServiceParams) SetNotificationsInvitedToChannelEnabled(NotificationsInvitedToChannelEnabled bool) *UpdateServiceParams {
	params.NotificationsInvitedToChannelEnabled = &NotificationsInvitedToChannelEnabled
	return params
}
func (params *UpdateServiceParams) SetNotificationsInvitedToChannelSound(NotificationsInvitedToChannelSound string) *UpdateServiceParams {
	params.NotificationsInvitedToChannelSound = &NotificationsInvitedToChannelSound
	return params
}
func (params *UpdateServiceParams) SetNotificationsInvitedToChannelTemplate(NotificationsInvitedToChannelTemplate string) *UpdateServiceParams {
	params.NotificationsInvitedToChannelTemplate = &NotificationsInvitedToChannelTemplate
	return params
}
func (params *UpdateServiceParams) SetNotificationsLogEnabled(NotificationsLogEnabled bool) *UpdateServiceParams {
	params.NotificationsLogEnabled = &NotificationsLogEnabled
	return params
}
func (params *UpdateServiceParams) SetNotificationsNewMessageBadgeCountEnabled(NotificationsNewMessageBadgeCountEnabled bool) *UpdateServiceParams {
	params.NotificationsNewMessageBadgeCountEnabled = &NotificationsNewMessageBadgeCountEnabled
	return params
}
func (params *UpdateServiceParams) SetNotificationsNewMessageEnabled(NotificationsNewMessageEnabled bool) *UpdateServiceParams {
	params.NotificationsNewMessageEnabled = &NotificationsNewMessageEnabled
	return params
}
func (params *UpdateServiceParams) SetNotificationsNewMessageSound(NotificationsNewMessageSound string) *UpdateServiceParams {
	params.NotificationsNewMessageSound = &NotificationsNewMessageSound
	return params
}
func (params *UpdateServiceParams) SetNotificationsNewMessageTemplate(NotificationsNewMessageTemplate string) *UpdateServiceParams {
	params.NotificationsNewMessageTemplate = &NotificationsNewMessageTemplate
	return params
}
func (params *UpdateServiceParams) SetNotificationsRemovedFromChannelEnabled(NotificationsRemovedFromChannelEnabled bool) *UpdateServiceParams {
	params.NotificationsRemovedFromChannelEnabled = &NotificationsRemovedFromChannelEnabled
	return params
}
func (params *UpdateServiceParams) SetNotificationsRemovedFromChannelSound(NotificationsRemovedFromChannelSound string) *UpdateServiceParams {
	params.NotificationsRemovedFromChannelSound = &NotificationsRemovedFromChannelSound
	return params
}
func (params *UpdateServiceParams) SetNotificationsRemovedFromChannelTemplate(NotificationsRemovedFromChannelTemplate string) *UpdateServiceParams {
	params.NotificationsRemovedFromChannelTemplate = &NotificationsRemovedFromChannelTemplate
	return params
}
func (params *UpdateServiceParams) SetPostWebhookRetryCount(PostWebhookRetryCount int32) *UpdateServiceParams {
	params.PostWebhookRetryCount = &PostWebhookRetryCount
	return params
}
func (params *UpdateServiceParams) SetPostWebhookUrl(PostWebhookUrl string) *UpdateServiceParams {
	params.PostWebhookUrl = &PostWebhookUrl
	return params
}
func (params *UpdateServiceParams) SetPreWebhookRetryCount(PreWebhookRetryCount int32) *UpdateServiceParams {
	params.PreWebhookRetryCount = &PreWebhookRetryCount
	return params
}
func (params *UpdateServiceParams) SetPreWebhookUrl(PreWebhookUrl string) *UpdateServiceParams {
	params.PreWebhookUrl = &PreWebhookUrl
	return params
}
func (params *UpdateServiceParams) SetReachabilityEnabled(ReachabilityEnabled bool) *UpdateServiceParams {
	params.ReachabilityEnabled = &ReachabilityEnabled
	return params
}
func (params *UpdateServiceParams) SetReadStatusEnabled(ReadStatusEnabled bool) *UpdateServiceParams {
	params.ReadStatusEnabled = &ReadStatusEnabled
	return params
}
func (params *UpdateServiceParams) SetTypingIndicatorTimeout(TypingIndicatorTimeout int32) *UpdateServiceParams {
	params.TypingIndicatorTimeout = &TypingIndicatorTimeout
	return params
}
func (params *UpdateServiceParams) SetWebhookFilters(WebhookFilters []string) *UpdateServiceParams {
	params.WebhookFilters = &WebhookFilters
	return params
}
func (params *UpdateServiceParams) SetWebhookMethod(WebhookMethod string) *UpdateServiceParams {
	params.WebhookMethod = &WebhookMethod
	return params
}

// UpdateService Method for UpdateService
//
// param: Sid The SID of the Service resource to update.
//
// param: optional nil or *UpdateServiceParams - Optional Parameters:
//
// param: "ConsumptionReportInterval" (int32) - DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
//
// param: "DefaultChannelCreatorRoleSid" (string) - The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
//
// param: "DefaultChannelRoleSid" (string) - The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
//
// param: "DefaultServiceRoleSid" (string) - The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource.
//
// param: "LimitsChannelMembers" (int32) - The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
//
// param: "LimitsUserChannels" (int32) - The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
//
// param: "MediaCompatibilityMessage" (string) - The message to send when a media message has no text. Can be used as placeholder message.
//
// param: "NotificationsAddedToChannelEnabled" (bool) - Whether to send a notification when a member is added to a channel. The default is `false`.
//
// param: "NotificationsAddedToChannelSound" (string) - The name of the sound to play when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
//
// param: "NotificationsAddedToChannelTemplate" (string) - The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
//
// param: "NotificationsInvitedToChannelEnabled" (bool) - Whether to send a notification when a user is invited to a channel. The default is `false`.
//
// param: "NotificationsInvitedToChannelSound" (string) - The name of the sound to play when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
//
// param: "NotificationsInvitedToChannelTemplate" (string) - The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
//
// param: "NotificationsLogEnabled" (bool) - Whether to log notifications. The default is `false`.
//
// param: "NotificationsNewMessageBadgeCountEnabled" (bool) - Whether the new message badge is enabled. The default is `false`.
//
// param: "NotificationsNewMessageEnabled" (bool) - Whether to send a notification when a new message is added to a channel. The default is `false`.
//
// param: "NotificationsNewMessageSound" (string) - The name of the sound to play when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
//
// param: "NotificationsNewMessageTemplate" (string) - The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
//
// param: "NotificationsRemovedFromChannelEnabled" (bool) - Whether to send a notification to a user when they are removed from a channel. The default is `false`.
//
// param: "NotificationsRemovedFromChannelSound" (string) - The name of the sound to play to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
//
// param: "NotificationsRemovedFromChannelTemplate" (string) - The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
//
// param: "PostWebhookRetryCount" (int32) - The number of times to retry a call to the `post_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won't be retried.
//
// param: "PostWebhookUrl" (string) - The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
//
// param: "PreWebhookRetryCount" (int32) - The number of times to retry a call to the `pre_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won't be retried.
//
// param: "PreWebhookUrl" (string) - The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
//
// param: "ReachabilityEnabled" (bool) - Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
//
// param: "ReadStatusEnabled" (bool) - Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
//
// param: "TypingIndicatorTimeout" (int32) - How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
//
// param: "WebhookFilters" ([]string) - The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
//
// param: "WebhookMethod" (string) - The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
//
// return: ChatV2Service
func (c *DefaultApiService) UpdateService(Sid string, params *UpdateServiceParams) (*ChatV2Service, error) {
	path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ConsumptionReportInterval != nil {
		data.Set("ConsumptionReportInterval", fmt.Sprint(*params.ConsumptionReportInterval))
	}
	if params != nil && params.DefaultChannelCreatorRoleSid != nil {
		data.Set("DefaultChannelCreatorRoleSid", *params.DefaultChannelCreatorRoleSid)
	}
	if params != nil && params.DefaultChannelRoleSid != nil {
		data.Set("DefaultChannelRoleSid", *params.DefaultChannelRoleSid)
	}
	if params != nil && params.DefaultServiceRoleSid != nil {
		data.Set("DefaultServiceRoleSid", *params.DefaultServiceRoleSid)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.LimitsChannelMembers != nil {
		data.Set("Limits.ChannelMembers", fmt.Sprint(*params.LimitsChannelMembers))
	}
	if params != nil && params.LimitsUserChannels != nil {
		data.Set("Limits.UserChannels", fmt.Sprint(*params.LimitsUserChannels))
	}
	if params != nil && params.MediaCompatibilityMessage != nil {
		data.Set("Media.CompatibilityMessage", *params.MediaCompatibilityMessage)
	}
	if params != nil && params.NotificationsAddedToChannelEnabled != nil {
		data.Set("Notifications.AddedToChannel.Enabled", fmt.Sprint(*params.NotificationsAddedToChannelEnabled))
	}
	if params != nil && params.NotificationsAddedToChannelSound != nil {
		data.Set("Notifications.AddedToChannel.Sound", *params.NotificationsAddedToChannelSound)
	}
	if params != nil && params.NotificationsAddedToChannelTemplate != nil {
		data.Set("Notifications.AddedToChannel.Template", *params.NotificationsAddedToChannelTemplate)
	}
	if params != nil && params.NotificationsInvitedToChannelEnabled != nil {
		data.Set("Notifications.InvitedToChannel.Enabled", fmt.Sprint(*params.NotificationsInvitedToChannelEnabled))
	}
	if params != nil && params.NotificationsInvitedToChannelSound != nil {
		data.Set("Notifications.InvitedToChannel.Sound", *params.NotificationsInvitedToChannelSound)
	}
	if params != nil && params.NotificationsInvitedToChannelTemplate != nil {
		data.Set("Notifications.InvitedToChannel.Template", *params.NotificationsInvitedToChannelTemplate)
	}
	if params != nil && params.NotificationsLogEnabled != nil {
		data.Set("Notifications.LogEnabled", fmt.Sprint(*params.NotificationsLogEnabled))
	}
	if params != nil && params.NotificationsNewMessageBadgeCountEnabled != nil {
		data.Set("Notifications.NewMessage.BadgeCountEnabled", fmt.Sprint(*params.NotificationsNewMessageBadgeCountEnabled))
	}
	if params != nil && params.NotificationsNewMessageEnabled != nil {
		data.Set("Notifications.NewMessage.Enabled", fmt.Sprint(*params.NotificationsNewMessageEnabled))
	}
	if params != nil && params.NotificationsNewMessageSound != nil {
		data.Set("Notifications.NewMessage.Sound", *params.NotificationsNewMessageSound)
	}
	if params != nil && params.NotificationsNewMessageTemplate != nil {
		data.Set("Notifications.NewMessage.Template", *params.NotificationsNewMessageTemplate)
	}
	if params != nil && params.NotificationsRemovedFromChannelEnabled != nil {
		data.Set("Notifications.RemovedFromChannel.Enabled", fmt.Sprint(*params.NotificationsRemovedFromChannelEnabled))
	}
	if params != nil && params.NotificationsRemovedFromChannelSound != nil {
		data.Set("Notifications.RemovedFromChannel.Sound", *params.NotificationsRemovedFromChannelSound)
	}
	if params != nil && params.NotificationsRemovedFromChannelTemplate != nil {
		data.Set("Notifications.RemovedFromChannel.Template", *params.NotificationsRemovedFromChannelTemplate)
	}
	if params != nil && params.PostWebhookRetryCount != nil {
		data.Set("PostWebhookRetryCount", fmt.Sprint(*params.PostWebhookRetryCount))
	}
	if params != nil && params.PostWebhookUrl != nil {
		data.Set("PostWebhookUrl", *params.PostWebhookUrl)
	}
	if params != nil && params.PreWebhookRetryCount != nil {
		data.Set("PreWebhookRetryCount", fmt.Sprint(*params.PreWebhookRetryCount))
	}
	if params != nil && params.PreWebhookUrl != nil {
		data.Set("PreWebhookUrl", *params.PreWebhookUrl)
	}
	if params != nil && params.ReachabilityEnabled != nil {
		data.Set("ReachabilityEnabled", fmt.Sprint(*params.ReachabilityEnabled))
	}
	if params != nil && params.ReadStatusEnabled != nil {
		data.Set("ReadStatusEnabled", fmt.Sprint(*params.ReadStatusEnabled))
	}
	if params != nil && params.TypingIndicatorTimeout != nil {
		data.Set("TypingIndicatorTimeout", fmt.Sprint(*params.TypingIndicatorTimeout))
	}
	if params != nil && params.WebhookFilters != nil {
		data.Set("WebhookFilters", strings.Join(*params.WebhookFilters, ","))
	}
	if params != nil && params.WebhookMethod != nil {
		data.Set("WebhookMethod", *params.WebhookMethod)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateUserParams Optional parameters for the method 'UpdateUser'
type UpdateUserParams struct {
	XTwilioWebhookEnabled *string `json:"X-Twilio-Webhook-Enabled,omitempty"`
	Attributes            *string `json:"Attributes,omitempty"`
	FriendlyName          *string `json:"FriendlyName,omitempty"`
	RoleSid               *string `json:"RoleSid,omitempty"`
}

func (params *UpdateUserParams) SetXTwilioWebhookEnabled(XTwilioWebhookEnabled string) *UpdateUserParams {
	params.XTwilioWebhookEnabled = &XTwilioWebhookEnabled
	return params
}
func (params *UpdateUserParams) SetAttributes(Attributes string) *UpdateUserParams {
	params.Attributes = &Attributes
	return params
}
func (params *UpdateUserParams) SetFriendlyName(FriendlyName string) *UpdateUserParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateUserParams) SetRoleSid(RoleSid string) *UpdateUserParams {
	params.RoleSid = &RoleSid
	return params
}

// UpdateUser Method for UpdateUser
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the User resource in.
//
// param: Sid The SID of the User resource to update. This value can be either the `sid` or the `identity` of the User resource to update.
//
// param: optional nil or *UpdateUserParams - Optional Parameters:
//
// param: "XTwilioWebhookEnabled" (string) - The X-Twilio-Webhook-Enabled HTTP request header
//
// param: "Attributes" (string) - A valid JSON string that contains application-specific data.
//
// param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is often used for display purposes.
//
// param: "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the User.
//
// return: ChatV2ServiceUser
func (c *DefaultApiService) UpdateUser(ServiceSid string, Sid string, params *UpdateUserParams) (*ChatV2ServiceUser, error) {
	path := "/v2/Services/{ServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	if params != nil && params.XTwilioWebhookEnabled != nil {
		headers["X-Twilio-Webhook-Enabled"] = *params.XTwilioWebhookEnabled
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateUserChannelParams Optional parameters for the method 'UpdateUserChannel'
type UpdateUserChannelParams struct {
	LastConsumedMessageIndex *int32     `json:"LastConsumedMessageIndex,omitempty"`
	LastConsumptionTimestamp *time.Time `json:"LastConsumptionTimestamp,omitempty"`
	NotificationLevel        *string    `json:"NotificationLevel,omitempty"`
}

func (params *UpdateUserChannelParams) SetLastConsumedMessageIndex(LastConsumedMessageIndex int32) *UpdateUserChannelParams {
	params.LastConsumedMessageIndex = &LastConsumedMessageIndex
	return params
}
func (params *UpdateUserChannelParams) SetLastConsumptionTimestamp(LastConsumptionTimestamp time.Time) *UpdateUserChannelParams {
	params.LastConsumptionTimestamp = &LastConsumptionTimestamp
	return params
}
func (params *UpdateUserChannelParams) SetNotificationLevel(NotificationLevel string) *UpdateUserChannelParams {
	params.NotificationLevel = &NotificationLevel
	return params
}

// UpdateUserChannel Method for UpdateUserChannel
//
// param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the User Channel resource in.
//
// param: UserSid The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) to update the User Channel resource from. This value can be either the `sid` or the `identity` of the User resource.
//
// param: ChannelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) with the User Channel resource to update. This value can be the Channel resource's `sid` or `unique_name`.
//
// param: optional nil or *UpdateUserChannelParams - Optional Parameters:
//
// param: "LastConsumedMessageIndex" (*int32) - The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) in the [Channel](https://www.twilio.com/docs/chat/channels) that the Member has read.
//
// param: "LastConsumptionTimestamp" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
//
// param: "NotificationLevel" (string) - The push notification level to assign to the User Channel. Can be: `default` or `muted`.
//
// return: ChatV2ServiceUserUserChannel
func (c *DefaultApiService) UpdateUserChannel(ServiceSid string, UserSid string, ChannelSid string, params *UpdateUserChannelParams) (*ChatV2ServiceUserUserChannel, error) {
	path := "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.LastConsumedMessageIndex != nil {
		data.Set("LastConsumedMessageIndex", fmt.Sprint(*params.LastConsumedMessageIndex))
	}
	if params != nil && params.LastConsumptionTimestamp != nil {
		data.Set("LastConsumptionTimestamp", fmt.Sprint((*params.LastConsumptionTimestamp).Format(time.RFC3339)))
	}
	if params != nil && params.NotificationLevel != nil {
		data.Set("NotificationLevel", *params.NotificationLevel)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV2ServiceUserUserChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
