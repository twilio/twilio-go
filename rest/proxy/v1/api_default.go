/*
 * Twilio - Proxy
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateMessageInteractionParams Optional parameters for the method 'CreateMessageInteraction'
type CreateMessageInteractionParams struct {
    Body *string `json:"Body,omitempty"`
    MediaUrl *[]string `json:"MediaUrl,omitempty"`
}

/*
CreateMessageInteraction Method for CreateMessageInteraction
Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The &#x60;inbound&#x60; properties for the Interaction will always be empty.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) resource.
 * @param participantSid The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource.
 * @param optional nil or *CreateMessageInteractionOpts - Optional Parameters:
 * @param "Body" (string) - The message to send to the participant
 * @param "MediaUrl" ([]string) - Reserved. Not currently supported.
@return ProxyV1ServiceSessionParticipantMessageInteraction
*/
func (c *DefaultApiService) CreateMessageInteraction(serviceSid string, sessionSid string, participantSid string, params *CreateMessageInteractionParams) (*ProxyV1ServiceSessionParticipantMessageInteraction, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)
    path = strings.Replace(path, "{"+"ParticipantSid"+"}", participantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Body != nil {
        data.Set("Body", *params.Body)
    }
    if params != nil && params.MediaUrl != nil {
        data.Set("MediaUrl", *params.MediaUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionParticipantMessageInteraction{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateParticipantParams Optional parameters for the method 'CreateParticipant'
type CreateParticipantParams struct {
    FailOnParticipantConflict *bool `json:"FailOnParticipantConflict,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Identifier *string `json:"Identifier,omitempty"`
    ProxyIdentifier *string `json:"ProxyIdentifier,omitempty"`
    ProxyIdentifierSid *string `json:"ProxyIdentifierSid,omitempty"`
}

/*
CreateParticipant Method for CreateParticipant
Add a new Participant to the Session
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) resource.
 * @param optional nil or *CreateParticipantOpts - Optional Parameters:
 * @param "FailOnParticipantConflict" (bool) - [Experimental] For accounts with the ProxyAllowParticipantConflict account flag, setting to true enables per-request opt-in to allowing Proxy to reject a Participant create request that could cause the same Identifier/ProxyIdentifier pair to be active in multiple Sessions. Depending on the context, this could be a 409 error (Twilio error code 80623) or a 400 error (Twilio error code 80604). If not provided, requests will be allowed to succeed and a Debugger notification (80802) will be emitted. Having multiple, active Participants with the same Identifier/ProxyIdentifier pair causes calls and messages from affected Participants to be routed incorrectly. Please note, the default behavior for accounts without the ProxyAllowParticipantConflict flag is to reject the request as described.  This will eventually be the default for all accounts.
 * @param "FriendlyName" (string) - The string that you assigned to describe the participant. This value must be 255 characters or fewer. **This value should not have PII.**
 * @param "Identifier" (string) - The phone number of the Participant.
 * @param "ProxyIdentifier" (string) - The proxy phone number to use for the Participant. If not specified, Proxy will select a number from the pool.
 * @param "ProxyIdentifierSid" (string) - The SID of the Proxy Identifier to assign to the Participant.
@return ProxyV1ServiceSessionParticipant
*/
func (c *DefaultApiService) CreateParticipant(serviceSid string, sessionSid string, params *CreateParticipantParams) (*ProxyV1ServiceSessionParticipant, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FailOnParticipantConflict != nil {
        data.Set("FailOnParticipantConflict", string(*params.FailOnParticipantConflict))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Identifier != nil {
        data.Set("Identifier", *params.Identifier)
    }
    if params != nil && params.ProxyIdentifier != nil {
        data.Set("ProxyIdentifier", *params.ProxyIdentifier)
    }
    if params != nil && params.ProxyIdentifierSid != nil {
        data.Set("ProxyIdentifierSid", *params.ProxyIdentifierSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionParticipant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreatePhoneNumberParams Optional parameters for the method 'CreatePhoneNumber'
type CreatePhoneNumberParams struct {
    IsReserved *bool `json:"IsReserved,omitempty"`
    PhoneNumber *string `json:"PhoneNumber,omitempty"`
    Sid *string `json:"Sid,omitempty"`
}

/*
CreatePhoneNumber Method for CreatePhoneNumber
Add a Phone Number to a Service&#39;s Proxy Number Pool.
 * @param serviceSid The SID parent [Service](https://www.twilio.com/docs/proxy/api/service) resource of the new PhoneNumber resource.
 * @param optional nil or *CreatePhoneNumberOpts - Optional Parameters:
 * @param "IsReserved" (bool) - Whether the new phone number should be reserved and not be assigned to a participant using proxy pool logic. See [Reserved Phone Numbers](https://www.twilio.com/docs/proxy/reserved-phone-numbers) for more information.
 * @param "PhoneNumber" (string) - The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
 * @param "Sid" (string) - The SID of a Twilio [IncomingPhoneNumber](https://www.twilio.com/docs/phone-numbers/api/incomingphonenumber-resource) resource that represents the Twilio Number you would like to assign to your Proxy Service.
@return ProxyV1ServicePhoneNumber
*/
func (c *DefaultApiService) CreatePhoneNumber(serviceSid string, params *CreatePhoneNumberParams) (*ProxyV1ServicePhoneNumber, error) {
    path := "/v1/Services/{ServiceSid}/PhoneNumbers"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.IsReserved != nil {
        data.Set("IsReserved", string(*params.IsReserved))
    }
    if params != nil && params.PhoneNumber != nil {
        data.Set("PhoneNumber", *params.PhoneNumber)
    }
    if params != nil && params.Sid != nil {
        data.Set("Sid", *params.Sid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServicePhoneNumber{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    ChatInstanceSid *string `json:"ChatInstanceSid,omitempty"`
    DefaultTtl *int32 `json:"DefaultTtl,omitempty"`
    GeoMatchLevel *string `json:"GeoMatchLevel,omitempty"`
    InterceptCallbackUrl *string `json:"InterceptCallbackUrl,omitempty"`
    NumberSelectionBehavior *string `json:"NumberSelectionBehavior,omitempty"`
    OutOfSessionCallbackUrl *string `json:"OutOfSessionCallbackUrl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateService Method for CreateService
Create a new Service for Twilio Proxy
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "CallbackUrl" (string) - The URL we should call when the interaction status changes.
 * @param "ChatInstanceSid" (string) - The SID of the Chat Service Instance managed by Proxy Service. The Chat Service enables Proxy to forward SMS and channel messages to this chat instance. This is a one-to-one relationship.
 * @param "DefaultTtl" (int32) - The default `ttl` value to set for Sessions created in the Service. The TTL (time to live) is measured in seconds after the Session's last create or last Interaction. The default value of `0` indicates an unlimited Session length. You can override a Session's default TTL value by setting its `ttl` value.
 * @param "GeoMatchLevel" (string) - Where a proxy number must be located relative to the participant identifier. Can be: `country`, `area-code`, or `extended-area-code`. The default value is `country` and more specific areas than `country` are only available in North America.
 * @param "InterceptCallbackUrl" (string) - The URL we call on each interaction. If we receive a 403 status, we block the interaction; otherwise the interaction continues.
 * @param "NumberSelectionBehavior" (string) - The preference for Proxy Number selection in the Service instance. Can be: `prefer-sticky` or `avoid-sticky` and the default is `prefer-sticky`. `prefer-sticky` means that we will try and select the same Proxy Number for a given participant if they have previous [Sessions](https://www.twilio.com/docs/proxy/api/session), but we will not fail if that Proxy Number cannot be used.  `avoid-sticky` means that we will try to use different Proxy Numbers as long as that is possible within a given pool rather than try and use a previously assigned number.
 * @param "OutOfSessionCallbackUrl" (string) - The URL we should call when an inbound call or SMS action occurs on a closed or non-existent Session. If your server (or a Twilio [function](https://www.twilio.com/functions)) responds with valid [TwiML](https://www.twilio.com/docs/voice/twiml), we will process it. This means it is possible, for example, to play a message for a call, send an automated text message response, or redirect a call to another Phone Number. See [Out-of-Session Callback Response Guide](https://www.twilio.com/docs/proxy/out-session-callback-response-guide) for more information.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. **This value should not have PII.**
@return ProxyV1Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*ProxyV1Service, error) {
    path := "/v1/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.ChatInstanceSid != nil {
        data.Set("ChatInstanceSid", *params.ChatInstanceSid)
    }
    if params != nil && params.DefaultTtl != nil {
        data.Set("DefaultTtl", string(*params.DefaultTtl))
    }
    if params != nil && params.GeoMatchLevel != nil {
        data.Set("GeoMatchLevel", *params.GeoMatchLevel)
    }
    if params != nil && params.InterceptCallbackUrl != nil {
        data.Set("InterceptCallbackUrl", *params.InterceptCallbackUrl)
    }
    if params != nil && params.NumberSelectionBehavior != nil {
        data.Set("NumberSelectionBehavior", *params.NumberSelectionBehavior)
    }
    if params != nil && params.OutOfSessionCallbackUrl != nil {
        data.Set("OutOfSessionCallbackUrl", *params.OutOfSessionCallbackUrl)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSessionParams Optional parameters for the method 'CreateSession'
type CreateSessionParams struct {
    DateExpiry *time.Time `json:"DateExpiry,omitempty"`
    FailOnParticipantConflict *bool `json:"FailOnParticipantConflict,omitempty"`
    Mode *string `json:"Mode,omitempty"`
    Participants *[]map[string]interface{} `json:"Participants,omitempty"`
    Status *string `json:"Status,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSession Method for CreateSession
Create a new Session
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource.
 * @param optional nil or *CreateSessionOpts - Optional Parameters:
 * @param "DateExpiry" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session should expire. If this is value is present, it overrides the `ttl` value.
 * @param "FailOnParticipantConflict" (bool) - [Experimental] For accounts with the ProxyAllowParticipantConflict account flag, setting to true enables per-request opt-in to allowing Proxy to reject a Session create (with Participants) request that could cause the same Identifier/ProxyIdentifier pair to be active in multiple Sessions. Depending on the context, this could be a 409 error (Twilio error code 80623) or a 400 error (Twilio error code 80604). If not provided, requests will be allowed to succeed and a Debugger notification (80802) will be emitted. Having multiple, active Participants with the same Identifier/ProxyIdentifier pair causes calls and messages from affected Participants to be routed incorrectly. Please note, the default behavior for accounts without the ProxyAllowParticipantConflict flag is to reject the request as described.  This will eventually be the default for all accounts.
 * @param "Mode" (string) - The Mode of the Session. Can be: `message-only`, `voice-only`, or `voice-and-message` and the default value is `voice-and-message`.
 * @param "Participants" ([]map[string]interface{}) - The Participant objects to include in the new session.
 * @param "Status" (string) - The initial status of the Session. Can be: `open`, `in-progress`, `closed`, `failed`, or `unknown`. The default is `open` on create.
 * @param "Ttl" (int32) - The time, in seconds, when the session will expire. The time is measured from the last Session create or the Session's last Interaction.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. **This value should not have PII.**
@return ProxyV1ServiceSession
*/
func (c *DefaultApiService) CreateSession(serviceSid string, params *CreateSessionParams) (*ProxyV1ServiceSession, error) {
    path := "/v1/Services/{ServiceSid}/Sessions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DateExpiry != nil {
        data.Set("DateExpiry", string(*params.DateExpiry))
    }
    if params != nil && params.FailOnParticipantConflict != nil {
        data.Set("FailOnParticipantConflict", string(*params.FailOnParticipantConflict))
    }
    if params != nil && params.Mode != nil {
        data.Set("Mode", *params.Mode)
    }
    if params != nil && params.Participants != nil {
        v, err := json.Marshal(params.Participants)

        if err != nil {
            return nil, err
        }

        data.Set("Participants", string(v))
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSession{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateShortCodeParams Optional parameters for the method 'CreateShortCode'
type CreateShortCodeParams struct {
    Sid *string `json:"Sid,omitempty"`
}

/*
CreateShortCode Method for CreateShortCode
Add a Short Code to the Proxy Number Pool for the Service.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource.
 * @param optional nil or *CreateShortCodeOpts - Optional Parameters:
 * @param "Sid" (string) - The SID of a Twilio [ShortCode](https://www.twilio.com/docs/sms/api/short-code) resource that represents the short code you would like to assign to your Proxy Service.
@return ProxyV1ServiceShortCode
*/
func (c *DefaultApiService) CreateShortCode(serviceSid string, params *CreateShortCodeParams) (*ProxyV1ServiceShortCode, error) {
    path := "/v1/Services/{ServiceSid}/ShortCodes"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Sid != nil {
        data.Set("Sid", *params.Sid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceShortCode{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
DeleteInteraction Method for DeleteInteraction
Delete a specific Interaction.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to delete.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Interaction resource to delete.
*/
func (c *DefaultApiService) DeleteInteraction(serviceSid string, sessionSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteParticipant Method for DeleteParticipant
Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot be re-added. Participants are only permanently deleted when the [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to delete.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Participant resource to delete.
*/
func (c *DefaultApiService) DeleteParticipant(serviceSid string, sessionSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeletePhoneNumber Method for DeletePhoneNumber
Delete a specific Phone Number from a Service.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the PhoneNumber resource to delete.
 * @param sid The Twilio-provided string that uniquely identifies the PhoneNumber resource to delete.
*/
func (c *DefaultApiService) DeletePhoneNumber(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteService Method for DeleteService
Delete a specific Service.
 * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete.
*/
func (c *DefaultApiService) DeleteService(sid string) (error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSession Method for DeleteSession
Delete a specific Session.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to delete.
 * @param sid The Twilio-provided string that uniquely identifies the Session resource to delete.
*/
func (c *DefaultApiService) DeleteSession(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteShortCode Method for DeleteShortCode
Delete a specific Short Code from a Service.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource to delete the ShortCode resource from.
 * @param sid The Twilio-provided string that uniquely identifies the ShortCode resource to delete.
*/
func (c *DefaultApiService) DeleteShortCode(serviceSid string, sid string) (error) {
    path := "/v1/Services/{ServiceSid}/ShortCodes/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchInteraction Method for FetchInteraction
Retrieve a list of Interactions for a given [Session](https://www.twilio.com/docs/proxy/api/session).
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to fetch.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Interaction resource to fetch.
@return ProxyV1ServiceSessionInteraction
*/
func (c *DefaultApiService) FetchInteraction(serviceSid string, sessionSid string, sid string) (*ProxyV1ServiceSessionInteraction, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionInteraction{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchMessageInteraction Method for FetchMessageInteraction
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to fetch.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to fetch.
 * @param participantSid The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource.
 * @param sid The Twilio-provided string that uniquely identifies the MessageInteraction resource to fetch.
@return ProxyV1ServiceSessionParticipantMessageInteraction
*/
func (c *DefaultApiService) FetchMessageInteraction(serviceSid string, sessionSid string, participantSid string, sid string) (*ProxyV1ServiceSessionParticipantMessageInteraction, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)
    path = strings.Replace(path, "{"+"ParticipantSid"+"}", participantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionParticipantMessageInteraction{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchParticipant Method for FetchParticipant
Fetch a specific Participant.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to fetch.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Participant resource to fetch.
@return ProxyV1ServiceSessionParticipant
*/
func (c *DefaultApiService) FetchParticipant(serviceSid string, sessionSid string, sid string) (*ProxyV1ServiceSessionParticipant, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionParticipant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchPhoneNumber Method for FetchPhoneNumber
Fetch a specific Phone Number.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the PhoneNumber resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the PhoneNumber resource to fetch.
@return ProxyV1ServicePhoneNumber
*/
func (c *DefaultApiService) FetchPhoneNumber(serviceSid string, sid string) (*ProxyV1ServicePhoneNumber, error) {
    path := "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServicePhoneNumber{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchService Method for FetchService
Fetch a specific Service.
 * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch.
@return ProxyV1Service
*/
func (c *DefaultApiService) FetchService(sid string) (*ProxyV1Service, error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSession Method for FetchSession
Fetch a specific Session.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to fetch.
 * @param sid The Twilio-provided string that uniquely identifies the Session resource to fetch.
@return ProxyV1ServiceSession
*/
func (c *DefaultApiService) FetchSession(serviceSid string, sid string) (*ProxyV1ServiceSession, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSession{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchShortCode Method for FetchShortCode
Fetch a specific Short Code.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to fetch the resource from.
 * @param sid The Twilio-provided string that uniquely identifies the ShortCode resource to fetch.
@return ProxyV1ServiceShortCode
*/
func (c *DefaultApiService) FetchShortCode(serviceSid string, sid string) (*ProxyV1ServiceShortCode, error) {
    path := "/v1/Services/{ServiceSid}/ShortCodes/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceShortCode{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListInteractionParams Optional parameters for the method 'ListInteraction'
type ListInteractionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListInteraction Method for ListInteraction
Retrieve a list of all Interactions for a Session. A maximum of 100 records will be returned per page.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to read the resources from.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) to read the resources from.
 * @param optional nil or *ListInteractionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ProxyV1ServiceSessionInteractionReadResponse
*/
func (c *DefaultApiService) ListInteraction(serviceSid string, sessionSid string, params *ListInteractionParams) (*ProxyV1ServiceSessionInteractionReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionInteractionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListMessageInteractionParams Optional parameters for the method 'ListMessageInteraction'
type ListMessageInteractionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListMessageInteraction Method for ListMessageInteraction
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to read the resources from.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) to read the resources from.
 * @param participantSid The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) to read the resources from.
 * @param optional nil or *ListMessageInteractionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ProxyV1ServiceSessionParticipantMessageInteractionReadResponse
*/
func (c *DefaultApiService) ListMessageInteraction(serviceSid string, sessionSid string, participantSid string, params *ListMessageInteractionParams) (*ProxyV1ServiceSessionParticipantMessageInteractionReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)
    path = strings.Replace(path, "{"+"ParticipantSid"+"}", participantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionParticipantMessageInteractionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListParticipantParams Optional parameters for the method 'ListParticipant'
type ListParticipantParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListParticipant Method for ListParticipant
Retrieve a list of all Participants in a Session.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resources to read.
 * @param sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resources to read.
 * @param optional nil or *ListParticipantOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ProxyV1ServiceSessionParticipantReadResponse
*/
func (c *DefaultApiService) ListParticipant(serviceSid string, sessionSid string, params *ListParticipantParams) (*ProxyV1ServiceSessionParticipantReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"SessionSid"+"}", sessionSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionParticipantReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListPhoneNumberParams Optional parameters for the method 'ListPhoneNumber'
type ListPhoneNumberParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListPhoneNumber Method for ListPhoneNumber
Retrieve a list of all Phone Numbers in the Proxy Number Pool for a Service. A maximum of 100 records will be returned per page.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the PhoneNumber resources to read.
 * @param optional nil or *ListPhoneNumberOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ProxyV1ServicePhoneNumberReadResponse
*/
func (c *DefaultApiService) ListPhoneNumber(serviceSid string, params *ListPhoneNumberParams) (*ProxyV1ServicePhoneNumberReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/PhoneNumbers"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServicePhoneNumberReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will be returned per page.
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ProxyV1ServiceReadResponse
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*ProxyV1ServiceReadResponse, error) {
    path := "/v1/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSessionParams Optional parameters for the method 'ListSession'
type ListSessionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSession Method for ListSession
Retrieve a list of all Sessions for the Service. A maximum of 100 records will be returned per page.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to read.
 * @param optional nil or *ListSessionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ProxyV1ServiceSessionReadResponse
*/
func (c *DefaultApiService) ListSession(serviceSid string, params *ListSessionParams) (*ProxyV1ServiceSessionReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/Sessions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSessionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListShortCodeParams Optional parameters for the method 'ListShortCode'
type ListShortCodeParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListShortCode Method for ListShortCode
Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A maximum of 100 records will be returned per page.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to read the resources from.
 * @param optional nil or *ListShortCodeOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ProxyV1ServiceShortCodeReadResponse
*/
func (c *DefaultApiService) ListShortCode(serviceSid string, params *ListShortCodeParams) (*ProxyV1ServiceShortCodeReadResponse, error) {
    path := "/v1/Services/{ServiceSid}/ShortCodes"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceShortCodeReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdatePhoneNumberParams Optional parameters for the method 'UpdatePhoneNumber'
type UpdatePhoneNumberParams struct {
    IsReserved *bool `json:"IsReserved,omitempty"`
}

/*
UpdatePhoneNumber Method for UpdatePhoneNumber
Update a specific Proxy Number.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the PhoneNumber resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the PhoneNumber resource to update.
 * @param optional nil or *UpdatePhoneNumberOpts - Optional Parameters:
 * @param "IsReserved" (bool) - Whether the phone number should be reserved and not be assigned to a participant using proxy pool logic. See [Reserved Phone Numbers](https://www.twilio.com/docs/proxy/reserved-phone-numbers) for more information.
@return ProxyV1ServicePhoneNumber
*/
func (c *DefaultApiService) UpdatePhoneNumber(serviceSid string, sid string, params *UpdatePhoneNumberParams) (*ProxyV1ServicePhoneNumber, error) {
    path := "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.IsReserved != nil {
        data.Set("IsReserved", string(*params.IsReserved))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServicePhoneNumber{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    ChatInstanceSid *string `json:"ChatInstanceSid,omitempty"`
    DefaultTtl *int32 `json:"DefaultTtl,omitempty"`
    GeoMatchLevel *string `json:"GeoMatchLevel,omitempty"`
    InterceptCallbackUrl *string `json:"InterceptCallbackUrl,omitempty"`
    NumberSelectionBehavior *string `json:"NumberSelectionBehavior,omitempty"`
    OutOfSessionCallbackUrl *string `json:"OutOfSessionCallbackUrl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateService Method for UpdateService
Update a specific Service.
 * @param sid The Twilio-provided string that uniquely identifies the Service resource to update.
 * @param optional nil or *UpdateServiceOpts - Optional Parameters:
 * @param "CallbackUrl" (string) - The URL we should call when the interaction status changes.
 * @param "ChatInstanceSid" (string) - The SID of the Chat Service Instance managed by Proxy Service. The Chat Service enables Proxy to forward SMS and channel messages to this chat instance. This is a one-to-one relationship.
 * @param "DefaultTtl" (int32) - The default `ttl` value to set for Sessions created in the Service. The TTL (time to live) is measured in seconds after the Session's last create or last Interaction. The default value of `0` indicates an unlimited Session length. You can override a Session's default TTL value by setting its `ttl` value.
 * @param "GeoMatchLevel" (string) - Where a proxy number must be located relative to the participant identifier. Can be: `country`, `area-code`, or `extended-area-code`. The default value is `country` and more specific areas than `country` are only available in North America.
 * @param "InterceptCallbackUrl" (string) - The URL we call on each interaction. If we receive a 403 status, we block the interaction; otherwise the interaction continues.
 * @param "NumberSelectionBehavior" (string) - The preference for Proxy Number selection in the Service instance. Can be: `prefer-sticky` or `avoid-sticky` and the default is `prefer-sticky`. `prefer-sticky` means that we will try and select the same Proxy Number for a given participant if they have previous [Sessions](https://www.twilio.com/docs/proxy/api/session), but we will not fail if that Proxy Number cannot be used.  `avoid-sticky` means that we will try to use different Proxy Numbers as long as that is possible within a given pool rather than try and use a previously assigned number.
 * @param "OutOfSessionCallbackUrl" (string) - The URL we should call when an inbound call or SMS action occurs on a closed or non-existent Session. If your server (or a Twilio [function](https://www.twilio.com/functions)) responds with valid [TwiML](https://www.twilio.com/docs/voice/twiml), we will process it. This means it is possible, for example, to play a message for a call, send an automated text message response, or redirect a call to another Phone Number. See [Out-of-Session Callback Response Guide](https://www.twilio.com/docs/proxy/out-session-callback-response-guide) for more information.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. **This value should not have PII.**
@return ProxyV1Service
*/
func (c *DefaultApiService) UpdateService(sid string, params *UpdateServiceParams) (*ProxyV1Service, error) {
    path := "/v1/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.ChatInstanceSid != nil {
        data.Set("ChatInstanceSid", *params.ChatInstanceSid)
    }
    if params != nil && params.DefaultTtl != nil {
        data.Set("DefaultTtl", string(*params.DefaultTtl))
    }
    if params != nil && params.GeoMatchLevel != nil {
        data.Set("GeoMatchLevel", *params.GeoMatchLevel)
    }
    if params != nil && params.InterceptCallbackUrl != nil {
        data.Set("InterceptCallbackUrl", *params.InterceptCallbackUrl)
    }
    if params != nil && params.NumberSelectionBehavior != nil {
        data.Set("NumberSelectionBehavior", *params.NumberSelectionBehavior)
    }
    if params != nil && params.OutOfSessionCallbackUrl != nil {
        data.Set("OutOfSessionCallbackUrl", *params.OutOfSessionCallbackUrl)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSessionParams Optional parameters for the method 'UpdateSession'
type UpdateSessionParams struct {
    DateExpiry *time.Time `json:"DateExpiry,omitempty"`
    FailOnParticipantConflict *bool `json:"FailOnParticipantConflict,omitempty"`
    Status *string `json:"Status,omitempty"`
    Ttl *int32 `json:"Ttl,omitempty"`
}

/*
UpdateSession Method for UpdateSession
Update a specific Session.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the Session resource to update.
 * @param optional nil or *UpdateSessionOpts - Optional Parameters:
 * @param "DateExpiry" (time.Time) - The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session should expire. If this is value is present, it overrides the `ttl` value.
 * @param "FailOnParticipantConflict" (bool) - [Experimental] For accounts with the ProxyAllowParticipantConflict account flag, setting to true enables per-request opt-in to allowing Proxy to return a 400 error (Twilio error code 80604) when a request to set a Session to in-progress would cause Participants with the same Identifier/ProxyIdentifier pair to be active in multiple Sessions. If not provided, requests will be allowed to succeed, and a Debugger notification (80801) will be emitted. Having multiple, active Participants with the same Identifier/ProxyIdentifier pair causes calls and messages from affected Participants to be routed incorrectly. Please note, the default behavior for accounts without the ProxyAllowParticipantConflict flag is to reject the request as described.  This will eventually be the default for all accounts.
 * @param "Status" (string) - The new status of the resource. Can be: `in-progress` to re-open a session or `closed` to close a session.
 * @param "Ttl" (int32) - The time, in seconds, when the session will expire. The time is measured from the last Session create or the Session's last Interaction.
@return ProxyV1ServiceSession
*/
func (c *DefaultApiService) UpdateSession(serviceSid string, sid string, params *UpdateSessionParams) (*ProxyV1ServiceSession, error) {
    path := "/v1/Services/{ServiceSid}/Sessions/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DateExpiry != nil {
        data.Set("DateExpiry", string(*params.DateExpiry))
    }
    if params != nil && params.FailOnParticipantConflict != nil {
        data.Set("FailOnParticipantConflict", string(*params.FailOnParticipantConflict))
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.Ttl != nil {
        data.Set("Ttl", string(*params.Ttl))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceSession{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateShortCodeParams Optional parameters for the method 'UpdateShortCode'
type UpdateShortCodeParams struct {
    IsReserved *bool `json:"IsReserved,omitempty"`
}

/*
UpdateShortCode Method for UpdateShortCode
Update a specific Short Code.
 * @param serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to update.
 * @param sid The Twilio-provided string that uniquely identifies the ShortCode resource to update.
 * @param optional nil or *UpdateShortCodeOpts - Optional Parameters:
 * @param "IsReserved" (bool) - Whether the short code should be reserved and not be assigned to a participant using proxy pool logic. See [Reserved Phone Numbers](https://www.twilio.com/docs/proxy/reserved-phone-numbers) for more information.
@return ProxyV1ServiceShortCode
*/
func (c *DefaultApiService) UpdateShortCode(serviceSid string, sid string, params *UpdateShortCodeParams) (*ProxyV1ServiceShortCode, error) {
    path := "/v1/Services/{ServiceSid}/ShortCodes/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.IsReserved != nil {
        data.Set("IsReserved", string(*params.IsReserved))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ProxyV1ServiceShortCode{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
