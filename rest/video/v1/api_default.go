/*
 * Twilio - Video
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
	"strings"
	"time"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService {
		client: client,
		baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
	}
}
// CreateCompositionParams Optional parameters for the method 'CreateComposition'
type CreateCompositionParams struct {
	AudioSources *[]string `json:"AudioSources,omitempty"`
	AudioSourcesExcluded *[]string `json:"AudioSourcesExcluded,omitempty"`
	Format *string `json:"Format,omitempty"`
	Resolution *string `json:"Resolution,omitempty"`
	RoomSid *string `json:"RoomSid,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	Trim *bool `json:"Trim,omitempty"`
	VideoLayout *map[string]interface{} `json:"VideoLayout,omitempty"`
}

/*
CreateComposition Method for CreateComposition
 * @param optional nil or *CreateCompositionOpts - Optional Parameters:
 * @param "AudioSources" ([]string) - An array of track names from the same group room to merge into the new composition. Can include zero or more track names. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` includes `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
 * @param "AudioSourcesExcluded" ([]string) - An array of track names to exclude. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
 * @param "Format" (string) - The container format of the composition's media files. Can be: `mp4` or `webm` and the default is `webm`. If you specify `mp4` or `webm`, you must also specify one or more `audio_sources` and/or a `video_layout` element that contains a valid `video_sources` list, otherwise an error occurs.
 * @param "Resolution" (string) - A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.  The string's format is `{width}x{height}` where:   * 16 <= `{width}` <= 1280 * 16 <= `{height}` <= 1280 * `{width}` * `{height}` <= 921,600  Typical values are:   * HD = `1280x720` * PAL = `1024x576` * VGA = `640x480` * CIF = `320x240`  Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
 * @param "RoomSid" (string) - The SID of the Group Room with the media tracks to be used as composition sources.
 * @param "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
 * @param "Trim" (bool) - Whether to clip the intervals where there is no active media in the composition. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
 * @param "VideoLayout" (map[string]interface{}) - An object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
@return VideoV1Composition
*/
func (c *DefaultApiService) CreateComposition(params *CreateCompositionParams) (*VideoV1Composition, error) {
	path := "/v1/Compositions"


	data := url.Values{}
	headers := 0

	if params != nil && params.AudioSources != nil {
		data.Set("AudioSources",  strings.Join(*params.AudioSources, ","))
	}
	if params != nil && params.AudioSourcesExcluded != nil {
		data.Set("AudioSourcesExcluded",  strings.Join(*params.AudioSourcesExcluded, ","))
	}
	if params != nil && params.Format != nil {
		data.Set("Format", *params.Format) 
	}
	if params != nil && params.Resolution != nil {
		data.Set("Resolution", *params.Resolution) 
	}
	if params != nil && params.RoomSid != nil {
		data.Set("RoomSid", *params.RoomSid) 
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback) 
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod) 
	}
	if params != nil && params.Trim != nil {
		data.Set("Trim", fmt.Sprint(*params.Trim)) 
	}
	if params != nil && params.VideoLayout != nil {
		v, err := json.Marshal(params.VideoLayout)

		if err != nil {
			return nil, err
		}

		data.Set("VideoLayout", fmt.Sprint(v))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1Composition{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateCompositionHookParams Optional parameters for the method 'CreateCompositionHook'
type CreateCompositionHookParams struct {
	AudioSources *[]string `json:"AudioSources,omitempty"`
	AudioSourcesExcluded *[]string `json:"AudioSourcesExcluded,omitempty"`
	Enabled *bool `json:"Enabled,omitempty"`
	Format *string `json:"Format,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Resolution *string `json:"Resolution,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	Trim *bool `json:"Trim,omitempty"`
	VideoLayout *map[string]interface{} `json:"VideoLayout,omitempty"`
}

/*
CreateCompositionHook Method for CreateCompositionHook
 * @param optional nil or *CreateCompositionHookOpts - Optional Parameters:
 * @param "AudioSources" ([]string) - An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.
 * @param "AudioSourcesExcluded" ([]string) - An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
 * @param "Enabled" (bool) - Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook will never be triggered.
 * @param "Format" (string) - The container format of the media files used by the compositions created by the composition hook. Can be: `mp4` or `webm` and the default is `webm`. If `mp4` or `webm`, `audio_sources` must have one or more tracks and/or a `video_layout` element must contain a valid `video_sources` list, otherwise an error occurs.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account.
 * @param "Resolution" (string) - A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.  The string's format is `{width}x{height}` where:   * 16 <= `{width}` <= 1280 * 16 <= `{height}` <= 1280 * `{width}` * `{height}` <= 921,600  Typical values are:   * HD = `1280x720` * PAL = `1024x576` * VGA = `640x480` * CIF = `320x240`  Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
 * @param "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
 * @param "Trim" (bool) - Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
 * @param "VideoLayout" (map[string]interface{}) - An object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
@return VideoV1CompositionHook
*/
func (c *DefaultApiService) CreateCompositionHook(params *CreateCompositionHookParams) (*VideoV1CompositionHook, error) {
	path := "/v1/CompositionHooks"


	data := url.Values{}
	headers := 0

	if params != nil && params.AudioSources != nil {
		data.Set("AudioSources",  strings.Join(*params.AudioSources, ","))
	}
	if params != nil && params.AudioSourcesExcluded != nil {
		data.Set("AudioSourcesExcluded",  strings.Join(*params.AudioSourcesExcluded, ","))
	}
	if params != nil && params.Enabled != nil {
		data.Set("Enabled", fmt.Sprint(*params.Enabled)) 
	}
	if params != nil && params.Format != nil {
		data.Set("Format", *params.Format) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.Resolution != nil {
		data.Set("Resolution", *params.Resolution) 
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback) 
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod) 
	}
	if params != nil && params.Trim != nil {
		data.Set("Trim", fmt.Sprint(*params.Trim)) 
	}
	if params != nil && params.VideoLayout != nil {
		v, err := json.Marshal(params.VideoLayout)

		if err != nil {
			return nil, err
		}

		data.Set("VideoLayout", fmt.Sprint(v))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1CompositionHook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateCompositionSettingsParams Optional parameters for the method 'CreateCompositionSettings'
type CreateCompositionSettingsParams struct {
	AwsCredentialsSid *string `json:"AwsCredentialsSid,omitempty"`
	AwsS3Url *string `json:"AwsS3Url,omitempty"`
	AwsStorageEnabled *bool `json:"AwsStorageEnabled,omitempty"`
	EncryptionEnabled *bool `json:"EncryptionEnabled,omitempty"`
	EncryptionKeySid *string `json:"EncryptionKeySid,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateCompositionSettings Method for CreateCompositionSettings
 * @param optional nil or *CreateCompositionSettingsOpts - Optional Parameters:
 * @param "AwsCredentialsSid" (string) - The SID of the stored Credential resource.
 * @param "AwsS3Url" (string) - The URL of the AWS S3 bucket where the compositions should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/compositions`, where `compositions` is the path in which you want the compositions to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.
 * @param "AwsStorageEnabled" (bool) - Whether all compositions should be written to the `aws_s3_url`. When `false`, all compositions are stored in our cloud.
 * @param "EncryptionEnabled" (bool) - Whether all compositions should be stored in an encrypted form. The default is `false`.
 * @param "EncryptionKeySid" (string) - The SID of the Public Key resource to use for encryption.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource and show to the user in the console
@return VideoV1CompositionSettings
*/
func (c *DefaultApiService) CreateCompositionSettings(params *CreateCompositionSettingsParams) (*VideoV1CompositionSettings, error) {
	path := "/v1/CompositionSettings/Default"


	data := url.Values{}
	headers := 0

	if params != nil && params.AwsCredentialsSid != nil {
		data.Set("AwsCredentialsSid", *params.AwsCredentialsSid) 
	}
	if params != nil && params.AwsS3Url != nil {
		data.Set("AwsS3Url", *params.AwsS3Url) 
	}
	if params != nil && params.AwsStorageEnabled != nil {
		data.Set("AwsStorageEnabled", fmt.Sprint(*params.AwsStorageEnabled)) 
	}
	if params != nil && params.EncryptionEnabled != nil {
		data.Set("EncryptionEnabled", fmt.Sprint(*params.EncryptionEnabled)) 
	}
	if params != nil && params.EncryptionKeySid != nil {
		data.Set("EncryptionKeySid", *params.EncryptionKeySid) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1CompositionSettings{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateRecordingSettingsParams Optional parameters for the method 'CreateRecordingSettings'
type CreateRecordingSettingsParams struct {
	AwsCredentialsSid *string `json:"AwsCredentialsSid,omitempty"`
	AwsS3Url *string `json:"AwsS3Url,omitempty"`
	AwsStorageEnabled *bool `json:"AwsStorageEnabled,omitempty"`
	EncryptionEnabled *bool `json:"EncryptionEnabled,omitempty"`
	EncryptionKeySid *string `json:"EncryptionKeySid,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateRecordingSettings Method for CreateRecordingSettings
 * @param optional nil or *CreateRecordingSettingsOpts - Optional Parameters:
 * @param "AwsCredentialsSid" (string) - The SID of the stored Credential resource.
 * @param "AwsS3Url" (string) - The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/recordings`, where `recordings` is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.
 * @param "AwsStorageEnabled" (bool) - Whether all recordings should be written to the `aws_s3_url`. When `false`, all recordings are stored in our cloud.
 * @param "EncryptionEnabled" (bool) - Whether all recordings should be stored in an encrypted form. The default is `false`.
 * @param "EncryptionKeySid" (string) - The SID of the Public Key resource to use for encryption.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource and be shown to users in the console
@return VideoV1RecordingSettings
*/
func (c *DefaultApiService) CreateRecordingSettings(params *CreateRecordingSettingsParams) (*VideoV1RecordingSettings, error) {
	path := "/v1/RecordingSettings/Default"


	data := url.Values{}
	headers := 0

	if params != nil && params.AwsCredentialsSid != nil {
		data.Set("AwsCredentialsSid", *params.AwsCredentialsSid) 
	}
	if params != nil && params.AwsS3Url != nil {
		data.Set("AwsS3Url", *params.AwsS3Url) 
	}
	if params != nil && params.AwsStorageEnabled != nil {
		data.Set("AwsStorageEnabled", fmt.Sprint(*params.AwsStorageEnabled)) 
	}
	if params != nil && params.EncryptionEnabled != nil {
		data.Set("EncryptionEnabled", fmt.Sprint(*params.EncryptionEnabled)) 
	}
	if params != nil && params.EncryptionKeySid != nil {
		data.Set("EncryptionKeySid", *params.EncryptionKeySid) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RecordingSettings{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateRoomParams Optional parameters for the method 'CreateRoom'
type CreateRoomParams struct {
	EnableTurn *bool `json:"EnableTurn,omitempty"`
	MaxParticipants *int32 `json:"MaxParticipants,omitempty"`
	MediaRegion *string `json:"MediaRegion,omitempty"`
	RecordParticipantsOnConnect *bool `json:"RecordParticipantsOnConnect,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	Type *string `json:"Type,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
	VideoCodecs *[]string `json:"VideoCodecs,omitempty"`
}

/*
CreateRoom Method for CreateRoom
 * @param optional nil or *CreateRoomOpts - Optional Parameters:
 * @param "EnableTurn" (bool) - Deprecated, now always considered to be true.
 * @param "MaxParticipants" (int32) - The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants.
 * @param "MediaRegion" (string) - The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-address-whitelisting#group-rooms-media-servers). ***This feature is not available in `peer-to-peer` rooms.***
 * @param "RecordParticipantsOnConnect" (bool) - Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***
 * @param "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be `POST` or `GET`.
 * @param "Type" (string) - The type of room. Can be: `go`, `peer-to-peer`, `group-small`, or `group`. The default value is `group`.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.
 * @param "VideoCodecs" ([]string) - An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***
@return VideoV1Room
*/
func (c *DefaultApiService) CreateRoom(params *CreateRoomParams) (*VideoV1Room, error) {
	path := "/v1/Rooms"


	data := url.Values{}
	headers := 0

	if params != nil && params.EnableTurn != nil {
		data.Set("EnableTurn", fmt.Sprint(*params.EnableTurn)) 
	}
	if params != nil && params.MaxParticipants != nil {
		data.Set("MaxParticipants", fmt.Sprint(*params.MaxParticipants)) 
	}
	if params != nil && params.MediaRegion != nil {
		data.Set("MediaRegion", *params.MediaRegion) 
	}
	if params != nil && params.RecordParticipantsOnConnect != nil {
		data.Set("RecordParticipantsOnConnect", fmt.Sprint(*params.RecordParticipantsOnConnect)) 
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback) 
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod) 
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type) 
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName) 
	}
	if params != nil && params.VideoCodecs != nil {
		data.Set("VideoCodecs",  strings.Join(*params.VideoCodecs, ","))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1Room{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
DeleteComposition Method for DeleteComposition
Delete a Recording Composition resource identified by a Composition SID.
 * @param Sid The SID of the Composition resource to delete.
*/
func (c *DefaultApiService) DeleteComposition(Sid string) (error) {
	path := "/v1/Compositions/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteCompositionHook Method for DeleteCompositionHook
Delete a Recording CompositionHook resource identified by a &#x60;CompositionHook SID&#x60;.
 * @param Sid The SID of the CompositionHook resource to delete.
*/
func (c *DefaultApiService) DeleteCompositionHook(Sid string) (error) {
	path := "/v1/CompositionHooks/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteRecording Method for DeleteRecording
Delete a Recording resource identified by a Recording SID.
 * @param Sid The SID of the Recording resource to delete.
*/
func (c *DefaultApiService) DeleteRecording(Sid string) (error) {
	path := "/v1/Recordings/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteRoomRecording Method for DeleteRoomRecording
 * @param RoomSid The SID of the room with the RoomRecording resource to delete.
 * @param Sid The SID of the RoomRecording resource to delete.
*/
func (c *DefaultApiService) DeleteRoomRecording(RoomSid string, Sid string) (error) {
	path := "/v1/Rooms/{RoomSid}/Recordings/{Sid}"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
FetchComposition Method for FetchComposition
Returns a single Composition resource identified by a Composition SID.
 * @param Sid The SID of the Composition resource to fetch.
@return VideoV1Composition
*/
func (c *DefaultApiService) FetchComposition(Sid string) (*VideoV1Composition, error) {
	path := "/v1/Compositions/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1Composition{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchCompositionHook Method for FetchCompositionHook
Returns a single CompositionHook resource identified by a CompositionHook SID.
 * @param Sid The SID of the CompositionHook resource to fetch.
@return VideoV1CompositionHook
*/
func (c *DefaultApiService) FetchCompositionHook(Sid string) (*VideoV1CompositionHook, error) {
	path := "/v1/CompositionHooks/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1CompositionHook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchCompositionSettings Method for FetchCompositionSettings
@return VideoV1CompositionSettings
*/
func (c *DefaultApiService) FetchCompositionSettings() (*VideoV1CompositionSettings, error) {
	path := "/v1/CompositionSettings/Default"


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1CompositionSettings{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRecording Method for FetchRecording
Returns a single Recording resource identified by a Recording SID.
 * @param Sid The SID of the Recording resource to fetch.
@return VideoV1Recording
*/
func (c *DefaultApiService) FetchRecording(Sid string) (*VideoV1Recording, error) {
	path := "/v1/Recordings/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1Recording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRecordingSettings Method for FetchRecordingSettings
@return VideoV1RecordingSettings
*/
func (c *DefaultApiService) FetchRecordingSettings() (*VideoV1RecordingSettings, error) {
	path := "/v1/RecordingSettings/Default"


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RecordingSettings{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRoom Method for FetchRoom
 * @param Sid The SID of the Room resource to fetch.
@return VideoV1Room
*/
func (c *DefaultApiService) FetchRoom(Sid string) (*VideoV1Room, error) {
	path := "/v1/Rooms/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1Room{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRoomParticipant Method for FetchRoomParticipant
 * @param RoomSid The SID of the room with the Participant resource to fetch.
 * @param Sid The SID of the RoomParticipant resource to fetch.
@return VideoV1RoomRoomParticipant
*/
func (c *DefaultApiService) FetchRoomParticipant(RoomSid string, Sid string) (*VideoV1RoomRoomParticipant, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRoomParticipantPublishedTrack Method for FetchRoomParticipantPublishedTrack
Returns a single Track resource represented by TrackName or SID.
 * @param RoomSid The SID of the Room resource where the Track resource to fetch is published.
 * @param ParticipantSid The SID of the Participant resource with the published track to fetch.
 * @param Sid The SID of the RoomParticipantPublishedTrack resource to fetch.
@return VideoV1RoomRoomParticipantRoomParticipantPublishedTrack
*/
func (c *DefaultApiService) FetchRoomParticipantPublishedTrack(RoomSid string, ParticipantSid string, Sid string) (*VideoV1RoomRoomParticipantRoomParticipantPublishedTrack, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks/{Sid}"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"ParticipantSid"+"}", ParticipantSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipantRoomParticipantPublishedTrack{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRoomParticipantSubscribeRule Method for FetchRoomParticipantSubscribeRule
Returns a list of Subscribe Rules for the Participant.
 * @param RoomSid The SID of the Room resource where the subscribe rules to fetch apply.
 * @param ParticipantSid The SID of the Participant resource with the subscribe rules to fetch.
@return VideoV1RoomRoomParticipantRoomParticipantSubscribeRule
*/
func (c *DefaultApiService) FetchRoomParticipantSubscribeRule(RoomSid string, ParticipantSid string) (*VideoV1RoomRoomParticipantRoomParticipantSubscribeRule, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"ParticipantSid"+"}", ParticipantSid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipantRoomParticipantSubscribeRule{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRoomParticipantSubscribedTrack Method for FetchRoomParticipantSubscribedTrack
Returns a single Track resource represented by &#x60;track_sid&#x60;.  Note: This is one resource with the Video API that requires a SID, be Track Name on the subscriber side is not guaranteed to be unique.
 * @param RoomSid The SID of the Room where the Track resource to fetch is subscribed.
 * @param ParticipantSid The SID of the participant that subscribes to the Track resource to fetch.
 * @param Sid The SID of the RoomParticipantSubscribedTrack resource to fetch.
@return VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack
*/
func (c *DefaultApiService) FetchRoomParticipantSubscribedTrack(RoomSid string, ParticipantSid string, Sid string) (*VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks/{Sid}"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"ParticipantSid"+"}", ParticipantSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRoomRecording Method for FetchRoomRecording
 * @param RoomSid The SID of the Room resource with the recording to fetch.
 * @param Sid The SID of the RoomRecording resource to fetch.
@return VideoV1RoomRoomRecording
*/
func (c *DefaultApiService) FetchRoomRecording(RoomSid string, Sid string) (*VideoV1RoomRoomRecording, error) {
	path := "/v1/Rooms/{RoomSid}/Recordings/{Sid}"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomRecording{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRoomRecordingRule Method for FetchRoomRecordingRule
Returns a list of Recording Rules for the Room.
 * @param RoomSid The SID of the Room resource where the recording rules to fetch apply.
@return VideoV1RoomRoomRecordingRule
*/
func (c *DefaultApiService) FetchRoomRecordingRule(RoomSid string) (*VideoV1RoomRoomRecordingRule, error) {
	path := "/v1/Rooms/{RoomSid}/RecordingRules"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)


	data := url.Values{}
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomRecordingRule{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListCompositionParams Optional parameters for the method 'ListComposition'
type ListCompositionParams struct {
	Status *string `json:"Status,omitempty"`
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`
	RoomSid *string `json:"RoomSid,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListComposition Method for ListComposition
List of all Recording compositions.
 * @param optional nil or *ListCompositionOpts - Optional Parameters:
 * @param "Status" (string) - Read only Composition resources with this status. Can be: `enqueued`, `processing`, `completed`, `deleted`, or `failed`.
 * @param "DateCreatedAfter" (time.Time) - Read only Composition resources created on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone.
 * @param "DateCreatedBefore" (time.Time) - Read only Composition resources created before this ISO 8601 date-time with time zone.
 * @param "RoomSid" (string) - Read only Composition resources with this Room SID.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1CompositionReadResponse
*/
func (c *DefaultApiService) ListComposition(params *ListCompositionParams) (*VideoV1CompositionReadResponse, error) {
	path := "/v1/Compositions"


	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreatedAfter", fmt.Sprint(*params.DateCreatedAfter)) 
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreatedBefore", fmt.Sprint(*params.DateCreatedBefore)) 
	}
	if params != nil && params.RoomSid != nil {
		data.Set("RoomSid", *params.RoomSid) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1CompositionReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListCompositionHookParams Optional parameters for the method 'ListCompositionHook'
type ListCompositionHookParams struct {
	Enabled *bool `json:"Enabled,omitempty"`
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListCompositionHook Method for ListCompositionHook
List of all Recording CompositionHook resources.
 * @param optional nil or *ListCompositionHookOpts - Optional Parameters:
 * @param "Enabled" (bool) - Read only CompositionHook resources with an `enabled` value that matches this parameter.
 * @param "DateCreatedAfter" (time.Time) - Read only CompositionHook resources created on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
 * @param "DateCreatedBefore" (time.Time) - Read only CompositionHook resources created before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
 * @param "FriendlyName" (string) - Read only CompositionHook resources with friendly names that match this string. The match is not case sensitive and can include asterisk `*` characters as wildcard match.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1CompositionHookReadResponse
*/
func (c *DefaultApiService) ListCompositionHook(params *ListCompositionHookParams) (*VideoV1CompositionHookReadResponse, error) {
	path := "/v1/CompositionHooks"


	data := url.Values{}
	headers := 0

	if params != nil && params.Enabled != nil {
		data.Set("Enabled", fmt.Sprint(*params.Enabled)) 
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreatedAfter", fmt.Sprint(*params.DateCreatedAfter)) 
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreatedBefore", fmt.Sprint(*params.DateCreatedBefore)) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1CompositionHookReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListRecordingParams Optional parameters for the method 'ListRecording'
type ListRecordingParams struct {
	Status *string `json:"Status,omitempty"`
	SourceSid *string `json:"SourceSid,omitempty"`
	GroupingSid *[]string `json:"GroupingSid,omitempty"`
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`
	MediaType *string `json:"MediaType,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRecording Method for ListRecording
List of all Track recordings.
 * @param optional nil or *ListRecordingOpts - Optional Parameters:
 * @param "Status" (string) - Read only the recordings that have this status. Can be: `processing`, `completed`, or `deleted`.
 * @param "SourceSid" (string) - Read only the recordings that have this `source_sid`.
 * @param "GroupingSid" ([]string) - Read only recordings with this `grouping_sid`, which may include a `participant_sid` and/or a `room_sid`.
 * @param "DateCreatedAfter" (time.Time) - Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone.
 * @param "DateCreatedBefore" (time.Time) - Read only recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone, given as `YYYY-MM-DDThh:mm:ss+|-hh:mm` or `YYYY-MM-DDThh:mm:ssZ`.
 * @param "MediaType" (string) - Read only recordings that have this media type. Can be either `audio` or `video`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1RecordingReadResponse
*/
func (c *DefaultApiService) ListRecording(params *ListRecordingParams) (*VideoV1RecordingReadResponse, error) {
	path := "/v1/Recordings"


	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}
	if params != nil && params.SourceSid != nil {
		data.Set("SourceSid", *params.SourceSid) 
	}
	if params != nil && params.GroupingSid != nil {
		data.Set("GroupingSid",  strings.Join(*params.GroupingSid, ","))
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreatedAfter", fmt.Sprint(*params.DateCreatedAfter)) 
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreatedBefore", fmt.Sprint(*params.DateCreatedBefore)) 
	}
	if params != nil && params.MediaType != nil {
		data.Set("MediaType", *params.MediaType) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RecordingReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListRoomParams Optional parameters for the method 'ListRoom'
type ListRoomParams struct {
	Status *string `json:"Status,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRoom Method for ListRoom
 * @param optional nil or *ListRoomOpts - Optional Parameters:
 * @param "Status" (string) - Read only the rooms with this status. Can be: `in-progress` (default) or `completed`
 * @param "UniqueName" (string) - Read only rooms with the this `unique_name`.
 * @param "DateCreatedAfter" (time.Time) - Read only rooms that started on or after this date, given as `YYYY-MM-DD`.
 * @param "DateCreatedBefore" (time.Time) - Read only rooms that started before this date, given as `YYYY-MM-DD`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1RoomReadResponse
*/
func (c *DefaultApiService) ListRoom(params *ListRoomParams) (*VideoV1RoomReadResponse, error) {
	path := "/v1/Rooms"


	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName) 
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreatedAfter", fmt.Sprint(*params.DateCreatedAfter)) 
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreatedBefore", fmt.Sprint(*params.DateCreatedBefore)) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListRoomParticipantParams Optional parameters for the method 'ListRoomParticipant'
type ListRoomParticipantParams struct {
	Status *string `json:"Status,omitempty"`
	Identity *string `json:"Identity,omitempty"`
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRoomParticipant Method for ListRoomParticipant
 * @param RoomSid The SID of the room with the Participant resources to read.
 * @param optional nil or *ListRoomParticipantOpts - Optional Parameters:
 * @param "Status" (string) - Read only the participants with this status. Can be: `connected` or `disconnected`. For `in-progress` Rooms the default Status is `connected`, for `completed` Rooms only `disconnected` Participants are returned.
 * @param "Identity" (string) - Read only the Participants with this [User](https://www.twilio.com/docs/chat/rest/user-resource) `identity` value.
 * @param "DateCreatedAfter" (time.Time) - Read only Participants that started after this date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
 * @param "DateCreatedBefore" (time.Time) - Read only Participants that started before this date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1RoomRoomParticipantReadResponse
*/
func (c *DefaultApiService) ListRoomParticipant(RoomSid string, params *ListRoomParticipantParams) (*VideoV1RoomRoomParticipantReadResponse, error) {
	path := "/v1/Rooms/{RoomSid}/Participants"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity) 
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreatedAfter", fmt.Sprint(*params.DateCreatedAfter)) 
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreatedBefore", fmt.Sprint(*params.DateCreatedBefore)) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipantReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListRoomParticipantPublishedTrackParams Optional parameters for the method 'ListRoomParticipantPublishedTrack'
type ListRoomParticipantPublishedTrackParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRoomParticipantPublishedTrack Method for ListRoomParticipantPublishedTrack
Returns a list of tracks associated with a given Participant. Only &#x60;currently&#x60; Published Tracks are in the list resource.
 * @param RoomSid The SID of the Room resource where the Track resources to read are published.
 * @param ParticipantSid The SID of the Participant resource with the published tracks to read.
 * @param optional nil or *ListRoomParticipantPublishedTrackOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1RoomRoomParticipantRoomParticipantPublishedTrackReadResponse
*/
func (c *DefaultApiService) ListRoomParticipantPublishedTrack(RoomSid string, ParticipantSid string, params *ListRoomParticipantPublishedTrackParams) (*VideoV1RoomRoomParticipantRoomParticipantPublishedTrackReadResponse, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"ParticipantSid"+"}", ParticipantSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipantRoomParticipantPublishedTrackReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListRoomParticipantSubscribedTrackParams Optional parameters for the method 'ListRoomParticipantSubscribedTrack'
type ListRoomParticipantSubscribedTrackParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRoomParticipantSubscribedTrack Method for ListRoomParticipantSubscribedTrack
Returns a list of tracks that are subscribed for the participant.
 * @param RoomSid The SID of the Room resource with the Track resources to read.
 * @param ParticipantSid The SID of the participant that subscribes to the Track resources to read.
 * @param optional nil or *ListRoomParticipantSubscribedTrackOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackReadResponse
*/
func (c *DefaultApiService) ListRoomParticipantSubscribedTrack(RoomSid string, ParticipantSid string, params *ListRoomParticipantSubscribedTrackParams) (*VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackReadResponse, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"ParticipantSid"+"}", ParticipantSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipantRoomParticipantSubscribedTrackReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListRoomRecordingParams Optional parameters for the method 'ListRoomRecording'
type ListRoomRecordingParams struct {
	Status *string `json:"Status,omitempty"`
	SourceSid *string `json:"SourceSid,omitempty"`
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRoomRecording Method for ListRoomRecording
 * @param RoomSid The SID of the room with the RoomRecording resources to read.
 * @param optional nil or *ListRoomRecordingOpts - Optional Parameters:
 * @param "Status" (string) - Read only the recordings with this status. Can be: `processing`, `completed`, or `deleted`.
 * @param "SourceSid" (string) - Read only the recordings that have this `source_sid`.
 * @param "DateCreatedAfter" (time.Time) - Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
 * @param "DateCreatedBefore" (time.Time) - Read only Recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return VideoV1RoomRoomRecordingReadResponse
*/
func (c *DefaultApiService) ListRoomRecording(RoomSid string, params *ListRoomRecordingParams) (*VideoV1RoomRoomRecordingReadResponse, error) {
	path := "/v1/Rooms/{RoomSid}/Recordings"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}
	if params != nil && params.SourceSid != nil {
		data.Set("SourceSid", *params.SourceSid) 
	}
	if params != nil && params.DateCreatedAfter != nil {
		data.Set("DateCreatedAfter", fmt.Sprint(*params.DateCreatedAfter)) 
	}
	if params != nil && params.DateCreatedBefore != nil {
		data.Set("DateCreatedBefore", fmt.Sprint(*params.DateCreatedBefore)) 
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomRecordingReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateCompositionHookParams Optional parameters for the method 'UpdateCompositionHook'
type UpdateCompositionHookParams struct {
	AudioSources *[]string `json:"AudioSources,omitempty"`
	AudioSourcesExcluded *[]string `json:"AudioSourcesExcluded,omitempty"`
	Enabled *bool `json:"Enabled,omitempty"`
	Format *string `json:"Format,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Resolution *string `json:"Resolution,omitempty"`
	StatusCallback *string `json:"StatusCallback,omitempty"`
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	Trim *bool `json:"Trim,omitempty"`
	VideoLayout *map[string]interface{} `json:"VideoLayout,omitempty"`
}

/*
UpdateCompositionHook Method for UpdateCompositionHook
 * @param Sid The SID of the CompositionHook resource to update.
 * @param optional nil or *UpdateCompositionHookOpts - Optional Parameters:
 * @param "AudioSources" ([]string) - An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.
 * @param "AudioSourcesExcluded" ([]string) - An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
 * @param "Enabled" (bool) - Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook never triggers.
 * @param "Format" (string) - The container format of the media files used by the compositions created by the composition hook. Can be: `mp4` or `webm` and the default is `webm`. If `mp4` or `webm`, `audio_sources` must have one or more tracks and/or a `video_layout` element must contain a valid `video_sources` list, otherwise an error occurs.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account.
 * @param "Resolution" (string) - A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.  The string's format is `{width}x{height}` where:   * 16 <= `{width}` <= 1280 * 16 <= `{height}` <= 1280 * `{width}` * `{height}` <= 921,600  Typical values are:   * HD = `1280x720` * PAL = `1024x576` * VGA = `640x480` * CIF = `320x240`  Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
 * @param "StatusCallback" (string) - The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
 * @param "StatusCallbackMethod" (string) - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
 * @param "Trim" (bool) - Whether to clip the intervals where there is no active media in the compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
 * @param "VideoLayout" (map[string]interface{}) - A JSON object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
@return VideoV1CompositionHook
*/
func (c *DefaultApiService) UpdateCompositionHook(Sid string, params *UpdateCompositionHookParams) (*VideoV1CompositionHook, error) {
	path := "/v1/CompositionHooks/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.AudioSources != nil {
		data.Set("AudioSources",  strings.Join(*params.AudioSources, ","))
	}
	if params != nil && params.AudioSourcesExcluded != nil {
		data.Set("AudioSourcesExcluded",  strings.Join(*params.AudioSourcesExcluded, ","))
	}
	if params != nil && params.Enabled != nil {
		data.Set("Enabled", fmt.Sprint(*params.Enabled)) 
	}
	if params != nil && params.Format != nil {
		data.Set("Format", *params.Format) 
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.Resolution != nil {
		data.Set("Resolution", *params.Resolution) 
	}
	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback) 
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod) 
	}
	if params != nil && params.Trim != nil {
		data.Set("Trim", fmt.Sprint(*params.Trim)) 
	}
	if params != nil && params.VideoLayout != nil {
		v, err := json.Marshal(params.VideoLayout)

		if err != nil {
			return nil, err
		}

		data.Set("VideoLayout", fmt.Sprint(v))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1CompositionHook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateRoomParams Optional parameters for the method 'UpdateRoom'
type UpdateRoomParams struct {
	Status *string `json:"Status,omitempty"`
}

/*
UpdateRoom Method for UpdateRoom
 * @param Sid The SID of the Room resource to update.
 * @param optional nil or *UpdateRoomOpts - Optional Parameters:
 * @param "Status" (string) - The new status of the resource. Set to `completed` to end the room.
@return VideoV1Room
*/
func (c *DefaultApiService) UpdateRoom(Sid string, params *UpdateRoomParams) (*VideoV1Room, error) {
	path := "/v1/Rooms/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1Room{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateRoomParticipantParams Optional parameters for the method 'UpdateRoomParticipant'
type UpdateRoomParticipantParams struct {
	Status *string `json:"Status,omitempty"`
}

/*
UpdateRoomParticipant Method for UpdateRoomParticipant
 * @param RoomSid The SID of the room with the participant to update.
 * @param Sid The SID of the RoomParticipant resource to update.
 * @param optional nil or *UpdateRoomParticipantOpts - Optional Parameters:
 * @param "Status" (string) - The new status of the resource. Can be: `connected` or `disconnected`. For `in-progress` Rooms the default Status is `connected`, for `completed` Rooms only `disconnected` Participants are returned.
@return VideoV1RoomRoomParticipant
*/
func (c *DefaultApiService) UpdateRoomParticipant(RoomSid string, Sid string, params *UpdateRoomParticipantParams) (*VideoV1RoomRoomParticipant, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{Sid}"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipant{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateRoomParticipantSubscribeRuleParams Optional parameters for the method 'UpdateRoomParticipantSubscribeRule'
type UpdateRoomParticipantSubscribeRuleParams struct {
	Rules *map[string]interface{} `json:"Rules,omitempty"`
}

/*
UpdateRoomParticipantSubscribeRule Method for UpdateRoomParticipantSubscribeRule
Update the Subscribe Rules for the Participant
 * @param RoomSid The SID of the Room resource where the subscribe rules to update apply.
 * @param ParticipantSid The SID of the Participant resource to update the Subscribe Rules.
 * @param optional nil or *UpdateRoomParticipantSubscribeRuleOpts - Optional Parameters:
 * @param "Rules" (map[string]interface{}) - A JSON-encoded array of subscribe rules. See the [Specifying Subscribe Rules](https://www.twilio.com/docs/video/api/track-subscriptions#specifying-sr) section for further information.
@return VideoV1RoomRoomParticipantRoomParticipantSubscribeRule
*/
func (c *DefaultApiService) UpdateRoomParticipantSubscribeRule(RoomSid string, ParticipantSid string, params *UpdateRoomParticipantSubscribeRuleParams) (*VideoV1RoomRoomParticipantRoomParticipantSubscribeRule, error) {
	path := "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)
	path = strings.Replace(path, "{"+"ParticipantSid"+"}", ParticipantSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Rules != nil {
		v, err := json.Marshal(params.Rules)

		if err != nil {
			return nil, err
		}

		data.Set("Rules", fmt.Sprint(v))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomParticipantRoomParticipantSubscribeRule{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateRoomRecordingRuleParams Optional parameters for the method 'UpdateRoomRecordingRule'
type UpdateRoomRecordingRuleParams struct {
	Rules *map[string]interface{} `json:"Rules,omitempty"`
}

/*
UpdateRoomRecordingRule Method for UpdateRoomRecordingRule
Update the Recording Rules for the Room
 * @param RoomSid The SID of the Room resource where the recording rules to update apply.
 * @param optional nil or *UpdateRoomRecordingRuleOpts - Optional Parameters:
 * @param "Rules" (map[string]interface{}) - A JSON-encoded array of recording rules.
@return VideoV1RoomRoomRecordingRule
*/
func (c *DefaultApiService) UpdateRoomRecordingRule(RoomSid string, params *UpdateRoomRecordingRuleParams) (*VideoV1RoomRoomRecordingRule, error) {
	path := "/v1/Rooms/{RoomSid}/RecordingRules"
	path = strings.Replace(path, "{"+"RoomSid"+"}", RoomSid, -1)


	data := url.Values{}
	headers := 0

	if params != nil && params.Rules != nil {
		v, err := json.Marshal(params.Rules)

		if err != nil {
			return nil, err
		}

		data.Set("Rules", fmt.Sprint(v))
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VideoV1RoomRoomRecordingRule{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
