/*
 * Twilio - Preview
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
    twilio "github.com/twilio/twilio-go/client"
    "net/url"
    "strings"
    ""
)

type DefaultApiService struct {
    baseURL string
    client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
    return &DefaultApiService{
        client: client,
        baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
    }
}
// CreateAssistantParams Optional parameters for the method 'CreateAssistant'
type CreateAssistantParams struct {
    CallbackEvents *string `json:"CallbackEvents,omitempty"`
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    FallbackActions *map[string]interface{} `json:"FallbackActions,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    InitiationActions *map[string]interface{} `json:"InitiationActions,omitempty"`
    LogQueries *bool `json:"LogQueries,omitempty"`
    StyleSheet *map[string]interface{} `json:"StyleSheet,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateAssistant Method for CreateAssistant
 * @param optional nil or *CreateAssistantOpts - Optional Parameters:
 * @param "CallbackEvents" (string) - Space-separated list of callback events that will trigger callbacks.
 * @param "CallbackUrl" (string) - A user-provided URL to send event callbacks to.
 * @param "FallbackActions" (map[string]interface{}) - The JSON actions to be executed when the user's input is not recognized as matching any Task.
 * @param "FriendlyName" (string) - A text description for the Assistant. It is non-unique and can up to 255 characters long.
 * @param "InitiationActions" (map[string]interface{}) - The JSON actions to be executed on inbound phone calls when the Assistant has to say something first.
 * @param "LogQueries" (bool) - A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
 * @param "StyleSheet" (map[string]interface{}) - The JSON object that holds the style sheet for the assistant
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistant
*/
func (c *DefaultApiService) CreateAssistant(params *CreateAssistantParams) (*PreviewUnderstandAssistant, error) {
    path := "/understand/Assistants"

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackEvents != nil {
        data.Set("CallbackEvents", *params.CallbackEvents)
    }
    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.FallbackActions != nil {
        v, err := json.Marshal(params.FallbackActions)

        if err != nil {
            return nil, err
        }

        data.Set("FallbackActions", string(v))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.InitiationActions != nil {
        v, err := json.Marshal(params.InitiationActions)

        if err != nil {
            return nil, err
        }

        data.Set("InitiationActions", string(v))
    }
    if params != nil && params.LogQueries != nil {
        data.Set("LogQueries", string(*params.LogQueries))
    }
    if params != nil && params.StyleSheet != nil {
        v, err := json.Marshal(params.StyleSheet)

        if err != nil {
            return nil, err
        }

        data.Set("StyleSheet", string(v))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateAuthorizationDocumentParams Optional parameters for the method 'CreateAuthorizationDocument'
type CreateAuthorizationDocumentParams struct {
    AddressSid *string `json:"AddressSid,omitempty"`
    CcEmails *[]string `json:"CcEmails,omitempty"`
    ContactPhoneNumber *string `json:"ContactPhoneNumber,omitempty"`
    ContactTitle *string `json:"ContactTitle,omitempty"`
    Email *string `json:"Email,omitempty"`
    HostedNumberOrderSids *[]string `json:"HostedNumberOrderSids,omitempty"`
}

/*
CreateAuthorizationDocument Method for CreateAuthorizationDocument
Create an AuthorizationDocument for authorizing the hosting of phone number capabilities on Twilio&#39;s platform.
 * @param optional nil or *CreateAuthorizationDocumentOpts - Optional Parameters:
 * @param "AddressSid" (string) - A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument.
 * @param "CcEmails" ([]string) - Email recipients who will be informed when an Authorization Document has been sent and signed.
 * @param "ContactPhoneNumber" (string) - The contact phone number of the person authorized to sign the Authorization Document.
 * @param "ContactTitle" (string) - The title of the person authorized to sign the Authorization Document for this phone number.
 * @param "Email" (string) - Email that this AuthorizationDocument will be sent to for signing.
 * @param "HostedNumberOrderSids" ([]string) - A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio's platform.
@return PreviewHostedNumbersAuthorizationDocument
*/
func (c *DefaultApiService) CreateAuthorizationDocument(params *CreateAuthorizationDocumentParams) (*PreviewHostedNumbersAuthorizationDocument, error) {
    path := "/HostedNumbers/AuthorizationDocuments"

    data := url.Values{}
    headers := 0

    if params != nil && params.AddressSid != nil {
        data.Set("AddressSid", *params.AddressSid)
    }
    if params != nil && params.CcEmails != nil {
        data.Set("CcEmails", *params.CcEmails)
    }
    if params != nil && params.ContactPhoneNumber != nil {
        data.Set("ContactPhoneNumber", *params.ContactPhoneNumber)
    }
    if params != nil && params.ContactTitle != nil {
        data.Set("ContactTitle", *params.ContactTitle)
    }
    if params != nil && params.Email != nil {
        data.Set("Email", *params.Email)
    }
    if params != nil && params.HostedNumberOrderSids != nil {
        data.Set("HostedNumberOrderSids", *params.HostedNumberOrderSids)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersAuthorizationDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateCertificateParams Optional parameters for the method 'CreateCertificate'
type CreateCertificateParams struct {
    CertificateData *string `json:"CertificateData,omitempty"`
    DeviceSid *string `json:"DeviceSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateCertificate Method for CreateCertificate
Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
 * @param fleetSid
 * @param optional nil or *CreateCertificateOpts - Optional Parameters:
 * @param "CertificateData" (string) - Provides a URL encoded representation of the public certificate in PEM format.
 * @param "DeviceSid" (string) - Provides the unique string identifier of an existing Device to become authenticated with this Certificate credential.
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Certificate credential, up to 256 characters long.
@return PreviewDeployedDevicesFleetCertificate
*/
func (c *DefaultApiService) CreateCertificate(fleetSid string, params *CreateCertificateParams) (*PreviewDeployedDevicesFleetCertificate, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Certificates"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CertificateData != nil {
        data.Set("CertificateData", *params.CertificateData)
    }
    if params != nil && params.DeviceSid != nil {
        data.Set("DeviceSid", *params.DeviceSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetCertificate{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateChannelParams Optional parameters for the method 'CreateChannel'
type CreateChannelParams struct {
    PhoneNumberSid *string `json:"PhoneNumberSid,omitempty"`
}

/*
CreateChannel Method for CreateChannel
Associate a channel to a branded channel
 * @param brandedChannelSid The unique SID identifier of the Branded Channel. The given phone number is going to be assigned to this Branded Channel
 * @param optional nil or *CreateChannelOpts - Optional Parameters:
 * @param "PhoneNumberSid" (string) - The unique SID identifier of the Phone Number of the Phone number to be assigned to the Branded Channel.
@return PreviewTrustedCommsBrandedChannelChannel
*/
func (c *DefaultApiService) CreateChannel(brandedChannelSid string, params *CreateChannelParams) (*PreviewTrustedCommsBrandedChannelChannel, error) {
    path := "/TrustedComms/BrandedChannels/{BrandedChannelSid}/Channels"
    path = strings.Replace(path, "{"+"BrandedChannelSid"+"}", brandedChannelSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PhoneNumberSid != nil {
        data.Set("PhoneNumberSid", *params.PhoneNumberSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewTrustedCommsBrandedChannelChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateCommandParams Optional parameters for the method 'CreateCommand'
type CreateCommandParams struct {
    CallbackMethod *string `json:"CallbackMethod,omitempty"`
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    Command *string `json:"Command,omitempty"`
    CommandMode *string `json:"CommandMode,omitempty"`
    Device *string `json:"Device,omitempty"`
    IncludeSid *string `json:"IncludeSid,omitempty"`
    Sim *string `json:"Sim,omitempty"`
}

/*
CreateCommand Method for CreateCommand
 * @param optional nil or *CreateCommandOpts - Optional Parameters:
 * @param "CallbackMethod" (string) - 
 * @param "CallbackUrl" (string) - 
 * @param "Command" (string) - 
 * @param "CommandMode" (string) - 
 * @param "Device" (string) - 
 * @param "IncludeSid" (string) - 
 * @param "Sim" (string) - 
@return PreviewWirelessCommand
*/
func (c *DefaultApiService) CreateCommand(params *CreateCommandParams) (*PreviewWirelessCommand, error) {
    path := "/wireless/Commands"

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackMethod != nil {
        data.Set("CallbackMethod", *params.CallbackMethod)
    }
    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.Command != nil {
        data.Set("Command", *params.Command)
    }
    if params != nil && params.CommandMode != nil {
        data.Set("CommandMode", *params.CommandMode)
    }
    if params != nil && params.Device != nil {
        data.Set("Device", *params.Device)
    }
    if params != nil && params.IncludeSid != nil {
        data.Set("IncludeSid", *params.IncludeSid)
    }
    if params != nil && params.Sim != nil {
        data.Set("Sim", *params.Sim)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessCommand{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateDeploymentParams Optional parameters for the method 'CreateDeployment'
type CreateDeploymentParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    SyncServiceSid *string `json:"SyncServiceSid,omitempty"`
}

/*
CreateDeployment Method for CreateDeployment
Create a new Deployment in the Fleet, optionally giving it a friendly name and linking to a specific Twilio Sync service instance.
 * @param fleetSid
 * @param optional nil or *CreateDeploymentOpts - Optional Parameters:
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Deployment, up to 256 characters long.
 * @param "SyncServiceSid" (string) - Provides the unique string identifier of the Twilio Sync service instance that will be linked to and accessible by this Deployment.
@return PreviewDeployedDevicesFleetDeployment
*/
func (c *DefaultApiService) CreateDeployment(fleetSid string, params *CreateDeploymentParams) (*PreviewDeployedDevicesFleetDeployment, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Deployments"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.SyncServiceSid != nil {
        data.Set("SyncServiceSid", *params.SyncServiceSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDeployment{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateDeviceParams Optional parameters for the method 'CreateDevice'
type CreateDeviceParams struct {
    DeploymentSid *string `json:"DeploymentSid,omitempty"`
    Enabled *bool `json:"Enabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Identity *string `json:"Identity,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateDevice Method for CreateDevice
Create a new Device in the Fleet, optionally giving it a unique name, friendly name, and assigning to a Deployment and/or human identity.
 * @param fleetSid
 * @param optional nil or *CreateDeviceOpts - Optional Parameters:
 * @param "DeploymentSid" (string) - Specifies the unique string identifier of the Deployment group that this Device is going to be associated with.
 * @param "Enabled" (bool) - 
 * @param "FriendlyName" (string) - Provides a human readable descriptive text to be assigned to this Device, up to 256 characters long.
 * @param "Identity" (string) - Provides an arbitrary string identifier representing a human user to be associated with this Device, up to 256 characters long.
 * @param "UniqueName" (string) - Provides a unique and addressable name to be assigned to this Device, to be used in addition to SID, up to 128 characters long.
@return PreviewDeployedDevicesFleetDevice
*/
func (c *DefaultApiService) CreateDevice(fleetSid string, params *CreateDeviceParams) (*PreviewDeployedDevicesFleetDevice, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Devices"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeploymentSid != nil {
        data.Set("DeploymentSid", *params.DeploymentSid)
    }
    if params != nil && params.Enabled != nil {
        data.Set("Enabled", string(*params.Enabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDevice{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateDocumentParams Optional parameters for the method 'CreateDocument'
type CreateDocumentParams struct {
    Data *map[string]interface{} `json:"Data,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateDocument Method for CreateDocument
 * @param serviceSid
 * @param optional nil or *CreateDocumentOpts - Optional Parameters:
 * @param "Data" (map[string]interface{}) - 
 * @param "UniqueName" (string) - 
@return PreviewSyncServiceDocument
*/
func (c *DefaultApiService) CreateDocument(serviceSid string, params *CreateDocumentParams) (*PreviewSyncServiceDocument, error) {
    path := "/Sync/Services/{ServiceSid}/Documents"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateExportCustomJobParams Optional parameters for the method 'CreateExportCustomJob'
type CreateExportCustomJobParams struct {
    Email *string `json:"Email,omitempty"`
    EndDay *string `json:"EndDay,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    StartDay *string `json:"StartDay,omitempty"`
    WebhookMethod *string `json:"WebhookMethod,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
CreateExportCustomJob Method for CreateExportCustomJob
 * @param resourceType The type of communication – Messages or Calls
 * @param optional nil or *CreateExportCustomJobOpts - Optional Parameters:
 * @param "Email" (string) - The optional email to send the completion notification to
 * @param "EndDay" (string) - The end day for the custom export specified as a string in the format of yyyy-mm-dd. End day is inclusive and must be 2 days earlier than the current UTC day.
 * @param "FriendlyName" (string) - The friendly name specified when creating the job
 * @param "StartDay" (string) - The start day for the custom export specified as a string in the format of yyyy-mm-dd
 * @param "WebhookMethod" (string) - This is the method used to call the webhook on completion of the job. If this is supplied, `WebhookUrl` must also be supplied.
 * @param "WebhookUrl" (string) - The optional webhook url called on completion of the job. If this is supplied, `WebhookMethod` must also be supplied.
@return PreviewBulkExportsExportExportCustomJob
*/
func (c *DefaultApiService) CreateExportCustomJob(resourceType string, params *CreateExportCustomJobParams) (*PreviewBulkExportsExportExportCustomJob, error) {
    path := "/BulkExports/Exports/{ResourceType}/Jobs"
    path = strings.Replace(path, "{"+"ResourceType"+"}", resourceType, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Email != nil {
        data.Set("Email", *params.Email)
    }
    if params != nil && params.EndDay != nil {
        data.Set("EndDay", *params.EndDay)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.StartDay != nil {
        data.Set("StartDay", *params.StartDay)
    }
    if params != nil && params.WebhookMethod != nil {
        data.Set("WebhookMethod", *params.WebhookMethod)
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewBulkExportsExportExportCustomJob{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFieldParams Optional parameters for the method 'CreateField'
type CreateFieldParams struct {
    FieldType *string `json:"FieldType,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateField Method for CreateField
 * @param assistantSid The unique ID of the parent Assistant.
 * @param taskSid The unique ID of the Task associated with this Field.
 * @param optional nil or *CreateFieldOpts - Optional Parameters:
 * @param "FieldType" (string) - The unique name or sid of the FieldType. It can be any [Built-in Field Type](https://www.twilio.com/docs/assistant/api/built-in-field-types) or the unique_name or the Field Type sid of a custom Field Type.
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistantTaskField
*/
func (c *DefaultApiService) CreateField(assistantSid string, taskSid string, params *CreateFieldParams) (*PreviewUnderstandAssistantTaskField, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FieldType != nil {
        data.Set("FieldType", *params.FieldType)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskField{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFieldTypeParams Optional parameters for the method 'CreateFieldType'
type CreateFieldTypeParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateFieldType Method for CreateFieldType
 * @param assistantSid
 * @param optional nil or *CreateFieldTypeOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistantFieldType
*/
func (c *DefaultApiService) CreateFieldType(assistantSid string, params *CreateFieldTypeParams) (*PreviewUnderstandAssistantFieldType, error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantFieldType{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFieldValueParams Optional parameters for the method 'CreateFieldValue'
type CreateFieldValueParams struct {
    Language *string `json:"Language,omitempty"`
    SynonymOf *string `json:"SynonymOf,omitempty"`
    Value *string `json:"Value,omitempty"`
}

/*
CreateFieldValue Method for CreateFieldValue
 * @param assistantSid
 * @param fieldTypeSid
 * @param optional nil or *CreateFieldValueOpts - Optional Parameters:
 * @param "Language" (string) - An ISO language-country string of the value.
 * @param "SynonymOf" (string) - A value that indicates this field value is a synonym of. Empty if the value is not a synonym.
 * @param "Value" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistantFieldTypeFieldValue
*/
func (c *DefaultApiService) CreateFieldValue(assistantSid string, fieldTypeSid string, params *CreateFieldValueParams) (*PreviewUnderstandAssistantFieldTypeFieldValue, error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.SynonymOf != nil {
        data.Set("SynonymOf", *params.SynonymOf)
    }
    if params != nil && params.Value != nil {
        data.Set("Value", *params.Value)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantFieldTypeFieldValue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFleetParams Optional parameters for the method 'CreateFleet'
type CreateFleetParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateFleet Method for CreateFleet
Create a new Fleet for scoping of deployed devices within your account.
 * @param optional nil or *CreateFleetOpts - Optional Parameters:
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Fleet, up to 256 characters long.
@return PreviewDeployedDevicesFleet
*/
func (c *DefaultApiService) CreateFleet(params *CreateFleetParams) (*PreviewDeployedDevicesFleet, error) {
    path := "/DeployedDevices/Fleets"

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleet{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateHostedNumberOrderParams Optional parameters for the method 'CreateHostedNumberOrder'
type CreateHostedNumberOrderParams struct {
    AccountSid *string `json:"AccountSid,omitempty"`
    AddressSid *string `json:"AddressSid,omitempty"`
    CcEmails *[]string `json:"CcEmails,omitempty"`
    Email *string `json:"Email,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    PhoneNumber *string `json:"PhoneNumber,omitempty"`
    SmsApplicationSid *string `json:"SmsApplicationSid,omitempty"`
    SmsCapability *bool `json:"SmsCapability,omitempty"`
    SmsFallbackMethod *string `json:"SmsFallbackMethod,omitempty"`
    SmsFallbackUrl *string `json:"SmsFallbackUrl,omitempty"`
    SmsMethod *string `json:"SmsMethod,omitempty"`
    SmsUrl *string `json:"SmsUrl,omitempty"`
    StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
    StatusCallbackUrl *string `json:"StatusCallbackUrl,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    VerificationDocumentSid *string `json:"VerificationDocumentSid,omitempty"`
    VerificationType *string `json:"VerificationType,omitempty"`
}

/*
CreateHostedNumberOrder Method for CreateHostedNumberOrder
Host a phone number&#39;s capability on Twilio&#39;s platform.
 * @param optional nil or *CreateHostedNumberOrderOpts - Optional Parameters:
 * @param "AccountSid" (string) - This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to.
 * @param "AddressSid" (string) - Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number.
 * @param "CcEmails" ([]string) - Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to.
 * @param "Email" (string) - Optional. Email of the owner of this phone number that is being hosted.
 * @param "FriendlyName" (string) - A 64 character string that is a human readable text that describes this resource.
 * @param "PhoneNumber" (string) - The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format
 * @param "SmsApplicationSid" (string) - Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a `SmsApplicationSid` is present, Twilio will ignore all of the SMS urls above and use those set on the application.
 * @param "SmsCapability" (bool) - Used to specify that the SMS capability will be hosted on Twilio's platform.
 * @param "SmsFallbackMethod" (string) - The HTTP method that should be used to request the SmsFallbackUrl. Must be either `GET` or `POST`. This will be copied onto the IncomingPhoneNumber resource.
 * @param "SmsFallbackUrl" (string) - A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource.
 * @param "SmsMethod" (string) - The HTTP method that should be used to request the SmsUrl. Must be either `GET` or `POST`.  This will be copied onto the IncomingPhoneNumber resource.
 * @param "SmsUrl" (string) - The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource.
 * @param "StatusCallbackMethod" (string) - Optional. The Status Callback Method attached to the IncomingPhoneNumber resource.
 * @param "StatusCallbackUrl" (string) - Optional. The Status Callback URL attached to the IncomingPhoneNumber resource.
 * @param "UniqueName" (string) - Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID.
 * @param "VerificationDocumentSid" (string) - Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill.
 * @param "VerificationType" (string) - Optional. The method used for verifying ownership of the number to be hosted. One of phone-call (default) or phone-bill.
@return PreviewHostedNumbersHostedNumberOrder
*/
func (c *DefaultApiService) CreateHostedNumberOrder(params *CreateHostedNumberOrderParams) (*PreviewHostedNumbersHostedNumberOrder, error) {
    path := "/HostedNumbers/HostedNumberOrders"

    data := url.Values{}
    headers := 0

    if params != nil && params.AccountSid != nil {
        data.Set("AccountSid", *params.AccountSid)
    }
    if params != nil && params.AddressSid != nil {
        data.Set("AddressSid", *params.AddressSid)
    }
    if params != nil && params.CcEmails != nil {
        data.Set("CcEmails", *params.CcEmails)
    }
    if params != nil && params.Email != nil {
        data.Set("Email", *params.Email)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.PhoneNumber != nil {
        data.Set("PhoneNumber", *params.PhoneNumber)
    }
    if params != nil && params.SmsApplicationSid != nil {
        data.Set("SmsApplicationSid", *params.SmsApplicationSid)
    }
    if params != nil && params.SmsCapability != nil {
        data.Set("SmsCapability", string(*params.SmsCapability))
    }
    if params != nil && params.SmsFallbackMethod != nil {
        data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
    }
    if params != nil && params.SmsFallbackUrl != nil {
        data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
    }
    if params != nil && params.SmsMethod != nil {
        data.Set("SmsMethod", *params.SmsMethod)
    }
    if params != nil && params.SmsUrl != nil {
        data.Set("SmsUrl", *params.SmsUrl)
    }
    if params != nil && params.StatusCallbackMethod != nil {
        data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
    }
    if params != nil && params.StatusCallbackUrl != nil {
        data.Set("StatusCallbackUrl", *params.StatusCallbackUrl)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.VerificationDocumentSid != nil {
        data.Set("VerificationDocumentSid", *params.VerificationDocumentSid)
    }
    if params != nil && params.VerificationType != nil {
        data.Set("VerificationType", *params.VerificationType)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersHostedNumberOrder{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateInstalledAddOnParams Optional parameters for the method 'CreateInstalledAddOn'
type CreateInstalledAddOnParams struct {
    AcceptTermsOfService *bool `json:"AcceptTermsOfService,omitempty"`
    AvailableAddOnSid *string `json:"AvailableAddOnSid,omitempty"`
    Configuration *map[string]interface{} `json:"Configuration,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateInstalledAddOn Method for CreateInstalledAddOn
Install an Add-on for the Account specified.
 * @param optional nil or *CreateInstalledAddOnOpts - Optional Parameters:
 * @param "AcceptTermsOfService" (bool) - Whether the Terms of Service were accepted.
 * @param "AvailableAddOnSid" (string) - The SID of the AvaliableAddOn to install.
 * @param "Configuration" (map[string]interface{}) - The JSON object that represents the configuration of the new Add-on being installed.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be unique within the Account.
@return PreviewMarketplaceInstalledAddOn
*/
func (c *DefaultApiService) CreateInstalledAddOn(params *CreateInstalledAddOnParams) (*PreviewMarketplaceInstalledAddOn, error) {
    path := "/marketplace/InstalledAddOns"

    data := url.Values{}
    headers := 0

    if params != nil && params.AcceptTermsOfService != nil {
        data.Set("AcceptTermsOfService", string(*params.AcceptTermsOfService))
    }
    if params != nil && params.AvailableAddOnSid != nil {
        data.Set("AvailableAddOnSid", *params.AvailableAddOnSid)
    }
    if params != nil && params.Configuration != nil {
        v, err := json.Marshal(params.Configuration)

        if err != nil {
            return nil, err
        }

        data.Set("Configuration", string(v))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceInstalledAddOn{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateKeyParams Optional parameters for the method 'CreateKey'
type CreateKeyParams struct {
    DeviceSid *string `json:"DeviceSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateKey Method for CreateKey
Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
 * @param fleetSid
 * @param optional nil or *CreateKeyOpts - Optional Parameters:
 * @param "DeviceSid" (string) - Provides the unique string identifier of an existing Device to become authenticated with this Key credential.
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Key credential, up to 256 characters long.
@return PreviewDeployedDevicesFleetKey
*/
func (c *DefaultApiService) CreateKey(fleetSid string, params *CreateKeyParams) (*PreviewDeployedDevicesFleetKey, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Keys"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeviceSid != nil {
        data.Set("DeviceSid", *params.DeviceSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetKey{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateModelBuildParams Optional parameters for the method 'CreateModelBuild'
type CreateModelBuildParams struct {
    StatusCallback *string `json:"StatusCallback,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateModelBuild Method for CreateModelBuild
 * @param assistantSid
 * @param optional nil or *CreateModelBuildOpts - Optional Parameters:
 * @param "StatusCallback" (string) - 
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long. For example: v0.1
@return PreviewUnderstandAssistantModelBuild
*/
func (c *DefaultApiService) CreateModelBuild(assistantSid string, params *CreateModelBuildParams) (*PreviewUnderstandAssistantModelBuild, error) {
    path := "/understand/Assistants/{AssistantSid}/ModelBuilds"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.StatusCallback != nil {
        data.Set("StatusCallback", *params.StatusCallback)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantModelBuild{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateQueryParams Optional parameters for the method 'CreateQuery'
type CreateQueryParams struct {
    Field *string `json:"Field,omitempty"`
    Language *string `json:"Language,omitempty"`
    ModelBuild *string `json:"ModelBuild,omitempty"`
    Query *string `json:"Query,omitempty"`
    Tasks *string `json:"Tasks,omitempty"`
}

/*
CreateQuery Method for CreateQuery
 * @param assistantSid The unique ID of the parent Assistant.
 * @param optional nil or *CreateQueryOpts - Optional Parameters:
 * @param "Field" (string) - Constraints the query to a given Field with an task. Useful when you know the Field you are expecting. It accepts one field in the format *task-unique-name-1*:*field-unique-name*
 * @param "Language" (string) - An ISO language-country string of the sample.
 * @param "ModelBuild" (string) - The Model Build Sid or unique name of the Model Build to be queried.
 * @param "Query" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. It can be up to 2048 characters long.
 * @param "Tasks" (string) - Constraints the query to a set of tasks. Useful when you need to constrain the paths the user can take. Tasks should be comma separated *task-unique-name-1*, *task-unique-name-2*
@return PreviewUnderstandAssistantQuery
*/
func (c *DefaultApiService) CreateQuery(assistantSid string, params *CreateQueryParams) (*PreviewUnderstandAssistantQuery, error) {
    path := "/understand/Assistants/{AssistantSid}/Queries"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Field != nil {
        data.Set("Field", *params.Field)
    }
    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.ModelBuild != nil {
        data.Set("ModelBuild", *params.ModelBuild)
    }
    if params != nil && params.Query != nil {
        data.Set("Query", *params.Query)
    }
    if params != nil && params.Tasks != nil {
        data.Set("Tasks", *params.Tasks)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantQuery{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateRatePlanParams Optional parameters for the method 'CreateRatePlan'
type CreateRatePlanParams struct {
    CommandsEnabled *bool `json:"CommandsEnabled,omitempty"`
    DataEnabled *bool `json:"DataEnabled,omitempty"`
    DataLimit *int32 `json:"DataLimit,omitempty"`
    DataMetering *string `json:"DataMetering,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    InternationalRoaming *[]string `json:"InternationalRoaming,omitempty"`
    MessagingEnabled *bool `json:"MessagingEnabled,omitempty"`
    NationalRoamingEnabled *bool `json:"NationalRoamingEnabled,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    VoiceEnabled *bool `json:"VoiceEnabled,omitempty"`
}

/*
CreateRatePlan Method for CreateRatePlan
 * @param optional nil or *CreateRatePlanOpts - Optional Parameters:
 * @param "CommandsEnabled" (bool) - 
 * @param "DataEnabled" (bool) - 
 * @param "DataLimit" (int32) - 
 * @param "DataMetering" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "InternationalRoaming" ([]string) - 
 * @param "MessagingEnabled" (bool) - 
 * @param "NationalRoamingEnabled" (bool) - 
 * @param "UniqueName" (string) - 
 * @param "VoiceEnabled" (bool) - 
@return PreviewWirelessRatePlan
*/
func (c *DefaultApiService) CreateRatePlan(params *CreateRatePlanParams) (*PreviewWirelessRatePlan, error) {
    path := "/wireless/RatePlans"

    data := url.Values{}
    headers := 0

    if params != nil && params.CommandsEnabled != nil {
        data.Set("CommandsEnabled", string(*params.CommandsEnabled))
    }
    if params != nil && params.DataEnabled != nil {
        data.Set("DataEnabled", string(*params.DataEnabled))
    }
    if params != nil && params.DataLimit != nil {
        data.Set("DataLimit", string(*params.DataLimit))
    }
    if params != nil && params.DataMetering != nil {
        data.Set("DataMetering", *params.DataMetering)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.InternationalRoaming != nil {
        data.Set("InternationalRoaming", *params.InternationalRoaming)
    }
    if params != nil && params.MessagingEnabled != nil {
        data.Set("MessagingEnabled", string(*params.MessagingEnabled))
    }
    if params != nil && params.NationalRoamingEnabled != nil {
        data.Set("NationalRoamingEnabled", string(*params.NationalRoamingEnabled))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.VoiceEnabled != nil {
        data.Set("VoiceEnabled", string(*params.VoiceEnabled))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessRatePlan{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSampleParams Optional parameters for the method 'CreateSample'
type CreateSampleParams struct {
    Language *string `json:"Language,omitempty"`
    SourceChannel *string `json:"SourceChannel,omitempty"`
    TaggedText *string `json:"TaggedText,omitempty"`
}

/*
CreateSample Method for CreateSample
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Sample.
 * @param optional nil or *CreateSampleOpts - Optional Parameters:
 * @param "Language" (string) - An ISO language-country string of the sample.
 * @param "SourceChannel" (string) - The communication channel the sample was captured. It can be: *voice*, *sms*, *chat*, *alexa*, *google-assistant*, or *slack*. If not included the value will be null
 * @param "TaggedText" (string) - The text example of how end-users may express this task. The sample may contain Field tag blocks.
@return PreviewUnderstandAssistantTaskSample
*/
func (c *DefaultApiService) CreateSample(assistantSid string, taskSid string, params *CreateSampleParams) (*PreviewUnderstandAssistantTaskSample, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.SourceChannel != nil {
        data.Set("SourceChannel", *params.SourceChannel)
    }
    if params != nil && params.TaggedText != nil {
        data.Set("TaggedText", *params.TaggedText)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskSample{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
    AclEnabled *bool `json:"AclEnabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    ReachabilityWebhooksEnabled *bool `json:"ReachabilityWebhooksEnabled,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
CreateService Method for CreateService
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "AclEnabled" (bool) - 
 * @param "FriendlyName" (string) - 
 * @param "ReachabilityWebhooksEnabled" (bool) - 
 * @param "WebhookUrl" (string) - 
@return PreviewSyncService
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*PreviewSyncService, error) {
    path := "/Sync/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.AclEnabled != nil {
        data.Set("AclEnabled", string(*params.AclEnabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.ReachabilityWebhooksEnabled != nil {
        data.Set("ReachabilityWebhooksEnabled", string(*params.ReachabilityWebhooksEnabled))
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncService{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncListParams Optional parameters for the method 'CreateSyncList'
type CreateSyncListParams struct {
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncList Method for CreateSyncList
 * @param serviceSid
 * @param optional nil or *CreateSyncListOpts - Optional Parameters:
 * @param "UniqueName" (string) - 
@return PreviewSyncServiceSyncList
*/
func (c *DefaultApiService) CreateSyncList(serviceSid string, params *CreateSyncListParams) (*PreviewSyncServiceSyncList, error) {
    path := "/Sync/Services/{ServiceSid}/Lists"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncListItemParams Optional parameters for the method 'CreateSyncListItem'
type CreateSyncListItemParams struct {
    Data *map[string]interface{} `json:"Data,omitempty"`
}

/*
CreateSyncListItem Method for CreateSyncListItem
 * @param serviceSid
 * @param listSid
 * @param optional nil or *CreateSyncListItemOpts - Optional Parameters:
 * @param "Data" (map[string]interface{}) - 
@return PreviewSyncServiceSyncListSyncListItem
*/
func (c *DefaultApiService) CreateSyncListItem(serviceSid string, listSid string, params *CreateSyncListItemParams) (*PreviewSyncServiceSyncListSyncListItem, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListSyncListItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncMapParams Optional parameters for the method 'CreateSyncMap'
type CreateSyncMapParams struct {
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateSyncMap Method for CreateSyncMap
 * @param serviceSid
 * @param optional nil or *CreateSyncMapOpts - Optional Parameters:
 * @param "UniqueName" (string) - 
@return PreviewSyncServiceSyncMap
*/
func (c *DefaultApiService) CreateSyncMap(serviceSid string, params *CreateSyncMapParams) (*PreviewSyncServiceSyncMap, error) {
    path := "/Sync/Services/{ServiceSid}/Maps"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMap{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateSyncMapItemParams Optional parameters for the method 'CreateSyncMapItem'
type CreateSyncMapItemParams struct {
    Data *map[string]interface{} `json:"Data,omitempty"`
    Key *string `json:"Key,omitempty"`
}

/*
CreateSyncMapItem Method for CreateSyncMapItem
 * @param serviceSid
 * @param mapSid
 * @param optional nil or *CreateSyncMapItemOpts - Optional Parameters:
 * @param "Data" (map[string]interface{}) - 
 * @param "Key" (string) - 
@return PreviewSyncServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) CreateSyncMapItem(serviceSid string, mapSid string, params *CreateSyncMapItemParams) (*PreviewSyncServiceSyncMapSyncMapItem, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }
    if params != nil && params.Key != nil {
        data.Set("Key", *params.Key)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapSyncMapItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateTaskParams Optional parameters for the method 'CreateTask'
type CreateTaskParams struct {
    Actions *map[string]interface{} `json:"Actions,omitempty"`
    ActionsUrl *string `json:"ActionsUrl,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
CreateTask Method for CreateTask
 * @param assistantSid The unique ID of the Assistant.
 * @param optional nil or *CreateTaskOpts - Optional Parameters:
 * @param "Actions" (map[string]interface{}) - A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.
 * @param "ActionsUrl" (string) - User-provided HTTP endpoint where from the assistant fetches actions
 * @param "FriendlyName" (string) - A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistantTask
*/
func (c *DefaultApiService) CreateTask(assistantSid string, params *CreateTaskParams) (*PreviewUnderstandAssistantTask, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Actions != nil {
        v, err := json.Marshal(params.Actions)

        if err != nil {
            return nil, err
        }

        data.Set("Actions", string(v))
    }
    if params != nil && params.ActionsUrl != nil {
        data.Set("ActionsUrl", *params.ActionsUrl)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
DeleteAssistant Method for DeleteAssistant
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteAssistant(sid string) (error) {
    path := "/understand/Assistants/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteCertificate Method for DeleteCertificate
Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Certificate credential resource.
*/
func (c *DefaultApiService) DeleteCertificate(fleetSid string, sid string) (error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteDeployment Method for DeleteDeployment
Delete a specific Deployment from the Fleet, leaving associated devices effectively undeployed.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Deployment resource.
*/
func (c *DefaultApiService) DeleteDeployment(fleetSid string, sid string) (error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteDevice Method for DeleteDevice
Delete a specific Device from the Fleet, also removing it from associated Deployments.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Device resource.
*/
func (c *DefaultApiService) DeleteDevice(fleetSid string, sid string) (error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteDocumentParams Optional parameters for the method 'DeleteDocument'
type DeleteDocumentParams struct {
    If-Match *string `json:"If-Match,omitempty"`
}

/*
DeleteDocument Method for DeleteDocument
 * @param serviceSid
 * @param sid
 * @param optional nil or *DeleteDocumentOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteDocument(serviceSid string, sid string, params *DeleteDocumentParams) (error) {
    path := "/Sync/Services/{ServiceSid}/Documents/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteDocumentPermission Method for DeleteDocumentPermission
Delete a specific Sync Document Permission.
 * @param serviceSid
 * @param documentSid Identifier of the Sync Document. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
*/
func (c *DefaultApiService) DeleteDocumentPermission(serviceSid string, documentSid string, identity string) (error) {
    path := "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteField Method for DeleteField
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Field.
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteField(assistantSid string, taskSid string, sid string) (error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteFieldType Method for DeleteFieldType
 * @param assistantSid
 * @param sid
*/
func (c *DefaultApiService) DeleteFieldType(assistantSid string, sid string) (error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteFieldValue Method for DeleteFieldValue
 * @param assistantSid
 * @param fieldTypeSid
 * @param sid
*/
func (c *DefaultApiService) DeleteFieldValue(assistantSid string, fieldTypeSid string, sid string) (error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteFleet Method for DeleteFleet
Delete a specific Fleet from your account, also destroys all nested resources: Devices, Deployments, Certificates, Keys.
 * @param sid Provides a 34 character string that uniquely identifies the requested Fleet resource.
*/
func (c *DefaultApiService) DeleteFleet(sid string) (error) {
    path := "/DeployedDevices/Fleets/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteHostedNumberOrder Method for DeleteHostedNumberOrder
Cancel the HostedNumberOrder (only available when the status is in &#x60;received&#x60;).
 * @param sid A 34 character string that uniquely identifies this HostedNumberOrder.
*/
func (c *DefaultApiService) DeleteHostedNumberOrder(sid string) (error) {
    path := "/HostedNumbers/HostedNumberOrders/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteInstalledAddOn Method for DeleteInstalledAddOn
Remove an Add-on installation from your account
 * @param sid The SID of the InstalledAddOn resource to delete.
*/
func (c *DefaultApiService) DeleteInstalledAddOn(sid string) (error) {
    path := "/marketplace/InstalledAddOns/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteJob Method for DeleteJob
 * @param jobSid The unique string that that we created to identify the Bulk Export job
*/
func (c *DefaultApiService) DeleteJob(jobSid string) (error) {
    path := "/BulkExports/Exports/Jobs/{JobSid}"
    path = strings.Replace(path, "{"+"JobSid"+"}", jobSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteKey Method for DeleteKey
Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource.
*/
func (c *DefaultApiService) DeleteKey(fleetSid string, sid string) (error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteModelBuild Method for DeleteModelBuild
 * @param assistantSid
 * @param sid
*/
func (c *DefaultApiService) DeleteModelBuild(assistantSid string, sid string) (error) {
    path := "/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteQuery Method for DeleteQuery
 * @param assistantSid The unique ID of the Assistant.
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteQuery(assistantSid string, sid string) (error) {
    path := "/understand/Assistants/{AssistantSid}/Queries/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteRatePlan Method for DeleteRatePlan
 * @param sid
*/
func (c *DefaultApiService) DeleteRatePlan(sid string) (error) {
    path := "/wireless/RatePlans/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSample Method for DeleteSample
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Sample.
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteSample(assistantSid string, taskSid string, sid string) (error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteService Method for DeleteService
 * @param sid
*/
func (c *DefaultApiService) DeleteService(sid string) (error) {
    path := "/Sync/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncList Method for DeleteSyncList
 * @param serviceSid
 * @param sid
*/
func (c *DefaultApiService) DeleteSyncList(serviceSid string, sid string) (error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteSyncListItemParams Optional parameters for the method 'DeleteSyncListItem'
type DeleteSyncListItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
}

/*
DeleteSyncListItem Method for DeleteSyncListItem
 * @param serviceSid
 * @param listSid
 * @param index
 * @param optional nil or *DeleteSyncListItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteSyncListItem(serviceSid string, listSid string, index int32, params *DeleteSyncListItemParams) (error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Index"+"}", index, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncListPermission Method for DeleteSyncListPermission
Delete a specific Sync List Permission.
 * @param serviceSid
 * @param listSid Identifier of the Sync List. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
*/
func (c *DefaultApiService) DeleteSyncListPermission(serviceSid string, listSid string, identity string) (error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncMap Method for DeleteSyncMap
 * @param serviceSid
 * @param sid
*/
func (c *DefaultApiService) DeleteSyncMap(serviceSid string, sid string) (error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}
// DeleteSyncMapItemParams Optional parameters for the method 'DeleteSyncMapItem'
type DeleteSyncMapItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
}

/*
DeleteSyncMapItem Method for DeleteSyncMapItem
 * @param serviceSid
 * @param mapSid
 * @param key
 * @param optional nil or *DeleteSyncMapItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
*/
func (c *DefaultApiService) DeleteSyncMapItem(serviceSid string, mapSid string, key string, params *DeleteSyncMapItemParams) (error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Key"+"}", key, -1)

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteSyncMapPermission Method for DeleteSyncMapPermission
Delete a specific Sync Map Permission.
 * @param serviceSid
 * @param mapSid Identifier of the Sync Map. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
*/
func (c *DefaultApiService) DeleteSyncMapPermission(serviceSid string, mapSid string, identity string) (error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
DeleteTask Method for DeleteTask
 * @param assistantSid The unique ID of the Assistant.
 * @param sid A 34 character string that uniquely identifies this resource.
*/
func (c *DefaultApiService) DeleteTask(assistantSid string, sid string) (error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchAssistant Method for FetchAssistant
 * @param sid A 34 character string that uniquely identifies this resource.
@return PreviewUnderstandAssistant
*/
func (c *DefaultApiService) FetchAssistant(sid string) (*PreviewUnderstandAssistant, error) {
    path := "/understand/Assistants/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchAssistantFallbackActions Method for FetchAssistantFallbackActions
 * @param assistantSid
@return PreviewUnderstandAssistantAssistantFallbackActions
*/
func (c *DefaultApiService) FetchAssistantFallbackActions(assistantSid string) (*PreviewUnderstandAssistantAssistantFallbackActions, error) {
    path := "/understand/Assistants/{AssistantSid}/FallbackActions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantAssistantFallbackActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchAssistantInitiationActions Method for FetchAssistantInitiationActions
 * @param assistantSid
@return PreviewUnderstandAssistantAssistantInitiationActions
*/
func (c *DefaultApiService) FetchAssistantInitiationActions(assistantSid string) (*PreviewUnderstandAssistantAssistantInitiationActions, error) {
    path := "/understand/Assistants/{AssistantSid}/InitiationActions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantAssistantInitiationActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchAuthorizationDocument Method for FetchAuthorizationDocument
Fetch a specific AuthorizationDocument.
 * @param sid A 34 character string that uniquely identifies this AuthorizationDocument.
@return PreviewHostedNumbersAuthorizationDocument
*/
func (c *DefaultApiService) FetchAuthorizationDocument(sid string) (*PreviewHostedNumbersAuthorizationDocument, error) {
    path := "/HostedNumbers/AuthorizationDocuments/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersAuthorizationDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchAvailableAddOn Method for FetchAvailableAddOn
Fetch an instance of an Add-on currently available to be installed.
 * @param sid The SID of the AvailableAddOn resource to fetch.
@return PreviewMarketplaceAvailableAddOn
*/
func (c *DefaultApiService) FetchAvailableAddOn(sid string) (*PreviewMarketplaceAvailableAddOn, error) {
    path := "/marketplace/AvailableAddOns/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceAvailableAddOn{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchAvailableAddOnExtension Method for FetchAvailableAddOnExtension
Fetch an instance of an Extension for the Available Add-on.
 * @param availableAddOnSid The SID of the AvailableAddOn resource with the extension to fetch.
 * @param sid The SID of the AvailableAddOn Extension resource to fetch.
@return PreviewMarketplaceAvailableAddOnAvailableAddOnExtension
*/
func (c *DefaultApiService) FetchAvailableAddOnExtension(availableAddOnSid string, sid string) (*PreviewMarketplaceAvailableAddOnAvailableAddOnExtension, error) {
    path := "/marketplace/AvailableAddOns/{AvailableAddOnSid}/Extensions/{Sid}"
    path = strings.Replace(path, "{"+"AvailableAddOnSid"+"}", availableAddOnSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceAvailableAddOnAvailableAddOnExtension{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchBrandedChannel Method for FetchBrandedChannel
Fetch a specific Branded Channel.
 * @param sid The unique SID identifier of the Branded Channel.
@return PreviewTrustedCommsBrandedChannel
*/
func (c *DefaultApiService) FetchBrandedChannel(sid string) (*PreviewTrustedCommsBrandedChannel, error) {
    path := "/TrustedComms/BrandedChannels/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewTrustedCommsBrandedChannel{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchBrandsInformationParams Optional parameters for the method 'FetchBrandsInformation'
type FetchBrandsInformationParams struct {
    If-None-Match *string `json:"If-None-Match,omitempty"`
}

/*
FetchBrandsInformation Method for FetchBrandsInformation
Retrieve the newest available BrandInformation
 * @param optional nil or *FetchBrandsInformationOpts - Optional Parameters:
 * @param "If-None-Match" (string) - The If-None-Match HTTP request header
@return PreviewTrustedCommsBrandsInformation
*/
func (c *DefaultApiService) FetchBrandsInformation(params *FetchBrandsInformationParams) (*PreviewTrustedCommsBrandsInformation, error) {
    path := "/TrustedComms/BrandsInformation"

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.If-None-Match != nil {
        headers["If-None-Match"] = *params.If-None-Match
    }

    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewTrustedCommsBrandsInformation{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchCertificate Method for FetchCertificate
Fetch information about a specific Certificate credential in the Fleet.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Certificate credential resource.
@return PreviewDeployedDevicesFleetCertificate
*/
func (c *DefaultApiService) FetchCertificate(fleetSid string, sid string) (*PreviewDeployedDevicesFleetCertificate, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetCertificate{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchCommand Method for FetchCommand
 * @param sid
@return PreviewWirelessCommand
*/
func (c *DefaultApiService) FetchCommand(sid string) (*PreviewWirelessCommand, error) {
    path := "/wireless/Commands/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessCommand{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchCpsParams Optional parameters for the method 'FetchCps'
type FetchCpsParams struct {
    X-Xcnam-Sensitive-Phone-Number *string `json:"X-Xcnam-Sensitive-Phone-Number,omitempty"`
}

/*
FetchCps Method for FetchCps
Fetch a specific Call Placement Service (CPS) given a phone number via &#x60;X-XCNAM-Sensitive-Phone-Number&#x60; header.
 * @param optional nil or *FetchCpsOpts - Optional Parameters:
 * @param "X-Xcnam-Sensitive-Phone-Number" (string) - The X-Xcnam-Sensitive-Phone-Number HTTP request header
@return PreviewTrustedCommsCps
*/
func (c *DefaultApiService) FetchCps(params *FetchCpsParams) (*PreviewTrustedCommsCps, error) {
    path := "/TrustedComms/CPS"

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.X-Xcnam-Sensitive-Phone-Number != nil {
        headers["X-Xcnam-Sensitive-Phone-Number"] = *params.X-Xcnam-Sensitive-Phone-Number
    }

    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewTrustedCommsCps{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchCurrentCallParams Optional parameters for the method 'FetchCurrentCall'
type FetchCurrentCallParams struct {
    X-Xcnam-Sensitive-Phone-Number-From *string `json:"X-Xcnam-Sensitive-Phone-Number-From,omitempty"`
    X-Xcnam-Sensitive-Phone-Number-To *string `json:"X-Xcnam-Sensitive-Phone-Number-To,omitempty"`
}

/*
FetchCurrentCall Method for FetchCurrentCall
Retrieve a current call given the originating and terminating number via &#x60;X-XCNAM-Sensitive-Phone-Number-From&#x60; and &#x60;X-XCNAM-Sensitive-Phone-Number-To&#x60; headers.
 * @param optional nil or *FetchCurrentCallOpts - Optional Parameters:
 * @param "X-Xcnam-Sensitive-Phone-Number-From" (string) - The X-Xcnam-Sensitive-Phone-Number-From HTTP request header
 * @param "X-Xcnam-Sensitive-Phone-Number-To" (string) - The X-Xcnam-Sensitive-Phone-Number-To HTTP request header
@return PreviewTrustedCommsCurrentCall
*/
func (c *DefaultApiService) FetchCurrentCall(params *FetchCurrentCallParams) (*PreviewTrustedCommsCurrentCall, error) {
    path := "/TrustedComms/CurrentCall"

    data := url.Values{}
    headers := make(map[string]interface{})


    if params != nil && params.X-Xcnam-Sensitive-Phone-Number-From != nil {
        headers["X-Xcnam-Sensitive-Phone-Number-From"] = *params.X-Xcnam-Sensitive-Phone-Number-From
    }
    if params != nil && params.X-Xcnam-Sensitive-Phone-Number-To != nil {
        headers["X-Xcnam-Sensitive-Phone-Number-To"] = *params.X-Xcnam-Sensitive-Phone-Number-To
    }

    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewTrustedCommsCurrentCall{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDay Method for FetchDay
Fetch a specific Day.
 * @param resourceType The type of communication – Messages, Calls
 * @param day The ISO 8601 format date of the resources in the file, for a UTC day
*/
func (c *DefaultApiService) FetchDay(resourceType string, day string) (error) {
    path := "/BulkExports/Exports/{ResourceType}/Days/{Day}"
    path = strings.Replace(path, "{"+"ResourceType"+"}", resourceType, -1)
    path = strings.Replace(path, "{"+"Day"+"}", day, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
FetchDeployment Method for FetchDeployment
Fetch information about a specific Deployment in the Fleet.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Deployment resource.
@return PreviewDeployedDevicesFleetDeployment
*/
func (c *DefaultApiService) FetchDeployment(fleetSid string, sid string) (*PreviewDeployedDevicesFleetDeployment, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDeployment{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDevice Method for FetchDevice
Fetch information about a specific Device in the Fleet.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Device resource.
@return PreviewDeployedDevicesFleetDevice
*/
func (c *DefaultApiService) FetchDevice(fleetSid string, sid string) (*PreviewDeployedDevicesFleetDevice, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDevice{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDialogue Method for FetchDialogue
 * @param assistantSid
 * @param sid
@return PreviewUnderstandAssistantDialogue
*/
func (c *DefaultApiService) FetchDialogue(assistantSid string, sid string) (*PreviewUnderstandAssistantDialogue, error) {
    path := "/understand/Assistants/{AssistantSid}/Dialogues/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantDialogue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDocument Method for FetchDocument
 * @param serviceSid
 * @param sid
@return PreviewSyncServiceDocument
*/
func (c *DefaultApiService) FetchDocument(serviceSid string, sid string) (*PreviewSyncServiceDocument, error) {
    path := "/Sync/Services/{ServiceSid}/Documents/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchDocumentPermission Method for FetchDocumentPermission
Fetch a specific Sync Document Permission.
 * @param serviceSid
 * @param documentSid Identifier of the Sync Document. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
@return PreviewSyncServiceDocumentDocumentPermission
*/
func (c *DefaultApiService) FetchDocumentPermission(serviceSid string, documentSid string, identity string) (*PreviewSyncServiceDocumentDocumentPermission, error) {
    path := "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceDocumentDocumentPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchExport Method for FetchExport
Fetch a specific Export.
 * @param resourceType The type of communication – Messages, Calls
@return PreviewBulkExportsExport
*/
func (c *DefaultApiService) FetchExport(resourceType string) (*PreviewBulkExportsExport, error) {
    path := "/BulkExports/Exports/{ResourceType}"
    path = strings.Replace(path, "{"+"ResourceType"+"}", resourceType, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewBulkExportsExport{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchExportConfiguration Method for FetchExportConfiguration
Fetch a specific Export Configuration.
 * @param resourceType The type of communication – Messages, Calls
@return PreviewBulkExportsExportConfiguration
*/
func (c *DefaultApiService) FetchExportConfiguration(resourceType string) (*PreviewBulkExportsExportConfiguration, error) {
    path := "/BulkExports/Exports/{ResourceType}/Configuration"
    path = strings.Replace(path, "{"+"ResourceType"+"}", resourceType, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewBulkExportsExportConfiguration{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchField Method for FetchField
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Field.
 * @param sid A 34 character string that uniquely identifies this resource.
@return PreviewUnderstandAssistantTaskField
*/
func (c *DefaultApiService) FetchField(assistantSid string, taskSid string, sid string) (*PreviewUnderstandAssistantTaskField, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskField{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchFieldType Method for FetchFieldType
 * @param assistantSid
 * @param sid
@return PreviewUnderstandAssistantFieldType
*/
func (c *DefaultApiService) FetchFieldType(assistantSid string, sid string) (*PreviewUnderstandAssistantFieldType, error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantFieldType{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchFieldValue Method for FetchFieldValue
 * @param assistantSid
 * @param fieldTypeSid
 * @param sid
@return PreviewUnderstandAssistantFieldTypeFieldValue
*/
func (c *DefaultApiService) FetchFieldValue(assistantSid string, fieldTypeSid string, sid string) (*PreviewUnderstandAssistantFieldTypeFieldValue, error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantFieldTypeFieldValue{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchFleet Method for FetchFleet
Fetch information about a specific Fleet in your account.
 * @param sid Provides a 34 character string that uniquely identifies the requested Fleet resource.
@return PreviewDeployedDevicesFleet
*/
func (c *DefaultApiService) FetchFleet(sid string) (*PreviewDeployedDevicesFleet, error) {
    path := "/DeployedDevices/Fleets/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleet{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchHostedNumberOrder Method for FetchHostedNumberOrder
Fetch a specific HostedNumberOrder.
 * @param sid A 34 character string that uniquely identifies this HostedNumberOrder.
@return PreviewHostedNumbersHostedNumberOrder
*/
func (c *DefaultApiService) FetchHostedNumberOrder(sid string) (*PreviewHostedNumbersHostedNumberOrder, error) {
    path := "/HostedNumbers/HostedNumberOrders/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersHostedNumberOrder{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchInstalledAddOn Method for FetchInstalledAddOn
Fetch an instance of an Add-on currently installed on this Account.
 * @param sid The SID of the InstalledAddOn resource to fetch.
@return PreviewMarketplaceInstalledAddOn
*/
func (c *DefaultApiService) FetchInstalledAddOn(sid string) (*PreviewMarketplaceInstalledAddOn, error) {
    path := "/marketplace/InstalledAddOns/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceInstalledAddOn{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchInstalledAddOnExtension Method for FetchInstalledAddOnExtension
Fetch an instance of an Extension for the Installed Add-on.
 * @param installedAddOnSid The SID of the InstalledAddOn resource with the extension to fetch.
 * @param sid The SID of the InstalledAddOn Extension resource to fetch.
@return PreviewMarketplaceInstalledAddOnInstalledAddOnExtension
*/
func (c *DefaultApiService) FetchInstalledAddOnExtension(installedAddOnSid string, sid string) (*PreviewMarketplaceInstalledAddOnInstalledAddOnExtension, error) {
    path := "/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}"
    path = strings.Replace(path, "{"+"InstalledAddOnSid"+"}", installedAddOnSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceInstalledAddOnInstalledAddOnExtension{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchJob Method for FetchJob
 * @param jobSid
@return PreviewBulkExportsExportJob
*/
func (c *DefaultApiService) FetchJob(jobSid string) (*PreviewBulkExportsExportJob, error) {
    path := "/BulkExports/Exports/Jobs/{JobSid}"
    path = strings.Replace(path, "{"+"JobSid"+"}", jobSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewBulkExportsExportJob{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchKey Method for FetchKey
Fetch information about a specific Key credential in the Fleet.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource.
@return PreviewDeployedDevicesFleetKey
*/
func (c *DefaultApiService) FetchKey(fleetSid string, sid string) (*PreviewDeployedDevicesFleetKey, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetKey{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchModelBuild Method for FetchModelBuild
 * @param assistantSid
 * @param sid
@return PreviewUnderstandAssistantModelBuild
*/
func (c *DefaultApiService) FetchModelBuild(assistantSid string, sid string) (*PreviewUnderstandAssistantModelBuild, error) {
    path := "/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantModelBuild{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchQuery Method for FetchQuery
 * @param assistantSid The unique ID of the Assistant.
 * @param sid A 34 character string that uniquely identifies this resource.
@return PreviewUnderstandAssistantQuery
*/
func (c *DefaultApiService) FetchQuery(assistantSid string, sid string) (*PreviewUnderstandAssistantQuery, error) {
    path := "/understand/Assistants/{AssistantSid}/Queries/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantQuery{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchRatePlan Method for FetchRatePlan
 * @param sid
@return PreviewWirelessRatePlan
*/
func (c *DefaultApiService) FetchRatePlan(sid string) (*PreviewWirelessRatePlan, error) {
    path := "/wireless/RatePlans/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessRatePlan{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSample Method for FetchSample
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Sample.
 * @param sid A 34 character string that uniquely identifies this resource.
@return PreviewUnderstandAssistantTaskSample
*/
func (c *DefaultApiService) FetchSample(assistantSid string, taskSid string, sid string) (*PreviewUnderstandAssistantTaskSample, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskSample{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchService Method for FetchService
 * @param sid
@return PreviewSyncService
*/
func (c *DefaultApiService) FetchService(sid string) (*PreviewSyncService, error) {
    path := "/Sync/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncService{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSim Method for FetchSim
 * @param sid
@return PreviewWirelessSim
*/
func (c *DefaultApiService) FetchSim(sid string) (*PreviewWirelessSim, error) {
    path := "/wireless/Sims/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessSim{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchStyleSheet Method for FetchStyleSheet
Returns Style sheet JSON object for this Assistant
 * @param assistantSid The unique ID of the Assistant
@return PreviewUnderstandAssistantStyleSheet
*/
func (c *DefaultApiService) FetchStyleSheet(assistantSid string) (*PreviewUnderstandAssistantStyleSheet, error) {
    path := "/understand/Assistants/{AssistantSid}/StyleSheet"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantStyleSheet{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncList Method for FetchSyncList
 * @param serviceSid
 * @param sid
@return PreviewSyncServiceSyncList
*/
func (c *DefaultApiService) FetchSyncList(serviceSid string, sid string) (*PreviewSyncServiceSyncList, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncList{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncListItem Method for FetchSyncListItem
 * @param serviceSid
 * @param listSid
 * @param index
@return PreviewSyncServiceSyncListSyncListItem
*/
func (c *DefaultApiService) FetchSyncListItem(serviceSid string, listSid string, index int32) (*PreviewSyncServiceSyncListSyncListItem, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Index"+"}", index, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListSyncListItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncListPermission Method for FetchSyncListPermission
Fetch a specific Sync List Permission.
 * @param serviceSid
 * @param listSid Identifier of the Sync List. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
@return PreviewSyncServiceSyncListSyncListPermission
*/
func (c *DefaultApiService) FetchSyncListPermission(serviceSid string, listSid string, identity string) (*PreviewSyncServiceSyncListSyncListPermission, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListSyncListPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncMap Method for FetchSyncMap
 * @param serviceSid
 * @param sid
@return PreviewSyncServiceSyncMap
*/
func (c *DefaultApiService) FetchSyncMap(serviceSid string, sid string) (*PreviewSyncServiceSyncMap, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMap{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncMapItem Method for FetchSyncMapItem
 * @param serviceSid
 * @param mapSid
 * @param key
@return PreviewSyncServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) FetchSyncMapItem(serviceSid string, mapSid string, key string) (*PreviewSyncServiceSyncMapSyncMapItem, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Key"+"}", key, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapSyncMapItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchSyncMapPermission Method for FetchSyncMapPermission
Fetch a specific Sync Map Permission.
 * @param serviceSid
 * @param mapSid Identifier of the Sync Map. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
@return PreviewSyncServiceSyncMapSyncMapPermission
*/
func (c *DefaultApiService) FetchSyncMapPermission(serviceSid string, mapSid string, identity string) (*PreviewSyncServiceSyncMapSyncMapPermission, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapSyncMapPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTask Method for FetchTask
 * @param assistantSid The unique ID of the Assistant.
 * @param sid A 34 character string that uniquely identifies this resource.
@return PreviewUnderstandAssistantTask
*/
func (c *DefaultApiService) FetchTask(assistantSid string, sid string) (*PreviewUnderstandAssistantTask, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTaskActions Method for FetchTaskActions
Returns JSON actions for this Task.
 * @param assistantSid The unique ID of the parent Assistant.
 * @param taskSid The unique ID of the Task.
@return PreviewUnderstandAssistantTaskTaskActions
*/
func (c *DefaultApiService) FetchTaskActions(assistantSid string, taskSid string) (*PreviewUnderstandAssistantTaskTaskActions, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskTaskActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
FetchTaskStatistics Method for FetchTaskStatistics
 * @param assistantSid The unique ID of the parent Assistant.
 * @param taskSid The unique ID of the Task associated with this Field.
@return PreviewUnderstandAssistantTaskTaskStatistics
*/
func (c *DefaultApiService) FetchTaskStatistics(assistantSid string, taskSid string) (*PreviewUnderstandAssistantTaskTaskStatistics, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Statistics"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := 0
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskTaskStatistics{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// FetchUsageParams Optional parameters for the method 'FetchUsage'
type FetchUsageParams struct {
    End *string `json:"End,omitempty"`
    Start *string `json:"Start,omitempty"`
}

/*
FetchUsage Method for FetchUsage
 * @param simSid
 * @param optional nil or *FetchUsageOpts - Optional Parameters:
 * @param "End" (string) - 
 * @param "Start" (string) - 
@return PreviewWirelessSimUsage
*/
func (c *DefaultApiService) FetchUsage(simSid string, params *FetchUsageParams) (*PreviewWirelessSimUsage, error) {
    path := "/wireless/Sims/{SimSid}/Usage"
    path = strings.Replace(path, "{"+"SimSid"+"}", simSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.End != nil {
        data.Set("End", *params.End)
    }
    if params != nil && params.Start != nil {
        data.Set("Start", *params.Start)
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessSimUsage{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListAssistantParams Optional parameters for the method 'ListAssistant'
type ListAssistantParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListAssistant Method for ListAssistant
 * @param optional nil or *ListAssistantOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantReadResponse
*/
func (c *DefaultApiService) ListAssistant(params *ListAssistantParams) (*PreviewUnderstandAssistantReadResponse, error) {
    path := "/understand/Assistants"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListAuthorizationDocumentParams Optional parameters for the method 'ListAuthorizationDocument'
type ListAuthorizationDocumentParams struct {
    Email *string `json:"Email,omitempty"`
    Status *string `json:"Status,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListAuthorizationDocument Method for ListAuthorizationDocument
Retrieve a list of AuthorizationDocuments belonging to the account initiating the request.
 * @param optional nil or *ListAuthorizationDocumentOpts - Optional Parameters:
 * @param "Email" (string) - Email that this AuthorizationDocument will be sent to for signing.
 * @param "Status" (string) - Status of an instance resource. It can hold one of the values: 1. opened 2. signing, 3. signed LOA, 4. canceled, 5. failed. See the section entitled [Status Values](https://www.twilio.com/docs/api/phone-numbers/hosted-number-authorization-documents#status-values) for more information on each of these statuses.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewHostedNumbersAuthorizationDocumentReadResponse
*/
func (c *DefaultApiService) ListAuthorizationDocument(params *ListAuthorizationDocumentParams) (*PreviewHostedNumbersAuthorizationDocumentReadResponse, error) {
    path := "/HostedNumbers/AuthorizationDocuments"

    data := url.Values{}
    headers := 0

    if params != nil && params.Email != nil {
        data.Set("Email", *params.Email)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersAuthorizationDocumentReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListAvailableAddOnParams Optional parameters for the method 'ListAvailableAddOn'
type ListAvailableAddOnParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListAvailableAddOn Method for ListAvailableAddOn
Retrieve a list of Add-ons currently available to be installed.
 * @param optional nil or *ListAvailableAddOnOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewMarketplaceAvailableAddOnReadResponse
*/
func (c *DefaultApiService) ListAvailableAddOn(params *ListAvailableAddOnParams) (*PreviewMarketplaceAvailableAddOnReadResponse, error) {
    path := "/marketplace/AvailableAddOns"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceAvailableAddOnReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListAvailableAddOnExtensionParams Optional parameters for the method 'ListAvailableAddOnExtension'
type ListAvailableAddOnExtensionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListAvailableAddOnExtension Method for ListAvailableAddOnExtension
Retrieve a list of Extensions for the Available Add-on.
 * @param availableAddOnSid The SID of the AvailableAddOn resource with the extensions to read.
 * @param optional nil or *ListAvailableAddOnExtensionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewMarketplaceAvailableAddOnAvailableAddOnExtensionReadResponse
*/
func (c *DefaultApiService) ListAvailableAddOnExtension(availableAddOnSid string, params *ListAvailableAddOnExtensionParams) (*PreviewMarketplaceAvailableAddOnAvailableAddOnExtensionReadResponse, error) {
    path := "/marketplace/AvailableAddOns/{AvailableAddOnSid}/Extensions"
    path = strings.Replace(path, "{"+"AvailableAddOnSid"+"}", availableAddOnSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceAvailableAddOnAvailableAddOnExtensionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListCertificateParams Optional parameters for the method 'ListCertificate'
type ListCertificateParams struct {
    DeviceSid *string `json:"DeviceSid,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListCertificate Method for ListCertificate
Retrieve a list of all Certificate credentials belonging to the Fleet.
 * @param fleetSid
 * @param optional nil or *ListCertificateOpts - Optional Parameters:
 * @param "DeviceSid" (string) - Filters the resulting list of Certificates by a unique string identifier of an authenticated Device.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewDeployedDevicesFleetCertificateReadResponse
*/
func (c *DefaultApiService) ListCertificate(fleetSid string, params *ListCertificateParams) (*PreviewDeployedDevicesFleetCertificateReadResponse, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Certificates"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeviceSid != nil {
        data.Set("DeviceSid", *params.DeviceSid)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetCertificateReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListCommandParams Optional parameters for the method 'ListCommand'
type ListCommandParams struct {
    Device *string `json:"Device,omitempty"`
    Sim *string `json:"Sim,omitempty"`
    Status *string `json:"Status,omitempty"`
    Direction *string `json:"Direction,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListCommand Method for ListCommand
 * @param optional nil or *ListCommandOpts - Optional Parameters:
 * @param "Device" (string) - 
 * @param "Sim" (string) - 
 * @param "Status" (string) - 
 * @param "Direction" (string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewWirelessCommandReadResponse
*/
func (c *DefaultApiService) ListCommand(params *ListCommandParams) (*PreviewWirelessCommandReadResponse, error) {
    path := "/wireless/Commands"

    data := url.Values{}
    headers := 0

    if params != nil && params.Device != nil {
        data.Set("Device", *params.Device)
    }
    if params != nil && params.Sim != nil {
        data.Set("Sim", *params.Sim)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.Direction != nil {
        data.Set("Direction", *params.Direction)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessCommandReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDayParams Optional parameters for the method 'ListDay'
type ListDayParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDay Method for ListDay
Retrieve a list of all Days for a resource.
 * @param resourceType The type of communication – Messages, Calls
 * @param optional nil or *ListDayOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewBulkExportsExportDayReadResponse
*/
func (c *DefaultApiService) ListDay(resourceType string, params *ListDayParams) (*PreviewBulkExportsExportDayReadResponse, error) {
    path := "/BulkExports/Exports/{ResourceType}/Days"
    path = strings.Replace(path, "{"+"ResourceType"+"}", resourceType, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewBulkExportsExportDayReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDependentHostedNumberOrderParams Optional parameters for the method 'ListDependentHostedNumberOrder'
type ListDependentHostedNumberOrderParams struct {
    Status *string `json:"Status,omitempty"`
    PhoneNumber *string `json:"PhoneNumber,omitempty"`
    IncomingPhoneNumberSid *string `json:"IncomingPhoneNumberSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDependentHostedNumberOrder Method for ListDependentHostedNumberOrder
Retrieve a list of dependent HostedNumberOrders belonging to the AuthorizationDocument.
 * @param signingDocumentSid
 * @param optional nil or *ListDependentHostedNumberOrderOpts - Optional Parameters:
 * @param "Status" (string) - Status of an instance resource. It can hold one of the values: 1. opened 2. signing, 3. signed LOA, 4. canceled, 5. failed. See the section entitled [Status Values](https://www.twilio.com/docs/api/phone-numbers/hosted-number-authorization-documents#status-values) for more information on each of these statuses.
 * @param "PhoneNumber" (string) - An E164 formatted phone number hosted by this HostedNumberOrder.
 * @param "IncomingPhoneNumberSid" (string) - A 34 character string that uniquely identifies the IncomingPhoneNumber resource created by this HostedNumberOrder.
 * @param "FriendlyName" (string) - A human readable description of this resource, up to 64 characters.
 * @param "UniqueName" (string) - Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewHostedNumbersAuthorizationDocumentDependentHostedNumberOrderReadResponse
*/
func (c *DefaultApiService) ListDependentHostedNumberOrder(signingDocumentSid string, params *ListDependentHostedNumberOrderParams) (*PreviewHostedNumbersAuthorizationDocumentDependentHostedNumberOrderReadResponse, error) {
    path := "/HostedNumbers/AuthorizationDocuments/{SigningDocumentSid}/DependentHostedNumberOrders"
    path = strings.Replace(path, "{"+"SigningDocumentSid"+"}", signingDocumentSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.PhoneNumber != nil {
        data.Set("PhoneNumber", *params.PhoneNumber)
    }
    if params != nil && params.IncomingPhoneNumberSid != nil {
        data.Set("IncomingPhoneNumberSid", *params.IncomingPhoneNumberSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersAuthorizationDocumentDependentHostedNumberOrderReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDeploymentParams Optional parameters for the method 'ListDeployment'
type ListDeploymentParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDeployment Method for ListDeployment
Retrieve a list of all Deployments belonging to the Fleet.
 * @param fleetSid
 * @param optional nil or *ListDeploymentOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewDeployedDevicesFleetDeploymentReadResponse
*/
func (c *DefaultApiService) ListDeployment(fleetSid string, params *ListDeploymentParams) (*PreviewDeployedDevicesFleetDeploymentReadResponse, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Deployments"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDeploymentReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDeviceParams Optional parameters for the method 'ListDevice'
type ListDeviceParams struct {
    DeploymentSid *string `json:"DeploymentSid,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDevice Method for ListDevice
Retrieve a list of all Devices belonging to the Fleet.
 * @param fleetSid
 * @param optional nil or *ListDeviceOpts - Optional Parameters:
 * @param "DeploymentSid" (string) - Filters the resulting list of Devices by a unique string identifier of the Deployment they are associated with.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewDeployedDevicesFleetDeviceReadResponse
*/
func (c *DefaultApiService) ListDevice(fleetSid string, params *ListDeviceParams) (*PreviewDeployedDevicesFleetDeviceReadResponse, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Devices"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeploymentSid != nil {
        data.Set("DeploymentSid", *params.DeploymentSid)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDeviceReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDocumentParams Optional parameters for the method 'ListDocument'
type ListDocumentParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDocument Method for ListDocument
 * @param serviceSid
 * @param optional nil or *ListDocumentOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceDocumentReadResponse
*/
func (c *DefaultApiService) ListDocument(serviceSid string, params *ListDocumentParams) (*PreviewSyncServiceDocumentReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Documents"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceDocumentReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListDocumentPermissionParams Optional parameters for the method 'ListDocumentPermission'
type ListDocumentPermissionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListDocumentPermission Method for ListDocumentPermission
Retrieve a list of all Permissions applying to a Sync Document.
 * @param serviceSid
 * @param documentSid Identifier of the Sync Document. Either a SID or a unique name.
 * @param optional nil or *ListDocumentPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceDocumentDocumentPermissionReadResponse
*/
func (c *DefaultApiService) ListDocumentPermission(serviceSid string, documentSid string, params *ListDocumentPermissionParams) (*PreviewSyncServiceDocumentDocumentPermissionReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceDocumentDocumentPermissionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListExportCustomJobParams Optional parameters for the method 'ListExportCustomJob'
type ListExportCustomJobParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListExportCustomJob Method for ListExportCustomJob
 * @param resourceType The type of communication – Messages, Calls
 * @param optional nil or *ListExportCustomJobOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewBulkExportsExportExportCustomJobReadResponse
*/
func (c *DefaultApiService) ListExportCustomJob(resourceType string, params *ListExportCustomJobParams) (*PreviewBulkExportsExportExportCustomJobReadResponse, error) {
    path := "/BulkExports/Exports/{ResourceType}/Jobs"
    path = strings.Replace(path, "{"+"ResourceType"+"}", resourceType, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewBulkExportsExportExportCustomJobReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFieldParams Optional parameters for the method 'ListField'
type ListFieldParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListField Method for ListField
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Field.
 * @param optional nil or *ListFieldOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantTaskFieldReadResponse
*/
func (c *DefaultApiService) ListField(assistantSid string, taskSid string, params *ListFieldParams) (*PreviewUnderstandAssistantTaskFieldReadResponse, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskFieldReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFieldTypeParams Optional parameters for the method 'ListFieldType'
type ListFieldTypeParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFieldType Method for ListFieldType
 * @param assistantSid
 * @param optional nil or *ListFieldTypeOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantFieldTypeReadResponse
*/
func (c *DefaultApiService) ListFieldType(assistantSid string, params *ListFieldTypeParams) (*PreviewUnderstandAssistantFieldTypeReadResponse, error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantFieldTypeReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFieldValueParams Optional parameters for the method 'ListFieldValue'
type ListFieldValueParams struct {
    Language *string `json:"Language,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFieldValue Method for ListFieldValue
 * @param assistantSid
 * @param fieldTypeSid
 * @param optional nil or *ListFieldValueOpts - Optional Parameters:
 * @param "Language" (string) - An ISO language-country string of the value. For example: *en-US*
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantFieldTypeFieldValueReadResponse
*/
func (c *DefaultApiService) ListFieldValue(assistantSid string, fieldTypeSid string, params *ListFieldValueParams) (*PreviewUnderstandAssistantFieldTypeFieldValueReadResponse, error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"FieldTypeSid"+"}", fieldTypeSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantFieldTypeFieldValueReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFleetParams Optional parameters for the method 'ListFleet'
type ListFleetParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFleet Method for ListFleet
Retrieve a list of all Fleets belonging to your account.
 * @param optional nil or *ListFleetOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewDeployedDevicesFleetReadResponse
*/
func (c *DefaultApiService) ListFleet(params *ListFleetParams) (*PreviewDeployedDevicesFleetReadResponse, error) {
    path := "/DeployedDevices/Fleets"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListHostedNumberOrderParams Optional parameters for the method 'ListHostedNumberOrder'
type ListHostedNumberOrderParams struct {
    Status *string `json:"Status,omitempty"`
    PhoneNumber *string `json:"PhoneNumber,omitempty"`
    IncomingPhoneNumberSid *string `json:"IncomingPhoneNumberSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListHostedNumberOrder Method for ListHostedNumberOrder
Retrieve a list of HostedNumberOrders belonging to the account initiating the request.
 * @param optional nil or *ListHostedNumberOrderOpts - Optional Parameters:
 * @param "Status" (string) - The Status of this HostedNumberOrder. One of `received`, `pending-verification`, `verified`, `pending-loa`, `carrier-processing`, `testing`, `completed`, `failed`, or `action-required`.
 * @param "PhoneNumber" (string) - An E164 formatted phone number hosted by this HostedNumberOrder.
 * @param "IncomingPhoneNumberSid" (string) - A 34 character string that uniquely identifies the IncomingPhoneNumber resource created by this HostedNumberOrder.
 * @param "FriendlyName" (string) - A human readable description of this resource, up to 64 characters.
 * @param "UniqueName" (string) - Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewHostedNumbersHostedNumberOrderReadResponse
*/
func (c *DefaultApiService) ListHostedNumberOrder(params *ListHostedNumberOrderParams) (*PreviewHostedNumbersHostedNumberOrderReadResponse, error) {
    path := "/HostedNumbers/HostedNumberOrders"

    data := url.Values{}
    headers := 0

    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.PhoneNumber != nil {
        data.Set("PhoneNumber", *params.PhoneNumber)
    }
    if params != nil && params.IncomingPhoneNumberSid != nil {
        data.Set("IncomingPhoneNumberSid", *params.IncomingPhoneNumberSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersHostedNumberOrderReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListInstalledAddOnParams Optional parameters for the method 'ListInstalledAddOn'
type ListInstalledAddOnParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListInstalledAddOn Method for ListInstalledAddOn
Retrieve a list of Add-ons currently installed on this Account.
 * @param optional nil or *ListInstalledAddOnOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewMarketplaceInstalledAddOnReadResponse
*/
func (c *DefaultApiService) ListInstalledAddOn(params *ListInstalledAddOnParams) (*PreviewMarketplaceInstalledAddOnReadResponse, error) {
    path := "/marketplace/InstalledAddOns"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceInstalledAddOnReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListInstalledAddOnExtensionParams Optional parameters for the method 'ListInstalledAddOnExtension'
type ListInstalledAddOnExtensionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListInstalledAddOnExtension Method for ListInstalledAddOnExtension
Retrieve a list of Extensions for the Installed Add-on.
 * @param installedAddOnSid The SID of the InstalledAddOn resource with the extensions to read.
 * @param optional nil or *ListInstalledAddOnExtensionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewMarketplaceInstalledAddOnInstalledAddOnExtensionReadResponse
*/
func (c *DefaultApiService) ListInstalledAddOnExtension(installedAddOnSid string, params *ListInstalledAddOnExtensionParams) (*PreviewMarketplaceInstalledAddOnInstalledAddOnExtensionReadResponse, error) {
    path := "/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions"
    path = strings.Replace(path, "{"+"InstalledAddOnSid"+"}", installedAddOnSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceInstalledAddOnInstalledAddOnExtensionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListKeyParams Optional parameters for the method 'ListKey'
type ListKeyParams struct {
    DeviceSid *string `json:"DeviceSid,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListKey Method for ListKey
Retrieve a list of all Keys credentials belonging to the Fleet.
 * @param fleetSid
 * @param optional nil or *ListKeyOpts - Optional Parameters:
 * @param "DeviceSid" (string) - Filters the resulting list of Keys by a unique string identifier of an authenticated Device.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewDeployedDevicesFleetKeyReadResponse
*/
func (c *DefaultApiService) ListKey(fleetSid string, params *ListKeyParams) (*PreviewDeployedDevicesFleetKeyReadResponse, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Keys"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeviceSid != nil {
        data.Set("DeviceSid", *params.DeviceSid)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetKeyReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListModelBuildParams Optional parameters for the method 'ListModelBuild'
type ListModelBuildParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListModelBuild Method for ListModelBuild
 * @param assistantSid
 * @param optional nil or *ListModelBuildOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantModelBuildReadResponse
*/
func (c *DefaultApiService) ListModelBuild(assistantSid string, params *ListModelBuildParams) (*PreviewUnderstandAssistantModelBuildReadResponse, error) {
    path := "/understand/Assistants/{AssistantSid}/ModelBuilds"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantModelBuildReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListQueryParams Optional parameters for the method 'ListQuery'
type ListQueryParams struct {
    Language *string `json:"Language,omitempty"`
    ModelBuild *string `json:"ModelBuild,omitempty"`
    Status *string `json:"Status,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListQuery Method for ListQuery
 * @param assistantSid The unique ID of the parent Assistant.
 * @param optional nil or *ListQueryOpts - Optional Parameters:
 * @param "Language" (string) - An ISO language-country string of the sample.
 * @param "ModelBuild" (string) - The Model Build Sid or unique name of the Model Build to be queried.
 * @param "Status" (string) - A string that described the query status. The values can be: pending_review, reviewed, discarded
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantQueryReadResponse
*/
func (c *DefaultApiService) ListQuery(assistantSid string, params *ListQueryParams) (*PreviewUnderstandAssistantQueryReadResponse, error) {
    path := "/understand/Assistants/{AssistantSid}/Queries"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.ModelBuild != nil {
        data.Set("ModelBuild", *params.ModelBuild)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantQueryReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListRatePlanParams Optional parameters for the method 'ListRatePlan'
type ListRatePlanParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRatePlan Method for ListRatePlan
 * @param optional nil or *ListRatePlanOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewWirelessRatePlanReadResponse
*/
func (c *DefaultApiService) ListRatePlan(params *ListRatePlanParams) (*PreviewWirelessRatePlanReadResponse, error) {
    path := "/wireless/RatePlans"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessRatePlanReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSampleParams Optional parameters for the method 'ListSample'
type ListSampleParams struct {
    Language *string `json:"Language,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSample Method for ListSample
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Sample.
 * @param optional nil or *ListSampleOpts - Optional Parameters:
 * @param "Language" (string) - An ISO language-country string of the sample.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantTaskSampleReadResponse
*/
func (c *DefaultApiService) ListSample(assistantSid string, taskSid string, params *ListSampleParams) (*PreviewUnderstandAssistantTaskSampleReadResponse, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskSampleReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceReadResponse
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*PreviewSyncServiceReadResponse, error) {
    path := "/Sync/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSimParams Optional parameters for the method 'ListSim'
type ListSimParams struct {
    Status *string `json:"Status,omitempty"`
    Iccid *string `json:"Iccid,omitempty"`
    RatePlan *string `json:"RatePlan,omitempty"`
    EId *string `json:"EId,omitempty"`
    SimRegistrationCode *string `json:"SimRegistrationCode,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSim Method for ListSim
 * @param optional nil or *ListSimOpts - Optional Parameters:
 * @param "Status" (string) - 
 * @param "Iccid" (string) - 
 * @param "RatePlan" (string) - 
 * @param "EId" (string) - 
 * @param "SimRegistrationCode" (string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewWirelessSimReadResponse
*/
func (c *DefaultApiService) ListSim(params *ListSimParams) (*PreviewWirelessSimReadResponse, error) {
    path := "/wireless/Sims"

    data := url.Values{}
    headers := 0

    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.Iccid != nil {
        data.Set("Iccid", *params.Iccid)
    }
    if params != nil && params.RatePlan != nil {
        data.Set("RatePlan", *params.RatePlan)
    }
    if params != nil && params.EId != nil {
        data.Set("EId", *params.EId)
    }
    if params != nil && params.SimRegistrationCode != nil {
        data.Set("SimRegistrationCode", *params.SimRegistrationCode)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessSimReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncListParams Optional parameters for the method 'ListSyncList'
type ListSyncListParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncList Method for ListSyncList
 * @param serviceSid
 * @param optional nil or *ListSyncListOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceSyncListReadResponse
*/
func (c *DefaultApiService) ListSyncList(serviceSid string, params *ListSyncListParams) (*PreviewSyncServiceSyncListReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Lists"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncListItemParams Optional parameters for the method 'ListSyncListItem'
type ListSyncListItemParams struct {
    Order *string `json:"Order,omitempty"`
    From *string `json:"From,omitempty"`
    Bounds *string `json:"Bounds,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncListItem Method for ListSyncListItem
 * @param serviceSid
 * @param listSid
 * @param optional nil or *ListSyncListItemOpts - Optional Parameters:
 * @param "Order" (string) - 
 * @param "From" (string) - 
 * @param "Bounds" (string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceSyncListSyncListItemReadResponse
*/
func (c *DefaultApiService) ListSyncListItem(serviceSid string, listSid string, params *ListSyncListItemParams) (*PreviewSyncServiceSyncListSyncListItemReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Order != nil {
        data.Set("Order", *params.Order)
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.Bounds != nil {
        data.Set("Bounds", *params.Bounds)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListSyncListItemReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncListPermissionParams Optional parameters for the method 'ListSyncListPermission'
type ListSyncListPermissionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncListPermission Method for ListSyncListPermission
Retrieve a list of all Permissions applying to a Sync List.
 * @param serviceSid
 * @param listSid Identifier of the Sync List. Either a SID or a unique name.
 * @param optional nil or *ListSyncListPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceSyncListSyncListPermissionReadResponse
*/
func (c *DefaultApiService) ListSyncListPermission(serviceSid string, listSid string, params *ListSyncListPermissionParams) (*PreviewSyncServiceSyncListSyncListPermissionReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListSyncListPermissionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncMapParams Optional parameters for the method 'ListSyncMap'
type ListSyncMapParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMap Method for ListSyncMap
 * @param serviceSid
 * @param optional nil or *ListSyncMapOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceSyncMapReadResponse
*/
func (c *DefaultApiService) ListSyncMap(serviceSid string, params *ListSyncMapParams) (*PreviewSyncServiceSyncMapReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Maps"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncMapItemParams Optional parameters for the method 'ListSyncMapItem'
type ListSyncMapItemParams struct {
    Order *string `json:"Order,omitempty"`
    From *string `json:"From,omitempty"`
    Bounds *string `json:"Bounds,omitempty"`
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMapItem Method for ListSyncMapItem
 * @param serviceSid
 * @param mapSid
 * @param optional nil or *ListSyncMapItemOpts - Optional Parameters:
 * @param "Order" (string) - 
 * @param "From" (string) - 
 * @param "Bounds" (string) - 
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceSyncMapSyncMapItemReadResponse
*/
func (c *DefaultApiService) ListSyncMapItem(serviceSid string, mapSid string, params *ListSyncMapItemParams) (*PreviewSyncServiceSyncMapSyncMapItemReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Order != nil {
        data.Set("Order", *params.Order)
    }
    if params != nil && params.From != nil {
        data.Set("From", *params.From)
    }
    if params != nil && params.Bounds != nil {
        data.Set("Bounds", *params.Bounds)
    }
    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapSyncMapItemReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListSyncMapPermissionParams Optional parameters for the method 'ListSyncMapPermission'
type ListSyncMapPermissionParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListSyncMapPermission Method for ListSyncMapPermission
Retrieve a list of all Permissions applying to a Sync Map.
 * @param serviceSid
 * @param mapSid Identifier of the Sync Map. Either a SID or a unique name.
 * @param optional nil or *ListSyncMapPermissionOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewSyncServiceSyncMapSyncMapPermissionReadResponse
*/
func (c *DefaultApiService) ListSyncMapPermission(serviceSid string, mapSid string, params *ListSyncMapPermissionParams) (*PreviewSyncServiceSyncMapSyncMapPermissionReadResponse, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapSyncMapPermissionReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListTaskParams Optional parameters for the method 'ListTask'
type ListTaskParams struct {
    PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListTask Method for ListTask
 * @param assistantSid The unique ID of the Assistant.
 * @param optional nil or *ListTaskOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return PreviewUnderstandAssistantTaskReadResponse
*/
func (c *DefaultApiService) ListTask(assistantSid string, params *ListTaskParams) (*PreviewUnderstandAssistantTaskReadResponse, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
        data.Set("PageSize", string(*params.PageSize))
    }


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskReadResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateAssistantParams Optional parameters for the method 'UpdateAssistant'
type UpdateAssistantParams struct {
    CallbackEvents *string `json:"CallbackEvents,omitempty"`
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    FallbackActions *map[string]interface{} `json:"FallbackActions,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    InitiationActions *map[string]interface{} `json:"InitiationActions,omitempty"`
    LogQueries *bool `json:"LogQueries,omitempty"`
    StyleSheet *map[string]interface{} `json:"StyleSheet,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateAssistant Method for UpdateAssistant
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateAssistantOpts - Optional Parameters:
 * @param "CallbackEvents" (string) - Space-separated list of callback events that will trigger callbacks.
 * @param "CallbackUrl" (string) - A user-provided URL to send event callbacks to.
 * @param "FallbackActions" (map[string]interface{}) - The JSON actions to be executed when the user's input is not recognized as matching any Task.
 * @param "FriendlyName" (string) - A text description for the Assistant. It is non-unique and can up to 255 characters long.
 * @param "InitiationActions" (map[string]interface{}) - The JSON actions to be executed on inbound phone calls when the Assistant has to say something first.
 * @param "LogQueries" (bool) - A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter. Defaults to true if no value is provided.
 * @param "StyleSheet" (map[string]interface{}) - The JSON object that holds the style sheet for the assistant
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistant
*/
func (c *DefaultApiService) UpdateAssistant(sid string, params *UpdateAssistantParams) (*PreviewUnderstandAssistant, error) {
    path := "/understand/Assistants/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackEvents != nil {
        data.Set("CallbackEvents", *params.CallbackEvents)
    }
    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.FallbackActions != nil {
        v, err := json.Marshal(params.FallbackActions)

        if err != nil {
            return nil, err
        }

        data.Set("FallbackActions", string(v))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.InitiationActions != nil {
        v, err := json.Marshal(params.InitiationActions)

        if err != nil {
            return nil, err
        }

        data.Set("InitiationActions", string(v))
    }
    if params != nil && params.LogQueries != nil {
        data.Set("LogQueries", string(*params.LogQueries))
    }
    if params != nil && params.StyleSheet != nil {
        v, err := json.Marshal(params.StyleSheet)

        if err != nil {
            return nil, err
        }

        data.Set("StyleSheet", string(v))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistant{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateAssistantFallbackActionsParams Optional parameters for the method 'UpdateAssistantFallbackActions'
type UpdateAssistantFallbackActionsParams struct {
    FallbackActions *map[string]interface{} `json:"FallbackActions,omitempty"`
}

/*
UpdateAssistantFallbackActions Method for UpdateAssistantFallbackActions
 * @param assistantSid
 * @param optional nil or *UpdateAssistantFallbackActionsOpts - Optional Parameters:
 * @param "FallbackActions" (map[string]interface{}) - 
@return PreviewUnderstandAssistantAssistantFallbackActions
*/
func (c *DefaultApiService) UpdateAssistantFallbackActions(assistantSid string, params *UpdateAssistantFallbackActionsParams) (*PreviewUnderstandAssistantAssistantFallbackActions, error) {
    path := "/understand/Assistants/{AssistantSid}/FallbackActions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FallbackActions != nil {
        v, err := json.Marshal(params.FallbackActions)

        if err != nil {
            return nil, err
        }

        data.Set("FallbackActions", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantAssistantFallbackActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateAssistantInitiationActionsParams Optional parameters for the method 'UpdateAssistantInitiationActions'
type UpdateAssistantInitiationActionsParams struct {
    InitiationActions *map[string]interface{} `json:"InitiationActions,omitempty"`
}

/*
UpdateAssistantInitiationActions Method for UpdateAssistantInitiationActions
 * @param assistantSid
 * @param optional nil or *UpdateAssistantInitiationActionsOpts - Optional Parameters:
 * @param "InitiationActions" (map[string]interface{}) - 
@return PreviewUnderstandAssistantAssistantInitiationActions
*/
func (c *DefaultApiService) UpdateAssistantInitiationActions(assistantSid string, params *UpdateAssistantInitiationActionsParams) (*PreviewUnderstandAssistantAssistantInitiationActions, error) {
    path := "/understand/Assistants/{AssistantSid}/InitiationActions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.InitiationActions != nil {
        v, err := json.Marshal(params.InitiationActions)

        if err != nil {
            return nil, err
        }

        data.Set("InitiationActions", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantAssistantInitiationActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateAuthorizationDocumentParams Optional parameters for the method 'UpdateAuthorizationDocument'
type UpdateAuthorizationDocumentParams struct {
    AddressSid *string `json:"AddressSid,omitempty"`
    CcEmails *[]string `json:"CcEmails,omitempty"`
    ContactPhoneNumber *string `json:"ContactPhoneNumber,omitempty"`
    ContactTitle *string `json:"ContactTitle,omitempty"`
    Email *string `json:"Email,omitempty"`
    HostedNumberOrderSids *[]string `json:"HostedNumberOrderSids,omitempty"`
    Status *string `json:"Status,omitempty"`
}

/*
UpdateAuthorizationDocument Method for UpdateAuthorizationDocument
Updates a specific AuthorizationDocument.
 * @param sid
 * @param optional nil or *UpdateAuthorizationDocumentOpts - Optional Parameters:
 * @param "AddressSid" (string) - A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument.
 * @param "CcEmails" ([]string) - Email recipients who will be informed when an Authorization Document has been sent and signed
 * @param "ContactPhoneNumber" (string) - The contact phone number of the person authorized to sign the Authorization Document.
 * @param "ContactTitle" (string) - The title of the person authorized to sign the Authorization Document for this phone number.
 * @param "Email" (string) - Email that this AuthorizationDocument will be sent to for signing.
 * @param "HostedNumberOrderSids" ([]string) - A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio's platform.
 * @param "Status" (string) - Status of an instance resource. It can hold one of the values: 1. opened 2. signing, 3. signed LOA, 4. canceled, 5. failed. See the section entitled [Status Values](https://www.twilio.com/docs/api/phone-numbers/hosted-number-authorization-documents#status-values) for more information on each of these statuses.
@return PreviewHostedNumbersAuthorizationDocument
*/
func (c *DefaultApiService) UpdateAuthorizationDocument(sid string, params *UpdateAuthorizationDocumentParams) (*PreviewHostedNumbersAuthorizationDocument, error) {
    path := "/HostedNumbers/AuthorizationDocuments/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AddressSid != nil {
        data.Set("AddressSid", *params.AddressSid)
    }
    if params != nil && params.CcEmails != nil {
        data.Set("CcEmails", *params.CcEmails)
    }
    if params != nil && params.ContactPhoneNumber != nil {
        data.Set("ContactPhoneNumber", *params.ContactPhoneNumber)
    }
    if params != nil && params.ContactTitle != nil {
        data.Set("ContactTitle", *params.ContactTitle)
    }
    if params != nil && params.Email != nil {
        data.Set("Email", *params.Email)
    }
    if params != nil && params.HostedNumberOrderSids != nil {
        data.Set("HostedNumberOrderSids", *params.HostedNumberOrderSids)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersAuthorizationDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateCertificateParams Optional parameters for the method 'UpdateCertificate'
type UpdateCertificateParams struct {
    DeviceSid *string `json:"DeviceSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
UpdateCertificate Method for UpdateCertificate
Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or assigning to a Device.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Certificate credential resource.
 * @param optional nil or *UpdateCertificateOpts - Optional Parameters:
 * @param "DeviceSid" (string) - Provides the unique string identifier of an existing Device to become authenticated with this Certificate credential.
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Certificate credential, up to 256 characters long.
@return PreviewDeployedDevicesFleetCertificate
*/
func (c *DefaultApiService) UpdateCertificate(fleetSid string, sid string, params *UpdateCertificateParams) (*PreviewDeployedDevicesFleetCertificate, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeviceSid != nil {
        data.Set("DeviceSid", *params.DeviceSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetCertificate{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDeploymentParams Optional parameters for the method 'UpdateDeployment'
type UpdateDeploymentParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    SyncServiceSid *string `json:"SyncServiceSid,omitempty"`
}

/*
UpdateDeployment Method for UpdateDeployment
Update the given properties of a specific Deployment credential in the Fleet, giving it a friendly name or linking to a specific Twilio Sync service instance.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Deployment resource.
 * @param optional nil or *UpdateDeploymentOpts - Optional Parameters:
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Deployment, up to 64 characters long
 * @param "SyncServiceSid" (string) - Provides the unique string identifier of the Twilio Sync service instance that will be linked to and accessible by this Deployment.
@return PreviewDeployedDevicesFleetDeployment
*/
func (c *DefaultApiService) UpdateDeployment(fleetSid string, sid string, params *UpdateDeploymentParams) (*PreviewDeployedDevicesFleetDeployment, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.SyncServiceSid != nil {
        data.Set("SyncServiceSid", *params.SyncServiceSid)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDeployment{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDeviceParams Optional parameters for the method 'UpdateDevice'
type UpdateDeviceParams struct {
    DeploymentSid *string `json:"DeploymentSid,omitempty"`
    Enabled *bool `json:"Enabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Identity *string `json:"Identity,omitempty"`
}

/*
UpdateDevice Method for UpdateDevice
Update the given properties of a specific Device in the Fleet, giving it a friendly name, assigning to a Deployment, or a human identity.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Device resource.
 * @param optional nil or *UpdateDeviceOpts - Optional Parameters:
 * @param "DeploymentSid" (string) - Specifies the unique string identifier of the Deployment group that this Device is going to be associated with.
 * @param "Enabled" (bool) - 
 * @param "FriendlyName" (string) - Provides a human readable descriptive text to be assigned to this Device, up to 256 characters long.
 * @param "Identity" (string) - Provides an arbitrary string identifier representing a human user to be associated with this Device, up to 256 characters long.
@return PreviewDeployedDevicesFleetDevice
*/
func (c *DefaultApiService) UpdateDevice(fleetSid string, sid string, params *UpdateDeviceParams) (*PreviewDeployedDevicesFleetDevice, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeploymentSid != nil {
        data.Set("DeploymentSid", *params.DeploymentSid)
    }
    if params != nil && params.Enabled != nil {
        data.Set("Enabled", string(*params.Enabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Identity != nil {
        data.Set("Identity", *params.Identity)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetDevice{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDocumentParams Optional parameters for the method 'UpdateDocument'
type UpdateDocumentParams struct {
    If-Match *string `json:"If-Match,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
}

/*
UpdateDocument Method for UpdateDocument
 * @param serviceSid
 * @param sid
 * @param optional nil or *UpdateDocumentOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
 * @param "Data" (map[string]interface{}) - 
@return PreviewSyncServiceDocument
*/
func (c *DefaultApiService) UpdateDocument(serviceSid string, sid string, params *UpdateDocumentParams) (*PreviewSyncServiceDocument, error) {
    path := "/Sync/Services/{ServiceSid}/Documents/{Sid}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }

    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceDocument{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateDocumentPermissionParams Optional parameters for the method 'UpdateDocumentPermission'
type UpdateDocumentPermissionParams struct {
    Manage *bool `json:"Manage,omitempty"`
    Read *bool `json:"Read,omitempty"`
    Write *bool `json:"Write,omitempty"`
}

/*
UpdateDocumentPermission Method for UpdateDocumentPermission
Update an identity&#39;s access to a specific Sync Document.
 * @param serviceSid The unique SID identifier of the Sync Service Instance.
 * @param documentSid Identifier of the Sync Document. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer.
 * @param optional nil or *UpdateDocumentPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Boolean flag specifying whether the identity can delete the Sync Document.
 * @param "Read" (bool) - Boolean flag specifying whether the identity can read the Sync Document.
 * @param "Write" (bool) - Boolean flag specifying whether the identity can update the Sync Document.
@return PreviewSyncServiceDocumentDocumentPermission
*/
func (c *DefaultApiService) UpdateDocumentPermission(serviceSid string, documentSid string, identity string, params *UpdateDocumentPermissionParams) (*PreviewSyncServiceDocumentDocumentPermission, error) {
    path := "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"DocumentSid"+"}", documentSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Manage != nil {
        data.Set("Manage", string(*params.Manage))
    }
    if params != nil && params.Read != nil {
        data.Set("Read", string(*params.Read))
    }
    if params != nil && params.Write != nil {
        data.Set("Write", string(*params.Write))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceDocumentDocumentPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateExportConfigurationParams Optional parameters for the method 'UpdateExportConfiguration'
type UpdateExportConfigurationParams struct {
    Enabled *bool `json:"Enabled,omitempty"`
    WebhookMethod *string `json:"WebhookMethod,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
UpdateExportConfiguration Method for UpdateExportConfiguration
Update a specific Export Configuration.
 * @param resourceType The type of communication – Messages, Calls
 * @param optional nil or *UpdateExportConfigurationOpts - Optional Parameters:
 * @param "Enabled" (bool) - If true, Twilio will automatically generate every day's file when the day is over.
 * @param "WebhookMethod" (string) - Sets whether Twilio should call a webhook URL when the automatic generation is complete, using GET or POST. The actual destination is set in the webhook_url
 * @param "WebhookUrl" (string) - Stores the URL destination for the method specified in webhook_method.
@return PreviewBulkExportsExportConfiguration
*/
func (c *DefaultApiService) UpdateExportConfiguration(resourceType string, params *UpdateExportConfigurationParams) (*PreviewBulkExportsExportConfiguration, error) {
    path := "/BulkExports/Exports/{ResourceType}/Configuration"
    path = strings.Replace(path, "{"+"ResourceType"+"}", resourceType, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Enabled != nil {
        data.Set("Enabled", string(*params.Enabled))
    }
    if params != nil && params.WebhookMethod != nil {
        data.Set("WebhookMethod", *params.WebhookMethod)
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewBulkExportsExportConfiguration{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateFieldTypeParams Optional parameters for the method 'UpdateFieldType'
type UpdateFieldTypeParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateFieldType Method for UpdateFieldType
 * @param assistantSid
 * @param sid
 * @param optional nil or *UpdateFieldTypeOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistantFieldType
*/
func (c *DefaultApiService) UpdateFieldType(assistantSid string, sid string, params *UpdateFieldTypeParams) (*PreviewUnderstandAssistantFieldType, error) {
    path := "/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantFieldType{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateFleetParams Optional parameters for the method 'UpdateFleet'
type UpdateFleetParams struct {
    DefaultDeploymentSid *string `json:"DefaultDeploymentSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
UpdateFleet Method for UpdateFleet
Update the friendly name property of a specific Fleet in your account.
 * @param sid Provides a 34 character string that uniquely identifies the requested Fleet resource.
 * @param optional nil or *UpdateFleetOpts - Optional Parameters:
 * @param "DefaultDeploymentSid" (string) - Provides a string identifier of a Deployment that is going to be used as a default one for this Fleet.
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Fleet, up to 256 characters long.
@return PreviewDeployedDevicesFleet
*/
func (c *DefaultApiService) UpdateFleet(sid string, params *UpdateFleetParams) (*PreviewDeployedDevicesFleet, error) {
    path := "/DeployedDevices/Fleets/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DefaultDeploymentSid != nil {
        data.Set("DefaultDeploymentSid", *params.DefaultDeploymentSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleet{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateHostedNumberOrderParams Optional parameters for the method 'UpdateHostedNumberOrder'
type UpdateHostedNumberOrderParams struct {
    CallDelay *int32 `json:"CallDelay,omitempty"`
    CcEmails *[]string `json:"CcEmails,omitempty"`
    Email *string `json:"Email,omitempty"`
    Extension *string `json:"Extension,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    Status *string `json:"Status,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    VerificationCode *string `json:"VerificationCode,omitempty"`
    VerificationDocumentSid *string `json:"VerificationDocumentSid,omitempty"`
    VerificationType *string `json:"VerificationType,omitempty"`
}

/*
UpdateHostedNumberOrder Method for UpdateHostedNumberOrder
Updates a specific HostedNumberOrder.
 * @param sid
 * @param optional nil or *UpdateHostedNumberOrderOpts - Optional Parameters:
 * @param "CallDelay" (int32) - The number of seconds, between 0 and 60, to delay before initiating the verification call. Defaults to 0.
 * @param "CcEmails" ([]string) - Optional. A list of emails that LOA document for this HostedNumberOrder will be carbon copied to.
 * @param "Email" (string) - Email of the owner of this phone number that is being hosted.
 * @param "Extension" (string) - Digits to dial after connecting the verification call.
 * @param "FriendlyName" (string) - A 64 character string that is a human readable text that describes this resource.
 * @param "Status" (string) - User can only post to `pending-verification` status to transition the HostedNumberOrder to initiate a verification call or verification of ownership with a copy of a phone bill.
 * @param "UniqueName" (string) - Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID.
 * @param "VerificationCode" (string) - A verification code that is given to the user via a phone call to the phone number that is being hosted.
 * @param "VerificationDocumentSid" (string) - Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill.
 * @param "VerificationType" (string) - Optional. The method used for verifying ownership of the number to be hosted. One of phone-call (default) or phone-bill.
@return PreviewHostedNumbersHostedNumberOrder
*/
func (c *DefaultApiService) UpdateHostedNumberOrder(sid string, params *UpdateHostedNumberOrderParams) (*PreviewHostedNumbersHostedNumberOrder, error) {
    path := "/HostedNumbers/HostedNumberOrders/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CallDelay != nil {
        data.Set("CallDelay", string(*params.CallDelay))
    }
    if params != nil && params.CcEmails != nil {
        data.Set("CcEmails", *params.CcEmails)
    }
    if params != nil && params.Email != nil {
        data.Set("Email", *params.Email)
    }
    if params != nil && params.Extension != nil {
        data.Set("Extension", *params.Extension)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.VerificationCode != nil {
        data.Set("VerificationCode", *params.VerificationCode)
    }
    if params != nil && params.VerificationDocumentSid != nil {
        data.Set("VerificationDocumentSid", *params.VerificationDocumentSid)
    }
    if params != nil && params.VerificationType != nil {
        data.Set("VerificationType", *params.VerificationType)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewHostedNumbersHostedNumberOrder{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateInstalledAddOnParams Optional parameters for the method 'UpdateInstalledAddOn'
type UpdateInstalledAddOnParams struct {
    Configuration *map[string]interface{} `json:"Configuration,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateInstalledAddOn Method for UpdateInstalledAddOn
Update an Add-on installation for the Account specified.
 * @param sid The SID of the InstalledAddOn resource to update.
 * @param optional nil or *UpdateInstalledAddOnOpts - Optional Parameters:
 * @param "Configuration" (map[string]interface{}) - Valid JSON object that conform to the configuration schema exposed by the associated AvailableAddOn resource. This is only required by Add-ons that need to be configured
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. This value must be unique within the Account.
@return PreviewMarketplaceInstalledAddOn
*/
func (c *DefaultApiService) UpdateInstalledAddOn(sid string, params *UpdateInstalledAddOnParams) (*PreviewMarketplaceInstalledAddOn, error) {
    path := "/marketplace/InstalledAddOns/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Configuration != nil {
        v, err := json.Marshal(params.Configuration)

        if err != nil {
            return nil, err
        }

        data.Set("Configuration", string(v))
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceInstalledAddOn{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateInstalledAddOnExtensionParams Optional parameters for the method 'UpdateInstalledAddOnExtension'
type UpdateInstalledAddOnExtensionParams struct {
    Enabled *bool `json:"Enabled,omitempty"`
}

/*
UpdateInstalledAddOnExtension Method for UpdateInstalledAddOnExtension
Update an Extension for an Add-on installation.
 * @param installedAddOnSid The SID of the InstalledAddOn resource with the extension to update.
 * @param sid The SID of the InstalledAddOn Extension resource to update.
 * @param optional nil or *UpdateInstalledAddOnExtensionOpts - Optional Parameters:
 * @param "Enabled" (bool) - Whether the Extension should be invoked.
@return PreviewMarketplaceInstalledAddOnInstalledAddOnExtension
*/
func (c *DefaultApiService) UpdateInstalledAddOnExtension(installedAddOnSid string, sid string, params *UpdateInstalledAddOnExtensionParams) (*PreviewMarketplaceInstalledAddOnInstalledAddOnExtension, error) {
    path := "/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}"
    path = strings.Replace(path, "{"+"InstalledAddOnSid"+"}", installedAddOnSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Enabled != nil {
        data.Set("Enabled", string(*params.Enabled))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewMarketplaceInstalledAddOnInstalledAddOnExtension{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateKeyParams Optional parameters for the method 'UpdateKey'
type UpdateKeyParams struct {
    DeviceSid *string `json:"DeviceSid,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
UpdateKey Method for UpdateKey
Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a Device.
 * @param fleetSid
 * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource.
 * @param optional nil or *UpdateKeyOpts - Optional Parameters:
 * @param "DeviceSid" (string) - Provides the unique string identifier of an existing Device to become authenticated with this Key credential.
 * @param "FriendlyName" (string) - Provides a human readable descriptive text for this Key credential, up to 256 characters long.
@return PreviewDeployedDevicesFleetKey
*/
func (c *DefaultApiService) UpdateKey(fleetSid string, sid string, params *UpdateKeyParams) (*PreviewDeployedDevicesFleetKey, error) {
    path := "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}"
    path = strings.Replace(path, "{"+"FleetSid"+"}", fleetSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DeviceSid != nil {
        data.Set("DeviceSid", *params.DeviceSid)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewDeployedDevicesFleetKey{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateModelBuildParams Optional parameters for the method 'UpdateModelBuild'
type UpdateModelBuildParams struct {
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateModelBuild Method for UpdateModelBuild
 * @param assistantSid
 * @param sid
 * @param optional nil or *UpdateModelBuildOpts - Optional Parameters:
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long. For example: v0.1
@return PreviewUnderstandAssistantModelBuild
*/
func (c *DefaultApiService) UpdateModelBuild(assistantSid string, sid string, params *UpdateModelBuildParams) (*PreviewUnderstandAssistantModelBuild, error) {
    path := "/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantModelBuild{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateQueryParams Optional parameters for the method 'UpdateQuery'
type UpdateQueryParams struct {
    SampleSid *string `json:"SampleSid,omitempty"`
    Status *string `json:"Status,omitempty"`
}

/*
UpdateQuery Method for UpdateQuery
 * @param assistantSid The unique ID of the parent Assistant.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateQueryOpts - Optional Parameters:
 * @param "SampleSid" (string) - An optional reference to the Sample created from this query.
 * @param "Status" (string) - A string that described the query status. The values can be: pending_review, reviewed, discarded
@return PreviewUnderstandAssistantQuery
*/
func (c *DefaultApiService) UpdateQuery(assistantSid string, sid string, params *UpdateQueryParams) (*PreviewUnderstandAssistantQuery, error) {
    path := "/understand/Assistants/{AssistantSid}/Queries/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.SampleSid != nil {
        data.Set("SampleSid", *params.SampleSid)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantQuery{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateRatePlanParams Optional parameters for the method 'UpdateRatePlan'
type UpdateRatePlanParams struct {
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateRatePlan Method for UpdateRatePlan
 * @param sid
 * @param optional nil or *UpdateRatePlanOpts - Optional Parameters:
 * @param "FriendlyName" (string) - 
 * @param "UniqueName" (string) - 
@return PreviewWirelessRatePlan
*/
func (c *DefaultApiService) UpdateRatePlan(sid string, params *UpdateRatePlanParams) (*PreviewWirelessRatePlan, error) {
    path := "/wireless/RatePlans/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessRatePlan{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSampleParams Optional parameters for the method 'UpdateSample'
type UpdateSampleParams struct {
    Language *string `json:"Language,omitempty"`
    SourceChannel *string `json:"SourceChannel,omitempty"`
    TaggedText *string `json:"TaggedText,omitempty"`
}

/*
UpdateSample Method for UpdateSample
 * @param assistantSid The unique ID of the Assistant.
 * @param taskSid The unique ID of the Task associated with this Sample.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateSampleOpts - Optional Parameters:
 * @param "Language" (string) - An ISO language-country string of the sample.
 * @param "SourceChannel" (string) - The communication channel the sample was captured. It can be: *voice*, *sms*, *chat*, *alexa*, *google-assistant*, or *slack*. If not included the value will be null
 * @param "TaggedText" (string) - The text example of how end-users may express this task. The sample may contain Field tag blocks.
@return PreviewUnderstandAssistantTaskSample
*/
func (c *DefaultApiService) UpdateSample(assistantSid string, taskSid string, sid string, params *UpdateSampleParams) (*PreviewUnderstandAssistantTaskSample, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Language != nil {
        data.Set("Language", *params.Language)
    }
    if params != nil && params.SourceChannel != nil {
        data.Set("SourceChannel", *params.SourceChannel)
    }
    if params != nil && params.TaggedText != nil {
        data.Set("TaggedText", *params.TaggedText)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskSample{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
    AclEnabled *bool `json:"AclEnabled,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    ReachabilityWebhooksEnabled *bool `json:"ReachabilityWebhooksEnabled,omitempty"`
    WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
UpdateService Method for UpdateService
 * @param sid
 * @param optional nil or *UpdateServiceOpts - Optional Parameters:
 * @param "AclEnabled" (bool) - 
 * @param "FriendlyName" (string) - 
 * @param "ReachabilityWebhooksEnabled" (bool) - 
 * @param "WebhookUrl" (string) - 
@return PreviewSyncService
*/
func (c *DefaultApiService) UpdateService(sid string, params *UpdateServiceParams) (*PreviewSyncService, error) {
    path := "/Sync/Services/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AclEnabled != nil {
        data.Set("AclEnabled", string(*params.AclEnabled))
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.ReachabilityWebhooksEnabled != nil {
        data.Set("ReachabilityWebhooksEnabled", string(*params.ReachabilityWebhooksEnabled))
    }
    if params != nil && params.WebhookUrl != nil {
        data.Set("WebhookUrl", *params.WebhookUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncService{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSimParams Optional parameters for the method 'UpdateSim'
type UpdateSimParams struct {
    CallbackMethod *string `json:"CallbackMethod,omitempty"`
    CallbackUrl *string `json:"CallbackUrl,omitempty"`
    CommandsCallbackMethod *string `json:"CommandsCallbackMethod,omitempty"`
    CommandsCallbackUrl *string `json:"CommandsCallbackUrl,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    RatePlan *string `json:"RatePlan,omitempty"`
    SmsFallbackMethod *string `json:"SmsFallbackMethod,omitempty"`
    SmsFallbackUrl *string `json:"SmsFallbackUrl,omitempty"`
    SmsMethod *string `json:"SmsMethod,omitempty"`
    SmsUrl *string `json:"SmsUrl,omitempty"`
    Status *string `json:"Status,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
    VoiceFallbackMethod *string `json:"VoiceFallbackMethod,omitempty"`
    VoiceFallbackUrl *string `json:"VoiceFallbackUrl,omitempty"`
    VoiceMethod *string `json:"VoiceMethod,omitempty"`
    VoiceUrl *string `json:"VoiceUrl,omitempty"`
}

/*
UpdateSim Method for UpdateSim
 * @param sid
 * @param optional nil or *UpdateSimOpts - Optional Parameters:
 * @param "CallbackMethod" (string) - 
 * @param "CallbackUrl" (string) - 
 * @param "CommandsCallbackMethod" (string) - 
 * @param "CommandsCallbackUrl" (string) - 
 * @param "FriendlyName" (string) - 
 * @param "RatePlan" (string) - 
 * @param "SmsFallbackMethod" (string) - 
 * @param "SmsFallbackUrl" (string) - 
 * @param "SmsMethod" (string) - 
 * @param "SmsUrl" (string) - 
 * @param "Status" (string) - 
 * @param "UniqueName" (string) - 
 * @param "VoiceFallbackMethod" (string) - 
 * @param "VoiceFallbackUrl" (string) - 
 * @param "VoiceMethod" (string) - 
 * @param "VoiceUrl" (string) - 
@return PreviewWirelessSim
*/
func (c *DefaultApiService) UpdateSim(sid string, params *UpdateSimParams) (*PreviewWirelessSim, error) {
    path := "/wireless/Sims/{Sid}"
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CallbackMethod != nil {
        data.Set("CallbackMethod", *params.CallbackMethod)
    }
    if params != nil && params.CallbackUrl != nil {
        data.Set("CallbackUrl", *params.CallbackUrl)
    }
    if params != nil && params.CommandsCallbackMethod != nil {
        data.Set("CommandsCallbackMethod", *params.CommandsCallbackMethod)
    }
    if params != nil && params.CommandsCallbackUrl != nil {
        data.Set("CommandsCallbackUrl", *params.CommandsCallbackUrl)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.RatePlan != nil {
        data.Set("RatePlan", *params.RatePlan)
    }
    if params != nil && params.SmsFallbackMethod != nil {
        data.Set("SmsFallbackMethod", *params.SmsFallbackMethod)
    }
    if params != nil && params.SmsFallbackUrl != nil {
        data.Set("SmsFallbackUrl", *params.SmsFallbackUrl)
    }
    if params != nil && params.SmsMethod != nil {
        data.Set("SmsMethod", *params.SmsMethod)
    }
    if params != nil && params.SmsUrl != nil {
        data.Set("SmsUrl", *params.SmsUrl)
    }
    if params != nil && params.Status != nil {
        data.Set("Status", *params.Status)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }
    if params != nil && params.VoiceFallbackMethod != nil {
        data.Set("VoiceFallbackMethod", *params.VoiceFallbackMethod)
    }
    if params != nil && params.VoiceFallbackUrl != nil {
        data.Set("VoiceFallbackUrl", *params.VoiceFallbackUrl)
    }
    if params != nil && params.VoiceMethod != nil {
        data.Set("VoiceMethod", *params.VoiceMethod)
    }
    if params != nil && params.VoiceUrl != nil {
        data.Set("VoiceUrl", *params.VoiceUrl)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewWirelessSim{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateStyleSheetParams Optional parameters for the method 'UpdateStyleSheet'
type UpdateStyleSheetParams struct {
    StyleSheet *map[string]interface{} `json:"StyleSheet,omitempty"`
}

/*
UpdateStyleSheet Method for UpdateStyleSheet
Updates the style sheet for an assistant identified by {AssistantSid} or {AssistantUniqueName}.
 * @param assistantSid The unique ID of the Assistant
 * @param optional nil or *UpdateStyleSheetOpts - Optional Parameters:
 * @param "StyleSheet" (map[string]interface{}) - The JSON Style sheet string
@return PreviewUnderstandAssistantStyleSheet
*/
func (c *DefaultApiService) UpdateStyleSheet(assistantSid string, params *UpdateStyleSheetParams) (*PreviewUnderstandAssistantStyleSheet, error) {
    path := "/understand/Assistants/{AssistantSid}/StyleSheet"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.StyleSheet != nil {
        v, err := json.Marshal(params.StyleSheet)

        if err != nil {
            return nil, err
        }

        data.Set("StyleSheet", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantStyleSheet{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncListItemParams Optional parameters for the method 'UpdateSyncListItem'
type UpdateSyncListItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
}

/*
UpdateSyncListItem Method for UpdateSyncListItem
 * @param serviceSid
 * @param listSid
 * @param index
 * @param optional nil or *UpdateSyncListItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
 * @param "Data" (map[string]interface{}) - 
@return PreviewSyncServiceSyncListSyncListItem
*/
func (c *DefaultApiService) UpdateSyncListItem(serviceSid string, listSid string, index int32, params *UpdateSyncListItemParams) (*PreviewSyncServiceSyncListSyncListItem, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Index"+"}", index, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }

    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListSyncListItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncListPermissionParams Optional parameters for the method 'UpdateSyncListPermission'
type UpdateSyncListPermissionParams struct {
    Manage *bool `json:"Manage,omitempty"`
    Read *bool `json:"Read,omitempty"`
    Write *bool `json:"Write,omitempty"`
}

/*
UpdateSyncListPermission Method for UpdateSyncListPermission
Update an identity&#39;s access to a specific Sync List.
 * @param serviceSid The unique SID identifier of the Sync Service Instance.
 * @param listSid Identifier of the Sync List. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer.
 * @param optional nil or *UpdateSyncListPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Boolean flag specifying whether the identity can delete the Sync List.
 * @param "Read" (bool) - Boolean flag specifying whether the identity can read the Sync List.
 * @param "Write" (bool) - Boolean flag specifying whether the identity can create, update and delete Items of the Sync List.
@return PreviewSyncServiceSyncListSyncListPermission
*/
func (c *DefaultApiService) UpdateSyncListPermission(serviceSid string, listSid string, identity string, params *UpdateSyncListPermissionParams) (*PreviewSyncServiceSyncListSyncListPermission, error) {
    path := "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"ListSid"+"}", listSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Manage != nil {
        data.Set("Manage", string(*params.Manage))
    }
    if params != nil && params.Read != nil {
        data.Set("Read", string(*params.Read))
    }
    if params != nil && params.Write != nil {
        data.Set("Write", string(*params.Write))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncListSyncListPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncMapItemParams Optional parameters for the method 'UpdateSyncMapItem'
type UpdateSyncMapItemParams struct {
    If-Match *string `json:"If-Match,omitempty"`
    Data *map[string]interface{} `json:"Data,omitempty"`
}

/*
UpdateSyncMapItem Method for UpdateSyncMapItem
 * @param serviceSid
 * @param mapSid
 * @param key
 * @param optional nil or *UpdateSyncMapItemOpts - Optional Parameters:
 * @param "If-Match" (string) - The If-Match HTTP request header
 * @param "Data" (map[string]interface{}) - 
@return PreviewSyncServiceSyncMapSyncMapItem
*/
func (c *DefaultApiService) UpdateSyncMapItem(serviceSid string, mapSid string, key string, params *UpdateSyncMapItemParams) (*PreviewSyncServiceSyncMapSyncMapItem, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Key"+"}", key, -1)

    data := url.Values{}
    headers := make(map[string]interface{})

    if params != nil && params.Data != nil {
        v, err := json.Marshal(params.Data)

        if err != nil {
            return nil, err
        }

        data.Set("Data", string(v))
    }

    if params != nil && params.If-Match != nil {
        headers["If-Match"] = *params.If-Match
    }

    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapSyncMapItem{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateSyncMapPermissionParams Optional parameters for the method 'UpdateSyncMapPermission'
type UpdateSyncMapPermissionParams struct {
    Manage *bool `json:"Manage,omitempty"`
    Read *bool `json:"Read,omitempty"`
    Write *bool `json:"Write,omitempty"`
}

/*
UpdateSyncMapPermission Method for UpdateSyncMapPermission
Update an identity&#39;s access to a specific Sync Map.
 * @param serviceSid The unique SID identifier of the Sync Service Instance.
 * @param mapSid Identifier of the Sync Map. Either a SID or a unique name.
 * @param identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer.
 * @param optional nil or *UpdateSyncMapPermissionOpts - Optional Parameters:
 * @param "Manage" (bool) - Boolean flag specifying whether the identity can delete the Sync Map.
 * @param "Read" (bool) - Boolean flag specifying whether the identity can read the Sync Map.
 * @param "Write" (bool) - Boolean flag specifying whether the identity can create, update and delete Items of the Sync Map.
@return PreviewSyncServiceSyncMapSyncMapPermission
*/
func (c *DefaultApiService) UpdateSyncMapPermission(serviceSid string, mapSid string, identity string, params *UpdateSyncMapPermissionParams) (*PreviewSyncServiceSyncMapSyncMapPermission, error) {
    path := "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}"
    path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
    path = strings.Replace(path, "{"+"MapSid"+"}", mapSid, -1)
    path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Manage != nil {
        data.Set("Manage", string(*params.Manage))
    }
    if params != nil && params.Read != nil {
        data.Set("Read", string(*params.Read))
    }
    if params != nil && params.Write != nil {
        data.Set("Write", string(*params.Write))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewSyncServiceSyncMapSyncMapPermission{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskParams Optional parameters for the method 'UpdateTask'
type UpdateTaskParams struct {
    Actions *map[string]interface{} `json:"Actions,omitempty"`
    ActionsUrl *string `json:"ActionsUrl,omitempty"`
    FriendlyName *string `json:"FriendlyName,omitempty"`
    UniqueName *string `json:"UniqueName,omitempty"`
}

/*
UpdateTask Method for UpdateTask
 * @param assistantSid The unique ID of the Assistant.
 * @param sid A 34 character string that uniquely identifies this resource.
 * @param optional nil or *UpdateTaskOpts - Optional Parameters:
 * @param "Actions" (map[string]interface{}) - A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.
 * @param "ActionsUrl" (string) - User-provided HTTP endpoint where from the assistant fetches actions
 * @param "FriendlyName" (string) - A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
 * @param "UniqueName" (string) - A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
@return PreviewUnderstandAssistantTask
*/
func (c *DefaultApiService) UpdateTask(assistantSid string, sid string, params *UpdateTaskParams) (*PreviewUnderstandAssistantTask, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{Sid}"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Actions != nil {
        v, err := json.Marshal(params.Actions)

        if err != nil {
            return nil, err
        }

        data.Set("Actions", string(v))
    }
    if params != nil && params.ActionsUrl != nil {
        data.Set("ActionsUrl", *params.ActionsUrl)
    }
    if params != nil && params.FriendlyName != nil {
        data.Set("FriendlyName", *params.FriendlyName)
    }
    if params != nil && params.UniqueName != nil {
        data.Set("UniqueName", *params.UniqueName)
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTask{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateTaskActionsParams Optional parameters for the method 'UpdateTaskActions'
type UpdateTaskActionsParams struct {
    Actions *map[string]interface{} `json:"Actions,omitempty"`
}

/*
UpdateTaskActions Method for UpdateTaskActions
Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
 * @param assistantSid The unique ID of the parent Assistant.
 * @param taskSid The unique ID of the Task.
 * @param optional nil or *UpdateTaskActionsOpts - Optional Parameters:
 * @param "Actions" (map[string]interface{}) - The JSON actions that instruct the Assistant how to perform this task.
@return PreviewUnderstandAssistantTaskTaskActions
*/
func (c *DefaultApiService) UpdateTaskActions(assistantSid string, taskSid string, params *UpdateTaskActionsParams) (*PreviewUnderstandAssistantTaskTaskActions, error) {
    path := "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions"
    path = strings.Replace(path, "{"+"AssistantSid"+"}", assistantSid, -1)
    path = strings.Replace(path, "{"+"TaskSid"+"}", taskSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Actions != nil {
        v, err := json.Marshal(params.Actions)

        if err != nil {
            return nil, err
        }

        data.Set("Actions", string(v))
    }


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &PreviewUnderstandAssistantTaskTaskActions{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
