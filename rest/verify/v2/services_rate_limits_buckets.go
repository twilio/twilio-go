/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.19.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"

	"strings"
)

// Optional parameters for the method 'CreateBucket'
type CreateBucketParams struct {
	// Number of seconds that the rate limit will be enforced over.
	Interval *int `json:"Interval,omitempty"`
	// Maximum number of requests permitted in during the interval.
	Max *int `json:"Max,omitempty"`
}

func (params *CreateBucketParams) SetInterval(Interval int) *CreateBucketParams {
	params.Interval = &Interval
	return params
}
func (params *CreateBucketParams) SetMax(Max int) *CreateBucketParams {
	params.Max = &Max
	return params
}

// Create a new Bucket for a Rate Limit
func (c *ApiService) CreateBucket(ServiceSid string, RateLimitSid string, params *CreateBucketParams) (*VerifyV2ServiceRateLimitBucket, error) {
	path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Interval != nil {
		data.Set("Interval", fmt.Sprint(*params.Interval))
	}
	if params != nil && params.Max != nil {
		data.Set("Max", fmt.Sprint(*params.Max))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceRateLimitBucket{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Delete a specific Bucket.
func (c *ApiService) DeleteBucket(ServiceSid string, RateLimitSid string, Sid string) error {
	path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Fetch a specific Bucket.
func (c *ApiService) FetchBucket(ServiceSid string, RateLimitSid string, Sid string) (*VerifyV2ServiceRateLimitBucket, error) {
	path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceRateLimitBucket{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListBucket'
type ListBucketParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
}

func (params *ListBucketParams) SetPageSize(PageSize int) *ListBucketParams {
	params.PageSize = &PageSize
	return params
}

// Retrieve a list of all Buckets for a Rate Limit.
func (c *ApiService) ListBucket(ServiceSid string, RateLimitSid string, params *ListBucketParams) (*ListBucketResponse, error) {
	path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListBucketResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'UpdateBucket'
type UpdateBucketParams struct {
	// Number of seconds that the rate limit will be enforced over.
	Interval *int `json:"Interval,omitempty"`
	// Maximum number of requests permitted in during the interval.
	Max *int `json:"Max,omitempty"`
}

func (params *UpdateBucketParams) SetInterval(Interval int) *UpdateBucketParams {
	params.Interval = &Interval
	return params
}
func (params *UpdateBucketParams) SetMax(Max int) *UpdateBucketParams {
	params.Max = &Max
	return params
}

// Update a specific Bucket.
func (c *ApiService) UpdateBucket(ServiceSid string, RateLimitSid string, Sid string, params *UpdateBucketParams) (*VerifyV2ServiceRateLimitBucket, error) {
	path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Interval != nil {
		data.Set("Interval", fmt.Sprint(*params.Interval))
	}
	if params != nil && params.Max != nil {
		data.Set("Max", fmt.Sprint(*params.Max))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceRateLimitBucket{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
