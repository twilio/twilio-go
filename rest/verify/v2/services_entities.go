/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateEntity'
type CreateEntityParams struct {
	// The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
	Identity *string `json:"Identity,omitempty"`
}

func (params *CreateEntityParams) SetIdentity(Identity string) *CreateEntityParams {
	params.Identity = &Identity
	return params
}

// Create a new Entity for the Service
func (c *ApiService) CreateEntity(ServiceSid string, params *CreateEntityParams) (*VerifyV2Entity, error) {
	return c.CreateEntityWithContext(context.TODO(), ServiceSid, params)
}
func (c *ApiService) CreateEntityWithContext(ctx context.Context, ServiceSid string, params *CreateEntityParams) (*VerifyV2Entity, error) {
	path := "/v2/Services/{ServiceSid}/Entities"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}

	resp, err := c.requestHandler.PostWithContext(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2Entity{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Delete a specific Entity.
func (c *ApiService) DeleteEntity(ServiceSid string, Identity string) error {
	return c.DeleteEntityWithContext(context.TODO(), ServiceSid, Identity)
}
func (c *ApiService) DeleteEntityWithContext(ctx context.Context, ServiceSid string, Identity string) error {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.DeleteWithContext(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Fetch a specific Entity.
func (c *ApiService) FetchEntity(ServiceSid string, Identity string) (*VerifyV2Entity, error) {
	return c.FetchEntityWithContext(context.TODO(), ServiceSid, Identity)
}
func (c *ApiService) FetchEntityWithContext(ctx context.Context, ServiceSid string, Identity string) (*VerifyV2Entity, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.GetWithContext(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2Entity{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListEntity'
type ListEntityParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListEntityParams) SetPageSize(PageSize int) *ListEntityParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListEntityParams) SetLimit(Limit int) *ListEntityParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of Entity records from the API. Request is executed immediately.
func (c *ApiService) PageEntity(ServiceSid string, params *ListEntityParams, pageToken, pageNumber string) (*ListEntityResponse, error) {
	return c.PageEntityWithContext(context.TODO(), ServiceSid, params, pageToken, pageNumber)
}

// Retrieve a single page of Entity records from the API. Request is executed immediately.
func (c *ApiService) PageEntityWithContext(ctx context.Context, ServiceSid string, params *ListEntityParams, pageToken, pageNumber string) (*ListEntityResponse, error) {
	path := "/v2/Services/{ServiceSid}/Entities"

	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.GetWithContext(ctx, c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListEntityResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists Entity records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListEntity(ServiceSid string, params *ListEntityParams) ([]VerifyV2Entity, error) {
	return c.ListEntityWithContext(context.TODO(), ServiceSid, params)
}

// Lists Entity records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListEntityWithContext(ctx context.Context, ServiceSid string, params *ListEntityParams) ([]VerifyV2Entity, error) {
	response, errors := c.StreamEntityWithContext(ctx, ServiceSid, params)

	records := make([]VerifyV2Entity, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams Entity records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamEntity(ServiceSid string, params *ListEntityParams) (chan VerifyV2Entity, chan error) {
	return c.StreamEntityWithContext(context.TODO(), ServiceSid, params)
}

// Streams Entity records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamEntityWithContext(ctx context.Context, ServiceSid string, params *ListEntityParams) (chan VerifyV2Entity, chan error) {
	if params == nil {
		params = &ListEntityParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan VerifyV2Entity, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageEntityWithContext(ctx, ServiceSid, params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamEntityWithContext(ctx, response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamEntityWithContext(ctx context.Context, response *ListEntityResponse, params *ListEntityParams, recordChannel chan VerifyV2Entity, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Entities
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNextWithContext(ctx, c.baseURL, response, c.getNextListEntityResponseWithContext)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListEntityResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListEntityResponseWithContext(ctx context.Context, nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.GetWithContext(ctx, nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListEntityResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}
