/*
 * Twilio - Media
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.24.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"

	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreatePlayerStreamer'
type CreatePlayerStreamerParams struct {
	// The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.
	StatusCallback *string `json:"StatusCallback,omitempty"`
	// The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	// Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.
	Video *bool `json:"Video,omitempty"`
}

func (params *CreatePlayerStreamerParams) SetStatusCallback(StatusCallback string) *CreatePlayerStreamerParams {
	params.StatusCallback = &StatusCallback
	return params
}
func (params *CreatePlayerStreamerParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreatePlayerStreamerParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreatePlayerStreamerParams) SetVideo(Video bool) *CreatePlayerStreamerParams {
	params.Video = &Video
	return params
}

func (c *ApiService) CreatePlayerStreamer(params *CreatePlayerStreamerParams) (*MediaV1PlayerStreamer, error) {
	path := "/v1/PlayerStreamers"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.StatusCallback != nil {
		data.Set("StatusCallback", *params.StatusCallback)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("StatusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.Video != nil {
		data.Set("Video", fmt.Sprint(*params.Video))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MediaV1PlayerStreamer{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Returns a single PlayerStreamer resource identified by a SID.
func (c *ApiService) FetchPlayerStreamer(Sid string) (*MediaV1PlayerStreamer, error) {
	path := "/v1/PlayerStreamers/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MediaV1PlayerStreamer{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListPlayerStreamer'
type ListPlayerStreamerParams struct {
	// The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
	Order *string `json:"Order,omitempty"`
	// Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
	Status *string `json:"Status,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListPlayerStreamerParams) SetOrder(Order string) *ListPlayerStreamerParams {
	params.Order = &Order
	return params
}
func (params *ListPlayerStreamerParams) SetStatus(Status string) *ListPlayerStreamerParams {
	params.Status = &Status
	return params
}
func (params *ListPlayerStreamerParams) SetPageSize(PageSize int) *ListPlayerStreamerParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListPlayerStreamerParams) SetLimit(Limit int) *ListPlayerStreamerParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of PlayerStreamer records from the API. Request is executed immediately.
func (c *ApiService) PagePlayerStreamer(params *ListPlayerStreamerParams, pageToken, pageNumber string) (*ListPlayerStreamerResponse, error) {
	path := "/v1/PlayerStreamers"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Order != nil {
		data.Set("Order", *params.Order)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListPlayerStreamerResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists PlayerStreamer records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListPlayerStreamer(params *ListPlayerStreamerParams) ([]MediaV1PlayerStreamer, error) {
	if params == nil {
		params = &ListPlayerStreamerParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	response, err := c.PagePlayerStreamer(params, "", "")
	if err != nil {
		return nil, err
	}

	curRecord := 0
	var records []MediaV1PlayerStreamer

	for response != nil {
		records = append(records, response.PlayerStreamers...)

		var record interface{}
		if record, err = client.GetNext(c.baseURL, response, &curRecord, params.Limit, c.getNextListPlayerStreamerResponse); record == nil || err != nil {
			return records, err
		}

		response = record.(*ListPlayerStreamerResponse)
	}

	return records, err
}

// Streams PlayerStreamer records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamPlayerStreamer(params *ListPlayerStreamerParams) (chan MediaV1PlayerStreamer, error) {
	if params == nil {
		params = &ListPlayerStreamerParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	response, err := c.PagePlayerStreamer(params, "", "")
	if err != nil {
		return nil, err
	}

	curRecord := 0
	//set buffer size of the channel to 1
	channel := make(chan MediaV1PlayerStreamer, 1)

	go func() {
		for response != nil {
			for item := range response.PlayerStreamers {
				channel <- response.PlayerStreamers[item]
			}

			var record interface{}
			if record, err = client.GetNext(c.baseURL, response, &curRecord, params.Limit, c.getNextListPlayerStreamerResponse); record == nil || err != nil {
				close(channel)
				return
			}

			response = record.(*ListPlayerStreamerResponse)
		}
		close(channel)
	}()

	return channel, err
}

func (c *ApiService) getNextListPlayerStreamerResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListPlayerStreamerResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}

// Optional parameters for the method 'UpdatePlayerStreamer'
type UpdatePlayerStreamerParams struct {
	// The status the PlayerStreamer should be transitioned to. Can be: `ended`.
	Status *string `json:"Status,omitempty"`
}

func (params *UpdatePlayerStreamerParams) SetStatus(Status string) *UpdatePlayerStreamerParams {
	params.Status = &Status
	return params
}

// Updates a PlayerStreamer resource identified by a SID.
func (c *ApiService) UpdatePlayerStreamer(Sid string, params *UpdatePlayerStreamerParams) (*MediaV1PlayerStreamer, error) {
	path := "/v1/PlayerStreamers/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MediaV1PlayerStreamer{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
