/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService {
		client: client,
		baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
	}
}
// CreateEngagementParams Optional parameters for the method 'CreateEngagement'
type CreateEngagementParams struct {
	From *string `json:"From,omitempty"`
	Parameters *map[string]interface{} `json:"Parameters,omitempty"`
	To *string `json:"To,omitempty"`
}

/*
CreateEngagement Method for CreateEngagement
Triggers a new Engagement for the Flow
 * @param flowSid The SID of the Flow.
 * @param optional nil or *CreateEngagementOpts - Optional Parameters:
 * @param "From" (string) - The Twilio phone number to send messages or initiate calls from during the Flow Engagement. Available as variable `{{flow.channel.address}}`
 * @param "Parameters" (map[string]interface{}) - A JSON string we will add to your flow's context and that you can access as variables inside your flow. For example, if you pass in `Parameters={'name':'Zeke'}` then inside a widget you can reference the variable `{{flow.data.name}}` which will return the string 'Zeke'. Note: the JSON value must explicitly be passed as a string, not as a hash object. Depending on your particular HTTP library, you may need to add quotes or URL encode your JSON string.
 * @param "To" (string) - The Contact phone number to start a Studio Flow Engagement, available as variable `{{contact.channel.address}}`.
@return StudioV1FlowEngagement
*/
func (c *DefaultApiService) CreateEngagement(flowSid string, params *CreateEngagementParams) (*StudioV1FlowEngagement, error) {
	path := "/v1/Flows/{FlowSid}/Engagements"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.Parameters != nil {
		v, err := json.Marshal(params.Parameters)

		if err != nil {
			return nil, err
		}

		data.Set("Parameters", string(v))
	}
	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowEngagement{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// CreateExecutionParams Optional parameters for the method 'CreateExecution'
type CreateExecutionParams struct {
	From *string `json:"From,omitempty"`
	Parameters *map[string]interface{} `json:"Parameters,omitempty"`
	To *string `json:"To,omitempty"`
}

/*
CreateExecution Method for CreateExecution
Triggers a new Execution for the Flow
 * @param flowSid The SID of the Excecution's Flow.
 * @param optional nil or *CreateExecutionOpts - Optional Parameters:
 * @param "From" (string) - The Twilio phone number to send messages or initiate calls from during the Flow's Execution. Available as variable `{{flow.channel.address}}`.
 * @param "Parameters" (map[string]interface{}) - JSON data that will be added to the Flow's context and that can be accessed as variables inside your Flow. For example, if you pass in `Parameters={\\\"name\\\":\\\"Zeke\\\"}`, a widget in your Flow can reference the variable `{{flow.data.name}}`, which returns \\\"Zeke\\\". Note: the JSON value must explicitly be passed as a string, not as a hash object. Depending on your particular HTTP library, you may need to add quotes or URL encode the JSON string.
 * @param "To" (string) - The Contact phone number to start a Studio Flow Execution, available as variable `{{contact.channel.address}}`.
@return StudioV1FlowExecution
*/
func (c *DefaultApiService) CreateExecution(flowSid string, params *CreateExecutionParams) (*StudioV1FlowExecution, error) {
	path := "/v1/Flows/{FlowSid}/Executions"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.Parameters != nil {
		v, err := json.Marshal(params.Parameters)

		if err != nil {
			return nil, err
		}

		data.Set("Parameters", string(v))
	}
	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecution{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
DeleteEngagement Method for DeleteEngagement
Delete this Engagement and all Steps relating to it.
 * @param flowSid The SID of the Flow to delete Engagements from.
 * @param sid The SID of the Engagement resource to delete.
*/
func (c *DefaultApiService) DeleteEngagement(flowSid string, sid string) (error) {
	path := "/v1/Flows/{FlowSid}/Engagements/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteExecution Method for DeleteExecution
Delete the Execution and all Steps relating to it.
 * @param flowSid The SID of the Flow with the Execution resources to delete.
 * @param sid The SID of the Execution resource to delete.
*/
func (c *DefaultApiService) DeleteExecution(flowSid string, sid string) (error) {
	path := "/v1/Flows/{FlowSid}/Executions/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteFlow Method for DeleteFlow
Delete a specific Flow.
 * @param sid The SID of the Flow resource to delete.
*/
func (c *DefaultApiService) DeleteFlow(sid string) (error) {
	path := "/v1/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
FetchEngagement Method for FetchEngagement
Retrieve an Engagement
 * @param flowSid The SID of the Flow.
 * @param sid The SID of the Engagement resource to fetch.
@return StudioV1FlowEngagement
*/
func (c *DefaultApiService) FetchEngagement(flowSid string, sid string) (*StudioV1FlowEngagement, error) {
	path := "/v1/Flows/{FlowSid}/Engagements/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowEngagement{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchEngagementContext Method for FetchEngagementContext
Retrieve the most recent context for an Engagement.
 * @param flowSid The SID of the Flow.
 * @param engagementSid The SID of the Engagement.
@return StudioV1FlowEngagementEngagementContext
*/
func (c *DefaultApiService) FetchEngagementContext(flowSid string, engagementSid string) (*StudioV1FlowEngagementEngagementContext, error) {
	path := "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Context"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"EngagementSid"+"}", engagementSid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowEngagementEngagementContext{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchExecution Method for FetchExecution
Retrieve an Execution
 * @param flowSid The SID of the Flow with the Execution resource to fetch
 * @param sid The SID of the Execution resource to fetch.
@return StudioV1FlowExecution
*/
func (c *DefaultApiService) FetchExecution(flowSid string, sid string) (*StudioV1FlowExecution, error) {
	path := "/v1/Flows/{FlowSid}/Executions/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecution{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchExecutionContext Method for FetchExecutionContext
Retrieve the most recent context for an Execution.
 * @param flowSid The SID of the Flow with the Execution context to fetch.
 * @param executionSid The SID of the Execution context to fetch.
@return StudioV1FlowExecutionExecutionContext
*/
func (c *DefaultApiService) FetchExecutionContext(flowSid string, executionSid string) (*StudioV1FlowExecutionExecutionContext, error) {
	path := "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Context"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", executionSid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecutionExecutionContext{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchExecutionStep Method for FetchExecutionStep
Retrieve a Step.
 * @param flowSid The SID of the Flow with the Step to fetch.
 * @param executionSid The SID of the Execution resource with the Step to fetch.
 * @param sid The SID of the ExecutionStep resource to fetch.
@return StudioV1FlowExecutionExecutionStep
*/
func (c *DefaultApiService) FetchExecutionStep(flowSid string, executionSid string, sid string) (*StudioV1FlowExecutionExecutionStep, error) {
	path := "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", executionSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecutionExecutionStep{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchExecutionStepContext Method for FetchExecutionStepContext
Retrieve the context for an Execution Step.
 * @param flowSid The SID of the Flow with the Step to fetch.
 * @param executionSid The SID of the Execution resource with the Step to fetch.
 * @param stepSid The SID of the Step to fetch.
@return StudioV1FlowExecutionExecutionStepExecutionStepContext
*/
func (c *DefaultApiService) FetchExecutionStepContext(flowSid string, executionSid string, stepSid string) (*StudioV1FlowExecutionExecutionStepExecutionStepContext, error) {
	path := "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", executionSid, -1)
	path = strings.Replace(path, "{"+"StepSid"+"}", stepSid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecutionExecutionStepExecutionStepContext{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchFlow Method for FetchFlow
Retrieve a specific Flow.
 * @param sid The SID of the Flow resource to fetch.
@return StudioV1Flow
*/
func (c *DefaultApiService) FetchFlow(sid string) (*StudioV1Flow, error) {
	path := "/v1/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchStep Method for FetchStep
Retrieve a Step.
 * @param flowSid The SID of the Flow with the Step to fetch.
 * @param engagementSid The SID of the Engagement with the Step to fetch.
 * @param sid The SID of the Step resource to fetch.
@return StudioV1FlowEngagementStep
*/
func (c *DefaultApiService) FetchStep(flowSid string, engagementSid string, sid string) (*StudioV1FlowEngagementStep, error) {
	path := "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"EngagementSid"+"}", engagementSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowEngagementStep{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchStepContext Method for FetchStepContext
Retrieve the context for an Engagement Step.
 * @param flowSid The SID of the Flow with the Step to fetch.
 * @param engagementSid The SID of the Engagement with the Step to fetch.
 * @param stepSid The SID of the Step to fetch
@return StudioV1FlowEngagementStepStepContext
*/
func (c *DefaultApiService) FetchStepContext(flowSid string, engagementSid string, stepSid string) (*StudioV1FlowEngagementStepStepContext, error) {
	path := "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps/{StepSid}/Context"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"EngagementSid"+"}", engagementSid, -1)
	path = strings.Replace(path, "{"+"StepSid"+"}", stepSid, -1)

	data := 0
	headers := 0



	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowEngagementStepStepContext{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListEngagementParams Optional parameters for the method 'ListEngagement'
type ListEngagementParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListEngagement Method for ListEngagement
Retrieve a list of all Engagements for the Flow.
 * @param flowSid The SID of the Flow to read Engagements from.
 * @param optional nil or *ListEngagementOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return StudioV1FlowEngagementReadResponse
*/
func (c *DefaultApiService) ListEngagement(flowSid string, params *ListEngagementParams) (*StudioV1FlowEngagementReadResponse, error) {
	path := "/v1/Flows/{FlowSid}/Engagements"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowEngagementReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListExecutionParams Optional parameters for the method 'ListExecution'
type ListExecutionParams struct {
	DateCreatedFrom *time.Time `json:"DateCreatedFrom,omitempty"`
	DateCreatedTo *time.Time `json:"DateCreatedTo,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListExecution Method for ListExecution
Retrieve a list of all Executions for the Flow.
 * @param flowSid The SID of the Flow with the Execution resources to read.
 * @param optional nil or *ListExecutionOpts - Optional Parameters:
 * @param "DateCreatedFrom" (time.Time) - Only show Execution resources starting on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
 * @param "DateCreatedTo" (time.Time) - Only show Execution resources starting before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return StudioV1FlowExecutionReadResponse
*/
func (c *DefaultApiService) ListExecution(flowSid string, params *ListExecutionParams) (*StudioV1FlowExecutionReadResponse, error) {
	path := "/v1/Flows/{FlowSid}/Executions"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.DateCreatedFrom != nil {
		data.Set("DateCreatedFrom", string(*params.DateCreatedFrom))
	}
	if params != nil && params.DateCreatedTo != nil {
		data.Set("DateCreatedTo", string(*params.DateCreatedTo))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecutionReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListExecutionStepParams Optional parameters for the method 'ListExecutionStep'
type ListExecutionStepParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListExecutionStep Method for ListExecutionStep
Retrieve a list of all Steps for an Execution.
 * @param flowSid The SID of the Flow with the Steps to read.
 * @param executionSid The SID of the Execution with the Steps to read.
 * @param optional nil or *ListExecutionStepOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return StudioV1FlowExecutionExecutionStepReadResponse
*/
func (c *DefaultApiService) ListExecutionStep(flowSid string, executionSid string, params *ListExecutionStepParams) (*StudioV1FlowExecutionExecutionStepReadResponse, error) {
	path := "/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", executionSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecutionExecutionStepReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListFlowParams Optional parameters for the method 'ListFlow'
type ListFlowParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFlow Method for ListFlow
Retrieve a list of all Flows.
 * @param optional nil or *ListFlowOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return StudioV1FlowReadResponse
*/
func (c *DefaultApiService) ListFlow(params *ListFlowParams) (*StudioV1FlowReadResponse, error) {
	path := "/v1/Flows"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListStepParams Optional parameters for the method 'ListStep'
type ListStepParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListStep Method for ListStep
Retrieve a list of all Steps for an Engagement.
 * @param flowSid The SID of the Flow with the Step to read.
 * @param engagementSid The SID of the Engagement with the Step to read.
 * @param optional nil or *ListStepOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return StudioV1FlowEngagementStepReadResponse
*/
func (c *DefaultApiService) ListStep(flowSid string, engagementSid string, params *ListStepParams) (*StudioV1FlowEngagementStepReadResponse, error) {
	path := "/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"EngagementSid"+"}", engagementSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", string(*params.PageSize))
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowEngagementStepReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// UpdateExecutionParams Optional parameters for the method 'UpdateExecution'
type UpdateExecutionParams struct {
	Status *string `json:"Status,omitempty"`
}

/*
UpdateExecution Method for UpdateExecution
Update the status of an Execution to &#x60;ended&#x60;.
 * @param flowSid The SID of the Flow with the Execution resources to update.
 * @param sid The SID of the Execution resource to update.
 * @param optional nil or *UpdateExecutionOpts - Optional Parameters:
 * @param "Status" (string) - The status of the Execution. Can only be `ended`.
@return StudioV1FlowExecution
*/
func (c *DefaultApiService) UpdateExecution(flowSid string, sid string, params *UpdateExecutionParams) (*StudioV1FlowExecution, error) {
	path := "/v1/Flows/{FlowSid}/Executions/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", flowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV1FlowExecution{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
