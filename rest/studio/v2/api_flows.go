/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 5.15.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
)

type FlowsApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewFlowsApiService(client *twilio.Client) *FlowsApiService {
	return &FlowsApiService {
		client: client,
		baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
	}
}
// CreateFlowParams Optional parameters for the method 'CreateFlow'
type CreateFlowParams struct {
	CommitMessage *string `json:"CommitMessage,omitempty"`
	Definition *map[string]interface{} `json:"Definition,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Status *string `json:"Status,omitempty"`
}

/*
CreateFlow Method for CreateFlow
Create a Flow.
 * @param optional nil or *CreateFlowOpts - Optional Parameters:
 * @param "CommitMessage" (string) - Description on change made in the revision.
 * @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
 * @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
 * @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
@return StudioV2Flow
*/
func (c *FlowsApiService) CreateFlow(params *CreateFlowParams) (*StudioV2Flow, error) {
	path := "/v2/Flows"


	data := url.Values{}
	headers := 0

	if params != nil && params.CommitMessage != nil {
		data.Set("CommitMessage", *params.CommitMessage) 
	}
	if params != nil && params.Definition != nil {
		v, err := json.Marshal(params.Definition)

		if err != nil {
			return nil, err
		}

		data.Set("Definition", fmt.Sprint(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName) 
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status) 
	}


	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
// ListFlowParams Optional parameters for the method 'ListFlow'
type ListFlowParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListFlow Method for ListFlow
Retrieve a list of all Flows.
 * @param optional nil or *ListFlowOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return StudioV2FlowReadResponse
*/
func (c *FlowsApiService) ListFlow(params *ListFlowParams) (*StudioV2FlowReadResponse, error) {
	path := "/v2/Flows"


	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
	}


	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowReadResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
