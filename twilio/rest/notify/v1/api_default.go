/*
 * Twilio - Notify
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.14.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	twilio "github.com/twilio/twilio-go/client"
)

type DefaultApiService struct {
	baseURL string
	client  twilio.BaseClient
}

func NewDefaultApiService(client twilio.BaseClient) *DefaultApiService {
	return &DefaultApiService{
		client:  client,
		baseURL: "https://notify.twilio.com",
	}
}

// CreateBindingParams Optional parameters for the method 'CreateBinding'
type CreateBindingParams struct {
	Address                     *string   `json:"Address,omitempty"`
	BindingType                 *string   `json:"BindingType,omitempty"`
	CredentialSid               *string   `json:"CredentialSid,omitempty"`
	Endpoint                    *string   `json:"Endpoint,omitempty"`
	Identity                    *string   `json:"Identity,omitempty"`
	NotificationProtocolVersion *string   `json:"NotificationProtocolVersion,omitempty"`
	Tag                         *[]string `json:"Tag,omitempty"`
}

// CreateBinding Method for CreateBinding
//
// * @param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) to create the resource under.
//
// * @param: optional nil or *CreateBindingParams - Optional Parameters:
//
// * @param: "Address" (string) - The channel-specific address. For APNS, the device token. For FCM and GCM, the registration token. For SMS, a phone number in E.164 format. For Facebook Messenger, the Messenger ID of the user or a phone number in E.164 format.
//
// * @param: "BindingType" (string) - The transport technology to use for the Binding. Can be: `apn`, `fcm`, `gcm`, `sms`, or `facebook-messenger`.
//
// * @param: "CredentialSid" (string) - The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) resource to be used to send notifications to this Binding. If present, this overrides the Credential specified in the Service resource. Applies to only `apn`, `fcm`, and `gcm` type Bindings.
//
// * @param: "Endpoint" (string) - Deprecated.
//
// * @param: "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/notify/api/service-resource). Up to 20 Bindings can be created for the same Identity in a given Service.
//
// * @param: "NotificationProtocolVersion" (string) - The protocol version to use to send the notification. This defaults to the value of `default_xxxx_notification_protocol_version` for the protocol in the [Service](https://www.twilio.com/docs/notify/api/service-resource). The current version is `\\\"3\\\"` for `apn`, `fcm`, and `gcm` type Bindings. The parameter is not applicable to `sms` and `facebook-messenger` type Bindings as the data format is fixed.
//
// * @param: "Tag" ([]string) - A tag that can be used to select the Bindings to notify. Repeat this parameter to specify more than one tag, up to a total of 20 tags.
//
// * @return: NotifyV1ServiceBinding
func (c *DefaultApiService) CreateBinding(ServiceSid string, params *CreateBindingParams) (*NotifyV1ServiceBinding, error) {
	path := "/v1/Services/{ServiceSid}/Bindings"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Address != nil {
		data.Set("Address", *params.Address)
	}
	if params != nil && params.BindingType != nil {
		data.Set("BindingType", *params.BindingType)
	}
	if params != nil && params.CredentialSid != nil {
		data.Set("CredentialSid", *params.CredentialSid)
	}
	if params != nil && params.Endpoint != nil {
		data.Set("Endpoint", *params.Endpoint)
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.NotificationProtocolVersion != nil {
		data.Set("NotificationProtocolVersion", *params.NotificationProtocolVersion)
	}
	if params != nil && params.Tag != nil {
		data.Set("Tag", strings.Join(*params.Tag, ","))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1ServiceBinding{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCredentialParams Optional parameters for the method 'CreateCredential'
type CreateCredentialParams struct {
	ApiKey       *string `json:"ApiKey,omitempty"`
	Certificate  *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey   *string `json:"PrivateKey,omitempty"`
	Sandbox      *bool   `json:"Sandbox,omitempty"`
	Secret       *string `json:"Secret,omitempty"`
	Type         *string `json:"Type,omitempty"`
}

// CreateCredential Method for CreateCredential
//
// * @param: optional nil or *CreateCredentialParams - Optional Parameters:
//
// * @param: "ApiKey" (string) - [GCM only] The `Server key` of your project from Firebase console under Settings / Cloud messaging.
//
// * @param: "Certificate" (string) - [APN only] The URL-encoded representation of the certificate. Strip everything outside of the headers, e.g. `-----BEGIN CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----`
//
// * @param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// * @param: "PrivateKey" (string) - [APN only] The URL-encoded representation of the private key. Strip everything outside of the headers, e.g. `-----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\\\\n.-----END RSA PRIVATE KEY-----`
//
// * @param: "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
//
// * @param: "Secret" (string) - [FCM only] The `Server key` of your project from Firebase console under Settings / Cloud messaging.
//
// * @param: "Type" (string) - The Credential type. Can be: `gcm`, `fcm`, or `apn`.
//
// * @return: NotifyV1Credential
func (c *DefaultApiService) CreateCredential(params *CreateCredentialParams) (*NotifyV1Credential, error) {
	path := "/v1/Credentials"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", fmt.Sprint(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateNotificationParams Optional parameters for the method 'CreateNotification'
type CreateNotificationParams struct {
	Action              *string                 `json:"Action,omitempty"`
	Alexa               *map[string]interface{} `json:"Alexa,omitempty"`
	Apn                 *map[string]interface{} `json:"Apn,omitempty"`
	Body                *string                 `json:"Body,omitempty"`
	Data                *map[string]interface{} `json:"Data,omitempty"`
	DeliveryCallbackUrl *string                 `json:"DeliveryCallbackUrl,omitempty"`
	FacebookMessenger   *map[string]interface{} `json:"FacebookMessenger,omitempty"`
	Fcm                 *map[string]interface{} `json:"Fcm,omitempty"`
	Gcm                 *map[string]interface{} `json:"Gcm,omitempty"`
	Identity            *[]string               `json:"Identity,omitempty"`
	Priority            *string                 `json:"Priority,omitempty"`
	Segment             *[]string               `json:"Segment,omitempty"`
	Sms                 *map[string]interface{} `json:"Sms,omitempty"`
	Sound               *string                 `json:"Sound,omitempty"`
	Tag                 *[]string               `json:"Tag,omitempty"`
	Title               *string                 `json:"Title,omitempty"`
	ToBinding           *[]string               `json:"ToBinding,omitempty"`
	Ttl                 *int32                  `json:"Ttl,omitempty"`
}

// CreateNotification Method for CreateNotification
//
// * @param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) to create the resource under.
//
// * @param: optional nil or *CreateNotificationParams - Optional Parameters:
//
// * @param: "Action" (string) - The actions to display for the notification. For APNS, translates to the `aps.category` value. For GCM, translates to the `data.twi_action` value. For SMS, this parameter is not supported and is omitted from deliveries to those channels.
//
// * @param: "Alexa" (map[string]interface{}) - Deprecated.
//
// * @param: "Apn" (map[string]interface{}) - The APNS-specific payload that overrides corresponding attributes in the generic payload for APNS Bindings. This property maps to the APNS `Payload` item, therefore the `aps` key must be used to change standard attributes. Adds custom key-value pairs to the root of the dictionary. See the [APNS documentation](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html) for more details. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed.
//
// * @param: "Body" (string) - The notification text. For FCM and GCM, translates to `data.twi_body`. For APNS, translates to `aps.alert.body`. For SMS, translates to `body`. SMS requires either this `body` value, or `media_urls` attribute defined in the `sms` parameter of the notification.
//
// * @param: "Data" (map[string]interface{}) - The custom key-value pairs of the notification's payload. For FCM and GCM, this value translates to `data` in the FCM and GCM payloads. FCM and GCM [reserve certain keys](https://firebase.google.com/docs/cloud-messaging/http-server-ref) that cannot be used in those channels. For APNS, attributes of `data` are inserted into the APNS payload as custom properties outside of the `aps` dictionary. In all channels, we reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed and are rejected as 400 Bad request with no delivery attempted. For SMS, this parameter is not supported and is omitted from deliveries to those channels.
//
// * @param: "DeliveryCallbackUrl" (string) - URL to send webhooks.
//
// * @param: "FacebookMessenger" (map[string]interface{}) - Deprecated.
//
// * @param: "Fcm" (map[string]interface{}) - The FCM-specific payload that overrides corresponding attributes in the generic payload for FCM Bindings. This property maps to the root JSON dictionary. See the [FCM documentation](https://firebase.google.com/docs/cloud-messaging/http-server-ref#downstream) for more details. Target parameters `to`, `registration_ids`, `condition`, and `notification_key` are not allowed in this parameter. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed. FCM also [reserves certain keys](https://firebase.google.com/docs/cloud-messaging/http-server-ref), which cannot be used in that channel.
//
// * @param: "Gcm" (map[string]interface{}) - The GCM-specific payload that overrides corresponding attributes in the generic payload for GCM Bindings.  This property maps to the root JSON dictionary. See the [GCM documentation](https://firebase.google.com/docs/cloud-messaging/http-server-ref) for more details. Target parameters `to`, `registration_ids`, and `notification_key` are not allowed. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed. GCM also [reserves certain keys](https://firebase.google.com/docs/cloud-messaging/http-server-ref).
//
// * @param: "Identity" ([]string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/notify/api/service-resource). Delivery will be attempted only to Bindings with an Identity in this list. No more than 20 items are allowed in this list.
//
// * @param: "Priority" (string) - The priority of the notification. Can be: `low` or `high` and the default is `high`. A value of `low` optimizes the client app's battery consumption; however, notifications may be delivered with unspecified delay. For FCM and GCM, `low` priority is the same as `Normal` priority. For APNS `low` priority is the same as `5`. A value of `high` sends the notification immediately, and can wake up a sleeping device. For FCM and GCM, `high` is the same as `High` priority. For APNS, `high` is a priority `10`. SMS does not support this property.
//
// * @param: "Segment" ([]string) - The Segment resource is deprecated. Use the `tag` parameter, instead.
//
// * @param: "Sms" (map[string]interface{}) - The SMS-specific payload that overrides corresponding attributes in the generic payload for SMS Bindings.  Each attribute in this value maps to the corresponding `form` parameter of the Twilio [Message](https://www.twilio.com/docs/sms/send-messages) resource.  These parameters of the Message resource are supported in snake case format: `body`, `media_urls`, `status_callback`, and `max_price`.  The `status_callback` parameter overrides the corresponding parameter in the messaging service, if configured. The `media_urls` property expects a JSON array.
//
// * @param: "Sound" (string) - The name of the sound to be played for the notification. For FCM and GCM, this Translates to `data.twi_sound`.  For APNS, this translates to `aps.sound`.  SMS does not support this property.
//
// * @param: "Tag" ([]string) - A tag that selects the Bindings to notify. Repeat this parameter to specify more than one tag, up to a total of 5 tags. The implicit tag `all` is available to notify all Bindings in a Service instance. Similarly, the implicit tags `apn`, `fcm`, `gcm`, `sms` and `facebook-messenger` are available to notify all Bindings in a specific channel.
//
// * @param: "Title" (string) - The notification title. For FCM and GCM, this translates to the `data.twi_title` value. For APNS, this translates to the `aps.alert.title` value. SMS does not support this property. This field is not visible on iOS phones and tablets but appears on Apple Watch and Android devices.
//
// * @param: "ToBinding" ([]string) - The destination address specified as a JSON string.  Multiple `to_binding` parameters can be included but the total size of the request entity should not exceed 1MB. This is typically sufficient for 10,000 phone numbers.
//
// * @param: "Ttl" (int32) - How long, in seconds, the notification is valid. Can be an integer between 0 and 2,419,200, which is 4 weeks, the default and the maximum supported time to live (TTL). Delivery should be attempted if the device is offline until the TTL elapses. Zero means that the notification delivery is attempted immediately, only once, and is not stored for future delivery. SMS does not support this property.
//
// * @return: NotifyV1ServiceNotification
func (c *DefaultApiService) CreateNotification(ServiceSid string, params *CreateNotificationParams) (*NotifyV1ServiceNotification, error) {
	path := "/v1/Services/{ServiceSid}/Notifications"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Action != nil {
		data.Set("Action", *params.Action)
	}
	if params != nil && params.Alexa != nil {
		v, err := json.Marshal(params.Alexa)

		if err != nil {
			return nil, err
		}

		data.Set("Alexa", string(v))
	}
	if params != nil && params.Apn != nil {
		v, err := json.Marshal(params.Apn)

		if err != nil {
			return nil, err
		}

		data.Set("Apn", string(v))
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.Data != nil {
		v, err := json.Marshal(params.Data)

		if err != nil {
			return nil, err
		}

		data.Set("Data", string(v))
	}
	if params != nil && params.DeliveryCallbackUrl != nil {
		data.Set("DeliveryCallbackUrl", *params.DeliveryCallbackUrl)
	}
	if params != nil && params.FacebookMessenger != nil {
		v, err := json.Marshal(params.FacebookMessenger)

		if err != nil {
			return nil, err
		}

		data.Set("FacebookMessenger", string(v))
	}
	if params != nil && params.Fcm != nil {
		v, err := json.Marshal(params.Fcm)

		if err != nil {
			return nil, err
		}

		data.Set("Fcm", string(v))
	}
	if params != nil && params.Gcm != nil {
		v, err := json.Marshal(params.Gcm)

		if err != nil {
			return nil, err
		}

		data.Set("Gcm", string(v))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", strings.Join(*params.Identity, ","))
	}
	if params != nil && params.Priority != nil {
		data.Set("Priority", *params.Priority)
	}
	if params != nil && params.Segment != nil {
		data.Set("Segment", strings.Join(*params.Segment, ","))
	}
	if params != nil && params.Sms != nil {
		v, err := json.Marshal(params.Sms)

		if err != nil {
			return nil, err
		}

		data.Set("Sms", string(v))
	}
	if params != nil && params.Sound != nil {
		data.Set("Sound", *params.Sound)
	}
	if params != nil && params.Tag != nil {
		data.Set("Tag", strings.Join(*params.Tag, ","))
	}
	if params != nil && params.Title != nil {
		data.Set("Title", *params.Title)
	}
	if params != nil && params.ToBinding != nil {
		data.Set("ToBinding", strings.Join(*params.ToBinding, ","))
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1ServiceNotification{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
	AlexaSkillId                            *string `json:"AlexaSkillId,omitempty"`
	ApnCredentialSid                        *string `json:"ApnCredentialSid,omitempty"`
	DefaultAlexaNotificationProtocolVersion *string `json:"DefaultAlexaNotificationProtocolVersion,omitempty"`
	DefaultApnNotificationProtocolVersion   *string `json:"DefaultApnNotificationProtocolVersion,omitempty"`
	DefaultFcmNotificationProtocolVersion   *string `json:"DefaultFcmNotificationProtocolVersion,omitempty"`
	DefaultGcmNotificationProtocolVersion   *string `json:"DefaultGcmNotificationProtocolVersion,omitempty"`
	DeliveryCallbackEnabled                 *bool   `json:"DeliveryCallbackEnabled,omitempty"`
	DeliveryCallbackUrl                     *string `json:"DeliveryCallbackUrl,omitempty"`
	FacebookMessengerPageId                 *string `json:"FacebookMessengerPageId,omitempty"`
	FcmCredentialSid                        *string `json:"FcmCredentialSid,omitempty"`
	FriendlyName                            *string `json:"FriendlyName,omitempty"`
	GcmCredentialSid                        *string `json:"GcmCredentialSid,omitempty"`
	LogEnabled                              *bool   `json:"LogEnabled,omitempty"`
	MessagingServiceSid                     *string `json:"MessagingServiceSid,omitempty"`
}

// CreateService Method for CreateService
//
// * @param: optional nil or *CreateServiceParams - Optional Parameters:
//
// * @param: "AlexaSkillId" (string) - Deprecated.
//
// * @param: "ApnCredentialSid" (string) - The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings.
//
// * @param: "DefaultAlexaNotificationProtocolVersion" (string) - Deprecated.
//
// * @param: "DefaultApnNotificationProtocolVersion" (string) - The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource.
//
// * @param: "DefaultFcmNotificationProtocolVersion" (string) - The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource.
//
// * @param: "DefaultGcmNotificationProtocolVersion" (string) - The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource.
//
// * @param: "DeliveryCallbackEnabled" (bool) - Callback configuration that enables delivery callbacks, default false
//
// * @param: "DeliveryCallbackUrl" (string) - URL to send delivery status callback.
//
// * @param: "FacebookMessengerPageId" (string) - Deprecated.
//
// * @param: "FcmCredentialSid" (string) - The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings.
//
// * @param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// * @param: "GcmCredentialSid" (string) - The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings.
//
// * @param: "LogEnabled" (bool) - Whether to log notifications. Can be: `true` or `false` and the default is `true`.
//
// * @param: "MessagingServiceSid" (string) - The SID of the [Messaging Service](https://www.twilio.com/docs/sms/send-messages#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications.
//
// * @return: NotifyV1Service
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*NotifyV1Service, error) {
	path := "/v1/Services"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AlexaSkillId != nil {
		data.Set("AlexaSkillId", *params.AlexaSkillId)
	}
	if params != nil && params.ApnCredentialSid != nil {
		data.Set("ApnCredentialSid", *params.ApnCredentialSid)
	}
	if params != nil && params.DefaultAlexaNotificationProtocolVersion != nil {
		data.Set("DefaultAlexaNotificationProtocolVersion", *params.DefaultAlexaNotificationProtocolVersion)
	}
	if params != nil && params.DefaultApnNotificationProtocolVersion != nil {
		data.Set("DefaultApnNotificationProtocolVersion", *params.DefaultApnNotificationProtocolVersion)
	}
	if params != nil && params.DefaultFcmNotificationProtocolVersion != nil {
		data.Set("DefaultFcmNotificationProtocolVersion", *params.DefaultFcmNotificationProtocolVersion)
	}
	if params != nil && params.DefaultGcmNotificationProtocolVersion != nil {
		data.Set("DefaultGcmNotificationProtocolVersion", *params.DefaultGcmNotificationProtocolVersion)
	}
	if params != nil && params.DeliveryCallbackEnabled != nil {
		data.Set("DeliveryCallbackEnabled", fmt.Sprint(*params.DeliveryCallbackEnabled))
	}
	if params != nil && params.DeliveryCallbackUrl != nil {
		data.Set("DeliveryCallbackUrl", *params.DeliveryCallbackUrl)
	}
	if params != nil && params.FacebookMessengerPageId != nil {
		data.Set("FacebookMessengerPageId", *params.FacebookMessengerPageId)
	}
	if params != nil && params.FcmCredentialSid != nil {
		data.Set("FcmCredentialSid", *params.FcmCredentialSid)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.GcmCredentialSid != nil {
		data.Set("GcmCredentialSid", *params.GcmCredentialSid)
	}
	if params != nil && params.LogEnabled != nil {
		data.Set("LogEnabled", fmt.Sprint(*params.LogEnabled))
	}
	if params != nil && params.MessagingServiceSid != nil {
		data.Set("MessagingServiceSid", *params.MessagingServiceSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// DeleteBinding Method for DeleteBinding
//
// * @param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) to delete the resource from.
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Binding resource to delete.
func (c *DefaultApiService) DeleteBinding(ServiceSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteCredential Method for DeleteCredential
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Credential resource to delete.
func (c *DefaultApiService) DeleteCredential(Sid string) error {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// DeleteService Method for DeleteService
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Service resource to delete.
func (c *DefaultApiService) DeleteService(Sid string) error {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// FetchBinding Method for FetchBinding
//
// * @param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) to fetch the resource from.
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Binding resource to fetch.
//
// * @return: NotifyV1ServiceBinding
func (c *DefaultApiService) FetchBinding(ServiceSid string, Sid string) (*NotifyV1ServiceBinding, error) {
	path := "/v1/Services/{ServiceSid}/Bindings/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1ServiceBinding{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchCredential Method for FetchCredential
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Credential resource to fetch.
//
// * @return: NotifyV1Credential
func (c *DefaultApiService) FetchCredential(Sid string) (*NotifyV1Credential, error) {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// FetchService Method for FetchService
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Service resource to fetch.
//
// * @return: NotifyV1Service
func (c *DefaultApiService) FetchService(Sid string) (*NotifyV1Service, error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListBindingParams Optional parameters for the method 'ListBinding'
type ListBindingParams struct {
	StartDate *string   `json:"StartDate,omitempty"`
	EndDate   *string   `json:"EndDate,omitempty"`
	Identity  *[]string `json:"Identity,omitempty"`
	Tag       *[]string `json:"Tag,omitempty"`
	PageSize  *int32    `json:"PageSize,omitempty"`
}

// ListBinding Method for ListBinding
//
// * @param: ServiceSid The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) to read the resource from.
//
// * @param: optional nil or *ListBindingParams - Optional Parameters:
//
// * @param: "StartDate" (string) - Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`.
//
// * @param: "EndDate" (string) - Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.
//
// * @param: "Identity" ([]string) - The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the resources to read.
//
// * @param: "Tag" ([]string) - Only list Bindings that have all of the specified Tags. The following implicit tags are available: `all`, `apn`, `fcm`, `gcm`, `sms`, `facebook-messenger`. Up to 5 tags are allowed.
//
// * @param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// * @return: ListBindingResponse
func (c *DefaultApiService) ListBinding(ServiceSid string, params *ListBindingParams) (*ListBindingResponse, error) {
	path := "/v1/Services/{ServiceSid}/Bindings"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.StartDate != nil {
		data.Set("StartDate", fmt.Sprint(*params.StartDate))
	}
	if params != nil && params.EndDate != nil {
		data.Set("EndDate", fmt.Sprint(*params.EndDate))
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", strings.Join(*params.Identity, ","))
	}
	if params != nil && params.Tag != nil {
		data.Set("Tag", strings.Join(*params.Tag, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListBindingResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCredentialParams Optional parameters for the method 'ListCredential'
type ListCredentialParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

// ListCredential Method for ListCredential
//
// * @param: optional nil or *ListCredentialParams - Optional Parameters:
//
// * @param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// * @return: ListCredentialResponse
func (c *DefaultApiService) ListCredential(params *ListCredentialParams) (*ListCredentialResponse, error) {
	path := "/v1/Credentials"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCredentialResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty"`
}

// ListService Method for ListService
//
// * @param: optional nil or *ListServiceParams - Optional Parameters:
//
// * @param: "FriendlyName" (string) - The string that identifies the Service resources to read.
//
// * @param: "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
//
// * @return: ListServiceResponse
func (c *DefaultApiService) ListService(params *ListServiceParams) (*ListServiceResponse, error) {
	path := "/v1/Services"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListServiceResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateCredentialParams Optional parameters for the method 'UpdateCredential'
type UpdateCredentialParams struct {
	ApiKey       *string `json:"ApiKey,omitempty"`
	Certificate  *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey   *string `json:"PrivateKey,omitempty"`
	Sandbox      *bool   `json:"Sandbox,omitempty"`
	Secret       *string `json:"Secret,omitempty"`
}

// UpdateCredential Method for UpdateCredential
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Credential resource to update.
//
// * @param: optional nil or *UpdateCredentialParams - Optional Parameters:
//
// * @param: "ApiKey" (string) - [GCM only] The `Server key` of your project from Firebase console under Settings / Cloud messaging.
//
// * @param: "Certificate" (string) - [APN only] The URL-encoded representation of the certificate. Strip everything outside of the headers, e.g. `-----BEGIN CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----`
//
// * @param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// * @param: "PrivateKey" (string) - [APN only] The URL-encoded representation of the private key. Strip everything outside of the headers, e.g. `-----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\\\\n.-----END RSA PRIVATE KEY-----`
//
// * @param: "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
//
// * @param: "Secret" (string) - [FCM only] The `Server key` of your project from Firebase console under Settings / Cloud messaging.
//
// * @return: NotifyV1Credential
func (c *DefaultApiService) UpdateCredential(Sid string, params *UpdateCredentialParams) (*NotifyV1Credential, error) {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", fmt.Sprint(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
	AlexaSkillId                            *string `json:"AlexaSkillId,omitempty"`
	ApnCredentialSid                        *string `json:"ApnCredentialSid,omitempty"`
	DefaultAlexaNotificationProtocolVersion *string `json:"DefaultAlexaNotificationProtocolVersion,omitempty"`
	DefaultApnNotificationProtocolVersion   *string `json:"DefaultApnNotificationProtocolVersion,omitempty"`
	DefaultFcmNotificationProtocolVersion   *string `json:"DefaultFcmNotificationProtocolVersion,omitempty"`
	DefaultGcmNotificationProtocolVersion   *string `json:"DefaultGcmNotificationProtocolVersion,omitempty"`
	DeliveryCallbackEnabled                 *bool   `json:"DeliveryCallbackEnabled,omitempty"`
	DeliveryCallbackUrl                     *string `json:"DeliveryCallbackUrl,omitempty"`
	FacebookMessengerPageId                 *string `json:"FacebookMessengerPageId,omitempty"`
	FcmCredentialSid                        *string `json:"FcmCredentialSid,omitempty"`
	FriendlyName                            *string `json:"FriendlyName,omitempty"`
	GcmCredentialSid                        *string `json:"GcmCredentialSid,omitempty"`
	LogEnabled                              *bool   `json:"LogEnabled,omitempty"`
	MessagingServiceSid                     *string `json:"MessagingServiceSid,omitempty"`
}

// UpdateService Method for UpdateService
//
// * @param: Sid The Twilio-provided string that uniquely identifies the Service resource to update.
//
// * @param: optional nil or *UpdateServiceParams - Optional Parameters:
//
// * @param: "AlexaSkillId" (string) - Deprecated.
//
// * @param: "ApnCredentialSid" (string) - The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings.
//
// * @param: "DefaultAlexaNotificationProtocolVersion" (string) - Deprecated.
//
// * @param: "DefaultApnNotificationProtocolVersion" (string) - The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource.
//
// * @param: "DefaultFcmNotificationProtocolVersion" (string) - The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource.
//
// * @param: "DefaultGcmNotificationProtocolVersion" (string) - The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource.
//
// * @param: "DeliveryCallbackEnabled" (bool) - Callback configuration that enables delivery callbacks, default false
//
// * @param: "DeliveryCallbackUrl" (string) - URL to send delivery status callback.
//
// * @param: "FacebookMessengerPageId" (string) - Deprecated.
//
// * @param: "FcmCredentialSid" (string) - The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings.
//
// * @param: "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
//
// * @param: "GcmCredentialSid" (string) - The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings.
//
// * @param: "LogEnabled" (bool) - Whether to log notifications. Can be: `true` or `false` and the default is `true`.
//
// * @param: "MessagingServiceSid" (string) - The SID of the [Messaging Service](https://www.twilio.com/docs/sms/send-messages#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications.
//
// * @return: NotifyV1Service
func (c *DefaultApiService) UpdateService(Sid string, params *UpdateServiceParams) (*NotifyV1Service, error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.AlexaSkillId != nil {
		data.Set("AlexaSkillId", *params.AlexaSkillId)
	}
	if params != nil && params.ApnCredentialSid != nil {
		data.Set("ApnCredentialSid", *params.ApnCredentialSid)
	}
	if params != nil && params.DefaultAlexaNotificationProtocolVersion != nil {
		data.Set("DefaultAlexaNotificationProtocolVersion", *params.DefaultAlexaNotificationProtocolVersion)
	}
	if params != nil && params.DefaultApnNotificationProtocolVersion != nil {
		data.Set("DefaultApnNotificationProtocolVersion", *params.DefaultApnNotificationProtocolVersion)
	}
	if params != nil && params.DefaultFcmNotificationProtocolVersion != nil {
		data.Set("DefaultFcmNotificationProtocolVersion", *params.DefaultFcmNotificationProtocolVersion)
	}
	if params != nil && params.DefaultGcmNotificationProtocolVersion != nil {
		data.Set("DefaultGcmNotificationProtocolVersion", *params.DefaultGcmNotificationProtocolVersion)
	}
	if params != nil && params.DeliveryCallbackEnabled != nil {
		data.Set("DeliveryCallbackEnabled", fmt.Sprint(*params.DeliveryCallbackEnabled))
	}
	if params != nil && params.DeliveryCallbackUrl != nil {
		data.Set("DeliveryCallbackUrl", *params.DeliveryCallbackUrl)
	}
	if params != nil && params.FacebookMessengerPageId != nil {
		data.Set("FacebookMessengerPageId", *params.FacebookMessengerPageId)
	}
	if params != nil && params.FcmCredentialSid != nil {
		data.Set("FcmCredentialSid", *params.FcmCredentialSid)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.GcmCredentialSid != nil {
		data.Set("GcmCredentialSid", *params.GcmCredentialSid)
	}
	if params != nil && params.LogEnabled != nil {
		data.Set("LogEnabled", fmt.Sprint(*params.LogEnabled))
	}
	if params != nil && params.MessagingServiceSid != nil {
		data.Set("MessagingServiceSid", *params.MessagingServiceSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NotifyV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
