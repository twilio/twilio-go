/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.13.0
 * Contact: support@twilio.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"

	twilio "github.com/twilio/twilio-go/client"
)

type DefaultApiService struct {
	baseURL string
	client  twilio.BaseClient
}

func NewDefaultApiService(client twilio.BaseClient) *DefaultApiService {
	return &DefaultApiService{
		client:  client,
		baseURL: "https://studio.twilio.com",
	}
}

// CreateExecutionParams Optional parameters for the method 'CreateExecution'
type CreateExecutionParams struct {
	From       *string                 `json:"From,omitempty"`
	Parameters *map[string]interface{} `json:"Parameters,omitempty"`
	To         *string                 `json:"To,omitempty"`
}

/*
* CreateExecution Method for CreateExecution
* Triggers a new Execution for the Flow
* @param FlowSid The SID of the Excecution's Flow.
* @param optional nil or *CreateExecutionParams - Optional Parameters:
* @param "From" (string) - The Twilio phone number to send messages or initiate calls from during the Flow's Execution. Available as variable `{{flow.channel.address}}`.
* @param "Parameters" (map[string]interface{}) - JSON data that will be added to the Flow's context and that can be accessed as variables inside your Flow. For example, if you pass in `Parameters={\\\"name\\\":\\\"Zeke\\\"}`, a widget in your Flow can reference the variable `{{flow.data.name}}`, which returns \\\"Zeke\\\". Note: the JSON value must explicitly be passed as a string, not as a hash object. Depending on your particular HTTP library, you may need to add quotes or URL encode the JSON string.
* @param "To" (string) - The Contact phone number to start a Studio Flow Execution, available as variable `{{contact.channel.address}}`.
* @return StudioV2FlowExecution
 */
func (c *DefaultApiService) CreateExecution(FlowSid string, params *CreateExecutionParams) (*StudioV2FlowExecution, error) {
	path := "/v2/Flows/{FlowSid}/Executions"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}
	if params != nil && params.Parameters != nil {
		v, err := json.Marshal(params.Parameters)

		if err != nil {
			return nil, err
		}

		data.Set("Parameters", string(v))
	}
	if params != nil && params.To != nil {
		data.Set("To", *params.To)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowExecution{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateFlowParams Optional parameters for the method 'CreateFlow'
type CreateFlowParams struct {
	CommitMessage *string                 `json:"CommitMessage,omitempty"`
	Definition    *map[string]interface{} `json:"Definition,omitempty"`
	FriendlyName  *string                 `json:"FriendlyName,omitempty"`
	Status        *string                 `json:"Status,omitempty"`
}

/*
* CreateFlow Method for CreateFlow
* Create a Flow.
* @param optional nil or *CreateFlowParams - Optional Parameters:
* @param "CommitMessage" (string) - Description of change made in the revision.
* @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
* @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
* @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
* @return StudioV2Flow
 */
func (c *DefaultApiService) CreateFlow(params *CreateFlowParams) (*StudioV2Flow, error) {
	path := "/v2/Flows"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CommitMessage != nil {
		data.Set("CommitMessage", *params.CommitMessage)
	}
	if params != nil && params.Definition != nil {
		v, err := json.Marshal(params.Definition)

		if err != nil {
			return nil, err
		}

		data.Set("Definition", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
* DeleteExecution Method for DeleteExecution
* Delete the Execution and all Steps relating to it.
* @param FlowSid The SID of the Flow with the Execution resources to delete.
* @param Sid The SID of the Execution resource to delete.
 */
func (c *DefaultApiService) DeleteExecution(FlowSid string, Sid string) error {
	path := "/v2/Flows/{FlowSid}/Executions/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
* DeleteFlow Method for DeleteFlow
* Delete a specific Flow.
* @param Sid The SID of the Flow resource to delete.
 */
func (c *DefaultApiService) DeleteFlow(Sid string) error {
	path := "/v2/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
* FetchExecution Method for FetchExecution
* Retrieve an Execution
* @param FlowSid The SID of the Flow with the Execution resource to fetch
* @param Sid The SID of the Execution resource to fetch.
* @return StudioV2FlowExecution
 */
func (c *DefaultApiService) FetchExecution(FlowSid string, Sid string) (*StudioV2FlowExecution, error) {
	path := "/v2/Flows/{FlowSid}/Executions/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowExecution{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
* FetchExecutionContext Method for FetchExecutionContext
* Retrieve the most recent context for an Execution.
* @param FlowSid The SID of the Flow with the Execution context to fetch.
* @param ExecutionSid The SID of the Execution context to fetch.
* @return StudioV2FlowExecutionExecutionContext
 */
func (c *DefaultApiService) FetchExecutionContext(FlowSid string, ExecutionSid string) (*StudioV2FlowExecutionExecutionContext, error) {
	path := "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Context"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", ExecutionSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowExecutionExecutionContext{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
* FetchExecutionStep Method for FetchExecutionStep
* Retrieve a Step.
* @param FlowSid The SID of the Flow with the Step to fetch.
* @param ExecutionSid The SID of the Execution resource with the Step to fetch.
* @param Sid The SID of the ExecutionStep resource to fetch.
* @return StudioV2FlowExecutionExecutionStep
 */
func (c *DefaultApiService) FetchExecutionStep(FlowSid string, ExecutionSid string, Sid string) (*StudioV2FlowExecutionExecutionStep, error) {
	path := "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", ExecutionSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowExecutionExecutionStep{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
* FetchExecutionStepContext Method for FetchExecutionStepContext
* Retrieve the context for an Execution Step.
* @param FlowSid The SID of the Flow with the Step to fetch.
* @param ExecutionSid The SID of the Execution resource with the Step to fetch.
* @param StepSid The SID of the Step to fetch.
* @return StudioV2FlowExecutionExecutionStepExecutionStepContext
 */
func (c *DefaultApiService) FetchExecutionStepContext(FlowSid string, ExecutionSid string, StepSid string) (*StudioV2FlowExecutionExecutionStepExecutionStepContext, error) {
	path := "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", ExecutionSid, -1)
	path = strings.Replace(path, "{"+"StepSid"+"}", StepSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowExecutionExecutionStepExecutionStepContext{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
* FetchFlow Method for FetchFlow
* Retrieve a specific Flow.
* @param Sid The SID of the Flow resource to fetch.
* @return StudioV2Flow
 */
func (c *DefaultApiService) FetchFlow(Sid string) (*StudioV2Flow, error) {
	path := "/v2/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
* FetchFlowRevision Method for FetchFlowRevision
* Retrieve a specific Flow revision.
* @param Sid The SID of the Flow resource to fetch.
* @param Revision Specific Revision number or can be `LatestPublished` and `LatestRevision`.
* @return StudioV2FlowFlowRevision
 */
func (c *DefaultApiService) FetchFlowRevision(Sid string, Revision string) (*StudioV2FlowFlowRevision, error) {
	path := "/v2/Flows/{Sid}/Revisions/{Revision}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)
	path = strings.Replace(path, "{"+"Revision"+"}", Revision, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowFlowRevision{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
* FetchTestUser Method for FetchTestUser
* Fetch flow test users
* @param Sid Unique identifier of the flow.
* @return StudioV2FlowTestUser
 */
func (c *DefaultApiService) FetchTestUser(Sid string) (*StudioV2FlowTestUser, error) {
	path := "/v2/Flows/{Sid}/TestUsers"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowTestUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListExecutionParams Optional parameters for the method 'ListExecution'
type ListExecutionParams struct {
	DateCreatedFrom *time.Time `json:"DateCreatedFrom,omitempty"`
	DateCreatedTo   *time.Time `json:"DateCreatedTo,omitempty"`
	PageSize        *int32     `json:"PageSize,omitempty"`
}

/*
* ListExecution Method for ListExecution
* Retrieve a list of all Executions for the Flow.
* @param FlowSid The SID of the Flow with the Execution resources to read.
* @param optional nil or *ListExecutionParams - Optional Parameters:
* @param "DateCreatedFrom" (time.Time) - Only show Execution resources starting on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
* @param "DateCreatedTo" (time.Time) - Only show Execution resources starting before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListExecutionResponse
 */
func (c *DefaultApiService) ListExecution(FlowSid string, params *ListExecutionParams) (*ListExecutionResponse, error) {
	path := "/v2/Flows/{FlowSid}/Executions"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.DateCreatedFrom != nil {
		data.Set("DateCreatedFrom", fmt.Sprint((*params.DateCreatedFrom).Format(time.RFC3339)))
	}
	if params != nil && params.DateCreatedTo != nil {
		data.Set("DateCreatedTo", fmt.Sprint((*params.DateCreatedTo).Format(time.RFC3339)))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListExecutionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListExecutionStepParams Optional parameters for the method 'ListExecutionStep'
type ListExecutionStepParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListExecutionStep Method for ListExecutionStep
* Retrieve a list of all Steps for an Execution.
* @param FlowSid The SID of the Flow with the Steps to read.
* @param ExecutionSid The SID of the Execution with the Steps to read.
* @param optional nil or *ListExecutionStepParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListExecutionStepResponse
 */
func (c *DefaultApiService) ListExecutionStep(FlowSid string, ExecutionSid string, params *ListExecutionStepParams) (*ListExecutionStepResponse, error) {
	path := "/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)
	path = strings.Replace(path, "{"+"ExecutionSid"+"}", ExecutionSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListExecutionStepResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListFlowParams Optional parameters for the method 'ListFlow'
type ListFlowParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListFlow Method for ListFlow
* Retrieve a list of all Flows.
* @param optional nil or *ListFlowParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListFlowResponse
 */
func (c *DefaultApiService) ListFlow(params *ListFlowParams) (*ListFlowResponse, error) {
	path := "/v2/Flows"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListFlowResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListFlowRevisionParams Optional parameters for the method 'ListFlowRevision'
type ListFlowRevisionParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListFlowRevision Method for ListFlowRevision
* Retrieve a list of all Flows revisions.
* @param Sid The SID of the Flow resource to fetch.
* @param optional nil or *ListFlowRevisionParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListFlowRevisionResponse
 */
func (c *DefaultApiService) ListFlowRevision(Sid string, params *ListFlowRevisionParams) (*ListFlowRevisionResponse, error) {
	path := "/v2/Flows/{Sid}/Revisions"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListFlowRevisionResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateExecutionParams Optional parameters for the method 'UpdateExecution'
type UpdateExecutionParams struct {
	Status *string `json:"Status,omitempty"`
}

/*
* UpdateExecution Method for UpdateExecution
* Update the status of an Execution to &#x60;ended&#x60;.
* @param FlowSid The SID of the Flow with the Execution resources to update.
* @param Sid The SID of the Execution resource to update.
* @param optional nil or *UpdateExecutionParams - Optional Parameters:
* @param "Status" (string) - The status of the Execution. Can only be `ended`.
* @return StudioV2FlowExecution
 */
func (c *DefaultApiService) UpdateExecution(FlowSid string, Sid string, params *UpdateExecutionParams) (*StudioV2FlowExecution, error) {
	path := "/v2/Flows/{FlowSid}/Executions/{Sid}"
	path = strings.Replace(path, "{"+"FlowSid"+"}", FlowSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowExecution{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateFlowParams Optional parameters for the method 'UpdateFlow'
type UpdateFlowParams struct {
	CommitMessage *string                 `json:"CommitMessage,omitempty"`
	Definition    *map[string]interface{} `json:"Definition,omitempty"`
	FriendlyName  *string                 `json:"FriendlyName,omitempty"`
	Status        *string                 `json:"Status,omitempty"`
}

/*
* UpdateFlow Method for UpdateFlow
* Update a Flow.
* @param Sid The SID of the Flow resource to fetch.
* @param optional nil or *UpdateFlowParams - Optional Parameters:
* @param "CommitMessage" (string) - Description of change made in the revision.
* @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
* @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
* @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
* @return StudioV2Flow
 */
func (c *DefaultApiService) UpdateFlow(Sid string, params *UpdateFlowParams) (*StudioV2Flow, error) {
	path := "/v2/Flows/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CommitMessage != nil {
		data.Set("CommitMessage", *params.CommitMessage)
	}
	if params != nil && params.Definition != nil {
		v, err := json.Marshal(params.Definition)

		if err != nil {
			return nil, err
		}

		data.Set("Definition", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2Flow{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateFlowValidateParams Optional parameters for the method 'UpdateFlowValidate'
type UpdateFlowValidateParams struct {
	CommitMessage *string                 `json:"CommitMessage,omitempty"`
	Definition    *map[string]interface{} `json:"Definition,omitempty"`
	FriendlyName  *string                 `json:"FriendlyName,omitempty"`
	Status        *string                 `json:"Status,omitempty"`
}

/*
* UpdateFlowValidate Method for UpdateFlowValidate
* Validate flow JSON definition
* @param optional nil or *UpdateFlowValidateParams - Optional Parameters:
* @param "CommitMessage" (string) - Description of change made in the revision.
* @param "Definition" (map[string]interface{}) - JSON representation of flow definition.
* @param "FriendlyName" (string) - The string that you assigned to describe the Flow.
* @param "Status" (string) - The status of the Flow. Can be: `draft` or `published`.
* @return StudioV2FlowValidate
 */
func (c *DefaultApiService) UpdateFlowValidate(params *UpdateFlowValidateParams) (*StudioV2FlowValidate, error) {
	path := "/v2/Flows/Validate"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CommitMessage != nil {
		data.Set("CommitMessage", *params.CommitMessage)
	}
	if params != nil && params.Definition != nil {
		v, err := json.Marshal(params.Definition)

		if err != nil {
			return nil, err
		}

		data.Set("Definition", string(v))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", *params.Status)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowValidate{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateTestUserParams Optional parameters for the method 'UpdateTestUser'
type UpdateTestUserParams struct {
	TestUsers *[]string `json:"TestUsers,omitempty"`
}

/*
* UpdateTestUser Method for UpdateTestUser
* Update flow test users
* @param Sid Unique identifier of the flow.
* @param optional nil or *UpdateTestUserParams - Optional Parameters:
* @param "TestUsers" ([]string) - List of test user identities that can test draft versions of the flow.
* @return StudioV2FlowTestUser
 */
func (c *DefaultApiService) UpdateTestUser(Sid string, params *UpdateTestUserParams) (*StudioV2FlowTestUser, error) {
	path := "/v2/Flows/{Sid}/TestUsers"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.TestUsers != nil {
		data.Set("TestUsers", strings.Join(*params.TestUsers, ","))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &StudioV2FlowTestUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
