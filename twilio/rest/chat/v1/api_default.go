/*
 * Twilio - Chat
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.10.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	twilio "github.com/twilio/twilio-go/client"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService{
		client:  client,
		baseURL: fmt.Sprintf("https://chat.twilio.com"),
	}
}

// CreateChannelParams Optional parameters for the method 'CreateChannel'
type CreateChannelParams struct {
	Attributes   *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Type         *string `json:"Type,omitempty"`
	UniqueName   *string `json:"UniqueName,omitempty"`
}

/*
CreateChannel Method for CreateChannel
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under.
 * @param optional nil or *CreateChannelOpts - Optional Parameters:
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "Type" (string) - The visibility of the channel. Can be: `public` or `private` and defaults to `public`.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL. This value must be 64 characters or less in length and be unique within the Service.
@return ChatV1ServiceChannel
*/
func (c *DefaultApiService) CreateChannel(ServiceSid string, params *CreateChannelParams) (*ChatV1ServiceChannel, error) {
	path := "/v1/Services/{ServiceSid}/Channels"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateCredentialParams Optional parameters for the method 'CreateCredential'
type CreateCredentialParams struct {
	ApiKey       *string `json:"ApiKey,omitempty"`
	Certificate  *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey   *string `json:"PrivateKey,omitempty"`
	Sandbox      *bool   `json:"Sandbox,omitempty"`
	Secret       *string `json:"Secret,omitempty"`
	Type         *string `json:"Type,omitempty"`
}

/*
CreateCredential Method for CreateCredential
 * @param optional nil or *CreateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
 * @param "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A== -----END CERTIFICATE-----`
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR. -----END RSA PRIVATE KEY-----`
 * @param "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
 * @param "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
 * @param "Type" (string) - The type of push-notification service the credential is for. Can be: `gcm`, `fcm`, or `apn`.
@return ChatV1Credential
*/
func (c *DefaultApiService) CreateCredential(params *CreateCredentialParams) (*ChatV1Credential, error) {
	path := "/v1/Credentials"

	data := url.Values{}
	headers := 0

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", fmt.Sprint(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateInviteParams Optional parameters for the method 'CreateInvite'
type CreateInviteParams struct {
	Identity *string `json:"Identity,omitempty"`
	RoleSid  *string `json:"RoleSid,omitempty"`
}

/*
CreateInvite Method for CreateInvite
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under.
 * @param ChannelSid The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the new resource belongs to.
 * @param optional nil or *CreateInviteOpts - Optional Parameters:
 * @param "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/api/chat/rest/v1/user) within the [Service](https://www.twilio.com/docs/api/chat/rest/v1/service). See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more info.
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to the new member.
@return ChatV1ServiceChannelInvite
*/
func (c *DefaultApiService) CreateInvite(ServiceSid string, ChannelSid string, params *CreateInviteParams) (*ChatV1ServiceChannelInvite, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelInvite{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateMemberParams Optional parameters for the method 'CreateMember'
type CreateMemberParams struct {
	Identity *string `json:"Identity,omitempty"`
	RoleSid  *string `json:"RoleSid,omitempty"`
}

/*
CreateMember Method for CreateMember
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the new member belongs to. Can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *CreateMemberOpts - Optional Parameters:
 * @param "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/api/chat/rest/v1/user) within the [Service](https://www.twilio.com/docs/api/chat/rest/services). See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more details.
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/api/services).
@return ChatV1ServiceChannelMember
*/
func (c *DefaultApiService) CreateMember(ServiceSid string, ChannelSid string, params *CreateMemberParams) (*ChatV1ServiceChannelMember, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateMessageParams Optional parameters for the method 'CreateMessage'
type CreateMessageParams struct {
	Attributes *string `json:"Attributes,omitempty"`
	Body       *string `json:"Body,omitempty"`
	From       *string `json:"From,omitempty"`
}

/*
CreateMessage Method for CreateMessage
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the new resource belongs to. Can be the Channel resource's `sid` or `unique_name`.
 * @param optional nil or *CreateMessageOpts - Optional Parameters:
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "Body" (string) - The message to send to the channel. Can also be an empty string or `null`, which sets the value as an empty string. You can send structured data in the body by serializing it as a string.
 * @param "From" (string) - The [identity](https://www.twilio.com/docs/api/chat/guides/identity) of the new message's author. The default value is `system`.
@return ChatV1ServiceChannelMessage
*/
func (c *DefaultApiService) CreateMessage(ServiceSid string, ChannelSid string, params *CreateMessageParams) (*ChatV1ServiceChannelMessage, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}
	if params != nil && params.From != nil {
		data.Set("From", *params.From)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateRoleParams Optional parameters for the method 'CreateRole'
type CreateRoleParams struct {
	FriendlyName *string   `json:"FriendlyName,omitempty"`
	Permission   *[]string `json:"Permission,omitempty"`
	Type         *string   `json:"Type,omitempty"`
}

/*
CreateRole Method for CreateRole
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under.
 * @param optional nil or *CreateRoleOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
 * @param "Permission" ([]string) - A permission that you grant to the new role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. The values for this parameter depend on the role's `type` and are described in the documentation.
 * @param "Type" (string) - The type of role. Can be: `channel` for [Channel](https://www.twilio.com/docs/chat/api/channels) roles or `deployment` for [Service](https://www.twilio.com/docs/chat/api/services) roles.
@return ChatV1ServiceRole
*/
func (c *DefaultApiService) CreateRole(ServiceSid string, params *CreateRoleParams) (*ChatV1ServiceRole, error) {
	path := "/v1/Services/{ServiceSid}/Roles"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Permission != nil {
		data.Set("Permission", strings.Join(*params.Permission, ","))
	}
	if params != nil && params.Type != nil {
		data.Set("Type", *params.Type)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
CreateService Method for CreateService
 * @param optional nil or *CreateServiceOpts - Optional Parameters:
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
@return ChatV1Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*ChatV1Service, error) {
	path := "/v1/Services"

	data := url.Values{}
	headers := 0

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// CreateUserParams Optional parameters for the method 'CreateUser'
type CreateUserParams struct {
	Attributes   *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Identity     *string `json:"Identity,omitempty"`
	RoleSid      *string `json:"RoleSid,omitempty"`
}

/*
CreateUser Method for CreateUser
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under.
 * @param optional nil or *CreateUserOpts - Optional Parameters:
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the new resource. This value is often used for display purposes.
 * @param "Identity" (string) - The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/api/chat/rest/v1/user) within the [Service](https://www.twilio.com/docs/api/chat/rest/v1/service). This value is often a username or email address. See the Identity documentation for more details.
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to the new User.
@return ChatV1ServiceUser
*/
func (c *DefaultApiService) CreateUser(ServiceSid string, params *CreateUserParams) (*ChatV1ServiceUser, error) {
	path := "/v1/Services/{ServiceSid}/Users"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
DeleteChannel Method for DeleteChannel
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the Channel resource to delete.
*/
func (c *DefaultApiService) DeleteChannel(ServiceSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Channels/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteCredential Method for DeleteCredential
 * @param Sid The Twilio-provided string that uniquely identifies the Credential resource to delete.
*/
func (c *DefaultApiService) DeleteCredential(Sid string) error {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteInvite Method for DeleteInvite
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.
 * @param ChannelSid The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource to delete belongs to.
 * @param Sid The Twilio-provided string that uniquely identifies the Invite resource to delete.
*/
func (c *DefaultApiService) DeleteInvite(ServiceSid string, ChannelSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteMember Method for DeleteMember
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message belongs to.  Can be the Channel's `sid` or `unique_name`.
 * @param Sid The Twilio-provided string that uniquely identifies the Member resource to delete.
*/
func (c *DefaultApiService) DeleteMember(ServiceSid string, ChannelSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteMessage Method for DeleteMessage
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message to delete belongs to.  Can be the Channel resource's `sid` or `unique_name`.
 * @param Sid The Twilio-provided string that uniquely identifies the Message resource to delete.
*/
func (c *DefaultApiService) DeleteMessage(ServiceSid string, ChannelSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteRole Method for DeleteRole
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the Role resource to delete.
*/
func (c *DefaultApiService) DeleteRole(ServiceSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteService Method for DeleteService
 * @param Sid The Twilio-provided string that uniquely identifies the Service resource to delete.
*/
func (c *DefaultApiService) DeleteService(Sid string) error {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
DeleteUser Method for DeleteUser
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the User resource to delete.
*/
func (c *DefaultApiService) DeleteUser(ServiceSid string, Sid string) error {
	path := "/v1/Services/{ServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
FetchChannel Method for FetchChannel
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the Channel resource to fetch.
@return ChatV1ServiceChannel
*/
func (c *DefaultApiService) FetchChannel(ServiceSid string, Sid string) (*ChatV1ServiceChannel, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchCredential Method for FetchCredential
 * @param Sid The Twilio-provided string that uniquely identifies the Credential resource to fetch.
@return ChatV1Credential
*/
func (c *DefaultApiService) FetchCredential(Sid string) (*ChatV1Credential, error) {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchInvite Method for FetchInvite
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.
 * @param ChannelSid The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource to fetch belongs to.
 * @param Sid The Twilio-provided string that uniquely identifies the Invite resource to fetch.
@return ChatV1ServiceChannelInvite
*/
func (c *DefaultApiService) FetchInvite(ServiceSid string, ChannelSid string, Sid string) (*ChatV1ServiceChannelInvite, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelInvite{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchMember Method for FetchMember
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the member to fetch belongs to. Can be the Channel resource's `sid` or `unique_name` value.
 * @param Sid The Twilio-provided string that uniquely identifies the Member resource to fetch.
@return ChatV1ServiceChannelMember
*/
func (c *DefaultApiService) FetchMember(ServiceSid string, ChannelSid string, Sid string) (*ChatV1ServiceChannelMember, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchMessage Method for FetchMessage
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message to fetch belongs to. Can be the Channel's `sid` or `unique_name`.
 * @param Sid The Twilio-provided string that uniquely identifies the Message resource to fetch.
@return ChatV1ServiceChannelMessage
*/
func (c *DefaultApiService) FetchMessage(ServiceSid string, ChannelSid string, Sid string) (*ChatV1ServiceChannelMessage, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchRole Method for FetchRole
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the Role resource to fetch.
@return ChatV1ServiceRole
*/
func (c *DefaultApiService) FetchRole(ServiceSid string, Sid string) (*ChatV1ServiceRole, error) {
	path := "/v1/Services/{ServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchService Method for FetchService
 * @param Sid The Twilio-provided string that uniquely identifies the Service resource to fetch.
@return ChatV1Service
*/
func (c *DefaultApiService) FetchService(Sid string) (*ChatV1Service, error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
FetchUser Method for FetchUser
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the User resource to fetch.
@return ChatV1ServiceUser
*/
func (c *DefaultApiService) FetchUser(ServiceSid string, Sid string) (*ChatV1ServiceUser, error) {
	path := "/v1/Services/{ServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListChannelParams Optional parameters for the method 'ListChannel'
type ListChannelParams struct {
	Type     *[]string `json:"Type,omitempty"`
	PageSize *int32    `json:"PageSize,omitempty"`
}

/*
ListChannel Method for ListChannel
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param optional nil or *ListChannelOpts - Optional Parameters:
 * @param "Type" ([]string) - The visibility of the Channels to read. Can be: `public` or `private` and defaults to `public`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListChannelResponse
*/
func (c *DefaultApiService) ListChannel(ServiceSid string, params *ListChannelParams) (*ListChannelResponse, error) {
	path := "/v1/Services/{ServiceSid}/Channels"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Type != nil {
		data.Set("Type", strings.Join(*params.Type, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListChannelResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListCredentialParams Optional parameters for the method 'ListCredential'
type ListCredentialParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListCredential Method for ListCredential
 * @param optional nil or *ListCredentialOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListCredentialResponse
*/
func (c *DefaultApiService) ListCredential(params *ListCredentialParams) (*ListCredentialResponse, error) {
	path := "/v1/Credentials"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListCredentialResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListInviteParams Optional parameters for the method 'ListInvite'
type ListInviteParams struct {
	Identity *[]string `json:"Identity,omitempty"`
	PageSize *int32    `json:"PageSize,omitempty"`
}

/*
ListInvite Method for ListInvite
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param ChannelSid The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resources to read belong to.
 * @param optional nil or *ListInviteOpts - Optional Parameters:
 * @param "Identity" ([]string) - The [User](https://www.twilio.com/docs/api/chat/rest/v1/user)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more details.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListInviteResponse
*/
func (c *DefaultApiService) ListInvite(ServiceSid string, ChannelSid string, params *ListInviteParams) (*ListInviteResponse, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Identity != nil {
		data.Set("Identity", strings.Join(*params.Identity, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListInviteResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListMemberParams Optional parameters for the method 'ListMember'
type ListMemberParams struct {
	Identity *[]string `json:"Identity,omitempty"`
	PageSize *int32    `json:"PageSize,omitempty"`
}

/*
ListMember Method for ListMember
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the members to read belong to. Can be the Channel resource's `sid` or `unique_name` value.
 * @param optional nil or *ListMemberOpts - Optional Parameters:
 * @param "Identity" ([]string) - The [User](https://www.twilio.com/docs/api/chat/rest/v1/user)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more details.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListMemberResponse
*/
func (c *DefaultApiService) ListMember(ServiceSid string, ChannelSid string, params *ListMemberParams) (*ListMemberResponse, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Identity != nil {
		data.Set("Identity", strings.Join(*params.Identity, ","))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMemberResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListMessageParams Optional parameters for the method 'ListMessage'
type ListMessageParams struct {
	Order    *string `json:"Order,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty"`
}

/*
ListMessage Method for ListMessage
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message to read belongs to. Can be the Channel's `sid` or `unique_name`.
 * @param optional nil or *ListMessageOpts - Optional Parameters:
 * @param "Order" (string) - The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending) with `asc` as the default.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListMessageResponse
*/
func (c *DefaultApiService) ListMessage(ServiceSid string, ChannelSid string, params *ListMessageParams) (*ListMessageResponse, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Order != nil {
		data.Set("Order", *params.Order)
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListMessageResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListRoleParams Optional parameters for the method 'ListRole'
type ListRoleParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListRole Method for ListRole
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param optional nil or *ListRoleOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListRoleResponse
*/
func (c *DefaultApiService) ListRole(ServiceSid string, params *ListRoleParams) (*ListRoleResponse, error) {
	path := "/v1/Services/{ServiceSid}/Roles"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListRoleResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListService Method for ListService
 * @param optional nil or *ListServiceOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListServiceResponse
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*ListServiceResponse, error) {
	path := "/v1/Services"

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListServiceResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUserParams Optional parameters for the method 'ListUser'
type ListUserParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUser Method for ListUser
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param optional nil or *ListUserOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListUserResponse
*/
func (c *DefaultApiService) ListUser(ServiceSid string, params *ListUserParams) (*ListUserResponse, error) {
	path := "/v1/Services/{ServiceSid}/Users"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUserResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// ListUserChannelParams Optional parameters for the method 'ListUserChannel'
type ListUserChannelParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
ListUserChannel Method for ListUserChannel
List all Channels for a given User.
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
 * @param UserSid The SID of the [User](https://www.twilio.com/docs/api/chat/rest/users) to read the User Channel resources from.
 * @param optional nil or *ListUserChannelOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return ListUserChannelResponse
*/
func (c *DefaultApiService) ListUserChannel(ServiceSid string, UserSid string, params *ListUserChannelParams) (*ListUserChannelResponse, error) {
	path := "/v1/Services/{ServiceSid}/Users/{UserSid}/Channels"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"UserSid"+"}", UserSid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListUserChannelResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateChannelParams Optional parameters for the method 'UpdateChannel'
type UpdateChannelParams struct {
	Attributes   *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	UniqueName   *string `json:"UniqueName,omitempty"`
}

/*
UpdateChannel Method for UpdateChannel
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to update the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the Channel resource to update.
 * @param optional nil or *UpdateChannelOpts - Optional Parameters:
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
 * @param "UniqueName" (string) - An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL. This value must be 64 characters or less in length and be unique within the Service.
@return ChatV1ServiceChannel
*/
func (c *DefaultApiService) UpdateChannel(ServiceSid string, Sid string, params *UpdateChannelParams) (*ChatV1ServiceChannel, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("UniqueName", *params.UniqueName)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannel{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateCredentialParams Optional parameters for the method 'UpdateCredential'
type UpdateCredentialParams struct {
	ApiKey       *string `json:"ApiKey,omitempty"`
	Certificate  *string `json:"Certificate,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	PrivateKey   *string `json:"PrivateKey,omitempty"`
	Sandbox      *bool   `json:"Sandbox,omitempty"`
	Secret       *string `json:"Secret,omitempty"`
}

/*
UpdateCredential Method for UpdateCredential
 * @param Sid The Twilio-provided string that uniquely identifies the Credential resource to update.
 * @param optional nil or *UpdateCredentialOpts - Optional Parameters:
 * @param "ApiKey" (string) - [GCM only] The API key for the project that was obtained from the Google Developer console for your GCM Service application credential.
 * @param "Certificate" (string) - [APN only] The URL encoded representation of the certificate. For example,  `-----BEGIN CERTIFICATE----- MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A== -----END CERTIFICATE-----`
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
 * @param "PrivateKey" (string) - [APN only] The URL encoded representation of the private key. For example, `-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR. -----END RSA PRIVATE KEY-----`
 * @param "Sandbox" (bool) - [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
 * @param "Secret" (string) - [FCM only] The **Server key** of your project from the Firebase console, found under Settings / Cloud messaging.
@return ChatV1Credential
*/
func (c *DefaultApiService) UpdateCredential(Sid string, params *UpdateCredentialParams) (*ChatV1Credential, error) {
	path := "/v1/Credentials/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.ApiKey != nil {
		data.Set("ApiKey", *params.ApiKey)
	}
	if params != nil && params.Certificate != nil {
		data.Set("Certificate", *params.Certificate)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.PrivateKey != nil {
		data.Set("PrivateKey", *params.PrivateKey)
	}
	if params != nil && params.Sandbox != nil {
		data.Set("Sandbox", fmt.Sprint(*params.Sandbox))
	}
	if params != nil && params.Secret != nil {
		data.Set("Secret", *params.Secret)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1Credential{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateMemberParams Optional parameters for the method 'UpdateMember'
type UpdateMemberParams struct {
	LastConsumedMessageIndex *int32  `json:"LastConsumedMessageIndex,omitempty"`
	RoleSid                  *string `json:"RoleSid,omitempty"`
}

/*
UpdateMember Method for UpdateMember
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to update the resource from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the member to update belongs to. Can be the Channel resource's `sid` or `unique_name`.
 * @param Sid The Twilio-provided string that uniquely identifies the Member resource to update.
 * @param optional nil or *UpdateMemberOpts - Optional Parameters:
 * @param "LastConsumedMessageIndex" (*int32) - The index of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) that the Member has read within the [Channel](https://www.twilio.com/docs/api/chat/rest/channels).
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/api/services).
@return ChatV1ServiceChannelMember
*/
func (c *DefaultApiService) UpdateMember(ServiceSid string, ChannelSid string, Sid string, params *UpdateMemberParams) (*ChatV1ServiceChannelMember, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.LastConsumedMessageIndex != nil {
		data.Set("LastConsumedMessageIndex", fmt.Sprint(*params.LastConsumedMessageIndex))
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelMember{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateMessageParams Optional parameters for the method 'UpdateMessage'
type UpdateMessageParams struct {
	Attributes *string `json:"Attributes,omitempty"`
	Body       *string `json:"Body,omitempty"`
}

/*
UpdateMessage Method for UpdateMessage
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to update the resource from.
 * @param ChannelSid The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message belongs to. Can be the Channel's `sid` or `unique_name`.
 * @param Sid The Twilio-provided string that uniquely identifies the Message resource to update.
 * @param optional nil or *UpdateMessageOpts - Optional Parameters:
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "Body" (string) - The message to send to the channel. Can also be an empty string or `null`, which sets the value as an empty string. You can send structured data in the body by serializing it as a string.
@return ChatV1ServiceChannelMessage
*/
func (c *DefaultApiService) UpdateMessage(ServiceSid string, ChannelSid string, Sid string, params *UpdateMessageParams) (*ChatV1ServiceChannelMessage, error) {
	path := "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"ChannelSid"+"}", ChannelSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.Body != nil {
		data.Set("Body", *params.Body)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceChannelMessage{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateRoleParams Optional parameters for the method 'UpdateRole'
type UpdateRoleParams struct {
	Permission *[]string `json:"Permission,omitempty"`
}

/*
UpdateRole Method for UpdateRole
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to update the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the Role resource to update.
 * @param optional nil or *UpdateRoleOpts - Optional Parameters:
 * @param "Permission" ([]string) - A permission that you grant to the role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. The values for this parameter depend on the role's `type` and are described in the documentation.
@return ChatV1ServiceRole
*/
func (c *DefaultApiService) UpdateRole(ServiceSid string, Sid string, params *UpdateRoleParams) (*ChatV1ServiceRole, error) {
	path := "/v1/Services/{ServiceSid}/Roles/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Permission != nil {
		data.Set("Permission", strings.Join(*params.Permission, ","))
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceRole{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
	ConsumptionReportInterval               *int32    `json:"ConsumptionReportInterval,omitempty"`
	DefaultChannelCreatorRoleSid            *string   `json:"DefaultChannelCreatorRoleSid,omitempty"`
	DefaultChannelRoleSid                   *string   `json:"DefaultChannelRoleSid,omitempty"`
	DefaultServiceRoleSid                   *string   `json:"DefaultServiceRoleSid,omitempty"`
	FriendlyName                            *string   `json:"FriendlyName,omitempty"`
	LimitsChannelMembers                    *int32    `json:"Limits.ChannelMembers,omitempty"`
	LimitsUserChannels                      *int32    `json:"Limits.UserChannels,omitempty"`
	NotificationsAddedToChannelEnabled      *bool     `json:"Notifications.AddedToChannel.Enabled,omitempty"`
	NotificationsAddedToChannelTemplate     *string   `json:"Notifications.AddedToChannel.Template,omitempty"`
	NotificationsInvitedToChannelEnabled    *bool     `json:"Notifications.InvitedToChannel.Enabled,omitempty"`
	NotificationsInvitedToChannelTemplate   *string   `json:"Notifications.InvitedToChannel.Template,omitempty"`
	NotificationsNewMessageEnabled          *bool     `json:"Notifications.NewMessage.Enabled,omitempty"`
	NotificationsNewMessageTemplate         *string   `json:"Notifications.NewMessage.Template,omitempty"`
	NotificationsRemovedFromChannelEnabled  *bool     `json:"Notifications.RemovedFromChannel.Enabled,omitempty"`
	NotificationsRemovedFromChannelTemplate *string   `json:"Notifications.RemovedFromChannel.Template,omitempty"`
	PostWebhookUrl                          *string   `json:"PostWebhookUrl,omitempty"`
	PreWebhookUrl                           *string   `json:"PreWebhookUrl,omitempty"`
	ReachabilityEnabled                     *bool     `json:"ReachabilityEnabled,omitempty"`
	ReadStatusEnabled                       *bool     `json:"ReadStatusEnabled,omitempty"`
	TypingIndicatorTimeout                  *int32    `json:"TypingIndicatorTimeout,omitempty"`
	WebhookFilters                          *[]string `json:"WebhookFilters,omitempty"`
	WebhookMethod                           *string   `json:"WebhookMethod,omitempty"`
	WebhooksOnChannelAddMethod              *string   `json:"Webhooks.OnChannelAdd.Method,omitempty"`
	WebhooksOnChannelAddUrl                 *string   `json:"Webhooks.OnChannelAdd.Url,omitempty"`
	WebhooksOnChannelAddedMethod            *string   `json:"Webhooks.OnChannelAdded.Method,omitempty"`
	WebhooksOnChannelAddedUrl               *string   `json:"Webhooks.OnChannelAdded.Url,omitempty"`
	WebhooksOnChannelDestroyMethod          *string   `json:"Webhooks.OnChannelDestroy.Method,omitempty"`
	WebhooksOnChannelDestroyUrl             *string   `json:"Webhooks.OnChannelDestroy.Url,omitempty"`
	WebhooksOnChannelDestroyedMethod        *string   `json:"Webhooks.OnChannelDestroyed.Method,omitempty"`
	WebhooksOnChannelDestroyedUrl           *string   `json:"Webhooks.OnChannelDestroyed.Url,omitempty"`
	WebhooksOnChannelUpdateMethod           *string   `json:"Webhooks.OnChannelUpdate.Method,omitempty"`
	WebhooksOnChannelUpdateUrl              *string   `json:"Webhooks.OnChannelUpdate.Url,omitempty"`
	WebhooksOnChannelUpdatedMethod          *string   `json:"Webhooks.OnChannelUpdated.Method,omitempty"`
	WebhooksOnChannelUpdatedUrl             *string   `json:"Webhooks.OnChannelUpdated.Url,omitempty"`
	WebhooksOnMemberAddMethod               *string   `json:"Webhooks.OnMemberAdd.Method,omitempty"`
	WebhooksOnMemberAddUrl                  *string   `json:"Webhooks.OnMemberAdd.Url,omitempty"`
	WebhooksOnMemberAddedMethod             *string   `json:"Webhooks.OnMemberAdded.Method,omitempty"`
	WebhooksOnMemberAddedUrl                *string   `json:"Webhooks.OnMemberAdded.Url,omitempty"`
	WebhooksOnMemberRemoveMethod            *string   `json:"Webhooks.OnMemberRemove.Method,omitempty"`
	WebhooksOnMemberRemoveUrl               *string   `json:"Webhooks.OnMemberRemove.Url,omitempty"`
	WebhooksOnMemberRemovedMethod           *string   `json:"Webhooks.OnMemberRemoved.Method,omitempty"`
	WebhooksOnMemberRemovedUrl              *string   `json:"Webhooks.OnMemberRemoved.Url,omitempty"`
	WebhooksOnMessageRemoveMethod           *string   `json:"Webhooks.OnMessageRemove.Method,omitempty"`
	WebhooksOnMessageRemoveUrl              *string   `json:"Webhooks.OnMessageRemove.Url,omitempty"`
	WebhooksOnMessageRemovedMethod          *string   `json:"Webhooks.OnMessageRemoved.Method,omitempty"`
	WebhooksOnMessageRemovedUrl             *string   `json:"Webhooks.OnMessageRemoved.Url,omitempty"`
	WebhooksOnMessageSendMethod             *string   `json:"Webhooks.OnMessageSend.Method,omitempty"`
	WebhooksOnMessageSendUrl                *string   `json:"Webhooks.OnMessageSend.Url,omitempty"`
	WebhooksOnMessageSentMethod             *string   `json:"Webhooks.OnMessageSent.Method,omitempty"`
	WebhooksOnMessageSentUrl                *string   `json:"Webhooks.OnMessageSent.Url,omitempty"`
	WebhooksOnMessageUpdateMethod           *string   `json:"Webhooks.OnMessageUpdate.Method,omitempty"`
	WebhooksOnMessageUpdateUrl              *string   `json:"Webhooks.OnMessageUpdate.Url,omitempty"`
	WebhooksOnMessageUpdatedMethod          *string   `json:"Webhooks.OnMessageUpdated.Method,omitempty"`
	WebhooksOnMessageUpdatedUrl             *string   `json:"Webhooks.OnMessageUpdated.Url,omitempty"`
}

/*
UpdateService Method for UpdateService
 * @param Sid The Twilio-provided string that uniquely identifies the Service resource to update.
 * @param optional nil or *UpdateServiceOpts - Optional Parameters:
 * @param "ConsumptionReportInterval" (int32) - DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
 * @param "DefaultChannelCreatorRoleSid" (string) - The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
 * @param "DefaultChannelRoleSid" (string) - The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
 * @param "DefaultServiceRoleSid" (string) - The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It can be up to 64 characters long.
 * @param "LimitsChannelMembers" (int32) - The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
 * @param "LimitsUserChannels" (int32) - The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
 * @param "NotificationsAddedToChannelEnabled" (bool) - Whether to send a notification when a member is added to a channel. Can be: `true` or `false` and the default is `false`.
 * @param "NotificationsAddedToChannelTemplate" (string) - The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
 * @param "NotificationsInvitedToChannelEnabled" (bool) - Whether to send a notification when a user is invited to a channel. Can be: `true` or `false` and the default is `false`.
 * @param "NotificationsInvitedToChannelTemplate" (string) - The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
 * @param "NotificationsNewMessageEnabled" (bool) - Whether to send a notification when a new message is added to a channel. Can be: `true` or `false` and the default is `false`.
 * @param "NotificationsNewMessageTemplate" (string) - The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
 * @param "NotificationsRemovedFromChannelEnabled" (bool) - Whether to send a notification to a user when they are removed from a channel. Can be: `true` or `false` and the default is `false`.
 * @param "NotificationsRemovedFromChannelTemplate" (string) - The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
 * @param "PostWebhookUrl" (string) - The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
 * @param "PreWebhookUrl" (string) - The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
 * @param "ReachabilityEnabled" (bool) - Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
 * @param "ReadStatusEnabled" (bool) - Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
 * @param "TypingIndicatorTimeout" (int32) - How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
 * @param "WebhookFilters" ([]string) - The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @param "WebhookMethod" (string) - The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @param "WebhooksOnChannelAddMethod" (string) - The HTTP method to use when calling the `webhooks.on_channel_add.url`.
 * @param "WebhooksOnChannelAddUrl" (string) - The URL of the webhook to call in response to the `on_channel_add` event using the `webhooks.on_channel_add.method` HTTP method.
 * @param "WebhooksOnChannelAddedMethod" (string) - The URL of the webhook to call in response to the `on_channel_added` event`.
 * @param "WebhooksOnChannelAddedUrl" (string) - The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_added.method` HTTP method.
 * @param "WebhooksOnChannelDestroyMethod" (string) - The HTTP method to use when calling the `webhooks.on_channel_destroy.url`.
 * @param "WebhooksOnChannelDestroyUrl" (string) - The URL of the webhook to call in response to the `on_channel_destroy` event using the `webhooks.on_channel_destroy.method` HTTP method.
 * @param "WebhooksOnChannelDestroyedMethod" (string) - The HTTP method to use when calling the `webhooks.on_channel_destroyed.url`.
 * @param "WebhooksOnChannelDestroyedUrl" (string) - The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_destroyed.method` HTTP method.
 * @param "WebhooksOnChannelUpdateMethod" (string) - The HTTP method to use when calling the `webhooks.on_channel_update.url`.
 * @param "WebhooksOnChannelUpdateUrl" (string) - The URL of the webhook to call in response to the `on_channel_update` event using the `webhooks.on_channel_update.method` HTTP method.
 * @param "WebhooksOnChannelUpdatedMethod" (string) - The HTTP method to use when calling the `webhooks.on_channel_updated.url`.
 * @param "WebhooksOnChannelUpdatedUrl" (string) - The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method.
 * @param "WebhooksOnMemberAddMethod" (string) - The HTTP method to use when calling the `webhooks.on_member_add.url`.
 * @param "WebhooksOnMemberAddUrl" (string) - The URL of the webhook to call in response to the `on_member_add` event using the `webhooks.on_member_add.method` HTTP method.
 * @param "WebhooksOnMemberAddedMethod" (string) - The HTTP method to use when calling the `webhooks.on_channel_updated.url`.
 * @param "WebhooksOnMemberAddedUrl" (string) - The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method.
 * @param "WebhooksOnMemberRemoveMethod" (string) - The HTTP method to use when calling the `webhooks.on_member_remove.url`.
 * @param "WebhooksOnMemberRemoveUrl" (string) - The URL of the webhook to call in response to the `on_member_remove` event using the `webhooks.on_member_remove.method` HTTP method.
 * @param "WebhooksOnMemberRemovedMethod" (string) - The HTTP method to use when calling the `webhooks.on_member_removed.url`.
 * @param "WebhooksOnMemberRemovedUrl" (string) - The URL of the webhook to call in response to the `on_member_removed` event using the `webhooks.on_member_removed.method` HTTP method.
 * @param "WebhooksOnMessageRemoveMethod" (string) - The HTTP method to use when calling the `webhooks.on_message_remove.url`.
 * @param "WebhooksOnMessageRemoveUrl" (string) - The URL of the webhook to call in response to the `on_message_remove` event using the `webhooks.on_message_remove.method` HTTP method.
 * @param "WebhooksOnMessageRemovedMethod" (string) - The HTTP method to use when calling the `webhooks.on_message_removed.url`.
 * @param "WebhooksOnMessageRemovedUrl" (string) - The URL of the webhook to call in response to the `on_message_removed` event using the `webhooks.on_message_removed.method` HTTP method.
 * @param "WebhooksOnMessageSendMethod" (string) - The HTTP method to use when calling the `webhooks.on_message_send.url`.
 * @param "WebhooksOnMessageSendUrl" (string) - The URL of the webhook to call in response to the `on_message_send` event using the `webhooks.on_message_send.method` HTTP method.
 * @param "WebhooksOnMessageSentMethod" (string) - The URL of the webhook to call in response to the `on_message_sent` event`.
 * @param "WebhooksOnMessageSentUrl" (string) - The URL of the webhook to call in response to the `on_message_sent` event using the `webhooks.on_message_sent.method` HTTP method.
 * @param "WebhooksOnMessageUpdateMethod" (string) - The HTTP method to use when calling the `webhooks.on_message_update.url`.
 * @param "WebhooksOnMessageUpdateUrl" (string) - The URL of the webhook to call in response to the `on_message_update` event using the `webhooks.on_message_update.method` HTTP method.
 * @param "WebhooksOnMessageUpdatedMethod" (string) - The HTTP method to use when calling the `webhooks.on_message_updated.url`.
 * @param "WebhooksOnMessageUpdatedUrl" (string) - The URL of the webhook to call in response to the `on_message_updated` event using the `webhooks.on_message_updated.method` HTTP method.
@return ChatV1Service
*/
func (c *DefaultApiService) UpdateService(Sid string, params *UpdateServiceParams) (*ChatV1Service, error) {
	path := "/v1/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.ConsumptionReportInterval != nil {
		data.Set("ConsumptionReportInterval", fmt.Sprint(*params.ConsumptionReportInterval))
	}
	if params != nil && params.DefaultChannelCreatorRoleSid != nil {
		data.Set("DefaultChannelCreatorRoleSid", *params.DefaultChannelCreatorRoleSid)
	}
	if params != nil && params.DefaultChannelRoleSid != nil {
		data.Set("DefaultChannelRoleSid", *params.DefaultChannelRoleSid)
	}
	if params != nil && params.DefaultServiceRoleSid != nil {
		data.Set("DefaultServiceRoleSid", *params.DefaultServiceRoleSid)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.LimitsChannelMembers != nil {
		data.Set("LimitsChannelMembers", fmt.Sprint(*params.LimitsChannelMembers))
	}
	if params != nil && params.LimitsUserChannels != nil {
		data.Set("LimitsUserChannels", fmt.Sprint(*params.LimitsUserChannels))
	}
	if params != nil && params.NotificationsAddedToChannelEnabled != nil {
		data.Set("NotificationsAddedToChannelEnabled", fmt.Sprint(*params.NotificationsAddedToChannelEnabled))
	}
	if params != nil && params.NotificationsAddedToChannelTemplate != nil {
		data.Set("NotificationsAddedToChannelTemplate", *params.NotificationsAddedToChannelTemplate)
	}
	if params != nil && params.NotificationsInvitedToChannelEnabled != nil {
		data.Set("NotificationsInvitedToChannelEnabled", fmt.Sprint(*params.NotificationsInvitedToChannelEnabled))
	}
	if params != nil && params.NotificationsInvitedToChannelTemplate != nil {
		data.Set("NotificationsInvitedToChannelTemplate", *params.NotificationsInvitedToChannelTemplate)
	}
	if params != nil && params.NotificationsNewMessageEnabled != nil {
		data.Set("NotificationsNewMessageEnabled", fmt.Sprint(*params.NotificationsNewMessageEnabled))
	}
	if params != nil && params.NotificationsNewMessageTemplate != nil {
		data.Set("NotificationsNewMessageTemplate", *params.NotificationsNewMessageTemplate)
	}
	if params != nil && params.NotificationsRemovedFromChannelEnabled != nil {
		data.Set("NotificationsRemovedFromChannelEnabled", fmt.Sprint(*params.NotificationsRemovedFromChannelEnabled))
	}
	if params != nil && params.NotificationsRemovedFromChannelTemplate != nil {
		data.Set("NotificationsRemovedFromChannelTemplate", *params.NotificationsRemovedFromChannelTemplate)
	}
	if params != nil && params.PostWebhookUrl != nil {
		data.Set("PostWebhookUrl", *params.PostWebhookUrl)
	}
	if params != nil && params.PreWebhookUrl != nil {
		data.Set("PreWebhookUrl", *params.PreWebhookUrl)
	}
	if params != nil && params.ReachabilityEnabled != nil {
		data.Set("ReachabilityEnabled", fmt.Sprint(*params.ReachabilityEnabled))
	}
	if params != nil && params.ReadStatusEnabled != nil {
		data.Set("ReadStatusEnabled", fmt.Sprint(*params.ReadStatusEnabled))
	}
	if params != nil && params.TypingIndicatorTimeout != nil {
		data.Set("TypingIndicatorTimeout", fmt.Sprint(*params.TypingIndicatorTimeout))
	}
	if params != nil && params.WebhookFilters != nil {
		data.Set("WebhookFilters", strings.Join(*params.WebhookFilters, ","))
	}
	if params != nil && params.WebhookMethod != nil {
		data.Set("WebhookMethod", *params.WebhookMethod)
	}
	if params != nil && params.WebhooksOnChannelAddMethod != nil {
		data.Set("WebhooksOnChannelAddMethod", *params.WebhooksOnChannelAddMethod)
	}
	if params != nil && params.WebhooksOnChannelAddUrl != nil {
		data.Set("WebhooksOnChannelAddUrl", *params.WebhooksOnChannelAddUrl)
	}
	if params != nil && params.WebhooksOnChannelAddedMethod != nil {
		data.Set("WebhooksOnChannelAddedMethod", *params.WebhooksOnChannelAddedMethod)
	}
	if params != nil && params.WebhooksOnChannelAddedUrl != nil {
		data.Set("WebhooksOnChannelAddedUrl", *params.WebhooksOnChannelAddedUrl)
	}
	if params != nil && params.WebhooksOnChannelDestroyMethod != nil {
		data.Set("WebhooksOnChannelDestroyMethod", *params.WebhooksOnChannelDestroyMethod)
	}
	if params != nil && params.WebhooksOnChannelDestroyUrl != nil {
		data.Set("WebhooksOnChannelDestroyUrl", *params.WebhooksOnChannelDestroyUrl)
	}
	if params != nil && params.WebhooksOnChannelDestroyedMethod != nil {
		data.Set("WebhooksOnChannelDestroyedMethod", *params.WebhooksOnChannelDestroyedMethod)
	}
	if params != nil && params.WebhooksOnChannelDestroyedUrl != nil {
		data.Set("WebhooksOnChannelDestroyedUrl", *params.WebhooksOnChannelDestroyedUrl)
	}
	if params != nil && params.WebhooksOnChannelUpdateMethod != nil {
		data.Set("WebhooksOnChannelUpdateMethod", *params.WebhooksOnChannelUpdateMethod)
	}
	if params != nil && params.WebhooksOnChannelUpdateUrl != nil {
		data.Set("WebhooksOnChannelUpdateUrl", *params.WebhooksOnChannelUpdateUrl)
	}
	if params != nil && params.WebhooksOnChannelUpdatedMethod != nil {
		data.Set("WebhooksOnChannelUpdatedMethod", *params.WebhooksOnChannelUpdatedMethod)
	}
	if params != nil && params.WebhooksOnChannelUpdatedUrl != nil {
		data.Set("WebhooksOnChannelUpdatedUrl", *params.WebhooksOnChannelUpdatedUrl)
	}
	if params != nil && params.WebhooksOnMemberAddMethod != nil {
		data.Set("WebhooksOnMemberAddMethod", *params.WebhooksOnMemberAddMethod)
	}
	if params != nil && params.WebhooksOnMemberAddUrl != nil {
		data.Set("WebhooksOnMemberAddUrl", *params.WebhooksOnMemberAddUrl)
	}
	if params != nil && params.WebhooksOnMemberAddedMethod != nil {
		data.Set("WebhooksOnMemberAddedMethod", *params.WebhooksOnMemberAddedMethod)
	}
	if params != nil && params.WebhooksOnMemberAddedUrl != nil {
		data.Set("WebhooksOnMemberAddedUrl", *params.WebhooksOnMemberAddedUrl)
	}
	if params != nil && params.WebhooksOnMemberRemoveMethod != nil {
		data.Set("WebhooksOnMemberRemoveMethod", *params.WebhooksOnMemberRemoveMethod)
	}
	if params != nil && params.WebhooksOnMemberRemoveUrl != nil {
		data.Set("WebhooksOnMemberRemoveUrl", *params.WebhooksOnMemberRemoveUrl)
	}
	if params != nil && params.WebhooksOnMemberRemovedMethod != nil {
		data.Set("WebhooksOnMemberRemovedMethod", *params.WebhooksOnMemberRemovedMethod)
	}
	if params != nil && params.WebhooksOnMemberRemovedUrl != nil {
		data.Set("WebhooksOnMemberRemovedUrl", *params.WebhooksOnMemberRemovedUrl)
	}
	if params != nil && params.WebhooksOnMessageRemoveMethod != nil {
		data.Set("WebhooksOnMessageRemoveMethod", *params.WebhooksOnMessageRemoveMethod)
	}
	if params != nil && params.WebhooksOnMessageRemoveUrl != nil {
		data.Set("WebhooksOnMessageRemoveUrl", *params.WebhooksOnMessageRemoveUrl)
	}
	if params != nil && params.WebhooksOnMessageRemovedMethod != nil {
		data.Set("WebhooksOnMessageRemovedMethod", *params.WebhooksOnMessageRemovedMethod)
	}
	if params != nil && params.WebhooksOnMessageRemovedUrl != nil {
		data.Set("WebhooksOnMessageRemovedUrl", *params.WebhooksOnMessageRemovedUrl)
	}
	if params != nil && params.WebhooksOnMessageSendMethod != nil {
		data.Set("WebhooksOnMessageSendMethod", *params.WebhooksOnMessageSendMethod)
	}
	if params != nil && params.WebhooksOnMessageSendUrl != nil {
		data.Set("WebhooksOnMessageSendUrl", *params.WebhooksOnMessageSendUrl)
	}
	if params != nil && params.WebhooksOnMessageSentMethod != nil {
		data.Set("WebhooksOnMessageSentMethod", *params.WebhooksOnMessageSentMethod)
	}
	if params != nil && params.WebhooksOnMessageSentUrl != nil {
		data.Set("WebhooksOnMessageSentUrl", *params.WebhooksOnMessageSentUrl)
	}
	if params != nil && params.WebhooksOnMessageUpdateMethod != nil {
		data.Set("WebhooksOnMessageUpdateMethod", *params.WebhooksOnMessageUpdateMethod)
	}
	if params != nil && params.WebhooksOnMessageUpdateUrl != nil {
		data.Set("WebhooksOnMessageUpdateUrl", *params.WebhooksOnMessageUpdateUrl)
	}
	if params != nil && params.WebhooksOnMessageUpdatedMethod != nil {
		data.Set("WebhooksOnMessageUpdatedMethod", *params.WebhooksOnMessageUpdatedMethod)
	}
	if params != nil && params.WebhooksOnMessageUpdatedUrl != nil {
		data.Set("WebhooksOnMessageUpdatedUrl", *params.WebhooksOnMessageUpdatedUrl)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// UpdateUserParams Optional parameters for the method 'UpdateUser'
type UpdateUserParams struct {
	Attributes   *string `json:"Attributes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	RoleSid      *string `json:"RoleSid,omitempty"`
}

/*
UpdateUser Method for UpdateUser
 * @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to update the resource from.
 * @param Sid The Twilio-provided string that uniquely identifies the User resource to update.
 * @param optional nil or *UpdateUserOpts - Optional Parameters:
 * @param "Attributes" (string) - A valid JSON string that contains application-specific data.
 * @param "FriendlyName" (string) - A descriptive string that you create to describe the resource. It is often used for display purposes.
 * @param "RoleSid" (string) - The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to this user.
@return ChatV1ServiceUser
*/
func (c *DefaultApiService) UpdateUser(ServiceSid string, Sid string, params *UpdateUserParams) (*ChatV1ServiceUser, error) {
	path := "/v1/Services/{ServiceSid}/Users/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := 0

	if params != nil && params.Attributes != nil {
		data.Set("Attributes", *params.Attributes)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.RoleSid != nil {
		data.Set("RoleSid", *params.RoleSid)
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ChatV1ServiceUser{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
