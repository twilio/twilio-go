/*
    * Twilio - Verify
    *
    * This is the public Twilio REST API.
    *
    * API version: 1.10.0
    * Contact: support@twilio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	twilio "github.com/twilio/twilio-go/client"
	"net/url"
    "strings"
    "time"
)

type DefaultApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewDefaultApiService(client *twilio.Client) *DefaultApiService {
	return &DefaultApiService {
		client: client,
		baseURL: "https://verify.twilio.com",
	}
}

// CreateAccessTokenParams Optional parameters for the method 'CreateAccessToken'
type CreateAccessTokenParams struct {
	FactorType *string `json:"FactorType,omitempty"`
	Identity *string `json:"Identity,omitempty"`
}

/*
* CreateAccessToken Method for CreateAccessToken
* Create a new enrollment Access Token for the Entity
* @param ServiceSid The unique SID identifier of the Service.
* @param optional nil or *CreateAccessTokenParams - Optional Parameters:
* @param "FactorType" (string) - The Type of this Factor. Eg. `push`
* @param "Identity" (string) - The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
* @return VerifyV2ServiceAccessToken
*/
func (c *DefaultApiService) CreateAccessToken(ServiceSid string, params *CreateAccessTokenParams) (*VerifyV2ServiceAccessToken, error) {
    path := "/v2/Services/{ServiceSid}/AccessTokens"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FactorType != nil {
	data.Set("FactorType", *params.FactorType) 
}
    if params != nil && params.Identity != nil {
	data.Set("Identity", *params.Identity) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceAccessToken{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateBucketParams Optional parameters for the method 'CreateBucket'
type CreateBucketParams struct {
	Interval *int32 `json:"Interval,omitempty"`
	Max *int32 `json:"Max,omitempty"`
}

/*
* CreateBucket Method for CreateBucket
* Create a new Bucket for a Rate Limit
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param RateLimitSid The Twilio-provided string that uniquely identifies the Rate Limit resource.
* @param optional nil or *CreateBucketParams - Optional Parameters:
* @param "Interval" (int32) - Number of seconds that the rate limit will be enforced over.
* @param "Max" (int32) - Maximum number of requests permitted in during the interval.
* @return VerifyV2ServiceRateLimitBucket
*/
func (c *DefaultApiService) CreateBucket(ServiceSid string, RateLimitSid string, params *CreateBucketParams) (*VerifyV2ServiceRateLimitBucket, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Interval != nil {
	data.Set("Interval", fmt.Sprint(*params.Interval)) 
}
    if params != nil && params.Max != nil {
	data.Set("Max", fmt.Sprint(*params.Max)) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceRateLimitBucket{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateChallengeParams Optional parameters for the method 'CreateChallenge'
type CreateChallengeParams struct {
	DetailsFields *[]map[string]interface{} `json:"Details.Fields,omitempty"`
	DetailsMessage *string `json:"Details.Message,omitempty"`
	ExpirationDate *time.Time `json:"ExpirationDate,omitempty"`
	FactorSid *string `json:"FactorSid,omitempty"`
	HiddenDetails *map[string]interface{} `json:"HiddenDetails,omitempty"`
}

/*
* CreateChallenge Method for CreateChallenge
* Create a new Challenge for the Factor
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
* @param optional nil or *CreateChallengeParams - Optional Parameters:
* @param "DetailsFields" ([]map[string]interface{}) - A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field. Used when `factor_type` is `push`.
* @param "DetailsMessage" (string) - Shown to the user when the push notification arrives. Required when `factor_type` is `push`
* @param "ExpirationDate" (time.Time) - The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation.
* @param "FactorSid" (string) - The unique SID identifier of the Factor.
* @param "HiddenDetails" (map[string]interface{}) - Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. `{\\\"ip\\\": \\\"172.168.1.234\\\"}`
* @return VerifyV2ServiceEntityChallenge
*/
func (c *DefaultApiService) CreateChallenge(ServiceSid string, Identity string, params *CreateChallengeParams) (*VerifyV2ServiceEntityChallenge, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.DetailsFields != nil {
	v, err := json.Marshal(params.DetailsFields)

	if err != nil {
	    return nil, err
	}

	data.Set("DetailsFields", fmt.Sprint(v))
}
    if params != nil && params.DetailsMessage != nil {
	data.Set("DetailsMessage", *params.DetailsMessage) 
}
    if params != nil && params.ExpirationDate != nil {
	data.Set("ExpirationDate", fmt.Sprint(*params.ExpirationDate)) 
}
    if params != nil && params.FactorSid != nil {
	data.Set("FactorSid", *params.FactorSid) 
}
    if params != nil && params.HiddenDetails != nil {
	v, err := json.Marshal(params.HiddenDetails)

	if err != nil {
	    return nil, err
	}

	data.Set("HiddenDetails", fmt.Sprint(v))
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntityChallenge{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateEntityParams Optional parameters for the method 'CreateEntity'
type CreateEntityParams struct {
	Identity *string `json:"Identity,omitempty"`
}

/*
* CreateEntity Method for CreateEntity
* Create a new Entity for the Service
* @param ServiceSid The unique SID identifier of the Service.
* @param optional nil or *CreateEntityParams - Optional Parameters:
* @param "Identity" (string) - The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID.
* @return VerifyV2ServiceEntity
*/
func (c *DefaultApiService) CreateEntity(ServiceSid string, params *CreateEntityParams) (*VerifyV2ServiceEntity, error) {
    path := "/v2/Services/{ServiceSid}/Entities"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Identity != nil {
	data.Set("Identity", *params.Identity) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntity{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateFactorParams Optional parameters for the method 'CreateFactor'
type CreateFactorParams struct {
	BindingAlg *string `json:"Binding.Alg,omitempty"`
	BindingPublicKey *string `json:"Binding.PublicKey,omitempty"`
	ConfigAppId *string `json:"Config.AppId,omitempty"`
	ConfigNotificationPlatform *string `json:"Config.NotificationPlatform,omitempty"`
	ConfigNotificationToken *string `json:"Config.NotificationToken,omitempty"`
	ConfigSdkVersion *string `json:"Config.SdkVersion,omitempty"`
	FactorType *string `json:"FactorType,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
* CreateFactor Method for CreateFactor
* Create a new Factor for the Entity
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity Customer unique identity for the Entity owner of the Factor
* @param optional nil or *CreateFactorParams - Optional Parameters:
* @param "BindingAlg" (string) - The algorithm used when `factor_type` is `push`. Algorithm supported: `ES256`
* @param "BindingPublicKey" (string) - The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64
* @param "ConfigAppId" (string) - The ID that uniquely identifies your app in the Google or Apple store, such as `com.example.myapp`. Required when `factor_type` is `push`
* @param "ConfigNotificationPlatform" (string) - The transport technology used to generate the Notification Token. Can be `apn` or `fcm`. Required when `factor_type` is `push`
* @param "ConfigNotificationToken" (string) - For APN, the device token. For FCM the registration token. It used to send the push notifications. Required when `factor_type` is `push`
* @param "ConfigSdkVersion" (string) - The Verify Push SDK version used to configure the factor
* @param "FactorType" (string) - The Type of this Factor. Currently only `push` is supported
* @param "FriendlyName" (string) - The friendly name of this Factor
* @return VerifyV2ServiceEntityFactor
*/
func (c *DefaultApiService) CreateFactor(ServiceSid string, Identity string, params *CreateFactorParams) (*VerifyV2ServiceEntityFactor, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.BindingAlg != nil {
	data.Set("BindingAlg", *params.BindingAlg) 
}
    if params != nil && params.BindingPublicKey != nil {
	data.Set("BindingPublicKey", *params.BindingPublicKey) 
}
    if params != nil && params.ConfigAppId != nil {
	data.Set("ConfigAppId", *params.ConfigAppId) 
}
    if params != nil && params.ConfigNotificationPlatform != nil {
	data.Set("ConfigNotificationPlatform", *params.ConfigNotificationPlatform) 
}
    if params != nil && params.ConfigNotificationToken != nil {
	data.Set("ConfigNotificationToken", *params.ConfigNotificationToken) 
}
    if params != nil && params.ConfigSdkVersion != nil {
	data.Set("ConfigSdkVersion", *params.ConfigSdkVersion) 
}
    if params != nil && params.FactorType != nil {
	data.Set("FactorType", *params.FactorType) 
}
    if params != nil && params.FriendlyName != nil {
	data.Set("FriendlyName", *params.FriendlyName) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntityFactor{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateMessagingConfigurationParams Optional parameters for the method 'CreateMessagingConfiguration'
type CreateMessagingConfigurationParams struct {
	Country *string `json:"Country,omitempty"`
	MessagingServiceSid *string `json:"MessagingServiceSid,omitempty"`
}

/*
* CreateMessagingConfiguration Method for CreateMessagingConfiguration
* Create a new MessagingConfiguration for a service.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
* @param optional nil or *CreateMessagingConfigurationParams - Optional Parameters:
* @param "Country" (string) - The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
* @param "MessagingServiceSid" (string) - The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) to be used to send SMS to the country of this configuration.
* @return VerifyV2ServiceMessagingConfiguration
*/
func (c *DefaultApiService) CreateMessagingConfiguration(ServiceSid string, params *CreateMessagingConfigurationParams) (*VerifyV2ServiceMessagingConfiguration, error) {
    path := "/v2/Services/{ServiceSid}/MessagingConfigurations"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Country != nil {
	data.Set("Country", *params.Country) 
}
    if params != nil && params.MessagingServiceSid != nil {
	data.Set("MessagingServiceSid", *params.MessagingServiceSid) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceMessagingConfiguration{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateRateLimitParams Optional parameters for the method 'CreateRateLimit'
type CreateRateLimitParams struct {
	Description *string `json:"Description,omitempty"`
	UniqueName *string `json:"UniqueName,omitempty"`
}

/*
* CreateRateLimit Method for CreateRateLimit
* Create a new Rate Limit for a Service
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param optional nil or *CreateRateLimitParams - Optional Parameters:
* @param "Description" (string) - Description of this Rate Limit
* @param "UniqueName" (string) - Provides a unique and addressable name to be assigned to this Rate Limit, assigned by the developer, to be optionally used in addition to SID. **This value should not contain PII.**
* @return VerifyV2ServiceRateLimit
*/
func (c *DefaultApiService) CreateRateLimit(ServiceSid string, params *CreateRateLimitParams) (*VerifyV2ServiceRateLimit, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Description != nil {
	data.Set("Description", *params.Description) 
}
    if params != nil && params.UniqueName != nil {
	data.Set("UniqueName", *params.UniqueName) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceRateLimit{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateServiceParams Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
	CodeLength *int32 `json:"CodeLength,omitempty"`
	CustomCodeEnabled *bool `json:"CustomCodeEnabled,omitempty"`
	DoNotShareWarningEnabled *bool `json:"DoNotShareWarningEnabled,omitempty"`
	DtmfInputRequired *bool `json:"DtmfInputRequired,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	LookupEnabled *bool `json:"LookupEnabled,omitempty"`
	Psd2Enabled *bool `json:"Psd2Enabled,omitempty"`
	PushApnCredentialSid *string `json:"Push.ApnCredentialSid,omitempty"`
	PushFcmCredentialSid *string `json:"Push.FcmCredentialSid,omitempty"`
	PushIncludeDate *bool `json:"Push.IncludeDate,omitempty"`
	SkipSmsToLandlines *bool `json:"SkipSmsToLandlines,omitempty"`
	TtsName *string `json:"TtsName,omitempty"`
}

/*
* CreateService Method for CreateService
* Create a new Verification Service.
* @param optional nil or *CreateServiceParams - Optional Parameters:
* @param "CodeLength" (int32) - The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive.
* @param "CustomCodeEnabled" (bool) - Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers.
* @param "DoNotShareWarningEnabled" (bool) - Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: `Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code`
* @param "DtmfInputRequired" (bool) - Whether to ask the user to press a number before delivering the verify code in a phone call.
* @param "FriendlyName" (string) - A descriptive string that you create to describe the verification service. It can be up to 30 characters long. **This value should not contain PII.**
* @param "LookupEnabled" (bool) - Whether to perform a lookup with each verification started and return info about the phone number.
* @param "Psd2Enabled" (bool) - Whether to pass PSD2 transaction parameters when starting a verification.
* @param "PushApnCredentialSid" (string) - Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
* @param "PushFcmCredentialSid" (string) - Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
* @param "PushIncludeDate" (bool) - Optional configuration for the Push factors. If true, include the date in the Challenge's reponse. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: true
* @param "SkipSmsToLandlines" (bool) - Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`.
* @param "TtsName" (string) - The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages.
* @return VerifyV2Service
*/
func (c *DefaultApiService) CreateService(params *CreateServiceParams) (*VerifyV2Service, error) {
    path := "/v2/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.CodeLength != nil {
	data.Set("CodeLength", fmt.Sprint(*params.CodeLength)) 
}
    if params != nil && params.CustomCodeEnabled != nil {
	data.Set("CustomCodeEnabled", fmt.Sprint(*params.CustomCodeEnabled)) 
}
    if params != nil && params.DoNotShareWarningEnabled != nil {
	data.Set("DoNotShareWarningEnabled", fmt.Sprint(*params.DoNotShareWarningEnabled)) 
}
    if params != nil && params.DtmfInputRequired != nil {
	data.Set("DtmfInputRequired", fmt.Sprint(*params.DtmfInputRequired)) 
}
    if params != nil && params.FriendlyName != nil {
	data.Set("FriendlyName", *params.FriendlyName) 
}
    if params != nil && params.LookupEnabled != nil {
	data.Set("LookupEnabled", fmt.Sprint(*params.LookupEnabled)) 
}
    if params != nil && params.Psd2Enabled != nil {
	data.Set("Psd2Enabled", fmt.Sprint(*params.Psd2Enabled)) 
}
    if params != nil && params.PushApnCredentialSid != nil {
	data.Set("PushApnCredentialSid", *params.PushApnCredentialSid) 
}
    if params != nil && params.PushFcmCredentialSid != nil {
	data.Set("PushFcmCredentialSid", *params.PushFcmCredentialSid) 
}
    if params != nil && params.PushIncludeDate != nil {
	data.Set("PushIncludeDate", fmt.Sprint(*params.PushIncludeDate)) 
}
    if params != nil && params.SkipSmsToLandlines != nil {
	data.Set("SkipSmsToLandlines", fmt.Sprint(*params.SkipSmsToLandlines)) 
}
    if params != nil && params.TtsName != nil {
	data.Set("TtsName", *params.TtsName) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateVerificationParams Optional parameters for the method 'CreateVerification'
type CreateVerificationParams struct {
	Amount *string `json:"Amount,omitempty"`
	AppHash *string `json:"AppHash,omitempty"`
	Channel *string `json:"Channel,omitempty"`
	ChannelConfiguration *map[string]interface{} `json:"ChannelConfiguration,omitempty"`
	CustomCode *string `json:"CustomCode,omitempty"`
	CustomFriendlyName *string `json:"CustomFriendlyName,omitempty"`
	CustomMessage *string `json:"CustomMessage,omitempty"`
	Locale *string `json:"Locale,omitempty"`
	Payee *string `json:"Payee,omitempty"`
	RateLimits *map[string]interface{} `json:"RateLimits,omitempty"`
	SendDigits *string `json:"SendDigits,omitempty"`
	To *string `json:"To,omitempty"`
}

/*
* CreateVerification Method for CreateVerification
* Create a new Verification using a Service
* @param ServiceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under.
* @param optional nil or *CreateVerificationParams - Optional Parameters:
* @param "Amount" (string) - The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
* @param "AppHash" (string) - Your [App Hash](https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string) to be appended at the end of your verification SMS body. Applies only to SMS. Example SMS body: `<#> Your AppName verification code is: 1234 He42w354ol9`.
* @param "Channel" (string) - The verification method to use. Can be: [`email`](https://www.twilio.com/docs/verify/email), `sms` or `call`.
* @param "ChannelConfiguration" (map[string]interface{}) - [`email`](https://www.twilio.com/docs/verify/email) channel configuration in json format. Must include 'from' and 'from_name'.
* @param "CustomCode" (string) - A pre-generated code to use for verification. The code can be between 4 and 10 characters, inclusive.
* @param "CustomFriendlyName" (string) - A custom user defined friendly name that overwrites the existing one in the verification message
* @param "CustomMessage" (string) - The text of a custom message to use for the verification.
* @param "Locale" (string) - The locale to use for the verification SMS or call. Can be: `af`, `ar`, `ca`, `cs`, `da`, `de`, `el`, `en`, `en-GB`, `es`, `fi`, `fr`, `he`, `hi`, `hr`, `hu`, `id`, `it`, `ja`, `ko`, `ms`, `nb`, `nl`, `pl`, `pt`, `pr-BR`, `ro`, `ru`, `sv`, `th`, `tl`, `tr`, `vi`, `zh`, `zh-CN`, or `zh-HK.`
* @param "Payee" (string) - The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
* @param "RateLimits" (map[string]interface{}) - The custom key-value pairs of Programmable Rate Limits. Keys correspond to `unique_name` fields defined when [creating your Rate Limit](https://www.twilio.com/docs/verify/api/service-rate-limits). Associated value pairs represent values in the request that you are rate limiting on. You may include multiple Rate Limit values in each request.
* @param "SendDigits" (string) - The digits to send after a phone call is answered, for example, to dial an extension. For more information, see the Programmable Voice documentation of [sendDigits](https://www.twilio.com/docs/voice/twiml/number#attributes-sendDigits).
* @param "To" (string) - The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
* @return VerifyV2ServiceVerification
*/
func (c *DefaultApiService) CreateVerification(ServiceSid string, params *CreateVerificationParams) (*VerifyV2ServiceVerification, error) {
    path := "/v2/Services/{ServiceSid}/Verifications"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Amount != nil {
	data.Set("Amount", *params.Amount) 
}
    if params != nil && params.AppHash != nil {
	data.Set("AppHash", *params.AppHash) 
}
    if params != nil && params.Channel != nil {
	data.Set("Channel", *params.Channel) 
}
    if params != nil && params.ChannelConfiguration != nil {
	v, err := json.Marshal(params.ChannelConfiguration)

	if err != nil {
	    return nil, err
	}

	data.Set("ChannelConfiguration", fmt.Sprint(v))
}
    if params != nil && params.CustomCode != nil {
	data.Set("CustomCode", *params.CustomCode) 
}
    if params != nil && params.CustomFriendlyName != nil {
	data.Set("CustomFriendlyName", *params.CustomFriendlyName) 
}
    if params != nil && params.CustomMessage != nil {
	data.Set("CustomMessage", *params.CustomMessage) 
}
    if params != nil && params.Locale != nil {
	data.Set("Locale", *params.Locale) 
}
    if params != nil && params.Payee != nil {
	data.Set("Payee", *params.Payee) 
}
    if params != nil && params.RateLimits != nil {
	v, err := json.Marshal(params.RateLimits)

	if err != nil {
	    return nil, err
	}

	data.Set("RateLimits", fmt.Sprint(v))
}
    if params != nil && params.SendDigits != nil {
	data.Set("SendDigits", *params.SendDigits) 
}
    if params != nil && params.To != nil {
	data.Set("To", *params.To) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceVerification{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateVerificationCheckParams Optional parameters for the method 'CreateVerificationCheck'
type CreateVerificationCheckParams struct {
	Amount *string `json:"Amount,omitempty"`
	Code *string `json:"Code,omitempty"`
	Payee *string `json:"Payee,omitempty"`
	To *string `json:"To,omitempty"`
	VerificationSid *string `json:"VerificationSid,omitempty"`
}

/*
* CreateVerificationCheck Method for CreateVerificationCheck
* challenge a specific Verification Check.
* @param ServiceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under.
* @param optional nil or *CreateVerificationCheckParams - Optional Parameters:
* @param "Amount" (string) - The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
* @param "Code" (string) - The 4-10 character string being verified.
* @param "Payee" (string) - The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
* @param "To" (string) - The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Either this parameter or the `verification_sid` must be specified. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
* @param "VerificationSid" (string) - A SID that uniquely identifies the Verification Check. Either this parameter or the `to` phone number/[email](https://www.twilio.com/docs/verify/email) must be specified.
* @return VerifyV2ServiceVerificationCheck
*/
func (c *DefaultApiService) CreateVerificationCheck(ServiceSid string, params *CreateVerificationCheckParams) (*VerifyV2ServiceVerificationCheck, error) {
    path := "/v2/Services/{ServiceSid}/VerificationCheck"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Amount != nil {
	data.Set("Amount", *params.Amount) 
}
    if params != nil && params.Code != nil {
	data.Set("Code", *params.Code) 
}
    if params != nil && params.Payee != nil {
	data.Set("Payee", *params.Payee) 
}
    if params != nil && params.To != nil {
	data.Set("To", *params.To) 
}
    if params != nil && params.VerificationSid != nil {
	data.Set("VerificationSid", *params.VerificationSid) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceVerificationCheck{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// CreateWebhookParams Optional parameters for the method 'CreateWebhook'
type CreateWebhookParams struct {
	EventTypes *[]string `json:"EventTypes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Status *string `json:"Status,omitempty"`
	WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
* CreateWebhook Method for CreateWebhook
* Create a new Webhook for the Service
* @param ServiceSid The unique SID identifier of the Service.
* @param optional nil or *CreateWebhookParams - Optional Parameters:
* @param "EventTypes" ([]string) - The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
* @param "FriendlyName" (string) - The string that you assigned to describe the webhook. **This value should not contain PII.**
* @param "Status" (string) - The webhook status. Default value is `enabled`. One of: `enabled` or `disabled`
* @param "WebhookUrl" (string) - The URL associated with this Webhook.
* @return VerifyV2ServiceWebhook
*/
func (c *DefaultApiService) CreateWebhook(ServiceSid string, params *CreateWebhookParams) (*VerifyV2ServiceWebhook, error) {
    path := "/v2/Services/{ServiceSid}/Webhooks"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EventTypes != nil {
	data.Set("EventTypes",  strings.Join(*params.EventTypes, ","))
}
    if params != nil && params.FriendlyName != nil {
	data.Set("FriendlyName", *params.FriendlyName) 
}
    if params != nil && params.Status != nil {
	data.Set("Status", *params.Status) 
}
    if params != nil && params.WebhookUrl != nil {
	data.Set("WebhookUrl", *params.WebhookUrl) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* DeleteBucket Method for DeleteBucket
* Delete a specific Bucket.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param RateLimitSid The Twilio-provided string that uniquely identifies the Rate Limit resource.
* @param Sid A 34 character string that uniquely identifies this Bucket.
*/
func (c *DefaultApiService) DeleteBucket(ServiceSid string, RateLimitSid string, Sid string, ) (error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
* DeleteEntity Method for DeleteEntity
* Delete a specific Entity.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity The unique external identifier for the Entity of the Service
*/
func (c *DefaultApiService) DeleteEntity(ServiceSid string, Identity string, ) (error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
* DeleteFactor Method for DeleteFactor
* Delete a specific Factor.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity Customer unique identity for the Entity owner of the Factor
* @param Sid A 34 character string that uniquely identifies this Factor.
*/
func (c *DefaultApiService) DeleteFactor(ServiceSid string, Identity string, Sid string, ) (error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
* DeleteMessagingConfiguration Method for DeleteMessagingConfiguration
* Delete a specific MessagingConfiguration.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
* @param Country The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
*/
func (c *DefaultApiService) DeleteMessagingConfiguration(ServiceSid string, Country string, ) (error) {
    path := "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Country"+"}", Country, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
* DeleteRateLimit Method for DeleteRateLimit
* Delete a specific Rate Limit.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param Sid The Twilio-provided string that uniquely identifies the Rate Limit resource to fetch.
*/
func (c *DefaultApiService) DeleteRateLimit(ServiceSid string, Sid string, ) (error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
* DeleteService Method for DeleteService
* Delete a specific Verification Service Instance.
* @param Sid The Twilio-provided string that uniquely identifies the Verification Service resource to delete.
*/
func (c *DefaultApiService) DeleteService(Sid string, ) (error) {
    path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
* DeleteWebhook Method for DeleteWebhook
* Delete a specific Webhook.
* @param ServiceSid The unique SID identifier of the Service.
* @param Sid The Twilio-provided string that uniquely identifies the Webhook resource to delete.
*/
func (c *DefaultApiService) DeleteWebhook(ServiceSid string, Sid string, ) (error) {
    path := "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Delete(c.baseURL+path, data, headers)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    return nil
}

/*
* FetchBucket Method for FetchBucket
* Fetch a specific Bucket.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param RateLimitSid The Twilio-provided string that uniquely identifies the Rate Limit resource.
* @param Sid A 34 character string that uniquely identifies this Bucket.
* @return VerifyV2ServiceRateLimitBucket
*/
func (c *DefaultApiService) FetchBucket(ServiceSid string, RateLimitSid string, Sid string, ) (*VerifyV2ServiceRateLimitBucket, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceRateLimitBucket{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchChallenge Method for FetchChallenge
* Fetch a specific Challenge.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
* @param Sid A 34 character string that uniquely identifies this Challenge.
* @return VerifyV2ServiceEntityChallenge
*/
func (c *DefaultApiService) FetchChallenge(ServiceSid string, Identity string, Sid string, ) (*VerifyV2ServiceEntityChallenge, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntityChallenge{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchEntity Method for FetchEntity
* Fetch a specific Entity.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity The unique external identifier for the Entity of the Service
* @return VerifyV2ServiceEntity
*/
func (c *DefaultApiService) FetchEntity(ServiceSid string, Identity string, ) (*VerifyV2ServiceEntity, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntity{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchFactor Method for FetchFactor
* Fetch a specific Factor.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity Customer unique identity for the Entity owner of the Factor
* @param Sid A 34 character string that uniquely identifies this Factor.
* @return VerifyV2ServiceEntityFactor
*/
func (c *DefaultApiService) FetchFactor(ServiceSid string, Identity string, Sid string, ) (*VerifyV2ServiceEntityFactor, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntityFactor{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchForm Method for FetchForm
* Fetch the forms for a specific Form Type.
* @param FormType The Type of this Form. Currently only `form-push` is supported.
* @return VerifyV2Form
*/
func (c *DefaultApiService) FetchForm(FormType string, ) (*VerifyV2Form, error) {
    path := "/v2/Forms/{FormType}"
	path = strings.Replace(path, "{"+"FormType"+"}", FormType, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2Form{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchMessagingConfiguration Method for FetchMessagingConfiguration
* Fetch a specific MessagingConfiguration.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
* @param Country The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
* @return VerifyV2ServiceMessagingConfiguration
*/
func (c *DefaultApiService) FetchMessagingConfiguration(ServiceSid string, Country string, ) (*VerifyV2ServiceMessagingConfiguration, error) {
    path := "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Country"+"}", Country, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceMessagingConfiguration{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchRateLimit Method for FetchRateLimit
* Fetch a specific Rate Limit.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param Sid The Twilio-provided string that uniquely identifies the Rate Limit resource to fetch.
* @return VerifyV2ServiceRateLimit
*/
func (c *DefaultApiService) FetchRateLimit(ServiceSid string, Sid string, ) (*VerifyV2ServiceRateLimit, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceRateLimit{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchService Method for FetchService
* Fetch specific Verification Service Instance.
* @param Sid The Twilio-provided string that uniquely identifies the Verification Service resource to fetch.
* @return VerifyV2Service
*/
func (c *DefaultApiService) FetchService(Sid string, ) (*VerifyV2Service, error) {
    path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchVerification Method for FetchVerification
* Fetch a specific Verification
* @param ServiceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to fetch the resource from.
* @param Sid The Twilio-provided string that uniquely identifies the Verification resource to fetch.
* @return VerifyV2ServiceVerification
*/
func (c *DefaultApiService) FetchVerification(ServiceSid string, Sid string, ) (*VerifyV2ServiceVerification, error) {
    path := "/v2/Services/{ServiceSid}/Verifications/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceVerification{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchVerificationAttempt Method for FetchVerificationAttempt
* Fetch a specific verification attempt.
* @param Sid The unique SID identifier of a Verification Attempt
* @return VerifyV2VerificationAttempt
*/
func (c *DefaultApiService) FetchVerificationAttempt(Sid string, ) (*VerifyV2VerificationAttempt, error) {
    path := "/v2/Attempts/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2VerificationAttempt{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}

/*
* FetchWebhook Method for FetchWebhook
* Fetch a specific Webhook.
* @param ServiceSid The unique SID identifier of the Service.
* @param Sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch.
* @return VerifyV2ServiceWebhook
*/
func (c *DefaultApiService) FetchWebhook(ServiceSid string, Sid string, ) (*VerifyV2ServiceWebhook, error) {
    path := "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0



    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListBucketParams Optional parameters for the method 'ListBucket'
type ListBucketParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListBucket Method for ListBucket
* Retrieve a list of all Buckets for a Rate Limit.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param RateLimitSid The Twilio-provided string that uniquely identifies the Rate Limit resource.
* @param optional nil or *ListBucketParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListBucketResponse
*/
func (c *DefaultApiService) ListBucket(ServiceSid string, RateLimitSid string, params *ListBucketParams) (*ListBucketResponse, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListBucketResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListChallengeParams Optional parameters for the method 'ListChallenge'
type ListChallengeParams struct {
	FactorSid *string `json:"FactorSid,omitempty"`
	Status *string `json:"Status,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListChallenge Method for ListChallenge
* Retrieve a list of all Challenges for a Factor.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity Customer unique identity for the Entity owner of the Challenge
* @param optional nil or *ListChallengeParams - Optional Parameters:
* @param "FactorSid" (string) - The unique SID identifier of the Factor.
* @param "Status" (string) - The Status of the Challenges to fetch. One of `pending`, `expired`, `approved` or `denied`.
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListChallengeResponse
*/
func (c *DefaultApiService) ListChallenge(ServiceSid string, Identity string, params *ListChallengeParams) (*ListChallengeResponse, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.FactorSid != nil {
	data.Set("FactorSid", *params.FactorSid) 
}
    if params != nil && params.Status != nil {
	data.Set("Status", *params.Status) 
}
    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListChallengeResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListEntityParams Optional parameters for the method 'ListEntity'
type ListEntityParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListEntity Method for ListEntity
* Retrieve a list of all Entities for a Service.
* @param ServiceSid The unique SID identifier of the Service.
* @param optional nil or *ListEntityParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListEntityResponse
*/
func (c *DefaultApiService) ListEntity(ServiceSid string, params *ListEntityParams) (*ListEntityResponse, error) {
    path := "/v2/Services/{ServiceSid}/Entities"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListEntityResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListFactorParams Optional parameters for the method 'ListFactor'
type ListFactorParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListFactor Method for ListFactor
* Retrieve a list of all Factors for an Entity.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity Customer unique identity for the Entity owner of the Factor
* @param optional nil or *ListFactorParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListFactorResponse
*/
func (c *DefaultApiService) ListFactor(ServiceSid string, Identity string, params *ListFactorParams) (*ListFactorResponse, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListFactorResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListMessagingConfigurationParams Optional parameters for the method 'ListMessagingConfiguration'
type ListMessagingConfigurationParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListMessagingConfiguration Method for ListMessagingConfiguration
* Retrieve a list of all Messaging Configurations for a Service.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
* @param optional nil or *ListMessagingConfigurationParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListMessagingConfigurationResponse
*/
func (c *DefaultApiService) ListMessagingConfiguration(ServiceSid string, params *ListMessagingConfigurationParams) (*ListMessagingConfigurationResponse, error) {
    path := "/v2/Services/{ServiceSid}/MessagingConfigurations"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListMessagingConfigurationResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListRateLimitParams Optional parameters for the method 'ListRateLimit'
type ListRateLimitParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListRateLimit Method for ListRateLimit
* Retrieve a list of all Rate Limits for a service.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param optional nil or *ListRateLimitParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListRateLimitResponse
*/
func (c *DefaultApiService) ListRateLimit(ServiceSid string, params *ListRateLimitParams) (*ListRateLimitResponse, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListRateLimitResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListServiceParams Optional parameters for the method 'ListService'
type ListServiceParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListService Method for ListService
* Retrieve a list of all Verification Services for an account.
* @param optional nil or *ListServiceParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListServiceResponse
*/
func (c *DefaultApiService) ListService(params *ListServiceParams) (*ListServiceResponse, error) {
    path := "/v2/Services"

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListServiceResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListVerificationAttemptParams Optional parameters for the method 'ListVerificationAttempt'
type ListVerificationAttemptParams struct {
	DateCreatedAfter *time.Time `json:"DateCreatedAfter,omitempty"`
	DateCreatedBefore *time.Time `json:"DateCreatedBefore,omitempty"`
	ChannelDataTo *string `json:"ChannelData.To,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListVerificationAttempt Method for ListVerificationAttempt
* List all the verification attempts for a given Account.
* @param optional nil or *ListVerificationAttemptParams - Optional Parameters:
* @param "DateCreatedAfter" (time.Time) - Datetime filter used to query Verification Attempts created after this datetime.
* @param "DateCreatedBefore" (time.Time) - Datetime filter used to query Verification Attempts created before this datetime.
* @param "ChannelDataTo" (string) - Destination of a verification. Depending on the type of channel, it could be a phone number in E.164 format or an email address.
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListVerificationAttemptResponse
*/
func (c *DefaultApiService) ListVerificationAttempt(params *ListVerificationAttemptParams) (*ListVerificationAttemptResponse, error) {
    path := "/v2/Attempts"

    data := url.Values{}
    headers := 0

    if params != nil && params.DateCreatedAfter != nil {
	data.Set("DateCreatedAfter", fmt.Sprint(*params.DateCreatedAfter)) 
}
    if params != nil && params.DateCreatedBefore != nil {
	data.Set("DateCreatedBefore", fmt.Sprint(*params.DateCreatedBefore)) 
}
    if params != nil && params.ChannelDataTo != nil {
	data.Set("ChannelDataTo", *params.ChannelDataTo) 
}
    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListVerificationAttemptResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// ListWebhookParams Optional parameters for the method 'ListWebhook'
type ListWebhookParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
* ListWebhook Method for ListWebhook
* Retrieve a list of all Webhooks for a Service.
* @param ServiceSid The unique SID identifier of the Service.
* @param optional nil or *ListWebhookParams - Optional Parameters:
* @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
* @return ListWebhookResponse
*/
func (c *DefaultApiService) ListWebhook(ServiceSid string, params *ListWebhookParams) (*ListWebhookResponse, error) {
    path := "/v2/Services/{ServiceSid}/Webhooks"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.PageSize != nil {
	data.Set("PageSize", fmt.Sprint(*params.PageSize)) 
}


    resp, err := c.client.Get(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &ListWebhookResponse{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateBucketParams Optional parameters for the method 'UpdateBucket'
type UpdateBucketParams struct {
	Interval *int32 `json:"Interval,omitempty"`
	Max *int32 `json:"Max,omitempty"`
}

/*
* UpdateBucket Method for UpdateBucket
* Update a specific Bucket.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param RateLimitSid The Twilio-provided string that uniquely identifies the Rate Limit resource.
* @param Sid A 34 character string that uniquely identifies this Bucket.
* @param optional nil or *UpdateBucketParams - Optional Parameters:
* @param "Interval" (int32) - Number of seconds that the rate limit will be enforced over.
* @param "Max" (int32) - Maximum number of requests permitted in during the interval.
* @return VerifyV2ServiceRateLimitBucket
*/
func (c *DefaultApiService) UpdateBucket(ServiceSid string, RateLimitSid string, Sid string, params *UpdateBucketParams) (*VerifyV2ServiceRateLimitBucket, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"RateLimitSid"+"}", RateLimitSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Interval != nil {
	data.Set("Interval", fmt.Sprint(*params.Interval)) 
}
    if params != nil && params.Max != nil {
	data.Set("Max", fmt.Sprint(*params.Max)) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceRateLimitBucket{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateChallengeParams Optional parameters for the method 'UpdateChallenge'
type UpdateChallengeParams struct {
	AuthPayload *string `json:"AuthPayload,omitempty"`
}

/*
* UpdateChallenge Method for UpdateChallenge
* Verify a specific Challenge.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity Customer unique identity for the Entity owner of the Challenge
* @param Sid A 34 character string that uniquely identifies this Challenge.
* @param optional nil or *UpdateChallengeParams - Optional Parameters:
* @param "AuthPayload" (string) - The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code.
* @return VerifyV2ServiceEntityChallenge
*/
func (c *DefaultApiService) UpdateChallenge(ServiceSid string, Identity string, Sid string, params *UpdateChallengeParams) (*VerifyV2ServiceEntityChallenge, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AuthPayload != nil {
	data.Set("AuthPayload", *params.AuthPayload) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntityChallenge{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateFactorParams Optional parameters for the method 'UpdateFactor'
type UpdateFactorParams struct {
	AuthPayload *string `json:"AuthPayload,omitempty"`
	ConfigNotificationToken *string `json:"Config.NotificationToken,omitempty"`
	ConfigSdkVersion *string `json:"Config.SdkVersion,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

/*
* UpdateFactor Method for UpdateFactor
* Update a specific Factor. This endpoint can be used to Verify a Factor if passed an &#x60;AuthPayload&#x60; param.
* @param ServiceSid The unique SID identifier of the Service.
* @param Identity Customer unique identity for the Entity owner of the Factor
* @param Sid A 34 character string that uniquely identifies this Factor.
* @param optional nil or *UpdateFactorParams - Optional Parameters:
* @param "AuthPayload" (string) - The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
* @param "ConfigNotificationToken" (string) - For APN, the device token. For FCM the registration token. It used to send the push notifications. Required when `factor_type` is `push`
* @param "ConfigSdkVersion" (string) - The Verify Push SDK version used to configure the factor
* @param "FriendlyName" (string) - The new friendly name of this Factor
* @return VerifyV2ServiceEntityFactor
*/
func (c *DefaultApiService) UpdateFactor(ServiceSid string, Identity string, Sid string, params *UpdateFactorParams) (*VerifyV2ServiceEntityFactor, error) {
    path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", Identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.AuthPayload != nil {
	data.Set("AuthPayload", *params.AuthPayload) 
}
    if params != nil && params.ConfigNotificationToken != nil {
	data.Set("ConfigNotificationToken", *params.ConfigNotificationToken) 
}
    if params != nil && params.ConfigSdkVersion != nil {
	data.Set("ConfigSdkVersion", *params.ConfigSdkVersion) 
}
    if params != nil && params.FriendlyName != nil {
	data.Set("FriendlyName", *params.FriendlyName) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceEntityFactor{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateMessagingConfigurationParams Optional parameters for the method 'UpdateMessagingConfiguration'
type UpdateMessagingConfigurationParams struct {
	MessagingServiceSid *string `json:"MessagingServiceSid,omitempty"`
}

/*
* UpdateMessagingConfiguration Method for UpdateMessagingConfiguration
* Update a specific MessagingConfiguration
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
* @param Country The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
* @param optional nil or *UpdateMessagingConfigurationParams - Optional Parameters:
* @param "MessagingServiceSid" (string) - The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) to be used to send SMS to the country of this configuration.
* @return VerifyV2ServiceMessagingConfiguration
*/
func (c *DefaultApiService) UpdateMessagingConfiguration(ServiceSid string, Country string, params *UpdateMessagingConfigurationParams) (*VerifyV2ServiceMessagingConfiguration, error) {
    path := "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Country"+"}", Country, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.MessagingServiceSid != nil {
	data.Set("MessagingServiceSid", *params.MessagingServiceSid) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceMessagingConfiguration{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateRateLimitParams Optional parameters for the method 'UpdateRateLimit'
type UpdateRateLimitParams struct {
	Description *string `json:"Description,omitempty"`
}

/*
* UpdateRateLimit Method for UpdateRateLimit
* Update a specific Rate Limit.
* @param ServiceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
* @param Sid The Twilio-provided string that uniquely identifies the Rate Limit resource to fetch.
* @param optional nil or *UpdateRateLimitParams - Optional Parameters:
* @param "Description" (string) - Description of this Rate Limit
* @return VerifyV2ServiceRateLimit
*/
func (c *DefaultApiService) UpdateRateLimit(ServiceSid string, Sid string, params *UpdateRateLimitParams) (*VerifyV2ServiceRateLimit, error) {
    path := "/v2/Services/{ServiceSid}/RateLimits/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Description != nil {
	data.Set("Description", *params.Description) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceRateLimit{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateServiceParams Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
	CodeLength *int32 `json:"CodeLength,omitempty"`
	CustomCodeEnabled *bool `json:"CustomCodeEnabled,omitempty"`
	DoNotShareWarningEnabled *bool `json:"DoNotShareWarningEnabled,omitempty"`
	DtmfInputRequired *bool `json:"DtmfInputRequired,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	LookupEnabled *bool `json:"LookupEnabled,omitempty"`
	Psd2Enabled *bool `json:"Psd2Enabled,omitempty"`
	PushApnCredentialSid *string `json:"Push.ApnCredentialSid,omitempty"`
	PushFcmCredentialSid *string `json:"Push.FcmCredentialSid,omitempty"`
	PushIncludeDate *bool `json:"Push.IncludeDate,omitempty"`
	SkipSmsToLandlines *bool `json:"SkipSmsToLandlines,omitempty"`
	TtsName *string `json:"TtsName,omitempty"`
}

/*
* UpdateService Method for UpdateService
* Update a specific Verification Service.
* @param Sid The Twilio-provided string that uniquely identifies the Service resource to update.
* @param optional nil or *UpdateServiceParams - Optional Parameters:
* @param "CodeLength" (int32) - The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive.
* @param "CustomCodeEnabled" (bool) - Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers.
* @param "DoNotShareWarningEnabled" (bool) - Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.**
* @param "DtmfInputRequired" (bool) - Whether to ask the user to press a number before delivering the verify code in a phone call.
* @param "FriendlyName" (string) - A descriptive string that you create to describe the verification service. It can be up to 30 characters long. **This value should not contain PII.**
* @param "LookupEnabled" (bool) - Whether to perform a lookup with each verification started and return info about the phone number.
* @param "Psd2Enabled" (bool) - Whether to pass PSD2 transaction parameters when starting a verification.
* @param "PushApnCredentialSid" (string) - Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
* @param "PushFcmCredentialSid" (string) - Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
* @param "PushIncludeDate" (bool) - Optional configuration for the Push factors. If true, include the date in the Challenge's reponse. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: true
* @param "SkipSmsToLandlines" (bool) - Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`.
* @param "TtsName" (string) - The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages.
* @return VerifyV2Service
*/
func (c *DefaultApiService) UpdateService(Sid string, params *UpdateServiceParams) (*VerifyV2Service, error) {
    path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.CodeLength != nil {
	data.Set("CodeLength", fmt.Sprint(*params.CodeLength)) 
}
    if params != nil && params.CustomCodeEnabled != nil {
	data.Set("CustomCodeEnabled", fmt.Sprint(*params.CustomCodeEnabled)) 
}
    if params != nil && params.DoNotShareWarningEnabled != nil {
	data.Set("DoNotShareWarningEnabled", fmt.Sprint(*params.DoNotShareWarningEnabled)) 
}
    if params != nil && params.DtmfInputRequired != nil {
	data.Set("DtmfInputRequired", fmt.Sprint(*params.DtmfInputRequired)) 
}
    if params != nil && params.FriendlyName != nil {
	data.Set("FriendlyName", *params.FriendlyName) 
}
    if params != nil && params.LookupEnabled != nil {
	data.Set("LookupEnabled", fmt.Sprint(*params.LookupEnabled)) 
}
    if params != nil && params.Psd2Enabled != nil {
	data.Set("Psd2Enabled", fmt.Sprint(*params.Psd2Enabled)) 
}
    if params != nil && params.PushApnCredentialSid != nil {
	data.Set("PushApnCredentialSid", *params.PushApnCredentialSid) 
}
    if params != nil && params.PushFcmCredentialSid != nil {
	data.Set("PushFcmCredentialSid", *params.PushFcmCredentialSid) 
}
    if params != nil && params.PushIncludeDate != nil {
	data.Set("PushIncludeDate", fmt.Sprint(*params.PushIncludeDate)) 
}
    if params != nil && params.SkipSmsToLandlines != nil {
	data.Set("SkipSmsToLandlines", fmt.Sprint(*params.SkipSmsToLandlines)) 
}
    if params != nil && params.TtsName != nil {
	data.Set("TtsName", *params.TtsName) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2Service{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateVerificationParams Optional parameters for the method 'UpdateVerification'
type UpdateVerificationParams struct {
	Status *string `json:"Status,omitempty"`
}

/*
* UpdateVerification Method for UpdateVerification
* Update a Verification status
* @param ServiceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to update the resource from.
* @param Sid The Twilio-provided string that uniquely identifies the Verification resource to update.
* @param optional nil or *UpdateVerificationParams - Optional Parameters:
* @param "Status" (string) - The new status of the resource. Can be: `canceled` or `approved`.
* @return VerifyV2ServiceVerification
*/
func (c *DefaultApiService) UpdateVerification(ServiceSid string, Sid string, params *UpdateVerificationParams) (*VerifyV2ServiceVerification, error) {
    path := "/v2/Services/{ServiceSid}/Verifications/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.Status != nil {
	data.Set("Status", *params.Status) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceVerification{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
// UpdateWebhookParams Optional parameters for the method 'UpdateWebhook'
type UpdateWebhookParams struct {
	EventTypes *[]string `json:"EventTypes,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Status *string `json:"Status,omitempty"`
	WebhookUrl *string `json:"WebhookUrl,omitempty"`
}

/*
* UpdateWebhook Method for UpdateWebhook
* @param ServiceSid The unique SID identifier of the Service.
* @param Sid The Twilio-provided string that uniquely identifies the Webhook resource to update.
* @param optional nil or *UpdateWebhookParams - Optional Parameters:
* @param "EventTypes" ([]string) - The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
* @param "FriendlyName" (string) - The string that you assigned to describe the webhook. **This value should not contain PII.**
* @param "Status" (string) - The webhook status. Default value is `enabled`. One of: `enabled` or `disabled`
* @param "WebhookUrl" (string) - The URL associated with this Webhook.
* @return VerifyV2ServiceWebhook
*/
func (c *DefaultApiService) UpdateWebhook(ServiceSid string, Sid string, params *UpdateWebhookParams) (*VerifyV2ServiceWebhook, error) {
    path := "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

    data := url.Values{}
    headers := 0

    if params != nil && params.EventTypes != nil {
	data.Set("EventTypes",  strings.Join(*params.EventTypes, ","))
}
    if params != nil && params.FriendlyName != nil {
	data.Set("FriendlyName", *params.FriendlyName) 
}
    if params != nil && params.Status != nil {
	data.Set("Status", *params.Status) 
}
    if params != nil && params.WebhookUrl != nil {
	data.Set("WebhookUrl", *params.WebhookUrl) 
}


    resp, err := c.client.Post(c.baseURL+path, data, headers)
    if err != nil {
        return nil, err
    }

    defer resp.Body.Close()

    ps := &VerifyV2ServiceWebhook{}
    if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
        return nil, err
    }

    return ps, err
}
