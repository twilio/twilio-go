/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.0.1
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package twilio

import (
	"encoding/json"
	"fmt"
	"github.com/twilio/twilio-go/client"
	"strings"
	"time"
)

type PreviewApiService struct {
	baseURL string
	client  *twilio.Client
}

func NewPreviewApiService(client *twilio.Client) *PreviewApiService {
	return &PreviewApiService{
		client:  client,
		baseURL: fmt.Sprintf("https://studio.%s", client.BaseURL),
	}
}

/*
V2FormsFormTypeGet Method for V2FormsFormTypeGet
Fetch the forms for a specific Form Type.
 * @param formType The Type of this Form. Currently only `form-push` is supported.
@return VerifyV2Form
*/
func (c *PreviewApiService) V2FormsFormTypeGet(formType string) (*VerifyV2Form, error) {
	path := "/v2/Forms/{FormType}"
	path = strings.Replace(path, "{"+"FormType"+"}", formType, -1)

	data := 0
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2Form{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidAccessTokensPostParams Optional parameters for the method 'V2ServicesServiceSidAccessTokensPost'
type V2ServicesServiceSidAccessTokensPostParams struct {
	FactorType *string `json:"FactorType,omitempty"`
	Identity   *string `json:"Identity,omitempty"`
}

/*
V2ServicesServiceSidAccessTokensPost Method for V2ServicesServiceSidAccessTokensPost
Create a new enrollment Access Token for the Entity
 * @param serviceSid
 * @param optional nil or *V2ServicesServiceSidAccessTokensPostOpts - Optional Parameters:
 * @param "FactorType" (string) - The Type of this Factor. Eg. `push`
 * @param "Identity" (string) - The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
@return VerifyV2ServiceAccessToken
*/
func (c *PreviewApiService) V2ServicesServiceSidAccessTokensPost(serviceSid string, params *V2ServicesServiceSidAccessTokensPostParams) (*VerifyV2ServiceAccessToken, error) {
	path := "/v2/Services/{ServiceSid}/AccessTokens"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

	data := make(map[string]interface{})
	headers := 0

	if params.FactorType != nil {
		data["FactorType"] = *params.FactorType
	}
	if params.Identity != nil {
		data["Identity"] = *params.Identity
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceAccessToken{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesGetParams Optional parameters for the method 'V2ServicesServiceSidEntitiesGet'
type V2ServicesServiceSidEntitiesGetParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

/*
V2ServicesServiceSidEntitiesGet Method for V2ServicesServiceSidEntitiesGet
Retrieve a list of all Entities for a Service.
 * @param serviceSid The unique SID identifier of the Service.
 * @param optional nil or *V2ServicesServiceSidEntitiesGetOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2001
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesGet(serviceSid string, params *V2ServicesServiceSidEntitiesGetParams) (*InlineResponse2001, error) {
	path := "/v2/Services/{ServiceSid}/Entities"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.PageSize != nil {
		data["PageSize"] = *params.PageSize
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &InlineResponse2001{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityChallengesGetParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityChallengesGet'
type V2ServicesServiceSidEntitiesIdentityChallengesGetParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
	FactorSid         *string `json:"FactorSid,omitempty"`
	Status            *string `json:"Status,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityChallengesGet Method for V2ServicesServiceSidEntitiesIdentityChallengesGet
Retrieve a list of all Challenges for a Factor.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity Customer unique identity for the Entity owner of the Challenge
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityChallengesGetOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "FactorSid" (string) - The unique SID identifier of the Factor.
 * @param "Status" (string) - The Status of the Challenges to fetch. One of `pending`, `expired`, `approved` or `denied`.
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2002
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityChallengesGet(serviceSid string, identity string, params *V2ServicesServiceSidEntitiesIdentityChallengesGetParams) (*InlineResponse2002, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.FactorSid != nil {
		data["FactorSid"] = *params.FactorSid
	}
	if params.Status != nil {
		data["Status"] = *params.Status
	}
	if params.PageSize != nil {
		data["PageSize"] = *params.PageSize
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &InlineResponse2002{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityChallengesPostParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityChallengesPost'
type V2ServicesServiceSidEntitiesIdentityChallengesPostParams struct {
	TwilioSandboxMode *string    `json:"Twilio-Sandbox-Mode,omitempty"`
	Details           *string    `json:"Details,omitempty"`
	ExpirationDate    *time.Time `json:"ExpirationDate,omitempty"`
	FactorSid         *string    `json:"FactorSid,omitempty"`
	HiddenDetails     *string    `json:"HiddenDetails,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityChallengesPost Method for V2ServicesServiceSidEntitiesIdentityChallengesPost
Create a new Challenge for the Factor
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityChallengesPostOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "Details" (string) - Details provided to give context about the Challenge. Shown to the end user. It must be a stringified JSON with the following structure: {\\\"message\\\": \\\"string\\\", \\\"fields\\\": [ { \\\"label\\\": \\\"string\\\", \\\"value\\\": \\\"string\\\"}]}. `message` is required. If you send the `fields` property, each field has to include `label` and `value` properties. If you had set `include_date=true` in the `push` configuration of the [service](https://www.twilio.com/docs/verify/api/service), the response will also include the challenge's date created value as an additional field called `date`
 * @param "ExpirationDate" (time.Time) - The future date in which this Challenge will expire, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @param "FactorSid" (string) - The unique SID identifier of the Factor.
 * @param "HiddenDetails" (string) - Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. `{\\\"ip\\\": \\\"172.168.1.234\\\"}`
@return VerifyV2ServiceEntityChallenge
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityChallengesPost(serviceSid string, identity string, params *V2ServicesServiceSidEntitiesIdentityChallengesPostParams) (*VerifyV2ServiceEntityChallenge, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.Details != nil {
		data["Details"] = *params.Details
	}
	if params.ExpirationDate != nil {
		data["ExpirationDate"] = *params.ExpirationDate
	}
	if params.FactorSid != nil {
		data["FactorSid"] = *params.FactorSid
	}
	if params.HiddenDetails != nil {
		data["HiddenDetails"] = *params.HiddenDetails
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntityChallenge{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityChallengesSidGetParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityChallengesSidGet'
type V2ServicesServiceSidEntitiesIdentityChallengesSidGetParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityChallengesSidGet Method for V2ServicesServiceSidEntitiesIdentityChallengesSidGet
Fetch a specific Challenge.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
 * @param sid A 34 character string that uniquely identifies this Challenge.
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityChallengesSidGetOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
@return VerifyV2ServiceEntityChallenge
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityChallengesSidGet(serviceSid string, identity string, sid string, params *V2ServicesServiceSidEntitiesIdentityChallengesSidGetParams) (*VerifyV2ServiceEntityChallenge, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntityChallenge{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityChallengesSidPostParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityChallengesSidPost'
type V2ServicesServiceSidEntitiesIdentityChallengesSidPostParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
	AuthPayload       *string `json:"AuthPayload,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityChallengesSidPost Method for V2ServicesServiceSidEntitiesIdentityChallengesSidPost
Verify a specific Challenge.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity Customer unique identity for the Entity owner of the Challenge
 * @param sid A 34 character string that uniquely identifies this Challenge.
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityChallengesSidPostOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "AuthPayload" (string) - The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code.
@return VerifyV2ServiceEntityChallenge
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityChallengesSidPost(serviceSid string, identity string, sid string, params *V2ServicesServiceSidEntitiesIdentityChallengesSidPostParams) (*VerifyV2ServiceEntityChallenge, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.AuthPayload != nil {
		data["AuthPayload"] = *params.AuthPayload
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntityChallenge{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityDeleteParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityDelete'
type V2ServicesServiceSidEntitiesIdentityDeleteParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityDelete Method for V2ServicesServiceSidEntitiesIdentityDelete
Delete a specific Entity.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity The unique external identifier for the Entity of the Service
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityDeleteOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityDelete(serviceSid string, identity string, params *V2ServicesServiceSidEntitiesIdentityDeleteParams) error {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// V2ServicesServiceSidEntitiesIdentityFactorsGetParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityFactorsGet'
type V2ServicesServiceSidEntitiesIdentityFactorsGetParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityFactorsGet Method for V2ServicesServiceSidEntitiesIdentityFactorsGet
Retrieve a list of all Factors for an Entity.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity Customer unique identity for the Entity owner of the Factor
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityFactorsGetOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2003
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityFactorsGet(serviceSid string, identity string, params *V2ServicesServiceSidEntitiesIdentityFactorsGetParams) (*InlineResponse2003, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.PageSize != nil {
		data["PageSize"] = *params.PageSize
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &InlineResponse2003{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityFactorsPostParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityFactorsPost'
type V2ServicesServiceSidEntitiesIdentityFactorsPostParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
	Binding           *string `json:"Binding,omitempty"`
	Config            *string `json:"Config,omitempty"`
	FactorType        *string `json:"FactorType,omitempty"`
	FriendlyName      *string `json:"FriendlyName,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityFactorsPost Method for V2ServicesServiceSidEntitiesIdentityFactorsPost
Create a new Factor for the Entity
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity Customer unique identity for the Entity owner of the Factor
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityFactorsPostOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "Binding" (string) - A unique binding for this Factor that identifies it. E.g. the algorithm and public key for `push` factors. It must be a json string with the required properties for the given factor type. Required when creating a new Factor. This value is never returned because it can contain customer secrets.
 * @param "Config" (string) - The config required for this Factor. It must be a json string with the required properties for the given factor type
 * @param "FactorType" (string) - The Type of this Factor. Currently only `push` is supported
 * @param "FriendlyName" (string) - The friendly name of this Factor
@return VerifyV2ServiceEntityFactor
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityFactorsPost(serviceSid string, identity string, params *V2ServicesServiceSidEntitiesIdentityFactorsPostParams) (*VerifyV2ServiceEntityFactor, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.Binding != nil {
		data["Binding"] = *params.Binding
	}
	if params.Config != nil {
		data["Config"] = *params.Config
	}
	if params.FactorType != nil {
		data["FactorType"] = *params.FactorType
	}
	if params.FriendlyName != nil {
		data["FriendlyName"] = *params.FriendlyName
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntityFactor{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityFactorsSidDeleteParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityFactorsSidDelete'
type V2ServicesServiceSidEntitiesIdentityFactorsSidDeleteParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityFactorsSidDelete Method for V2ServicesServiceSidEntitiesIdentityFactorsSidDelete
Delete a specific Factor.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity Customer unique identity for the Entity owner of the Factor
 * @param sid A 34 character string that uniquely identifies this Factor.
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityFactorsSidDeleteOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityFactorsSidDelete(serviceSid string, identity string, sid string, params *V2ServicesServiceSidEntitiesIdentityFactorsSidDeleteParams) error {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// V2ServicesServiceSidEntitiesIdentityFactorsSidGetParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityFactorsSidGet'
type V2ServicesServiceSidEntitiesIdentityFactorsSidGetParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityFactorsSidGet Method for V2ServicesServiceSidEntitiesIdentityFactorsSidGet
Fetch a specific Factor.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity Customer unique identity for the Entity owner of the Factor
 * @param sid A 34 character string that uniquely identifies this Factor.
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityFactorsSidGetOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
@return VerifyV2ServiceEntityFactor
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityFactorsSidGet(serviceSid string, identity string, sid string, params *V2ServicesServiceSidEntitiesIdentityFactorsSidGetParams) (*VerifyV2ServiceEntityFactor, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntityFactor{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityFactorsSidPostParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityFactorsSidPost'
type V2ServicesServiceSidEntitiesIdentityFactorsSidPostParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
	AuthPayload       *string `json:"AuthPayload,omitempty"`
	Config            *string `json:"Config,omitempty"`
	FriendlyName      *string `json:"FriendlyName,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityFactorsSidPost Method for V2ServicesServiceSidEntitiesIdentityFactorsSidPost
Update a specific Factor. This endpoint can be used to Verify a Factor if passed an &#x60;AuthPayload&#x60; param.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity Customer unique identity for the Entity owner of the Factor
 * @param sid A 34 character string that uniquely identifies this Factor.
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityFactorsSidPostOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "AuthPayload" (string) - The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
 * @param "Config" (string) - The new config for this Factor. It must be a json string with the required properties for the given factor type
 * @param "FriendlyName" (string) - The new friendly name of this Factor
@return VerifyV2ServiceEntityFactor
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityFactorsSidPost(serviceSid string, identity string, sid string, params *V2ServicesServiceSidEntitiesIdentityFactorsSidPostParams) (*VerifyV2ServiceEntityFactor, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.AuthPayload != nil {
		data["AuthPayload"] = *params.AuthPayload
	}
	if params.Config != nil {
		data["Config"] = *params.Config
	}
	if params.FriendlyName != nil {
		data["FriendlyName"] = *params.FriendlyName
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntityFactor{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesIdentityGetParams Optional parameters for the method 'V2ServicesServiceSidEntitiesIdentityGet'
type V2ServicesServiceSidEntitiesIdentityGetParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
}

/*
V2ServicesServiceSidEntitiesIdentityGet Method for V2ServicesServiceSidEntitiesIdentityGet
Fetch a specific Entity.
 * @param serviceSid The unique SID identifier of the Service.
 * @param identity The unique external identifier for the Entity of the Service
 * @param optional nil or *V2ServicesServiceSidEntitiesIdentityGetOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
@return VerifyV2ServiceEntity
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesIdentityGet(serviceSid string, identity string, params *V2ServicesServiceSidEntitiesIdentityGetParams) (*VerifyV2ServiceEntity, error) {
	path := "/v2/Services/{ServiceSid}/Entities/{Identity}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Identity"+"}", identity, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntity{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidEntitiesPostParams Optional parameters for the method 'V2ServicesServiceSidEntitiesPost'
type V2ServicesServiceSidEntitiesPostParams struct {
	TwilioSandboxMode *string `json:"Twilio-Sandbox-Mode,omitempty"`
	Identity          *string `json:"Identity,omitempty"`
}

/*
V2ServicesServiceSidEntitiesPost Method for V2ServicesServiceSidEntitiesPost
Create a new Entity for the Service
 * @param serviceSid The unique SID identifier of the Service.
 * @param optional nil or *V2ServicesServiceSidEntitiesPostOpts - Optional Parameters:
 * @param "TwilioSandboxMode" (string) - The Twilio-Sandbox-Mode HTTP request header
 * @param "Identity" (string) - The unique external identifier for the Entity of the Service
@return VerifyV2ServiceEntity
*/
func (c *PreviewApiService) V2ServicesServiceSidEntitiesPost(serviceSid string, params *V2ServicesServiceSidEntitiesPostParams) (*VerifyV2ServiceEntity, error) {
	path := "/v2/Services/{ServiceSid}/Entities"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

	data := make(map[string]interface{})
	headers := make(map[string]interface{})

	if params.Identity != nil {
		data["Identity"] = *params.Identity
	}

	if params.TwilioSandboxMode != nil {
		headers["Twilio-Sandbox-Mode"] = *params.TwilioSandboxMode
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceEntity{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidWebhooksGetParams Optional parameters for the method 'V2ServicesServiceSidWebhooksGet'
type V2ServicesServiceSidWebhooksGetParams struct {
	PageSize *int32 `json:"PageSize,omitempty"`
}

/*
V2ServicesServiceSidWebhooksGet Method for V2ServicesServiceSidWebhooksGet
Retrieve a list of all Webhooks for a Service.
 * @param serviceSid The unique SID identifier of the Service.
 * @param optional nil or *V2ServicesServiceSidWebhooksGetOpts - Optional Parameters:
 * @param "PageSize" (int32) - How many resources to return in each list page. The default is 50, and the maximum is 1000.
@return InlineResponse2007
*/
func (c *PreviewApiService) V2ServicesServiceSidWebhooksGet(serviceSid string, params *V2ServicesServiceSidWebhooksGetParams) (*InlineResponse2007, error) {
	path := "/v2/Services/{ServiceSid}/Webhooks"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

	data := make(map[string]interface{})
	headers := 0

	if params.PageSize != nil {
		data["PageSize"] = *params.PageSize
	}

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &InlineResponse2007{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidWebhooksPostParams Optional parameters for the method 'V2ServicesServiceSidWebhooksPost'
type V2ServicesServiceSidWebhooksPostParams struct {
	EventTypes   *[]string `json:"EventTypes,omitempty"`
	FriendlyName *string   `json:"FriendlyName,omitempty"`
	Status       *string   `json:"Status,omitempty"`
	WebhookUrl   *string   `json:"WebhookUrl,omitempty"`
}

/*
V2ServicesServiceSidWebhooksPost Method for V2ServicesServiceSidWebhooksPost
Create a new Webhook for the Service
 * @param serviceSid The unique SID identifier of the Service.
 * @param optional nil or *V2ServicesServiceSidWebhooksPostOpts - Optional Parameters:
 * @param "EventTypes" ([]string) - The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
 * @param "FriendlyName" (string) - The string that you assigned to describe the webhook. **This value should not contain PII.**
 * @param "Status" (string) - The webhook status. Default value is `enabled`. One of: `enabled` or `disabled`
 * @param "WebhookUrl" (string) - The URL associated with this Webhook.
@return VerifyV2ServiceWebhook
*/
func (c *PreviewApiService) V2ServicesServiceSidWebhooksPost(serviceSid string, params *V2ServicesServiceSidWebhooksPostParams) (*VerifyV2ServiceWebhook, error) {
	path := "/v2/Services/{ServiceSid}/Webhooks"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)

	data := make(map[string]interface{})
	headers := 0

	if params.EventTypes != nil {
		data["EventTypes"] = *params.EventTypes
	}
	if params.FriendlyName != nil {
		data["FriendlyName"] = *params.FriendlyName
	}
	if params.Status != nil {
		data["Status"] = *params.Status
	}
	if params.WebhookUrl != nil {
		data["WebhookUrl"] = *params.WebhookUrl
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

/*
V2ServicesServiceSidWebhooksSidDelete Method for V2ServicesServiceSidWebhooksSidDelete
Delete a specific Webhook.
 * @param serviceSid The unique SID identifier of the Service.
 * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete.
*/
func (c *PreviewApiService) V2ServicesServiceSidWebhooksSidDelete(serviceSid string, sid string) error {
	path := "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0

	resp, err := c.client.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

/*
V2ServicesServiceSidWebhooksSidGet Method for V2ServicesServiceSidWebhooksSidGet
Fetch a specific Webhook.
 * @param serviceSid The unique SID identifier of the Service.
 * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch.
@return VerifyV2ServiceWebhook
*/
func (c *PreviewApiService) V2ServicesServiceSidWebhooksSidGet(serviceSid string, sid string) (*VerifyV2ServiceWebhook, error) {
	path := "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := 0
	headers := 0

	resp, err := c.client.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// V2ServicesServiceSidWebhooksSidPostParams Optional parameters for the method 'V2ServicesServiceSidWebhooksSidPost'
type V2ServicesServiceSidWebhooksSidPostParams struct {
	EventTypes   *[]string `json:"EventTypes,omitempty"`
	FriendlyName *string   `json:"FriendlyName,omitempty"`
	Status       *string   `json:"Status,omitempty"`
	WebhookUrl   *string   `json:"WebhookUrl,omitempty"`
}

/*
V2ServicesServiceSidWebhooksSidPost Method for V2ServicesServiceSidWebhooksSidPost
 * @param serviceSid The unique SID identifier of the Service.
 * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update.
 * @param optional nil or *V2ServicesServiceSidWebhooksSidPostOpts - Optional Parameters:
 * @param "EventTypes" ([]string) - The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
 * @param "FriendlyName" (string) - The string that you assigned to describe the webhook. **This value should not contain PII.**
 * @param "Status" (string) - The webhook status. Default value is `enabled`. One of: `enabled` or `disabled`
 * @param "WebhookUrl" (string) - The URL associated with this Webhook.
@return VerifyV2ServiceWebhook
*/
func (c *PreviewApiService) V2ServicesServiceSidWebhooksSidPost(serviceSid string, sid string, params *V2ServicesServiceSidWebhooksSidPostParams) (*VerifyV2ServiceWebhook, error) {
	path := "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", serviceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", sid, -1)

	data := make(map[string]interface{})
	headers := 0

	if params.EventTypes != nil {
		data["EventTypes"] = *params.EventTypes
	}
	if params.FriendlyName != nil {
		data["FriendlyName"] = *params.FriendlyName
	}
	if params.Status != nil {
		data["Status"] = *params.Status
	}
	if params.WebhookUrl != nil {
		data["WebhookUrl"] = *params.WebhookUrl
	}

	resp, err := c.client.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2ServiceWebhook{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
